{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
lib/googletest/test/gtest_unittest.cc File Reference\par \pard\plain 
{\tc\tcl2 \v lib/googletest/test/gtest_unittest.cc(d4ab02d08ceed19dab4276c86042b1520529304b)}
{\xe \v lib/googletest/test/gtest_unittest.cc(d4ab02d08ceed19dab4276c86042b1520529304b)}
{\bkmkstart AAAAAAAEBI}
{\bkmkend AAAAAAAEBI}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "gtest/gtest.h"}\par
{\f2 #include <limits.h>}\par
{\f2 #include <stdlib.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <time.h>}\par
{\f2 #include <map>}\par
{\f2 #include <vector>}\par
{\f2 #include <ostream>}\par
{\f2 #include "gtest/gtest-spi.h"}\par
{\f2 #include "src/gtest-internal-inl.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for gtest_unittest.cc:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d79/gtest__unittest_8cc__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "dc/d68/gtest__unittest_8cc__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBJ" }{}}{\fldrslt {\cs37\ul\cf2 ConversionHelperBase}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBK" }{}}{\fldrslt {\cs37\ul\cf2 ConversionHelperDerived}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBL" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBM" }{}}{\fldrslt {\cs37\ul\cf2 Message}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBN" }{}}{\fldrslt {\cs37\ul\cf2 Test}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBO" }{}}{\fldrslt {\cs37\ul\cf2 NonContainer}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBP" }{}}{\fldrslt {\cs37\ul\cf2 ProtectedFixtureMethodsTest}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBQ" }{}}{\fldrslt {\cs37\ul\cf2 SequenceTestingListener}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBR" }{}}{\fldrslt {\cs37\ul\cf2 StaticAssertTypeEqTestHelper< T >}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBS" }{}}{\fldrslt {\cs37\ul\cf2 CurrentTestInfoTest}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBT" }{}}{\fldrslt {\cs37\ul\cf2 Flags}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBU" }{}}{\fldrslt {\cs37\ul\cf2 InitGoogleTestTest}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBW" }{}}{\fldrslt {\cs37\ul\cf2 anonymous_namespace\{gtest_unittest.cc\}}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBX" }{}}{\fldrslt {\cs37\ul\cf2 my_namespace}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBY" }{}}{\fldrslt {\cs37\ul\cf2 my_namespace::testing}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBZ" }{}}{\fldrslt {\cs37\ul\cf2 namespace1}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECA" }{}}{\fldrslt {\cs37\ul\cf2 namespace2}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFW" }{}}{\fldrslt {\cs37\ul\cf2 testing}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABGD" }{}}{\fldrslt {\cs37\ul\cf2 testing::internal}}}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECB" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_IMPLEMENTATION_}}}
\~ 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECC" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_TEST_PARSING_FLAGS_}}}
(argv1,  argv2,  expected,  should_print_help)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECD" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_USE_UNPROTECTED_COMMA_}}}
\~ global_var++, global_var++\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECE" }{}}{\fldrslt {\cs37\ul\cf2 VERIFY_CODE_LOCATION}}}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef FloatingPointTest< double > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECF" }{}}{\fldrslt {\cs37\ul\cf2 DoubleTest}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef ScopedFakeTestPartResultReporterTest {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECG" }{}}{\fldrslt {\cs37\ul\cf2 ExpectFatalFailureTest}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef ScopedFakeTestPartResultReporterTest {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECH" }{}}{\fldrslt {\cs37\ul\cf2 ExpectNonfatalFailureTest}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef FloatingPointTest< float > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECI" }{}}{\fldrslt {\cs37\ul\cf2 FloatTest}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECJ" }{}}{\fldrslt {\cs37\ul\cf2 IntAlias}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef ShouldShardTest {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECK" }{}}{\fldrslt {\cs37\ul\cf2 ShouldShardDeathTest}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef TestResultTest {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECL" }{}}{\fldrslt {\cs37\ul\cf2 TestResultDeathTest}}}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum \{ {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECM" }{}}{\fldrslt {\cs37\ul\cf2 kCaseA}}}
 = -1
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECN" }{}}{\fldrslt {\cs37\ul\cf2 kCaseB}}}
 = INT_MAX
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECO" }{}}{\fldrslt {\cs37\ul\cf2 kCaseC}}}
 = 42
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECP" }{}}{\fldrslt {\cs37\ul\cf2 NamedEnum}}}
 \{ {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECQ" }{}}{\fldrslt {\cs37\ul\cf2 kE1}}}
 = 0
, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECR" }{}}{\fldrslt {\cs37\ul\cf2 kE2}}}
 = 1
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECS" }{}}{\fldrslt {\cs37\ul\cf2 Accumulate}}}
 (int n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECT" }{}}{\fldrslt {\cs37\ul\cf2 AddFailureHelper}}}
 (bool *aborted)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECU" }{}}{\fldrslt {\cs37\ul\cf2 AddFatalFailure}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECV" }{}}{\fldrslt {\cs37\ul\cf2 AddNonfatalFailure}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECW" }{}}{\fldrslt {\cs37\ul\cf2 AssertIsEven}}}
 (const char *expr, int n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECX" }{}}{\fldrslt {\cs37\ul\cf2 AssertSumIsEven4}}}
 (const char *e1, const char *e2, const char *e3, const char *e4, int n1, int n2, int n3, int n4)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::vector}< size_t > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECY" }{}}{\fldrslt {\cs37\ul\cf2 CharsToIndices}}}
 (const {\b std::string} &str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::vector}< {\b std::string} > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECZ" }{}}{\fldrslt {\cs37\ul\cf2 CharsToLines}}}
 (const {\b std::string} &str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDA" }{}}{\fldrslt {\cs37\ul\cf2 ClearCurrentTestPartResults}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDB" }{}}{\fldrslt {\cs37\ul\cf2 DoesNotAbortHelper}}}
 (bool *aborted)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::string} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDC" }{}}{\fldrslt {\cs37\ul\cf2 EditsToString}}}
 (const {\b std::vector}< EditType > &edits)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T1 , typename T2 > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDD" }{}}{\fldrslt {\cs37\ul\cf2 EqualsFormat}}}
 (const char *, const char *, const T1 &x1, const T2 &x2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDE" }{}}{\fldrslt {\cs37\ul\cf2 ExpectNonFatalFailureRecordingPropertyWithReservedKey}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDF" }{}}{\fldrslt {\cs37\ul\cf2 TestResult}}}
 &test_result, const char *key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDG" }{}}{\fldrslt {\cs37\ul\cf2 ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTest}}}
 (const char *key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDH" }{}}{\fldrslt {\cs37\ul\cf2 ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTestCase}}}
 (const char *key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDI" }{}}{\fldrslt {\cs37\ul\cf2 ExpectNonFatalFailureRecordingPropertyWithReservedKeyOutsideOfTestCase}}}
 (const char *key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDJ" }{}}{\fldrslt {\cs37\ul\cf2 FailFatally}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T1 , typename T2 > bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDK" }{}}{\fldrslt {\cs37\ul\cf2 GreaterThan}}}
 (T1 x1, T2 x2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMC" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_TEST}}}
 (AlternativeNameTest, Works)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDL" }{}}{\fldrslt {\cs37\ul\cf2 HasFailureHelper}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDM" }{}}{\fldrslt {\cs37\ul\cf2 HasNonfatalFailureHelper}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDN" }{}}{\fldrslt {\cs37\ul\cf2 INSTANTIATE_TEST_CASE_P}}}
 (, CodeLocationForTESTP, Values(0))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDO" }{}}{\fldrslt {\cs37\ul\cf2 INSTANTIATE_TYPED_TEST_CASE_P}}}
 (My, CodeLocationForTYPEDTESTP, int)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDP" }{}}{\fldrslt {\cs37\ul\cf2 IsEven}}}
 (int n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDQ" }{}}{\fldrslt {\cs37\ul\cf2 IsNegative}}}
 (T x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDR" }{}}{\fldrslt {\cs37\ul\cf2 IsNegativeFormat}}}
 (const char *, T x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDS" }{}}{\fldrslt {\cs37\ul\cf2 IsPositive}}}
 (double x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDT" }{}}{\fldrslt {\cs37\ul\cf2 IsPositive}}}
 (int n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDU" }{}}{\fldrslt {\cs37\ul\cf2 IsPositiveFormat}}}
 (const char *, double x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDV" }{}}{\fldrslt {\cs37\ul\cf2 IsPositiveFormat}}}
 (const char *, int n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDW" }{}}{\fldrslt {\cs37\ul\cf2 IsPositiveUncopyable}}}
 (const Uncopyable &x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDX" }{}}{\fldrslt {\cs37\ul\cf2 NonVoidFunction}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
::{\b std::ostream} & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDY" }{}}{\fldrslt {\cs37\ul\cf2 operator<<}}}
 (::{\b std::ostream} &os, const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDZ" }{}}{\fldrslt {\cs37\ul\cf2 TestingVector}}}
 &vector)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
::{\b std::ostream} & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEA" }{}}{\fldrslt {\cs37\ul\cf2 operator<<}}}
 (::{\b std::ostream} &os, const Uncopyable &value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEB" }{}}{\fldrslt {\cs37\ul\cf2 operator<<}}}
 ({\b std::ostream} &os, const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABTK" }{}}{\fldrslt {\cs37\ul\cf2 Base}}}
 &val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEC" }{}}{\fldrslt {\cs37\ul\cf2 operator<<}}}
 ({\b std::ostream} &os, const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABTK" }{}}{\fldrslt {\cs37\ul\cf2 Base}}}
 *pointer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEED" }{}}{\fldrslt {\cs37\ul\cf2 operator<<}}}
 ({\b std::ostream} &os, const MyTypeInNameSpace1 &val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEE" }{}}{\fldrslt {\cs37\ul\cf2 operator<<}}}
 ({\b std::ostream} &os, const MyTypeInNameSpace1 *pointer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEF" }{}}{\fldrslt {\cs37\ul\cf2 operator<<}}}
 ({\b std::ostream} &os, const MyTypeInUnnamedNameSpace &val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEG" }{}}{\fldrslt {\cs37\ul\cf2 operator<<}}}
 ({\b std::ostream} &os, const MyTypeInUnnamedNameSpace *pointer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEH" }{}}{\fldrslt {\cs37\ul\cf2 operator<<}}}
 ({\b std::ostream} &os, const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEI" }{}}{\fldrslt {\cs37\ul\cf2 namespace2::MyTypeInNameSpace2}}}
 &val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEJ" }{}}{\fldrslt {\cs37\ul\cf2 operator<<}}}
 ({\b std::ostream} &os, const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEI" }{}}{\fldrslt {\cs37\ul\cf2 namespace2::MyTypeInNameSpace2}}}
 *pointer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEK" }{}}{\fldrslt {\cs37\ul\cf2 REGISTER_TYPED_TEST_CASE_P}}}
 (CodeLocationForTYPEDTESTP, Verify)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEL" }{}}{\fldrslt {\cs37\ul\cf2 ResultIsEven}}}
 (int n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEM" }{}}{\fldrslt {\cs37\ul\cf2 ResultIsEvenNoExplanation}}}
 (int n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
 (const char *name, const char *value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEO" }{}}{\fldrslt {\cs37\ul\cf2 SumIsEven2}}}
 (int n1, int n2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEP" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AddReferenceTest, AddsReference)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEQ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AddReferenceTest, DoesNotAffectReferenceType)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEER" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AddReferenceTest, MacroVersion)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEES" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ArrayAwareFindTest, WorksForOneDimensionalArray)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEET" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ArrayAwareFindTest, WorksForTwoDimensionalArray)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEU" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ArrayEqTest, WorksForDegeneratedArrays)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEV" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ArrayEqTest, WorksForOneDimensionalArrays)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEW" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ArrayEqTest, WorksForTwoDimensionalArrays)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEX" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertHelperTest, AssertHelperIsSmall)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEY" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionResultTest, CanStreamOstreamManipulators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEZ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionResultTest, ConstructibleFromImplicitlyConvertible)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFA" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionResultTest, ConstructionWorks)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFB" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionResultTest, CopyConstructorWorksWhenNotOptimied)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFC" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionResultTest, NegationWorks)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFD" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionResultTest, StreamingWorks)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFE" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionSyntaxTest, BasicAssertionsBehavesLikeSingleStatement)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFF" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionSyntaxTest, NoFatalFailureAssertionsBehavesLikeSingleStatement)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFG" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionSyntaxTest, WorksWithSwitch)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFH" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACYZ" }{}}{\fldrslt {\cs37\ul\cf2 AnonymousEnum}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFI" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, AppendUserMessage)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFJ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJU" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_EQ}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFK" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJW" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_FALSE}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFL" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJY" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_GE}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFM" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKA" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_GT}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFN" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKC" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_LE}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFO" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKE" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_LT}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFP" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKG" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_NE}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFQ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKY" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_TRUE}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFR" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, AssertFalseWithAssertionResult)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFS" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, AssertPrecedence)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFT" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, AssertTrueWithAssertionResult)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFU" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, AssertWorksWithUncopyableObject)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFV" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, EqFailure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFW" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, EqFailureWithDiff)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFX" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, ExpectWorksWithUncopyableObject)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFY" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, NamedEnum)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEFZ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionTest, NonFixtureSubroutine)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGA" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionWithMessageTest, ASSERT)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGB" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionWithMessageTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJW" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_FALSE}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGC" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionWithMessageTest, ASSERT_FLOATING)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGD" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionWithMessageTest, ASSERT_STR)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGE" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionWithMessageTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKY" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_TRUE}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGF" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionWithMessageTest, EXPECT)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGG" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionWithMessageTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLT" }{}}{\fldrslt {\cs37\ul\cf2 FAIL}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGH" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (AssertionWithMessageTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMA" }{}}{\fldrslt {\cs37\ul\cf2 SUCCEED}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGI" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (CodeLocationForTEST, Verify)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGJ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (CodePointToUtf8Test, CanEncode12To16Bits)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGK" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (CodePointToUtf8Test, CanEncode17To21Bits)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGL" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (CodePointToUtf8Test, CanEncode8To11Bits)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGM" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (CodePointToUtf8Test, CanEncodeAscii)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGN" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (CodePointToUtf8Test, CanEncodeInvalidCodePoint)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGO" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (CodePointToUtf8Test, CanEncodeNul)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGP" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ColoredOutputTest, UsesColorsWhenGTestColorFlagIsAliasOfYes)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGQ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ColoredOutputTest, UsesColorsWhenGTestColorFlagIsYes)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGR" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ColoredOutputTest, UsesColorsWhenStdoutIsTty)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ColoredOutputTest, UsesColorsWhenTermSupportsColors)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGT" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ColoredOutputTest, UsesNoColorWhenGTestColorFlagIsInvalid)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGU" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ColoredOutputTest, UsesNoColorWhenGTestColorFlagIsNo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (CommandLineFlagsTest, CanBeAccessedInCodeOnceGTestHIsIncluded)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGW" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ComparisonAssertionTest, AcceptsUnprintableArgs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGX" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual}}}
, CompilesWhenTypesAreEqual)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGZ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ContainerUtilityDeathTest, ShuffleRange)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHA" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ContainerUtilityTest, CountIf)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHB" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ContainerUtilityTest, ForEach)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHC" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ContainerUtilityTest, GetElementOr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHD" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (CopyArrayTest, WorksForDegeneratedArrays)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHE" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (CopyArrayTest, WorksForOneDimensionalArrays)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHF" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (CopyArrayTest, WorksForTwoDimensionalArrays)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHG" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (DISABLED_TestCase, DISABLED_TestShouldNotRun)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHH" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (DISABLED_TestCase, TestShouldNotRun)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHI" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHJ" }{}}{\fldrslt {\cs37\ul\cf2 DisabledTest}}}
, DISABLED_TestShouldNotRun)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHK" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHJ" }{}}{\fldrslt {\cs37\ul\cf2 DisabledTest}}}
, NotDISABLED_TestShouldRun)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHL" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EditDistance, TestCases)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHM" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EqAssertionTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADAW" }{}}{\fldrslt {\cs37\ul\cf2 Bool}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHN" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EqAssertionTest, Char)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHO" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EqAssertionTest, CharPointer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHP" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EqAssertionTest, Int)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHQ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EqAssertionTest, OtherPointer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHR" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EqAssertionTest, StdString)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHS" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EqAssertionTest, Time_T)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHT" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EqAssertionTest, WideChar)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHU" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EqAssertionTest, WideCharPointer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHV" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EventListenerDeathTest, EventsNotForwardedInDeathTestSubprecesses)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHW" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EventListenerTest, AppendKeepsOrder)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHX" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EventListenerTest, default_result_printer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHY" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EventListenerTest, default_xml_generator)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHZ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EventListenerTest, RemovingDefaultResultPrinterWorks)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIA" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EventListenerTest, RemovingDefaultXmlGeneratorWorks)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIB" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (EventListenerTest, SuppressEventForwarding)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIC" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ExpectTest, ASSERT_EQ_0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEID" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ExpectTest, ASSERT_EQ_Double)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIE" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ExpectTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIF" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ExpectTest, EXPECT_EQ_0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIG" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ExpectTest, EXPECT_EQ_Double)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIH" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ExpectTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEII" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ExpectTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLE" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_GE}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIJ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ExpectTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLG" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_GT}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIK" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ExpectTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLH" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_LE}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIL" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ExpectTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLI" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_LT}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIM" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ExpectTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLJ" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_NE}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIN" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ExpectTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIO" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ExpectTest, ExpectFalseWithAssertionResult)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIP" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ExpectTest, ExpectPrecedence)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIQ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ExpectTest, ExpectTrueWithAssertionResult)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIR" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (FormatTimeInMillisAsSecondsTest, FormatsNegativeNumber)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIS" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (FormatTimeInMillisAsSecondsTest, FormatsPositiveNumber)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIT" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (FormatTimeInMillisAsSecondsTest, FormatsZero)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIU" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (FRIEND_TEST_Test, TEST)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIV" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (GetCurrentOsStackTraceExceptTopTest, ReturnsTheStackTrace)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIW" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (GetNextRandomSeedTest, WorksForValidInput)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIX" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (GetRandomSeedFromFlagTest, HandlesZero)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIY" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (GetRandomSeedFromFlagTest, NormalizesInvalidSeed)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIZ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (GetRandomSeedFromFlagTest, PreservesValidSeed)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJA" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (GetTestTypeIdTest, ReturnsTheSameValueInsideOrOutsideOfGoogleTest)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJB" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (GetTypeIdTest, ReturnsDifferentValuesForDifferentTypes)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJC" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (GetTypeIdTest, ReturnsSameValueForSameType)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJD" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (GTestReferenceToConstTest, Works)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJE" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (HasFailureTest, ReturnsFalseWhenThereIsNoFailure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJF" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (HasFailureTest, ReturnsTrueWhenThereAreFatalAndNonfatalFailures)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJG" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (HasFailureTest, ReturnsTrueWhenThereIsFatalFailure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (HasFailureTest, ReturnsTrueWhenThereIsNonfatalFailure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJI" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (HasFailureTest, WorksOutsideOfTestBody)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJJ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (HasFailureTest, WorksOutsideOfTestBody2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJK" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (HasNonfatalFailureTest, ReturnsFalseWhenThereIsNoFailure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJL" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (HasNonfatalFailureTest, ReturnsFalseWhenThereIsOnlyFatalFailure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJM" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (HasNonfatalFailureTest, ReturnsTrueWhenThereAreFatalAndNonfatalFailures)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJN" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (HasNonfatalFailureTest, ReturnsTrueWhenThereIsNonfatalFailure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJO" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (HasNonfatalFailureTest, WorksOutsideOfTestBody)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJP" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (HasNonfatalFailureTest, WorksOutsideOfTestBody2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJQ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ImplicitlyConvertibleTest, ValueIsCompileTimeConstant)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJR" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ImplicitlyConvertibleTest, ValueIsFalseWhenNotConvertible)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJS" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ImplicitlyConvertibleTest, ValueIsTrueWhenConvertible)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJT" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (Int32FromEnvOrDieDeathTest, AbortsOnFailure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJU" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (Int32FromEnvOrDieDeathTest, AbortsOnInt32Overflow)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJV" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (Int32FromEnvOrDieTest, ParsesAndReturnsValidValue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJW" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (Int32FromGTestEnvTest, ParsesAndReturnsValidValue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJX" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (Int32FromGTestEnvTest, ReturnsDefaultWhenValueIsInvalid)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJY" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (Int32FromGTestEnvTest, ReturnsDefaultWhenValueOverflows)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJZ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (Int32FromGTestEnvTest, ReturnsDefaultWhenVariableIsNotSet)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKA" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (IsAProtocolMessageTest, ValueIsCompileTimeConstant)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKB" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (IsAProtocolMessageTest, ValueIsFalseWhenTypeIsNotAProtocolMessage)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKC" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (IsAProtocolMessageTest, ValueIsTrueWhenTypeIsAProtocolMessage)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKD" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (IsContainerTestTest, WorksForContainer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKE" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (IsContainerTestTest, WorksForNonContainer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKF" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (IsNotSubstringTest, GeneratesCorrectMessageForStdString)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKG" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (IsNotSubstringTest, GeneratesCorrectMessageForWideCString)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKH" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (IsNotSubstringTest, ReturnsCorrectResultForCString)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKI" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (IsNotSubstringTest, ReturnsCorrectResultForWideCString)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKJ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (IsNotSubstringTest, ReturnsCorrectResultsForStdString)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKK" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (IsSubstringTest, GeneratesCorrectMessageForCString)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKL" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (IsSubstringTest, ReturnsCorrectResultForCString)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (IsSubstringTest, ReturnsCorrectResultForWideCString)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKN" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (IsSubstringTest, ReturnsCorrectResultsForStdString)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKO" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (MacroTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJN" }{}}{\fldrslt {\cs37\ul\cf2 ADD_FAILURE}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKP" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (MacroTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJP" }{}}{\fldrslt {\cs37\ul\cf2 ADD_FAILURE_AT}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKQ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (MacroTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLT" }{}}{\fldrslt {\cs37\ul\cf2 FAIL}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKR" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (MacroTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMA" }{}}{\fldrslt {\cs37\ul\cf2 SUCCEED}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKS" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (MessageTest, CanStreamUserTypeInGlobalNameSpace)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKT" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (MessageTest, CanStreamUserTypeInUnnamedNameSpace)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKU" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (MessageTest, CanStreamUserTypeInUserNameSpace)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKV" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (MessageTest, CanStreamUserTypeInUserNameSpaceWithStreamOperatorInGlobal)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKW" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (MessageTest, NullPointers)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKX" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (MessageTest, WideStrings)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKY" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (NativeArrayTest, ConstructorFromArrayWorks)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKZ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (NativeArrayTest, CreatesAndDeletesCopyOfArrayWhenAskedTo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELA" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (NativeArrayTest, MethodsWork)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELB" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (NativeArrayTest, TypeMembersAreCorrect)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELC" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (NativeArrayTest, WorksForTwoDimensionalArray)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELD" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (NestedTestingNamespaceTest, Failure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELE" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (NestedTestingNamespaceTest, Success)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELF" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ParseInt32FlagTest, ParsesAndReturnsValidValue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELG" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ParseInt32FlagTest, ReturnsDefaultWhenValueIsInvalid)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELH" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ParseInt32FlagTest, ReturnsDefaultWhenValueOverflows)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELI" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ParseInt32FlagTest, ReturnsFalseForInvalidFlag)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELJ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (Pred1Test, SingleEvaluationOnFailure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELK" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (Pred1Test, WithFormat)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELL" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (Pred1Test, WithoutFormat)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELM" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (PredicateAssertionTest, AcceptsOverloadedFunction)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELN" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (PredicateAssertionTest, AcceptsTemplateFunction)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELO" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (PredicateFormatAssertionTest, AcceptsOverloadedFunction)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELP" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (PredicateFormatAssertionTest, AcceptsTemplateFunction)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELQ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (PredTest, SingleEvaluationOnFailure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELR" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (PredTest, WithFormat)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELS" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (PredTest, WithoutFormat)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELT" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (RandomDeathTest, GeneratesCrashesOnInvalidRange)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELU" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (RandomTest, GeneratesNumbersWithinRange)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELV" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (RandomTest, RepeatsWhenReseeded)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELW" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (RemoveConstTest, DoesNotAffectNonConstType)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELX" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (RemoveConstTest, MacroVersion)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELY" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (RemoveConstTest, RemovesConst)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELZ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (RemoveReferenceTest, DoesNotAffectNonReferenceType)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMA" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (RemoveReferenceTest, MacroVersion)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMB" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (RemoveReferenceTest, RemovesReference)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMC" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (RemoveReferenceToConstTest, Works)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMD" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ShouldRunTestOnShardTest, IsPartitionWhenThereAreFiveShards)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEME" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (ShouldRunTestOnShardTest, IsPartitionWhenThereIsOneShard)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMF" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (SkipPrefixTest, DoesNotSkipWhenPrefixDoesNotMatch)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMG" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (SkipPrefixTest, SkipsWhenPrefixMatches)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMH" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StaticAssertTypeEqTest, CompilesForEqualTypes)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMI" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StaticAssertTypeEqTest, WorksInClass)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMJ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamableTest, BasicIoManip)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMK" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamableTest, int)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEML" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamableTest, NULChar)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMM" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamableTest, NullCharPtr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMN" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamableTest, string)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMO" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamableTest, stringWithEmbeddedNUL)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMP" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamableToStringTest, CString)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMQ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamableToStringTest, NullCString)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMR" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamableToStringTest, NullPointer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMS" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamableToStringTest, Pointer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMT" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamableToStringTest, Scalar)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMU" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamingAssertionsTest, FloatingPointEquals)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMV" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamingAssertionsTest, IntegerEquals)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMW" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamingAssertionsTest, IntegerLessThan)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMX" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamingAssertionsTest, StringNotEqualIgnoringCase)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMY" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamingAssertionsTest, StringsEqual)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEMZ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamingAssertionsTest, StringsEqualIgnoringCase)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENA" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamingAssertionsTest, StringsNotEqual)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENB" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamingAssertionsTest, Truth)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENC" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamingAssertionsTest, Truth2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEND" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StreamingAssertionsTest, Unconditional)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENE" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StringAssertionTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKN" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_STRCASEEQ}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENF" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StringAssertionTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKQ" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_STRCASENE}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENG" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StringAssertionTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKS" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_STREQ}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENH" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StringAssertionTest, ASSERT_STREQ_Null)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENI" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StringAssertionTest, ASSERT_STREQ_Null2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENJ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StringAssertionTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKU" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_STRNE}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENK" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StringAssertionTest, STREQ_Wide)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENL" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StringAssertionTest, STRNE_Wide)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENM" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StringTest, CaseInsensitiveWideCStringEquals)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENN" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StringTest, EndsWithCaseInsensitive)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENO" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (SuccessfulAssertionTest, ASSERT)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENP" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (SuccessfulAssertionTest, ASSERT_STR)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENQ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (SuccessfulAssertionTest, EXPECT)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENR" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (SuccessfulAssertionTest, EXPECT_STR)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENS" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (SuccessfulAssertionTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMA" }{}}{\fldrslt {\cs37\ul\cf2 SUCCEED}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENT" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (TestEventListenersTest, Append)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENU" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (TestEventListenersTest, ConstructionWorks)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENV" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (TestEventListenersTest, DestructionWorks)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENW" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (TestEventListenersTest, Release)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENX" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (TestPropertyTest, ConstructorWorks)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENY" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (TestPropertyTest, ReplaceStringValue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENZ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (TestPropertyTest, SetValue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOA" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (TestPropertyTest, StringValue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOB" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (TestResultPropertyTest, GetTestProperty)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOC" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (TestResultPropertyTest, MultiplePropertiesFoundWhenAdded)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOD" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (TestResultPropertyTest, NoPropertiesFoundWhenNoneAreAdded)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOE" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (TestResultPropertyTest, OnePropertyFoundWhenAdded)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOF" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (TestResultPropertyTest, OverridesValuesForDuplicateKeys)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOG" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (UnitTestTest, CanGetOriginalWorkingDir)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOH" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (UnitTestTest, ReturnsPlausibleTimestamp)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOI" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (WideStringToUtf8Test, CanEncode12To16Bits)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOJ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (WideStringToUtf8Test, CanEncode17To21Bits)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOK" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (WideStringToUtf8Test, CanEncode8To11Bits)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOL" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (WideStringToUtf8Test, CanEncodeAscii)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOM" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (WideStringToUtf8Test, CanEncodeInvalidCodePoint)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEON" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (WideStringToUtf8Test, CanEncodeNul)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOO" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (WideStringToUtf8Test, ConcatenatesCodepointsCorrectly)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOP" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (WideStringToUtf8Test, StopsOnNulCharacter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOQ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (WideStringToUtf8Test, StopsWhenLengthLimitReached)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOR" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (CodeLocationForTESTF, Verify)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (CurrentTestInfoTest, WorksForFirstTestInATestCase)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOT" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (CurrentTestInfoTest, WorksForSecondTestInATestCase)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOU" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (DisabledTestsTest, DISABLED_TestShouldNotRun_1)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (DisabledTestsTest, DISABLED_TestShouldNotRun_2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOW" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (DoubleTest, AlmostZeros)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOX" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (DoubleTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKI" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_NEAR}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOY" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (DoubleTest, Commutative)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOZ" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (DoubleTest, DoubleLEFails)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPA" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (DoubleTest, DoubleLESucceeds)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPB" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (DoubleTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLK" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_NEAR}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPC" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (DoubleTest, Infinity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPD" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (DoubleTest, LargeDiff)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPE" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (DoubleTest, NaN)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPF" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (DoubleTest, Reflexive)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPG" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (DoubleTest, Size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPH" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (DoubleTest, SmallDiff)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPI" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (DoubleTest, Zeros)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPJ" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (ExpectFatalFailureTest, AcceptsMacroThatExpandsToUnprotectedComma)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPK" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (ExpectFatalFailureTest, AcceptsStdStringObject)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPL" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (ExpectFatalFailureTest, CanBeUsedInNonVoidFunction)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPM" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (ExpectFatalFailureTest, CatchesFatalFailureOnAllThreads)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPN" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (ExpectFatalFailureTest, CatchesFatalFaliure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPO" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (ExpectFatalFailureTest, DoesNotAbort)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPP" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (ExpectNonfatalFailureTest, CatchesNonfatalFailure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPQ" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (ExpectNonfatalFailureTest, CatchesNonfatalFailureOnAllThreads)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPR" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FloatTest, AlmostZeros)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FloatTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKI" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_NEAR}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPT" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FloatTest, Commutative)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPU" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FloatTest, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLK" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_NEAR}}}
)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FloatTest, FloatLEFails)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPW" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FloatTest, FloatLESucceeds)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPX" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FloatTest, Infinity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPY" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FloatTest, LargeDiff)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEPZ" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FloatTest, NaN)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQA" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FloatTest, Reflexive)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQB" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FloatTest, Size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQC" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FloatTest, SmallDiff)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQD" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FloatTest, Zeros)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQE" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FormatEpochTimeInMillisAsIso8601Test, MillisecondsDoNotAffectResult)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQF" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FormatEpochTimeInMillisAsIso8601Test, Prints24HourTime)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQG" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FormatEpochTimeInMillisAsIso8601Test, PrintsEpochStart)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQH" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FormatEpochTimeInMillisAsIso8601Test, PrintsLeadingZeroes)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQI" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FormatEpochTimeInMillisAsIso8601Test, PrintsTwoDigitSegments)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQJ" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (FRIEND_TEST_Test2, TEST_F)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQK" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (GTestFlagSaverTest, ModifyGTestFlags)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQL" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (GTestFlagSaverTest, VerifyGTestFlags)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQM" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, AlsoRunDisabledTestsFalse)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQN" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, AlsoRunDisabledTestsFlag)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQO" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, AlsoRunDisabledTestsTrue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQP" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, BreakOnFailureFalse_0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQQ" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, BreakOnFailureFalse_f)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQR" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, BreakOnFailureFalse_F)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, BreakOnFailureTrue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQT" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, BreakOnFailureWithoutValue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQU" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, CatchExceptions)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, DeathTestUseFork)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQW" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, DuplicatedFlags)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQX" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, Empty)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQY" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, FilterBad)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEQZ" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, FilterEmpty)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERA" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, FilterNonEmpty)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERB" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, ListTestsFalse)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERC" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, ListTestsFalse_f)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERD" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, ListTestsFalse_F)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERE" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, ListTestsFlag)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERF" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, ListTestsTrue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERG" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, NoFlag)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERH" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, OutputEmpty)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERI" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, OutputXml)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERJ" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, OutputXmlDirectory)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERK" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, OutputXmlFile)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERL" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, PrintTimeFalse)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERM" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, PrintTimeFalse_f)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERN" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, PrintTimeFalse_F)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERO" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, PrintTimeFlag)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERP" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, PrintTimeTrue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERQ" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, RandomSeed)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERR" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, Repeat)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, ShuffleFalse_0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERT" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, ShuffleTrue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERU" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, ShuffleWithoutValue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, StackTraceDepth)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERW" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, StreamResultTo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERX" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, ThrowOnFailureFalse_0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERY" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, ThrowOnFailureTrue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAERZ" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, ThrowOnFailureWithoutValue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESA" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (InitGoogleTestTest, UnrecognizedFlag)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESB" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (NoFatalFailureTest, AssertNoFatalFailureOnFatalFailure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESC" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (NoFatalFailureTest, ExpectNoFatalFailureOnFatalFailure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESD" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (NoFatalFailureTest, MessageIsStreamable)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESE" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (NoFatalFailureTest, NoFailure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESF" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (NoFatalFailureTest, NonFatalIsNoFailure)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESG" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (ScopedFakeTestPartResultReporterTest, DeprecatedConstructor)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESH" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (ScopedFakeTestPartResultReporterTest, InterceptsTestFailures)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESI" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (SetUpTestCaseTest, Test1)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESJ" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (SetUpTestCaseTest, Test2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (ShouldShardDeathTest, AbortsWhenShardingEnvVarsAreInvalid)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESL" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (ShouldShardTest, ReturnsFalseWhenNeitherEnvVarIsSet)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESM" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (ShouldShardTest, ReturnsFalseWhenTotalShardIsOne)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESN" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (ShouldShardTest, WorksWhenShardEnvVarsAreValid)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESO" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (SingleEvaluationTest, ASSERT_STR)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESP" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (SingleEvaluationTest, FailedASSERT_NE)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESQ" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (SingleEvaluationTest, FailedASSERT_STREQ)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESR" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (SingleEvaluationTest, OtherCases)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (TestInfoTest, Names)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEST" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (TestInfoTest, result)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESU" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (TestLifeCycleTest, Test1)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (TestLifeCycleTest, Test2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESW" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (TestResultDeathTest, GetTestPartResult)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESX" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (TestResultTest, Failed)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESY" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (TestResultTest, Passed)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESZ" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (TestResultTest, total_part_count)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETA" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (UnitTestRecordPropertyTest, AddFailureInsideTestsWhenUsingTestCaseReservedKeys)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETB" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (UnitTestRecordPropertyTest, AddRecordWithReservedKeysGeneratesCorrectPropertyList)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETC" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (UnitTestRecordPropertyTest, MultiplePropertiesFoundWhenAdded)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETD" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (UnitTestRecordPropertyTest, OnePropertyFoundWhenAdded)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETE" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (UnitTestRecordPropertyTest, OverridesValuesForDuplicateKeys)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETF" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (VectorShuffleTest, HandlesEmptyRange)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETG" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (VectorShuffleTest, HandlesRangeOfSizeOne)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETH" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (VectorShuffleTest, ShufflesEndOfVector)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETI" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (VectorShuffleTest, ShufflesEntireVector)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETJ" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (VectorShuffleTest, ShufflesMiddleOfVector)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETK" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (VectorShuffleTest, ShufflesRepeatably)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETL" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
 (VectorShuffleTest, ShufflesStartOfVector)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETM" }{}}{\fldrslt {\cs37\ul\cf2 TEST_P}}}
 (CodeLocationForTESTP, Verify)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETN" }{}}{\fldrslt {\cs37\ul\cf2 TestAssertEqualsUncopyable}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETO" }{}}{\fldrslt {\cs37\ul\cf2 TestAssertNonPositive}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETP" }{}}{\fldrslt {\cs37\ul\cf2 TestEq1}}}
 (int x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T1 , typename T2 > void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETQ" }{}}{\fldrslt {\cs37\ul\cf2 TestGTestAddReference}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T1 , typename T2 > void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETR" }{}}{\fldrslt {\cs37\ul\cf2 TestGTestReferenceToConst}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T1 , typename T2 > void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETS" }{}}{\fldrslt {\cs37\ul\cf2 TestGTestRemoveConst}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T1 , typename T2 > void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETT" }{}}{\fldrslt {\cs37\ul\cf2 TestGTestRemoveReference}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T1 , typename T2 > void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETU" }{}}{\fldrslt {\cs37\ul\cf2 TestGTestRemoveReferenceAndConst}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETV" }{}}{\fldrslt {\cs37\ul\cf2 TYPED_TEST}}}
 (CodeLocationForTYPEDTEST, Verify)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETW" }{}}{\fldrslt {\cs37\ul\cf2 TYPED_TEST_CASE}}}
 (CodeLocationForTYPEDTEST, int)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETX" }{}}{\fldrslt {\cs37\ul\cf2 TYPED_TEST_CASE_P}}}
 (CodeLocationForTYPEDTESTP)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETY" }{}}{\fldrslt {\cs37\ul\cf2 TYPED_TEST_P}}}
 (CodeLocationForTYPEDTESTP, Verify)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constants\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAETZ" }{}}{\fldrslt {\cs37\ul\cf2 g_sum}}}
 = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUA" }{}}{\fldrslt {\cs37\ul\cf2 global_var}}}
 = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool dummy1 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUB" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ATTRIBUTE_UNUSED_}}}
 = StaticAssertTypeEq<bool, bool>()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const wchar_t *const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUC" }{}}{\fldrslt {\cs37\ul\cf2 kNull}}}
 = NULL\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUD" }{}}{\fldrslt {\cs37\ul\cf2 Environment}}}
 * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUE" }{}}{\fldrslt {\cs37\ul\cf2 record_property_env}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Class Documentation\par
\pard\plain 
{\xe \v my_namespace::testing::AssertionResult}
{\bkmkstart AAAAAAAEBL}
{\bkmkend AAAAAAAEBL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
class my_namespace::testing::AssertionResult\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line 6577 of file gtest_unittest.cc.}\par
}
Collaboration diagram for AssertionResult:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d84/classmy__namespace_1_1testing_1_1_assertion_result__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\xe \v my_namespace::testing::Message}
{\bkmkstart AAAAAAAEBM}
{\bkmkend AAAAAAAEBM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
class my_namespace::testing::Message\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line 6572 of file gtest_unittest.cc.}\par
}
Collaboration diagram for Message:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d5/d00/classmy__namespace_1_1testing_1_1_message__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\xe \v my_namespace::testing::Test}
{\bkmkstart AAAAAAAEBN}
{\bkmkend AAAAAAAEBN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
class my_namespace::testing::Test\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line 6568 of file gtest_unittest.cc.}\par
}
Collaboration diagram for Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d5/d30/classmy__namespace_1_1testing_1_1_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\xe \v NonContainer}
{\bkmkstart AAAAAAAEBO}
{\bkmkend AAAAAAAEBO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
class NonContainer\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line 7519 of file gtest_unittest.cc.}\par
}
Collaboration diagram for NonContainer:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d3/dc8/class_non_container__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v GTEST_IMPLEMENTATION_\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:GTEST_IMPLEMENTATION_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define GTEST_IMPLEMENTATION_\~ 1}}
\par
{\bkmkstart AAAAAAAECB}
{\bkmkend AAAAAAAECB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 75 of file gtest_unittest.cc.}\par
}
{\xe \v GTEST_TEST_PARSING_FLAGS_\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:GTEST_TEST_PARSING_FLAGS_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define GTEST_TEST_PARSING_FLAGS_( argv1,  argv2,  expected,  should_print_help)}}
\par
{\bkmkstart AAAAAAAECC}
{\bkmkend AAAAAAAECC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   TestParsingFlags({\cf17 sizeof}(argv1)/{\cf17 sizeof}(*argv1) - 1, argv1, \\\par
                   {\cf17 sizeof}(argv2)/{\cf17 sizeof}(*argv2) - 1, argv2, \\\par
                   expected, should_print_help)\par
}
{
Definition at line 5705 of file gtest_unittest.cc.}\par
}
{\xe \v GTEST_USE_UNPROTECTED_COMMA_\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:GTEST_USE_UNPROTECTED_COMMA_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define GTEST_USE_UNPROTECTED_COMMA_\~ global_var++, global_var++}}
\par
{\bkmkstart AAAAAAAECD}
{\bkmkend AAAAAAAECD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 1238 of file gtest_unittest.cc.}\par
}
{\xe \v VERIFY_CODE_LOCATION\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:VERIFY_CODE_LOCATION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define VERIFY_CODE_LOCATION}}
\par
{\bkmkstart AAAAAAAECE}
{\bkmkend AAAAAAAECE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   {\cf17 const} {\cf18 int} expected_line = __LINE__ - 1; \\\par
  const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYC" }{}}{\fldrslt {\cs37\ul\cf2 TestInfo}}}
* {\cf17 const} test_info = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMS" }{}}{\fldrslt {\cs37\ul\cf2 GetUnitTestImpl}}}
()->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUF" }{}}{\fldrslt {\cs37\ul\cf2 current_test_info}}}
(); \\\par
  ASSERT_TRUE(test_info); \\\par
  EXPECT_STREQ(__FILE__, test_info->file()); \\\par
  EXPECT_EQ(expected_line, test_info->line())\par
}
{
Definition at line 5337 of file gtest_unittest.cc.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedef Documentation\par
\pard\plain 
{\xe \v IntAlias\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:IntAlias}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAECJ" }{}}{\fldrslt {\cs37\ul\cf2 IntAlias}}}
}}
\par
{\bkmkstart AAAAAAAECJ}
{\bkmkend AAAAAAAECJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6884 of file gtest_unittest.cc.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v FailFatally\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:FailFatally}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static void FailFatally (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAEDJ}
{\bkmkend AAAAAAAEDJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6903 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6903 \{ {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLT" }{}}{\fldrslt {\cs37\ul\cf2 FAIL}}}
(); \}\par
}
{
\ql
References FAIL.}\par
{
\ql
Referenced by TEST().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a3e54bdc05dfd9b57684116c4a9c1fc1a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GTEST_TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:GTEST_TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GTEST_TEST (AlternativeNameTest , Works )}}
\par
{\bkmkstart AAAAAAABMC}
{\bkmkend AAAAAAABMC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7305 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7305                                        \{  {\cf20 // GTEST_TEST is the same as TEST.}\par
7306   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLW" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_SUCCEED}}}
() << {\cf22 "OK"};  {\cf20 // GTEST_SUCCEED is the same as SUCCEED.}\par
7307 \par
7308   {\cf20 // GTEST_FAIL is the same as FAIL.}\par
7309   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLU" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_FAIL}}}
() << {\cf22 "An expected failure"},\par
7310                        {\cf22 "An expected failure"});\par
7311 \par
7312   {\cf20 // GTEST_ASSERT_XY is the same as ASSERT_XY.}\par
7313 \par
7314   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJV" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_EQ}}}
(0, 0);\par
7315   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJV" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_EQ}}}
(0, 1) << {\cf22 "An expected failure"},\par
7316                        {\cf22 "An expected failure"});\par
7317   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJV" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_EQ}}}
(1, 0) << {\cf22 "An expected failure"},\par
7318                        {\cf22 "An expected failure"});\par
7319 \par
7320   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKH" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_NE}}}
(0, 1);\par
7321   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKH" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_NE}}}
(1, 0);\par
7322   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKH" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_NE}}}
(0, 0) << {\cf22 "An expected failure"},\par
7323                        {\cf22 "An expected failure"});\par
7324 \par
7325   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKD" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_LE}}}
(0, 0);\par
7326   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKD" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_LE}}}
(0, 1);\par
7327   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKD" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_LE}}}
(1, 0) << {\cf22 "An expected failure"},\par
7328                        {\cf22 "An expected failure"});\par
7329 \par
7330   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKF" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_LT}}}
(0, 1);\par
7331   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKF" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_LT}}}
(0, 0) << {\cf22 "An expected failure"},\par
7332                        {\cf22 "An expected failure"});\par
7333   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKF" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_LT}}}
(1, 0) << {\cf22 "An expected failure"},\par
7334                        {\cf22 "An expected failure"});\par
7335 \par
7336   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_GE}}}
(0, 0);\par
7337   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_GE}}}
(1, 0);\par
7338   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_GE}}}
(0, 1) << {\cf22 "An expected failure"},\par
7339                        {\cf22 "An expected failure"});\par
7340 \par
7341   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKB" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_GT}}}
(1, 0);\par
7342   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKB" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_GT}}}
(0, 1) << {\cf22 "An expected failure"},\par
7343                        {\cf22 "An expected failure"});\par
7344   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKB" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ASSERT_GT}}}
(1, 1) << {\cf22 "An expected failure"},\par
7345                        {\cf22 "An expected failure"});\par
7346 \}\par
}
{
\ql
References EXPECT_FATAL_FAILURE, GTEST_ASSERT_EQ, GTEST_ASSERT_GE, GTEST_ASSERT_GT, GTEST_ASSERT_LE, GTEST_ASSERT_LT, GTEST_ASSERT_NE, GTEST_FAIL, and GTEST_SUCCEED.}\par
}
{\xe \v HasFailureHelper\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:HasFailureHelper}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static bool HasFailureHelper (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAEDL}
{\bkmkend AAAAAAAEDL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6970 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6970 \{ {\cf19 return} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUG" }{}}{\fldrslt {\cs37\ul\cf2 testing::Test::HasFailure}}}
(); \}\par
}
{
\ql
References Test::HasFailure().}\par
{
\ql
Referenced by TEST().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_ad6f57748fc42d01bbb006a116cd1a984_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_ad6f57748fc42d01bbb006a116cd1a984_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v HasNonfatalFailureHelper\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:HasNonfatalFailureHelper}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static bool HasNonfatalFailureHelper (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAEDM}
{\bkmkend AAAAAAAEDM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6928 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6928                                        \{\par
6929   {\cf19 return} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUH" }{}}{\fldrslt {\cs37\ul\cf2 testing::Test::HasNonfatalFailure}}}
();\par
6930 \}\par
}
{
\ql
References Test::HasNonfatalFailure().}\par
{
\ql
Referenced by TEST().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_ac6eb4ad0064e248acc8f01b6f4353b95_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_ac6eb4ad0064e248acc8f01b6f4353b95_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v operator<<\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
::{\b std::ostream}& operator<< (::{\b std::ostream} &  {\i os}, const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDZ" }{}}{\fldrslt {\cs37\ul\cf2 TestingVector}}}
 &  {\i vector})}}
\par
{\bkmkstart AAAAAAAEDY}
{\bkmkend AAAAAAAEDY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 303 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 306                                                         \{\par
307   os << {\cf22 "\{ "};\par
308   {\cf19 for} ({\cf18 size_t} i = 0; i < vector.size(); i++) \{\par
309     os << vector[i] << {\cf22 " "};\par
310   \}\par
311   os << {\cf22 "\}"};\par
312   {\cf19 return} os;\par
313 \}\par
}
}
{\xe \v operator<<\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::ostream}& operator<< ({\b std::ostream} &  {\i os}, const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABTK" }{}}{\fldrslt {\cs37\ul\cf2 Base}}}
 &  {\i val})}}
\par
{\bkmkstart AAAAAAAEEB}
{\bkmkend AAAAAAAEEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 5162 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5163                                           \{\par
5164   {\cf19 return} os << val.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUI" }{}}{\fldrslt {\cs37\ul\cf2 x}}}
();\par
5165 \}\par
}
{
\ql
References Base::x().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_ab80209c07a91db303a9d415dc9bd4e81_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v operator<<\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::ostream}& operator<< ({\b std::ostream} &  {\i os}, const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABTK" }{}}{\fldrslt {\cs37\ul\cf2 Base}}}
 *  {\i pointer})}}
\par
{\bkmkstart AAAAAAAEEC}
{\bkmkend AAAAAAAEEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 5166 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5167                                               \{\par
5168   {\cf19 return} os << {\cf22 "("} << pointer->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUI" }{}}{\fldrslt {\cs37\ul\cf2 x}}}
() << {\cf22 ")"};\par
5169 \}\par
}
{
\ql
References Base::x().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_ac4fc0177334a6fd32b81376c9a2a2dc6_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v operator<<\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::ostream}& operator<< ({\b std::ostream} &  {\i os}, const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEI" }{}}{\fldrslt {\cs37\ul\cf2 namespace2::MyTypeInNameSpace2}}}
 &  {\i val})}}
\par
{\bkmkstart AAAAAAAEEH}
{\bkmkend AAAAAAAEEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 5237 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5238                                                                   \{\par
5239   {\cf19 return} os << val.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUI" }{}}{\fldrslt {\cs37\ul\cf2 x}}}
();\par
5240 \}\par
}
{
\ql
References Base::x().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_ab3cbb7adaeba5049e2c1907523f0c3e8_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v operator<<\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::ostream}& operator<< ({\b std::ostream} &  {\i os}, const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEI" }{}}{\fldrslt {\cs37\ul\cf2 namespace2::MyTypeInNameSpace2}}}
 *  {\i pointer})}}
\par
{\bkmkstart AAAAAAAEEJ}
{\bkmkend AAAAAAAEEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 5241 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5242                                                                       \{\par
5243   {\cf19 return} os << {\cf22 "("} << pointer->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUI" }{}}{\fldrslt {\cs37\ul\cf2 x}}}
() << {\cf22 ")"};\par
5244 \}\par
}
{
\ql
References Base::x().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a839d8a189a0c52bb7899a5b4b4b07ed1_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (AddReferenceTest , AddsReference )}}
\par
{\bkmkstart AAAAAAAEEP}
{\bkmkend AAAAAAAEEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7456 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7456                                       \{\par
7457   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<int&, AddReference<int>::type}}}
>();\par
7458   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<const char&, AddReference<const char>::type}}}
>();\par
7459 \}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (AddReferenceTest , DoesNotAffectReferenceType )}}
\par
{\bkmkstart AAAAAAAEEQ}
{\bkmkend AAAAAAAEEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7450 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7450                                                    \{\par
7451   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<int&, AddReference<int&>::type}}}
>();\par
7452   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<const char&, AddReference<const char&>::type}}}
>();\par
7453 \}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (AddReferenceTest , MacroVersion )}}
\par
{\bkmkstart AAAAAAAEER}
{\bkmkend AAAAAAAEER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7468 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7468                                      \{\par
7469   TestGTestAddReference<int&, int>();\par
7470   TestGTestAddReference<const char&, const char&>();\par
7471 \}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ArrayAwareFindTest , WorksForOneDimensionalArray )}}
\par
{\bkmkstart AAAAAAAEES}
{\bkmkend AAAAAAAEES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7567 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7567                                                       \{\par
7568   {\cf17 const} {\cf18 char} a[] = {\cf22 "hello"};\par
7569   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(a + 4, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXF" }{}}{\fldrslt {\cs37\ul\cf2 ArrayAwareFind}}}
(a, a + 5, {\cf23 'o'}));\par
7570   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(a + 5, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXF" }{}}{\fldrslt {\cs37\ul\cf2 ArrayAwareFind}}}
(a, a + 5, {\cf23 'x'}));\par
7571 \}\par
}
{
\ql
References testing::internal::ArrayAwareFind(), and EXPECT_EQ.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a563807f4b8c6d7fbf2945f279e38468e_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ArrayAwareFindTest , WorksForTwoDimensionalArray )}}
\par
{\bkmkstart AAAAAAAEET}
{\bkmkend AAAAAAAEET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7573 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7573                                                       \{\par
7574   {\cf18 int} a[][2] = \{ \{ 0, 1 \}, \{ 2, 3 \}, \{ 4, 5 \} \};\par
7575   {\cf17 const} {\cf18 int} b[2] = \{ 2, 3 \};\par
7576   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(a + 1, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXF" }{}}{\fldrslt {\cs37\ul\cf2 ArrayAwareFind}}}
(a, a + 3, b));\par
7577 \par
7578   {\cf17 const} {\cf18 int} c[2] = \{ 6, 7 \};\par
7579   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(a + 3, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXF" }{}}{\fldrslt {\cs37\ul\cf2 ArrayAwareFind}}}
(a, a + 3, c));\par
7580 \}\par
}
{
\ql
References testing::internal::ArrayAwareFind(), and EXPECT_EQ.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a1ca0fb8b6355671bbe5a62300585db5a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ArrayEqTest , WorksForDegeneratedArrays )}}
\par
{\bkmkstart AAAAAAAEEU}
{\bkmkend AAAAAAAEEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7536 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7536                                              \{\par
7537   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXH" }{}}{\fldrslt {\cs37\ul\cf2 ArrayEq}}}
(5, 5L));\par
7538   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXH" }{}}{\fldrslt {\cs37\ul\cf2 ArrayEq}}}
({\cf23 'a'}, 0));\par
7539 \}\par
}
{
\ql
References testing::internal::ArrayEq(), EXPECT_FALSE, and EXPECT_TRUE.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_ae9e7a844847a2df933aa4c2f85f7ceed_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ArrayEqTest , WorksForOneDimensionalArrays )}}
\par
{\bkmkstart AAAAAAAEEV}
{\bkmkend AAAAAAAEEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7541 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7541                                                 \{\par
7542   {\cf20 // Note that a and b are distinct but compatible types.}\par
7543   {\cf17 const} {\cf18 int} a[] = \{ 0, 1 \};\par
7544   {\cf18 long} b[] = \{ 0, 1 \};\par
7545   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXH" }{}}{\fldrslt {\cs37\ul\cf2 ArrayEq}}}
(a, b));\par
7546   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXH" }{}}{\fldrslt {\cs37\ul\cf2 ArrayEq}}}
(a, 2, b));\par
7547 \par
7548   b[0] = 2;\par
7549   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXH" }{}}{\fldrslt {\cs37\ul\cf2 ArrayEq}}}
(a, b));\par
7550   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXH" }{}}{\fldrslt {\cs37\ul\cf2 ArrayEq}}}
(a, 1, b));\par
7551 \}\par
}
{
\ql
References testing::internal::ArrayEq(), EXPECT_FALSE, and EXPECT_TRUE.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a4ea595c1e4b3620fb8cf7366dd533c95_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ArrayEqTest , WorksForTwoDimensionalArrays )}}
\par
{\bkmkstart AAAAAAAEEW}
{\bkmkend AAAAAAAEEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7553 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7553                                                 \{\par
7554   {\cf17 const} {\cf18 char} a[][3] = \{ {\cf22 "hi"}, {\cf22 "lo"} \};\par
7555   {\cf17 const} {\cf18 char} b[][3] = \{ {\cf22 "hi"}, {\cf22 "lo"} \};\par
7556   {\cf17 const} {\cf18 char} c[][3] = \{ {\cf22 "hi"}, {\cf22 "li"} \};\par
7557 \par
7558   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXH" }{}}{\fldrslt {\cs37\ul\cf2 ArrayEq}}}
(a, b));\par
7559   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXH" }{}}{\fldrslt {\cs37\ul\cf2 ArrayEq}}}
(a, 2, b));\par
7560 \par
7561   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXH" }{}}{\fldrslt {\cs37\ul\cf2 ArrayEq}}}
(a, c));\par
7562   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXH" }{}}{\fldrslt {\cs37\ul\cf2 ArrayEq}}}
(a, 2, c));\par
7563 \}\par
}
{
\ql
References testing::internal::ArrayEq(), EXPECT_FALSE, and EXPECT_TRUE.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_ab18237f1a37018db8b5a78ae84b209ec_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (AssertionResultTest , CanStreamOstreamManipulators )}}
\par
{\bkmkstart AAAAAAAEEY}
{\bkmkend AAAAAAAEEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 5122 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5122                                                         \{\par
5123   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 r = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMH" }{}}{\fldrslt {\cs37\ul\cf2 AssertionSuccess}}}
();\par
5124   r << {\cf22 "Data"} << std::endl << std::flush << std::ends << {\cf22 "Will be visible"};\par
5125   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "Data\\n\\\\0Will be visible"}, r.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUJ" }{}}{\fldrslt {\cs37\ul\cf2 message}}}
());\par
5126 \}\par
}
{
\ql
References testing::AssertionSuccess(), std::endl(), std::ends(), EXPECT_STREQ, std::flush(), and AssertionResult::message().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a9f44af0752c3f08c932e2750905c6d79_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (AssertionResultTest , ConstructibleFromImplicitlyConvertible )}}
\par
{\bkmkstart AAAAAAAEEZ}
{\bkmkend AAAAAAAEEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 5148 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5148                                                                   \{\par
5149   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUK" }{}}{\fldrslt {\cs37\ul\cf2 ConvertibleToAssertionResult}}}
 obj;\par
5150   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(obj);\par
5151 \}\par
}
{
\ql
References EXPECT_TRUE.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (AssertionResultTest , ConstructionWorks )}}
\par
{\bkmkstart AAAAAAAEFA}
{\bkmkend AAAAAAAEFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 5083 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5083                                              \{\par
5084   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 r1 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMH" }{}}{\fldrslt {\cs37\ul\cf2 AssertionSuccess}}}
();\par
5085   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(r1);\par
5086   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 ""}, r1.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUJ" }{}}{\fldrslt {\cs37\ul\cf2 message}}}
());\par
5087 \par
5088   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 r2 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMH" }{}}{\fldrslt {\cs37\ul\cf2 AssertionSuccess}}}
() << {\cf22 "abc"};\par
5089   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(r2);\par
5090   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "abc"}, r2.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUJ" }{}}{\fldrslt {\cs37\ul\cf2 message}}}
());\par
5091 \par
5092   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 r3 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMF" }{}}{\fldrslt {\cs37\ul\cf2 AssertionFailure}}}
();\par
5093   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(r3);\par
5094   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 ""}, r3.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUJ" }{}}{\fldrslt {\cs37\ul\cf2 message}}}
());\par
5095 \par
5096   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 r4 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMF" }{}}{\fldrslt {\cs37\ul\cf2 AssertionFailure}}}
() << {\cf22 "def"};\par
5097   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(r4);\par
5098   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "def"}, r4.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUJ" }{}}{\fldrslt {\cs37\ul\cf2 message}}}
());\par
5099 \par
5100   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 r5 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMF" }{}}{\fldrslt {\cs37\ul\cf2 AssertionFailure}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABGC" }{}}{\fldrslt {\cs37\ul\cf2 Message}}}
() << {\cf22 "ghi"});\par
5101   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(r5);\par
5102   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "ghi"}, r5.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUJ" }{}}{\fldrslt {\cs37\ul\cf2 message}}}
());\par
5103 \}\par
}
{
\ql
References testing::AssertionFailure(), testing::AssertionSuccess(), EXPECT_FALSE, EXPECT_STREQ, EXPECT_TRUE, and AssertionResult::message().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_aedf09cfebfd5a8d3a06625df12bbb876_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (AssertionResultTest , CopyConstructorWorksWhenNotOptimied )}}
\par
{\bkmkstart AAAAAAAEFB}
{\bkmkend AAAAAAAEFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 5067 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5067                                                                \{\par
5068   {\cf20 // Checks that the copy constructor doesn't try to dereference NULL pointers}\par
5069   {\cf20 // in the source object.}\par
5070   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 r1 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMH" }{}}{\fldrslt {\cs37\ul\cf2 AssertionSuccess}}}
();\par
5071   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 r2 = r1;\par
5072   {\cf20 // The following line is added to prevent the compiler from optimizing}\par
5073   {\cf20 // away the constructor call.}\par
5074   r1 << {\cf22 "abc"};\par
5075 \par
5076   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 r3 = r1;\par
5077   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
({\cf17 static_cast<}{\cf18 bool}{\cf17 >}(r3), {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(r1));\par
5078   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "abc"}, r1.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUJ" }{}}{\fldrslt {\cs37\ul\cf2 message}}}
());\par
5079 \}\par
}
{
\ql
References testing::AssertionSuccess(), EXPECT_EQ, EXPECT_STREQ, and AssertionResult::message().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a1f4d6acbaf3df6080caf7e24f05a0be5_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (AssertionResultTest , NegationWorks )}}
\par
{\bkmkstart AAAAAAAEFC}
{\bkmkend AAAAAAAEFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 5106 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5106                                          \{\par
5107   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 r1 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMH" }{}}{\fldrslt {\cs37\ul\cf2 AssertionSuccess}}}
() << {\cf22 "abc"};\par
5108   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(!r1);\par
5109   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "abc"}, (!r1).{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABOM" }{}}{\fldrslt {\cs37\ul\cf2 message}}}
());\par
5110 \par
5111   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 r2 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMF" }{}}{\fldrslt {\cs37\ul\cf2 AssertionFailure}}}
() << {\cf22 "def"};\par
5112   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(!r2);\par
5113   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "def"}, (!r2).{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABOM" }{}}{\fldrslt {\cs37\ul\cf2 message}}}
());\par
5114 \}\par
}
{
\ql
References testing::AssertionFailure(), testing::AssertionSuccess(), EXPECT_FALSE, EXPECT_STREQ, EXPECT_TRUE, and gtest_output_test::message.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a96d7227faf7783c24e9532b1eb3c2a42_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (AssertionResultTest , StreamingWorks )}}
\par
{\bkmkstart AAAAAAAEFD}
{\bkmkend AAAAAAAEFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 5116 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5116                                           \{\par
5117   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABYE" }{}}{\fldrslt {\cs37\ul\cf2 AssertionResult}}}
 r = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMH" }{}}{\fldrslt {\cs37\ul\cf2 AssertionSuccess}}}
();\par
5118   r << {\cf22 "abc"} << {\cf23 'd'} << 0 << {\cf17 true};\par
5119   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "abcd0true"}, r.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUJ" }{}}{\fldrslt {\cs37\ul\cf2 message}}}
());\par
5120 \}\par
}
{
\ql
References testing::AssertionSuccess(), EXPECT_STREQ, and AssertionResult::message().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_acdfdc68a5959b52a59f9dd0cccc3f390_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ColoredOutputTest , UsesColorsWhenGTestColorFlagIsAliasOfYes )}}
\par
{\bkmkstart AAAAAAAEGP}
{\bkmkend AAAAAAAEGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6753 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6753                                                                   \{\par
6754   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "dumb"});  {\cf20 // TERM doesn't support colors.}\par
6755 \par
6756   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_FLAG}}}
(color) = {\cf22 "True"};\par
6757   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 false}));  {\cf20 // Stdout is not a TTY.}\par
6758 \par
6759   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_FLAG}}}
(color) = {\cf22 "t"};\par
6760   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 false}));  {\cf20 // Stdout is not a TTY.}\par
6761 \par
6762   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_FLAG}}}
(color) = {\cf22 "1"};\par
6763   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 false}));  {\cf20 // Stdout is not a TTY.}\par
6764 \}\par
}
{
\ql
References EXPECT_TRUE, GTEST_FLAG, anonymous_namespace\{gtest_unittest.cc\}::SetEnv(), and testing::internal::ShouldUseColor().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_aa9a0db525d07d5e2afea545471d1f654_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ColoredOutputTest , UsesColorsWhenGTestColorFlagIsYes )}}
\par
{\bkmkstart AAAAAAAEGQ}
{\bkmkend AAAAAAAEGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6741 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6741                                                            \{\par
6742   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_FLAG}}}
(color) = {\cf22 "yes"};\par
6743 \par
6744   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "xterm"});  {\cf20 // TERM supports colors.}\par
6745   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6746   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 false}));  {\cf20 // Stdout is not a TTY.}\par
6747 \par
6748   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "dumb"});  {\cf20 // TERM doesn't support colors.}\par
6749   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6750   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 false}));  {\cf20 // Stdout is not a TTY.}\par
6751 \}\par
}
{
\ql
References EXPECT_TRUE, GTEST_FLAG, anonymous_namespace\{gtest_unittest.cc\}::SetEnv(), and testing::internal::ShouldUseColor().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_aaf1acc03f393989f85aafd13c880fa44_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ColoredOutputTest , UsesColorsWhenStdoutIsTty )}}
\par
{\bkmkstart AAAAAAAEGR}
{\bkmkend AAAAAAAEGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6791 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6791                                                    \{\par
6792   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_FLAG}}}
(color) = {\cf22 "auto"};\par
6793 \par
6794   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "xterm"});  {\cf20 // TERM supports colors.}\par
6795   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 false}));  {\cf20 // Stdout is not a TTY.}\par
6796   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));    {\cf20 // Stdout is a TTY.}\par
6797 \}\par
}
{
\ql
References EXPECT_FALSE, EXPECT_TRUE, GTEST_FLAG, anonymous_namespace\{gtest_unittest.cc\}::SetEnv(), and testing::internal::ShouldUseColor().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a2a995937bc9d0b16d65e5bcaa5fc781e_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ColoredOutputTest , UsesColorsWhenTermSupportsColors )}}
\par
{\bkmkstart AAAAAAAEGS}
{\bkmkend AAAAAAAEGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6799 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6799                                                           \{\par
6800   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_FLAG}}}
(color) = {\cf22 "auto"};\par
6801 \par
6802 {\cf21 #if GTEST_OS_WINDOWS}\par
6803   {\cf20 // On Windows, we ignore the TERM variable as it's usually not set.}\par
6804 \par
6805   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "dumb"});\par
6806   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6807 \par
6808   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 ""});\par
6809   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6810 \par
6811   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "xterm"});\par
6812   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6813 {\cf21 #else}\par
6814   {\cf20 // On non-Windows platforms, we rely on TERM to determine if the}\par
6815   {\cf20 // terminal supports colors.}\par
6816 \par
6817   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "dumb"});  {\cf20 // TERM doesn't support colors.}\par
6818   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6819 \par
6820   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "emacs"});  {\cf20 // TERM doesn't support colors.}\par
6821   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6822 \par
6823   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "vt100"});  {\cf20 // TERM doesn't support colors.}\par
6824   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6825 \par
6826   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "xterm-mono"});  {\cf20 // TERM doesn't support colors.}\par
6827   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6828 \par
6829   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "xterm"});  {\cf20 // TERM supports colors.}\par
6830   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6831 \par
6832   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "xterm-color"});  {\cf20 // TERM supports colors.}\par
6833   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6834 \par
6835   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "xterm-256color"});  {\cf20 // TERM supports colors.}\par
6836   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6837 \par
6838   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "screen"});  {\cf20 // TERM supports colors.}\par
6839   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6840 \par
6841   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "screen-256color"});  {\cf20 // TERM supports colors.}\par
6842   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6843 \par
6844   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "tmux"});  {\cf20 // TERM supports colors.}\par
6845   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6846 \par
6847   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "tmux-256color"});  {\cf20 // TERM supports colors.}\par
6848   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6849 \par
6850   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "rxvt-unicode"});  {\cf20 // TERM supports colors.}\par
6851   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6852 \par
6853   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "rxvt-unicode-256color"});  {\cf20 // TERM supports colors.}\par
6854   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6855 \par
6856   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "linux"});  {\cf20 // TERM supports colors.}\par
6857   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6858 \par
6859   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "cygwin"});  {\cf20 // TERM supports colors.}\par
6860   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6861 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS}\par
6862 \}\par
}
{
\ql
References EXPECT_FALSE, EXPECT_TRUE, GTEST_FLAG, anonymous_namespace\{gtest_unittest.cc\}::SetEnv(), and testing::internal::ShouldUseColor().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a6dd6677e63340771dc55ad96a0697f11_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ColoredOutputTest , UsesNoColorWhenGTestColorFlagIsInvalid )}}
\par
{\bkmkstart AAAAAAAEGT}
{\bkmkend AAAAAAAEGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6778 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6778                                                                 \{\par
6779   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "xterm"});  {\cf20 // TERM supports colors.}\par
6780 \par
6781   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_FLAG}}}
(color) = {\cf22 "F"};\par
6782   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6783 \par
6784   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_FLAG}}}
(color) = {\cf22 "0"};\par
6785   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6786 \par
6787   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_FLAG}}}
(color) = {\cf22 "unknown"};\par
6788   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6789 \}\par
}
{
\ql
References EXPECT_FALSE, GTEST_FLAG, anonymous_namespace\{gtest_unittest.cc\}::SetEnv(), and testing::internal::ShouldUseColor().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a7f15883b04b4975f604be288955952fb_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ColoredOutputTest , UsesNoColorWhenGTestColorFlagIsNo )}}
\par
{\bkmkstart AAAAAAAEGU}
{\bkmkend AAAAAAAEGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6766 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6766                                                            \{\par
6767   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_FLAG}}}
(color) = {\cf22 "no"};\par
6768 \par
6769   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "xterm"});  {\cf20 // TERM supports colors.}\par
6770   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6771   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 false}));  {\cf20 // Stdout is not a TTY.}\par
6772 \par
6773   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEN" }{}}{\fldrslt {\cs37\ul\cf2 SetEnv}}}
({\cf22 "TERM"}, {\cf22 "dumb"});  {\cf20 // TERM doesn't support colors.}\par
6774   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 true}));  {\cf20 // Stdout is a TTY.}\par
6775   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACLP" }{}}{\fldrslt {\cs37\ul\cf2 ShouldUseColor}}}
({\cf17 false}));  {\cf20 // Stdout is not a TTY.}\par
6776 \}\par
}
{
\ql
References EXPECT_FALSE, GTEST_FLAG, anonymous_namespace\{gtest_unittest.cc\}::SetEnv(), and testing::internal::ShouldUseColor().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_aac5bec0b24eebf52985abcd6234335fe_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (CommandLineFlagsTest , CanBeAccessedInCodeOnceGTestHIsIncluded )}}
\par
{\bkmkstart AAAAAAAEGV}
{\bkmkend AAAAAAAEGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 40 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 40                                                                     \{\par
41   {\cf18 bool} dummy = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 testing::GTEST_FLAG}}}
(also_run_disabled_tests)\par
42       || {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 testing::GTEST_FLAG}}}
(break_on_failure)\par
43       || {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 testing::GTEST_FLAG}}}
(catch_exceptions)\par
44       || {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 testing::GTEST_FLAG}}}
(color) != {\cf22 "unknown"}\par
45       || {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 testing::GTEST_FLAG}}}
(filter) != {\cf22 "unknown"}\par
46       || {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 testing::GTEST_FLAG}}}
(list_tests)\par
47       || {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 testing::GTEST_FLAG}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACSL" }{}}{\fldrslt {\cs37\ul\cf2 output}}}
) != {\cf22 "unknown"}\par
48       || {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 testing::GTEST_FLAG}}}
(print_time)\par
49       || {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 testing::GTEST_FLAG}}}
(random_seed)\par
50       || {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 testing::GTEST_FLAG}}}
(repeat) > 0\par
51       || {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 testing::GTEST_FLAG}}}
(show_internal_stack_frames)\par
52       || {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 testing::GTEST_FLAG}}}
(shuffle)\par
53       || {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 testing::GTEST_FLAG}}}
(stack_trace_depth) > 0\par
54       || {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 testing::GTEST_FLAG}}}
(stream_result_to) != {\cf22 "unknown"}\par
55       || {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQP" }{}}{\fldrslt {\cs37\ul\cf2 testing::GTEST_FLAG}}}
(throw_on_failure);\par
56   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(dummy || !dummy);  {\cf20 // Suppresses warning that dummy is unused.}\par
57 \}\par
}
{
\ql
References EXPECT_TRUE, GTEST_FLAG, and gtest_output_test::output.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual}}}
 , CompilesWhenTypesAreEqual )}}
\par
{\bkmkstart AAAAAAAEGX}
{\bkmkend AAAAAAAEGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7378 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7378                                                          \{\par
7379   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<void, void>}}}
();\par
7380   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<int*, int*>}}}
();\par
7381 \}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (CopyArrayTest , WorksForDegeneratedArrays )}}
\par
{\bkmkstart AAAAAAAEHD}
{\bkmkend AAAAAAAEHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7584 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7584                                                \{\par
7585   {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAP" }{}}{\fldrslt {\cs37\ul\cf2 n}}}
 = 0;\par
7586   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXM" }{}}{\fldrslt {\cs37\ul\cf2 CopyArray}}}
({\cf23 'a'}, &{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAP" }{}}{\fldrslt {\cs37\ul\cf2 n}}}
);\par
7587   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
({\cf23 'a'}, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAP" }{}}{\fldrslt {\cs37\ul\cf2 n}}}
);\par
7588 \}\par
}
{
\ql
References testing::internal::CopyArray(), EXPECT_EQ, and testing::internal::posix::n.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_ad6d3761861147173657e547cb118877f_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (CopyArrayTest , WorksForOneDimensionalArrays )}}
\par
{\bkmkstart AAAAAAAEHE}
{\bkmkend AAAAAAAEHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7590 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7590                                                   \{\par
7591   {\cf17 const} {\cf18 char} a[3] = {\cf22 "hi"};\par
7592   {\cf18 int} b[3];\par
7593 {\cf21 #ifndef __BORLANDC__  }{\cf20 // C++Builder cannot compile some array size deductions.}\par
7594   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXM" }{}}{\fldrslt {\cs37\ul\cf2 CopyArray}}}
(a, &b);\par
7595   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXH" }{}}{\fldrslt {\cs37\ul\cf2 ArrayEq}}}
(a, b));\par
7596 {\cf21 #endif}\par
7597 \par
7598   {\cf18 int} c[3];\par
7599   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXM" }{}}{\fldrslt {\cs37\ul\cf2 CopyArray}}}
(a, 3, c);\par
7600   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXH" }{}}{\fldrslt {\cs37\ul\cf2 ArrayEq}}}
(a, c));\par
7601 \}\par
}
{
\ql
References testing::internal::ArrayEq(), testing::internal::CopyArray(), and EXPECT_TRUE.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a0155f940cddc15a77da7df03325c6d1d_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (CopyArrayTest , WorksForTwoDimensionalArrays )}}
\par
{\bkmkstart AAAAAAAEHF}
{\bkmkend AAAAAAAEHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7603 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7603                                                   \{\par
7604   {\cf17 const} {\cf18 int} a[2][3] = \{ \{ 0, 1, 2 \}, \{ 3, 4, 5 \} \};\par
7605   {\cf18 int} b[2][3];\par
7606 {\cf21 #ifndef __BORLANDC__  }{\cf20 // C++Builder cannot compile some array size deductions.}\par
7607   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXM" }{}}{\fldrslt {\cs37\ul\cf2 CopyArray}}}
(a, &b);\par
7608   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXH" }{}}{\fldrslt {\cs37\ul\cf2 ArrayEq}}}
(a, b));\par
7609 {\cf21 #endif}\par
7610 \par
7611   {\cf18 int} c[2][3];\par
7612   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXM" }{}}{\fldrslt {\cs37\ul\cf2 CopyArray}}}
(a, 2, c);\par
7613   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXH" }{}}{\fldrslt {\cs37\ul\cf2 ArrayEq}}}
(a, c));\par
7614 \}\par
}
{
\ql
References testing::internal::ArrayEq(), testing::internal::CopyArray(), and EXPECT_TRUE.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a1f1a5d3bb2ce15ff081f359e4494a739_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (EventListenerDeathTest , EventsNotForwardedInDeathTestSubprecesses )}}
\par
{\bkmkstart AAAAAAAEHV}
{\bkmkend AAAAAAAEHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7175 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7175                                                                         \{\par
7176   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFZ" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_DEATH_IF_SUPPORTED}}}
(\{\par
7177       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQL" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_CHECK_}}}
(TestEventListenersAccessor::EventForwardingEnabled(\par
7178           *{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMS" }{}}{\fldrslt {\cs37\ul\cf2 GetUnitTestImpl}}}
()->listeners())) << {\cf22 "expected failure"};\},\par
7179       {\cf22 "expected failure"});\par
7180 \}\par
}
{
\ql
References EXPECT_DEATH_IF_SUPPORTED, testing::internal::GetUnitTestImpl(), and GTEST_CHECK_.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a3e3bfce9c199215053e43d9d1a248af8_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (EventListenerTest , AppendKeepsOrder )}}
\par
{\bkmkstart AAAAAAAEHW}
{\bkmkend AAAAAAAEHW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7097 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7097                                           \{\par
7098   std::vector<std::string> vec;\par
7099   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUL" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListeners}}}
 listeners;\par
7100   listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUM" }{}}{\fldrslt {\cs37\ul\cf2 Append}}}
({\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBQ" }{}}{\fldrslt {\cs37\ul\cf2 SequenceTestingListener}}}
(&vec, {\cf22 "1st"}));\par
7101   listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUM" }{}}{\fldrslt {\cs37\ul\cf2 Append}}}
({\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBQ" }{}}{\fldrslt {\cs37\ul\cf2 SequenceTestingListener}}}
(&vec, {\cf22 "2nd"}));\par
7102   listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUM" }{}}{\fldrslt {\cs37\ul\cf2 Append}}}
({\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBQ" }{}}{\fldrslt {\cs37\ul\cf2 SequenceTestingListener}}}
(&vec, {\cf22 "3rd"}));\par
7103 \par
7104   TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(\par
7105       *UnitTest::GetInstance());\par
7106   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJU" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_EQ}}}
(3U, vec.size());\par
7107   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "1st.OnTestProgramStart"}, vec[0].c_str());\par
7108   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "2nd.OnTestProgramStart"}, vec[1].c_str());\par
7109   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "3rd.OnTestProgramStart"}, vec[2].c_str());\par
7110 \par
7111   vec.clear();\par
7112   TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramEnd(\par
7113       *UnitTest::GetInstance());\par
7114   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJU" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_EQ}}}
(3U, vec.size());\par
7115   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "3rd.OnTestProgramEnd"}, vec[0].c_str());\par
7116   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "2nd.OnTestProgramEnd"}, vec[1].c_str());\par
7117   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "1st.OnTestProgramEnd"}, vec[2].c_str());\par
7118 \par
7119   vec.clear();\par
7120   TestEventListenersAccessor::GetRepeater(&listeners)->OnTestIterationStart(\par
7121       *UnitTest::GetInstance(), 0);\par
7122   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJU" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_EQ}}}
(3U, vec.size());\par
7123   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "1st.OnTestIterationStart"}, vec[0].c_str());\par
7124   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "2nd.OnTestIterationStart"}, vec[1].c_str());\par
7125   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "3rd.OnTestIterationStart"}, vec[2].c_str());\par
7126 \par
7127   vec.clear();\par
7128   TestEventListenersAccessor::GetRepeater(&listeners)->OnTestIterationEnd(\par
7129       *UnitTest::GetInstance(), 0);\par
7130   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJU" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_EQ}}}
(3U, vec.size());\par
7131   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "3rd.OnTestIterationEnd"}, vec[0].c_str());\par
7132   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "2nd.OnTestIterationEnd"}, vec[1].c_str());\par
7133   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "1st.OnTestIterationEnd"}, vec[2].c_str());\par
7134 \}\par
}
{
\ql
References TestEventListeners::Append(), ASSERT_EQ, vector< T >::clear(), EXPECT_STREQ, and vector< T >::size().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a2a1ece611968f69f9feb86f639089511_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (EventListenerTest , default_result_printer )}}
\par
{\bkmkstart AAAAAAAEHX}
{\bkmkend AAAAAAAEHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7185 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7185                                                 \{\par
7186   {\cf18 int} on_start_counter = 0;\par
7187   {\cf18 bool} is_destroyed = {\cf17 false};\par
7188   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
* listener = {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
(&on_start_counter, &is_destroyed);\par
7189 \par
7190   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUL" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListeners}}}
 listeners;\par
7191   TestEventListenersAccessor::SetDefaultResultPrinter(&listeners, listener);\par
7192 \par
7193   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(listener, listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUN" }{}}{\fldrslt {\cs37\ul\cf2 default_result_printer}}}
());\par
7194 \par
7195   TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(\par
7196       *UnitTest::GetInstance());\par
7197 \par
7198   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(1, on_start_counter);\par
7199 \par
7200   {\cf20 // Replacing default_result_printer with something else should remove it}\par
7201   {\cf20 // from the list and destroy it.}\par
7202   TestEventListenersAccessor::SetDefaultResultPrinter(&listeners, NULL);\par
7203 \par
7204   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUN" }{}}{\fldrslt {\cs37\ul\cf2 default_result_printer}}}
() == NULL);\par
7205   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(is_destroyed);\par
7206 \par
7207   {\cf20 // After broadcasting an event the counter is still the same, indicating}\par
7208   {\cf20 // the listener is not in the list anymore.}\par
7209   TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(\par
7210       *UnitTest::GetInstance());\par
7211   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(1, on_start_counter);\par
7212 \}\par
}
{
\ql
References TestEventListeners::default_result_printer(), EXPECT_EQ, and EXPECT_TRUE.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a6fa482480599861df0c182c4d4229133_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (EventListenerTest , default_xml_generator )}}
\par
{\bkmkstart AAAAAAAEHY}
{\bkmkend AAAAAAAEHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7244 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7244                                                \{\par
7245   {\cf18 int} on_start_counter = 0;\par
7246   {\cf18 bool} is_destroyed = {\cf17 false};\par
7247   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
* listener = {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
(&on_start_counter, &is_destroyed);\par
7248 \par
7249   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUL" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListeners}}}
 listeners;\par
7250   TestEventListenersAccessor::SetDefaultXmlGenerator(&listeners, listener);\par
7251 \par
7252   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(listener, listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUO" }{}}{\fldrslt {\cs37\ul\cf2 default_xml_generator}}}
());\par
7253 \par
7254   TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(\par
7255       *UnitTest::GetInstance());\par
7256 \par
7257   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(1, on_start_counter);\par
7258 \par
7259   {\cf20 // Replacing default_xml_generator with something else should remove it}\par
7260   {\cf20 // from the list and destroy it.}\par
7261   TestEventListenersAccessor::SetDefaultXmlGenerator(&listeners, NULL);\par
7262 \par
7263   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUO" }{}}{\fldrslt {\cs37\ul\cf2 default_xml_generator}}}
() == NULL);\par
7264   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(is_destroyed);\par
7265 \par
7266   {\cf20 // After broadcasting an event the counter is still the same, indicating}\par
7267   {\cf20 // the listener is not in the list anymore.}\par
7268   TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(\par
7269       *UnitTest::GetInstance());\par
7270   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(1, on_start_counter);\par
7271 \}\par
}
{
\ql
References TestEventListeners::default_xml_generator(), EXPECT_EQ, and EXPECT_TRUE.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_aff2c25cbedbe72d8bb0162bc1bd0fece_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (EventListenerTest , RemovingDefaultResultPrinterWorks )}}
\par
{\bkmkstart AAAAAAAEHZ}
{\bkmkend AAAAAAAEHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7216 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7216                                                            \{\par
7217   {\cf18 int} on_start_counter = 0;\par
7218   {\cf18 bool} is_destroyed = {\cf17 false};\par
7219   {\cf20 // Although Append passes the ownership of this object to the list,}\par
7220   {\cf20 // the following calls release it, and we need to delete it before the}\par
7221   {\cf20 // test ends.}\par
7222   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
* listener = {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
(&on_start_counter, &is_destroyed);\par
7223   \{\par
7224     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUL" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListeners}}}
 listeners;\par
7225     TestEventListenersAccessor::SetDefaultResultPrinter(&listeners, listener);\par
7226 \par
7227     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(listener, listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUP" }{}}{\fldrslt {\cs37\ul\cf2 Release}}}
(listener));\par
7228     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUN" }{}}{\fldrslt {\cs37\ul\cf2 default_result_printer}}}
() == NULL);\par
7229     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(is_destroyed);\par
7230 \par
7231     {\cf20 // Broadcasting events now should not affect default_result_printer.}\par
7232     TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(\par
7233         *UnitTest::GetInstance());\par
7234     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(0, on_start_counter);\par
7235   \}\par
7236   {\cf20 // Destroying the list should not affect the listener now, too.}\par
7237   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(is_destroyed);\par
7238   {\cf17 delete} listener;\par
7239 \}\par
}
{
\ql
References TestEventListeners::default_result_printer(), EXPECT_EQ, EXPECT_FALSE, EXPECT_TRUE, and TestEventListeners::Release().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a32187fe0e1d4620d0ed5a7c6cc7254b8_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (EventListenerTest , RemovingDefaultXmlGeneratorWorks )}}
\par
{\bkmkstart AAAAAAAEIA}
{\bkmkend AAAAAAAEIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7275 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7275                                                           \{\par
7276   {\cf18 int} on_start_counter = 0;\par
7277   {\cf18 bool} is_destroyed = {\cf17 false};\par
7278   {\cf20 // Although Append passes the ownership of this object to the list,}\par
7279   {\cf20 // the following calls release it, and we need to delete it before the}\par
7280   {\cf20 // test ends.}\par
7281   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
* listener = {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
(&on_start_counter, &is_destroyed);\par
7282   \{\par
7283     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUL" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListeners}}}
 listeners;\par
7284     TestEventListenersAccessor::SetDefaultXmlGenerator(&listeners, listener);\par
7285 \par
7286     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(listener, listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUP" }{}}{\fldrslt {\cs37\ul\cf2 Release}}}
(listener));\par
7287     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUO" }{}}{\fldrslt {\cs37\ul\cf2 default_xml_generator}}}
() == NULL);\par
7288     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(is_destroyed);\par
7289 \par
7290     {\cf20 // Broadcasting events now should not affect default_xml_generator.}\par
7291     TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(\par
7292         *UnitTest::GetInstance());\par
7293     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(0, on_start_counter);\par
7294   \}\par
7295   {\cf20 // Destroying the list should not affect the listener now, too.}\par
7296   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(is_destroyed);\par
7297   {\cf17 delete} listener;\par
7298 \}\par
}
{
\ql
References TestEventListeners::default_xml_generator(), EXPECT_EQ, EXPECT_FALSE, EXPECT_TRUE, and TestEventListeners::Release().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a77647d09c995f09d06e2f02b13277c44_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (EventListenerTest , SuppressEventForwarding )}}
\par
{\bkmkstart AAAAAAAEIB}
{\bkmkend AAAAAAAEIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7159 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7159                                                  \{\par
7160   {\cf18 int} on_start_counter = 0;\par
7161   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
* listener = {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
(&on_start_counter, NULL);\par
7162 \par
7163   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUL" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListeners}}}
 listeners;\par
7164   listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUM" }{}}{\fldrslt {\cs37\ul\cf2 Append}}}
(listener);\par
7165   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKY" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_TRUE}}}
(TestEventListenersAccessor::EventForwardingEnabled(listeners));\par
7166   TestEventListenersAccessor::SuppressEventForwarding(&listeners);\par
7167   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJW" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_FALSE}}}
(TestEventListenersAccessor::EventForwardingEnabled(listeners));\par
7168   TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(\par
7169       *UnitTest::GetInstance());\par
7170   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(0, on_start_counter);\par
7171 \}\par
}
{
\ql
References TestEventListeners::Append(), ASSERT_FALSE, ASSERT_TRUE, and EXPECT_EQ.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_abdd2f070281db35988b7f6c22f2623e7_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (GetCurrentOsStackTraceExceptTopTest , ReturnsTheStackTrace )}}
\par
{\bkmkstart AAAAAAAEIV}
{\bkmkend AAAAAAAEIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6891 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6891                                                                 \{\par
6892   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUQ" }{}}{\fldrslt {\cs37\ul\cf2 testing::UnitTest}}}
* {\cf17 const} unit_test = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUR" }{}}{\fldrslt {\cs37\ul\cf2 testing::UnitTest::GetInstance}}}
();\par
6893 \par
6894   {\cf20 // We don't have a stack walker in Google Test yet.}\par
6895   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 ""}, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXS" }{}}{\fldrslt {\cs37\ul\cf2 GetCurrentOsStackTraceExceptTop}}}
(unit_test, 0).c_str());\par
6896   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 ""}, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXS" }{}}{\fldrslt {\cs37\ul\cf2 GetCurrentOsStackTraceExceptTop}}}
(unit_test, 1).c_str());\par
6897 \}\par
}
{
\ql
References EXPECT_STREQ, testing::internal::GetCurrentOsStackTraceExceptTop(), and UnitTest::GetInstance().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a386c193fa342a6cb3a88ffe4751a264b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (GTestReferenceToConstTest , Works )}}
\par
{\bkmkstart AAAAAAAEJD}
{\bkmkend AAAAAAAEJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7480 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7480                                        \{\par
7481   TestGTestReferenceToConst<const char&, char>();\par
7482   TestGTestReferenceToConst<const int&, const int>();\par
7483   TestGTestReferenceToConst<const double&, double>();\par
7484   TestGTestReferenceToConst<const std::string&, const std::string&>();\par
7485 \}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (HasFailureTest , ReturnsFalseWhenThereIsNoFailure )}}
\par
{\bkmkstart AAAAAAAEJE}
{\bkmkend AAAAAAAEJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6943 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6943                                                        \{\par
6944   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(HasFailure());\par
6945 \}\par
}
{
\ql
References EXPECT_FALSE.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (HasFailureTest , ReturnsTrueWhenThereAreFatalAndNonfatalFailures )}}
\par
{\bkmkstart AAAAAAAEJF}
{\bkmkend AAAAAAAEJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6961 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6961                                                                       \{\par
6962   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDJ" }{}}{\fldrslt {\cs37\ul\cf2 FailFatally}}}
();\par
6963   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJN" }{}}{\fldrslt {\cs37\ul\cf2 ADD_FAILURE}}}
();\par
6964   {\cf17 const} {\cf18 bool} has_failure = HasFailure();\par
6965   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDA" }{}}{\fldrslt {\cs37\ul\cf2 ClearCurrentTestPartResults}}}
();\par
6966   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(has_failure);\par
6967 \}\par
}
{
\ql
References ADD_FAILURE, anonymous_namespace\{gtest_unittest.cc\}::ClearCurrentTestPartResults(), EXPECT_TRUE, and FailFatally().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a80bc4f563ed06ee6b84f1370744fd3e6_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (HasFailureTest , ReturnsTrueWhenThereIsFatalFailure )}}
\par
{\bkmkstart AAAAAAAEJG}
{\bkmkend AAAAAAAEJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6947 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6947                                                          \{\par
6948   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDJ" }{}}{\fldrslt {\cs37\ul\cf2 FailFatally}}}
();\par
6949   {\cf17 const} {\cf18 bool} has_failure = HasFailure();\par
6950   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDA" }{}}{\fldrslt {\cs37\ul\cf2 ClearCurrentTestPartResults}}}
();\par
6951   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(has_failure);\par
6952 \}\par
}
{
\ql
References anonymous_namespace\{gtest_unittest.cc\}::ClearCurrentTestPartResults(), EXPECT_TRUE, and FailFatally().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a3226e1e613be7a832888a4a8f57fb02e_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (HasFailureTest , ReturnsTrueWhenThereIsNonfatalFailure )}}
\par
{\bkmkstart AAAAAAAEJH}
{\bkmkend AAAAAAAEJH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6954 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6954                                                             \{\par
6955   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJN" }{}}{\fldrslt {\cs37\ul\cf2 ADD_FAILURE}}}
();\par
6956   {\cf17 const} {\cf18 bool} has_failure = HasFailure();\par
6957   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDA" }{}}{\fldrslt {\cs37\ul\cf2 ClearCurrentTestPartResults}}}
();\par
6958   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(has_failure);\par
6959 \}\par
}
{
\ql
References ADD_FAILURE, anonymous_namespace\{gtest_unittest.cc\}::ClearCurrentTestPartResults(), and EXPECT_TRUE.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_af4d5faf224cfe1acb3d49612a4659b3b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (HasFailureTest , WorksOutsideOfTestBody )}}
\par
{\bkmkstart AAAAAAAEJI}
{\bkmkend AAAAAAAEJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6972 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6972                                              \{\par
6973   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDL" }{}}{\fldrslt {\cs37\ul\cf2 HasFailureHelper}}}
());\par
6974 \}\par
}
{
\ql
References EXPECT_FALSE, and HasFailureHelper().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a4ff927d7677fcdff6fd6af7e27c6aab3_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (HasFailureTest , WorksOutsideOfTestBody2 )}}
\par
{\bkmkstart AAAAAAAEJJ}
{\bkmkend AAAAAAAEJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6976 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6976                                               \{\par
6977   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJN" }{}}{\fldrslt {\cs37\ul\cf2 ADD_FAILURE}}}
();\par
6978   {\cf17 const} {\cf18 bool} has_failure = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDL" }{}}{\fldrslt {\cs37\ul\cf2 HasFailureHelper}}}
();\par
6979   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDA" }{}}{\fldrslt {\cs37\ul\cf2 ClearCurrentTestPartResults}}}
();\par
6980   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(has_failure);\par
6981 \}\par
}
{
\ql
References ADD_FAILURE, anonymous_namespace\{gtest_unittest.cc\}::ClearCurrentTestPartResults(), EXPECT_TRUE, and HasFailureHelper().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_acb72846e1f7181d831d760128a763e08_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (HasNonfatalFailureTest , ReturnsFalseWhenThereIsNoFailure )}}
\par
{\bkmkstart AAAAAAAEJK}
{\bkmkend AAAAAAAEJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6899 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6899                                                                \{\par
6900   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(HasNonfatalFailure());\par
6901 \}\par
}
{
\ql
References EXPECT_FALSE.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (HasNonfatalFailureTest , ReturnsFalseWhenThereIsOnlyFatalFailure )}}
\par
{\bkmkstart AAAAAAAEJL}
{\bkmkend AAAAAAAEJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6905 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6905                                                                       \{\par
6906   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDJ" }{}}{\fldrslt {\cs37\ul\cf2 FailFatally}}}
();\par
6907   {\cf17 const} {\cf18 bool} has_nonfatal_failure = HasNonfatalFailure();\par
6908   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDA" }{}}{\fldrslt {\cs37\ul\cf2 ClearCurrentTestPartResults}}}
();\par
6909   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(has_nonfatal_failure);\par
6910 \}\par
}
{
\ql
References anonymous_namespace\{gtest_unittest.cc\}::ClearCurrentTestPartResults(), EXPECT_FALSE, and FailFatally().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_ad25e0382fb27cfff590e2c104c504dff_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (HasNonfatalFailureTest , ReturnsTrueWhenThereAreFatalAndNonfatalFailures )}}
\par
{\bkmkstart AAAAAAAEJM}
{\bkmkend AAAAAAAEJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6919 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6919                                                                               \{\par
6920   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDJ" }{}}{\fldrslt {\cs37\ul\cf2 FailFatally}}}
();\par
6921   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJN" }{}}{\fldrslt {\cs37\ul\cf2 ADD_FAILURE}}}
();\par
6922   {\cf17 const} {\cf18 bool} has_nonfatal_failure = HasNonfatalFailure();\par
6923   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDA" }{}}{\fldrslt {\cs37\ul\cf2 ClearCurrentTestPartResults}}}
();\par
6924   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(has_nonfatal_failure);\par
6925 \}\par
}
{
\ql
References ADD_FAILURE, anonymous_namespace\{gtest_unittest.cc\}::ClearCurrentTestPartResults(), EXPECT_TRUE, and FailFatally().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a7df9189826b8aab71331bb7fec0b57cb_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (HasNonfatalFailureTest , ReturnsTrueWhenThereIsNonfatalFailure )}}
\par
{\bkmkstart AAAAAAAEJN}
{\bkmkend AAAAAAAEJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6912 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6912                                                                     \{\par
6913   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJN" }{}}{\fldrslt {\cs37\ul\cf2 ADD_FAILURE}}}
();\par
6914   {\cf17 const} {\cf18 bool} has_nonfatal_failure = HasNonfatalFailure();\par
6915   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDA" }{}}{\fldrslt {\cs37\ul\cf2 ClearCurrentTestPartResults}}}
();\par
6916   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(has_nonfatal_failure);\par
6917 \}\par
}
{
\ql
References ADD_FAILURE, anonymous_namespace\{gtest_unittest.cc\}::ClearCurrentTestPartResults(), and EXPECT_TRUE.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a1d7caf8788fecd939c4a4e23c23e52ff_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (HasNonfatalFailureTest , WorksOutsideOfTestBody )}}
\par
{\bkmkstart AAAAAAAEJO}
{\bkmkend AAAAAAAEJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6932 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6932                                                      \{\par
6933   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDM" }{}}{\fldrslt {\cs37\ul\cf2 HasNonfatalFailureHelper}}}
());\par
6934 \}\par
}
{
\ql
References EXPECT_FALSE, and HasNonfatalFailureHelper().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a97a31bbf9d4d1f7f36021db7efed056a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (HasNonfatalFailureTest , WorksOutsideOfTestBody2 )}}
\par
{\bkmkstart AAAAAAAEJP}
{\bkmkend AAAAAAAEJP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6936 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6936                                                       \{\par
6937   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJN" }{}}{\fldrslt {\cs37\ul\cf2 ADD_FAILURE}}}
();\par
6938   {\cf17 const} {\cf18 bool} has_nonfatal_failure = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDM" }{}}{\fldrslt {\cs37\ul\cf2 HasNonfatalFailureHelper}}}
();\par
6939   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEDA" }{}}{\fldrslt {\cs37\ul\cf2 ClearCurrentTestPartResults}}}
();\par
6940   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(has_nonfatal_failure);\par
6941 \}\par
}
{
\ql
References ADD_FAILURE, anonymous_namespace\{gtest_unittest.cc\}::ClearCurrentTestPartResults(), EXPECT_TRUE, and HasNonfatalFailureHelper().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a1d352f5ce3c51840695c59733f8f642a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ImplicitlyConvertibleTest , ValueIsCompileTimeConstant )}}
\par
{\bkmkstart AAAAAAAEJQ}
{\bkmkend AAAAAAAEJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7488 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7488                                                             \{\par
7489   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQN" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_COMPILE_ASSERT_}}}
(({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUS" }{}}{\fldrslt {\cs37\ul\cf2 ImplicitlyConvertible<int, int>::value}}}
), const_true);\par
7490   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQN" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_COMPILE_ASSERT_}}}
((!{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUS" }{}}{\fldrslt {\cs37\ul\cf2 ImplicitlyConvertible<void*, int*>::value}}}
),\par
7491                         const_false);\par
7492 \}\par
}
{
\ql
References GTEST_COMPILE_ASSERT_.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ImplicitlyConvertibleTest , ValueIsFalseWhenNotConvertible )}}
\par
{\bkmkstart AAAAAAAEJR}
{\bkmkend AAAAAAAEJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7509 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7509                                                                 \{\par
7510   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUS" }{}}{\fldrslt {\cs37\ul\cf2 ImplicitlyConvertible<double, int*>::value}}}
));\par
7511   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUS" }{}}{\fldrslt {\cs37\ul\cf2 ImplicitlyConvertible<void*, int*>::value}}}
));\par
7512   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUS" }{}}{\fldrslt {\cs37\ul\cf2 ImplicitlyConvertible<const int*, int*>::value}}}
));\par
7513   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUS" }{}}{\fldrslt {\cs37\ul\cf2 ImplicitlyConvertible}}}
<{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBJ" }{}}{\fldrslt {\cs37\ul\cf2 ConversionHelperBase}}}
&,\par
7514                                       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBK" }{}}{\fldrslt {\cs37\ul\cf2 ConversionHelperDerived}}}
&>::value));\par
7515 \}\par
}
{
\ql
References EXPECT_FALSE.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ImplicitlyConvertibleTest , ValueIsTrueWhenConvertible )}}
\par
{\bkmkstart AAAAAAAEJS}
{\bkmkend AAAAAAAEJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7496 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7496                                                             \{\par
7497   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUS" }{}}{\fldrslt {\cs37\ul\cf2 ImplicitlyConvertible<int, double>::value}}}
));\par
7498   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUS" }{}}{\fldrslt {\cs37\ul\cf2 ImplicitlyConvertible<double, int>::value}}}
));\par
7499   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUS" }{}}{\fldrslt {\cs37\ul\cf2 ImplicitlyConvertible<int*, void*>::value}}}
));\par
7500   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUS" }{}}{\fldrslt {\cs37\ul\cf2 ImplicitlyConvertible<int*, const int*>::value}}}
));\par
7501   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUS" }{}}{\fldrslt {\cs37\ul\cf2 ImplicitlyConvertible}}}
<{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBK" }{}}{\fldrslt {\cs37\ul\cf2 ConversionHelperDerived}}}
&,\par
7502                                      {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBJ" }{}}{\fldrslt {\cs37\ul\cf2 ConversionHelperBase}}}
&>::value));\par
7503   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUS" }{}}{\fldrslt {\cs37\ul\cf2 ImplicitlyConvertible}}}
<{\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBJ" }{}}{\fldrslt {\cs37\ul\cf2 ConversionHelperBase}}}
,\par
7504                                      {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBJ" }{}}{\fldrslt {\cs37\ul\cf2 ConversionHelperBase}}}
>::value));\par
7505 \}\par
}
{
\ql
References EXPECT_TRUE.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (IsAProtocolMessageTest , ValueIsCompileTimeConstant )}}
\par
{\bkmkstart AAAAAAAEKA}
{\bkmkend AAAAAAAEKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7356 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7356                                                          \{\par
7357   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQN" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_COMPILE_ASSERT_}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUT" }{}}{\fldrslt {\cs37\ul\cf2 IsAProtocolMessage<ProtocolMessage>::value}}}
,\par
7358                         const_true);\par
7359   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQN" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_COMPILE_ASSERT_}}}
(!{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUT" }{}}{\fldrslt {\cs37\ul\cf2 IsAProtocolMessage<int>::value}}}
, const_false);\par
7360 \}\par
}
{
\ql
References GTEST_COMPILE_ASSERT_.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (IsAProtocolMessageTest , ValueIsFalseWhenTypeIsNotAProtocolMessage )}}
\par
{\bkmkstart AAAAAAAEKB}
{\bkmkend AAAAAAAEKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7371 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7371                                                                         \{\par
7372   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUT" }{}}{\fldrslt {\cs37\ul\cf2 IsAProtocolMessage<int>::value}}}
);\par
7373   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUT" }{}}{\fldrslt {\cs37\ul\cf2 IsAProtocolMessage<const ConversionHelperBase>::value}}}
);\par
7374 \}\par
}
{
\ql
References EXPECT_FALSE.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (IsAProtocolMessageTest , ValueIsTrueWhenTypeIsAProtocolMessage )}}
\par
{\bkmkstart AAAAAAAEKC}
{\bkmkend AAAAAAAEKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7364 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7364                                                                     \{\par
7365   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUT" }{}}{\fldrslt {\cs37\ul\cf2 IsAProtocolMessage< ::proto2::Message>::value}}}
);\par
7366   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUT" }{}}{\fldrslt {\cs37\ul\cf2 IsAProtocolMessage<ProtocolMessage>::value}}}
);\par
7367 \}\par
}
{
\ql
References EXPECT_TRUE.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (IsContainerTestTest , WorksForContainer )}}
\par
{\bkmkstart AAAAAAAEKD}
{\bkmkend AAAAAAAEKD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7527 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7527                                              \{\par
7528   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
({\cf17 sizeof}({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWU" }{}}{\fldrslt {\cs37\ul\cf2 IsContainer}}}
),\par
7529             {\cf17 sizeof}({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXU" }{}}{\fldrslt {\cs37\ul\cf2 IsContainerTest}}}
<std::vector<bool> >(0)));\par
7530   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
({\cf17 sizeof}({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWU" }{}}{\fldrslt {\cs37\ul\cf2 IsContainer}}}
),\par
7531             {\cf17 sizeof}({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXU" }{}}{\fldrslt {\cs37\ul\cf2 IsContainerTest}}}
<std::map<int, double> >(0)));\par
7532 \}\par
}
{
\ql
References EXPECT_EQ, and testing::internal::IsContainerTest().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a28c741995150722b00c039ead2b8ab04_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (IsContainerTestTest , WorksForNonContainer )}}
\par
{\bkmkstart AAAAAAAEKE}
{\bkmkend AAAAAAAEKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7521 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7521                                                 \{\par
7522   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
({\cf17 sizeof}({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWV" }{}}{\fldrslt {\cs37\ul\cf2 IsNotContainer}}}
), {\cf17 sizeof}(IsContainerTest<int>(0)));\par
7523   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
({\cf17 sizeof}({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWV" }{}}{\fldrslt {\cs37\ul\cf2 IsNotContainer}}}
), {\cf17 sizeof}({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXU" }{}}{\fldrslt {\cs37\ul\cf2 IsContainerTest}}}
<{\cf18 char}[5]>(0)));\par
7524   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
({\cf17 sizeof}({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWV" }{}}{\fldrslt {\cs37\ul\cf2 IsNotContainer}}}
), {\cf17 sizeof}(IsContainerTest<NonContainer>(0)));\par
7525 \}\par
}
{
\ql
References EXPECT_EQ, and testing::internal::IsContainerTest().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a819ddb03c072631f5606a9ddf4be5ef9_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (MessageTest , CanStreamUserTypeInGlobalNameSpace )}}
\par
{\bkmkstart AAAAAAAEKS}
{\bkmkend AAAAAAAEKS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 5171 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5171                                                       \{\par
5172   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABGC" }{}}{\fldrslt {\cs37\ul\cf2 Message}}}
 msg;\par
5173   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABTK" }{}}{\fldrslt {\cs37\ul\cf2 Base}}}
 a(1);\par
5174 \par
5175   msg << a << &a;  {\cf20 // Uses ::operator<<.}\par
5176   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "1(1)"}, msg.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUU" }{}}{\fldrslt {\cs37\ul\cf2 GetString}}}
().c_str());\par
5177 \}\par
}
{
\ql
References string::c_str(), EXPECT_STREQ, and Message::GetString().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a3cfb4c4e94683c4677706c53ab52fb8e_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (MessageTest , CanStreamUserTypeInUnnamedNameSpace )}}
\par
{\bkmkstart AAAAAAAEKT}
{\bkmkend AAAAAAAEKT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 5196 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5196                                                        \{\par
5197   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABGC" }{}}{\fldrslt {\cs37\ul\cf2 Message}}}
 msg;\par
5198   MyTypeInUnnamedNameSpace a(1);\par
5199 \par
5200   msg << a << &a;  {\cf20 // Uses <unnamed_namespace>::operator<<.}\par
5201   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "1(1)"}, msg.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUU" }{}}{\fldrslt {\cs37\ul\cf2 GetString}}}
().c_str());\par
5202 \}\par
}
{
\ql
References string::c_str(), EXPECT_STREQ, and Message::GetString().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_ab9dfac778014c6214ff30da9c74cbffe_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (MessageTest , CanStreamUserTypeInUserNameSpace )}}
\par
{\bkmkstart AAAAAAAEKU}
{\bkmkend AAAAAAAEKU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 5221 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5221                                                     \{\par
5222   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABGC" }{}}{\fldrslt {\cs37\ul\cf2 Message}}}
 msg;\par
5223   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUV" }{}}{\fldrslt {\cs37\ul\cf2 namespace1::MyTypeInNameSpace1}}}
 a(1);\par
5224 \par
5225   msg << a << &a;  {\cf20 // Uses namespace1::operator<<.}\par
5226   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "1(1)"}, msg.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUU" }{}}{\fldrslt {\cs37\ul\cf2 GetString}}}
().c_str());\par
5227 \}\par
}
{
\ql
References string::c_str(), EXPECT_STREQ, and Message::GetString().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_ac87850465b99bd7121b521b2da5966f4_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (MessageTest , CanStreamUserTypeInUserNameSpaceWithStreamOperatorInGlobal )}}
\par
{\bkmkstart AAAAAAAEKV}
{\bkmkend AAAAAAAEKV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 5246 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5246                                                                               \{\par
5247   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABGC" }{}}{\fldrslt {\cs37\ul\cf2 Message}}}
 msg;\par
5248   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEI" }{}}{\fldrslt {\cs37\ul\cf2 namespace2::MyTypeInNameSpace2}}}
 a(1);\par
5249 \par
5250   msg << a << &a;  {\cf20 // Uses ::operator<<.}\par
5251   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "1(1)"}, msg.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUU" }{}}{\fldrslt {\cs37\ul\cf2 GetString}}}
().c_str());\par
5252 \}\par
}
{
\ql
References string::c_str(), EXPECT_STREQ, and Message::GetString().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_ad2b886ecfee880b5012c8d41b448f110_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (MessageTest , NullPointers )}}
\par
{\bkmkstart AAAAAAAEKW}
{\bkmkend AAAAAAAEKW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 5255 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5255                                 \{\par
5256   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABGC" }{}}{\fldrslt {\cs37\ul\cf2 Message}}}
 msg;\par
5257   {\cf18 char}* {\cf17 const} p1 = NULL;\par
5258   {\cf18 unsigned} {\cf18 char}* {\cf17 const} p2 = NULL;\par
5259   {\cf18 int}* p3 = NULL;\par
5260   {\cf18 double}* p4 = NULL;\par
5261   {\cf18 bool}* p5 = NULL;\par
5262   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABGC" }{}}{\fldrslt {\cs37\ul\cf2 Message}}}
* p6 = NULL;\par
5263 \par
5264   msg << p1 << p2 << p3 << p4 << p5 << p6;\par
5265   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKS" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_STREQ}}}
({\cf22 "(null)(null)(null)(null)(null)(null)"},\par
5266                msg.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUU" }{}}{\fldrslt {\cs37\ul\cf2 GetString}}}
().c_str());\par
5267 \}\par
}
{
\ql
References ASSERT_STREQ, string::c_str(), and Message::GetString().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a94b1c12b49eabc12e7418733576df02a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (MessageTest , WideStrings )}}
\par
{\bkmkstart AAAAAAAEKX}
{\bkmkend AAAAAAAEKX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 5270 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5270                                \{\par
5271   {\cf20 // Streams a NULL of type const wchar_t*.}\par
5272   {\cf17 const} {\cf18 wchar_t}* const_wstr = NULL;\par
5273   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "(null)"},\par
5274                ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABGC" }{}}{\fldrslt {\cs37\ul\cf2 Message}}}
() << const_wstr).GetString().c_str());\par
5275 \par
5276   {\cf20 // Streams a NULL of type wchar_t*.}\par
5277   {\cf18 wchar_t}* wstr = NULL;\par
5278   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "(null)"},\par
5279                ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABGC" }{}}{\fldrslt {\cs37\ul\cf2 Message}}}
() << wstr).GetString().c_str());\par
5280 \par
5281   {\cf20 // Streams a non-NULL of type const wchar_t*.}\par
5282   const_wstr = L{\cf22 "abc\\x8119"};\par
5283   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "abc\\xe8\\x84\\x99"},\par
5284                ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABGC" }{}}{\fldrslt {\cs37\ul\cf2 Message}}}
() << const_wstr).GetString().c_str());\par
5285 \par
5286   {\cf20 // Streams a non-NULL of type wchar_t*.}\par
5287   wstr = {\cf17 const_cast<}{\cf18 wchar_t}*{\cf17 >}(const_wstr);\par
5288   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "abc\\xe8\\x84\\x99"},\par
5289                ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABGC" }{}}{\fldrslt {\cs37\ul\cf2 Message}}}
() << wstr).GetString().c_str());\par
5290 \}\par
}
{
\ql
References EXPECT_STREQ.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (NativeArrayTest , ConstructorFromArrayWorks )}}
\par
{\bkmkstart AAAAAAAEKY}
{\bkmkend AAAAAAAEKY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7618 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7618                                                  \{\par
7619   {\cf17 const} {\cf18 int} a[3] = \{ 0, 1, 2 \};\par
7620   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWA" }{}}{\fldrslt {\cs37\ul\cf2 NativeArray<int>}}}
 na(a, 3, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUW" }{}}{\fldrslt {\cs37\ul\cf2 RelationToSourceReference}}}
());\par
7621   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(3U, na.size());\par
7622   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(a, na.begin());\par
7623 \}\par
}
{
\ql
References NativeArray< Element >::begin(), EXPECT_EQ, and NativeArray< Element >::size().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_acba0839db5cf02cdbd658b9fb810066b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (NativeArrayTest , CreatesAndDeletesCopyOfArrayWhenAskedTo )}}
\par
{\bkmkstart AAAAAAAEKZ}
{\bkmkend AAAAAAAEKZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7625 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7625                                                                \{\par
7626   {\cf17 typedef} {\cf18 int} Array[2];\par
7627   Array* a = {\cf17 new} Array[1];\par
7628   (*a)[0] = 0;\par
7629   (*a)[1] = 1;\par
7630   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWA" }{}}{\fldrslt {\cs37\ul\cf2 NativeArray<int>}}}
 na(*a, 2, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWB" }{}}{\fldrslt {\cs37\ul\cf2 RelationToSourceCopy}}}
());\par
7631   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLJ" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_NE}}}
(*a, na.begin());\par
7632   {\cf17 delete}[] a;\par
7633   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(0, na.begin()[0]);\par
7634   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(1, na.begin()[1]);\par
7635 \par
7636   {\cf20 // We rely on the heap checker to verify that na deletes the copy of}\par
7637   {\cf20 // array.}\par
7638 \}\par
}
{
\ql
References NativeArray< Element >::begin(), EXPECT_EQ, and EXPECT_NE.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a227737052f993da5fe2f3294b7f8d184_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (NativeArrayTest , MethodsWork )}}
\par
{\bkmkstart AAAAAAAELA}
{\bkmkend AAAAAAAELA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7648 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7648                                    \{\par
7649   {\cf17 const} {\cf18 int} a[3] = \{ 0, 1, 2 \};\par
7650   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWA" }{}}{\fldrslt {\cs37\ul\cf2 NativeArray<int>}}}
 na(a, 3, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWB" }{}}{\fldrslt {\cs37\ul\cf2 RelationToSourceCopy}}}
());\par
7651   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJU" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_EQ}}}
(3U, na.size());\par
7652   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(3, na.end() - na.begin());\par
7653 \par
7654   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWA" }{}}{\fldrslt {\cs37\ul\cf2 NativeArray<int>::const_iterator}}}
 it = na.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUX" }{}}{\fldrslt {\cs37\ul\cf2 begin}}}
();\par
7655   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(0, *it);\par
7656   ++it;\par
7657   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(1, *it);\par
7658   it++;\par
7659   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(2, *it);\par
7660   ++it;\par
7661   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(na.end(), it);\par
7662 \par
7663   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(na == na);\par
7664 \par
7665   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWA" }{}}{\fldrslt {\cs37\ul\cf2 NativeArray<int>}}}
 na2(a, 3, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUW" }{}}{\fldrslt {\cs37\ul\cf2 RelationToSourceReference}}}
());\par
7666   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(na == na2);\par
7667 \par
7668   {\cf17 const} {\cf18 int} b1[3] = \{ 0, 1, 1 \};\par
7669   {\cf17 const} {\cf18 int} b2[4] = \{ 0, 1, 2, 3 \};\par
7670   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(na == {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWA" }{}}{\fldrslt {\cs37\ul\cf2 NativeArray<int>}}}
(b1, 3, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUW" }{}}{\fldrslt {\cs37\ul\cf2 RelationToSourceReference}}}
()));\par
7671   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(na == {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWA" }{}}{\fldrslt {\cs37\ul\cf2 NativeArray<int>}}}
(b2, 4, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWB" }{}}{\fldrslt {\cs37\ul\cf2 RelationToSourceCopy}}}
()));\par
7672 \}\par
}
{
\ql
References ASSERT_EQ, NativeArray< Element >::begin(), NativeArray< Element >::end(), EXPECT_EQ, EXPECT_FALSE, EXPECT_TRUE, and NativeArray< Element >::size().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a5f14e3d45e8edc2d22d4e98e7c1422b9_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (NativeArrayTest , TypeMembersAreCorrect )}}
\par
{\bkmkstart AAAAAAAELB}
{\bkmkend AAAAAAAELB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7640 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7640                                              \{\par
7641   StaticAssertTypeEq<char, NativeArray<char>::value_type>();\par
7642   StaticAssertTypeEq<int[2], NativeArray<int[2]>::value_type>();\par
7643 \par
7644   StaticAssertTypeEq<const char*, NativeArray<char>::const_iterator>();\par
7645   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNY" }{}}{\fldrslt {\cs37\ul\cf2 StaticAssertTypeEq}}}
<{\cf17 const} bool(*)[2], {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWA" }{}}{\fldrslt {\cs37\ul\cf2 NativeArray<bool[2]>::const_iterator}}}
>();\par
7646 \}\par
}
{
\ql
References testing::StaticAssertTypeEq().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a1f2578d4ac6aeb87d0c7c9574f79ed0c_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (NativeArrayTest , WorksForTwoDimensionalArray )}}
\par
{\bkmkstart AAAAAAAELC}
{\bkmkend AAAAAAAELC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7674 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7674                                                    \{\par
7675   {\cf17 const} {\cf18 char} a[2][3] = \{ {\cf22 "hi"}, {\cf22 "lo"} \};\par
7676   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABWA" }{}}{\fldrslt {\cs37\ul\cf2 NativeArray<char[3]>}}}
 na(a, 2, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUW" }{}}{\fldrslt {\cs37\ul\cf2 RelationToSourceReference}}}
());\par
7677   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJU" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_EQ}}}
(2U, na.size());\par
7678   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(a, na.begin());\par
7679 \}\par
}
{
\ql
References ASSERT_EQ, NativeArray< Element >::begin(), EXPECT_EQ, and NativeArray< Element >::size().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a148c11619d001fac39dae12428534b00_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (RemoveConstTest , DoesNotAffectNonConstType )}}
\par
{\bkmkstart AAAAAAAELW}
{\bkmkend AAAAAAAELW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7409 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7409                                                  \{\par
7410   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<int, RemoveConst<int>::type}}}
>();\par
7411   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<char&, RemoveConst<char&>::type}}}
>();\par
7412 \}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (RemoveConstTest , MacroVersion )}}
\par
{\bkmkstart AAAAAAAELX}
{\bkmkend AAAAAAAELX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7428 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7428                                     \{\par
7429   TestGTestRemoveConst<int, int>();\par
7430   TestGTestRemoveConst<double&, double&>();\par
7431   TestGTestRemoveConst<char, const char>();\par
7432 \}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (RemoveConstTest , RemovesConst )}}
\par
{\bkmkstart AAAAAAAELY}
{\bkmkend AAAAAAAELY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7415 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7415                                     \{\par
7416   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<int, RemoveConst<const int>::type}}}
>();\par
7417   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<char[2], RemoveConst<const char[2]>::type}}}
>();\par
7418   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<char[2][3], RemoveConst<const char[2][3]>::type}}}
>();\par
7419 \}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (RemoveReferenceTest , DoesNotAffectNonReferenceType )}}
\par
{\bkmkstart AAAAAAAELZ}
{\bkmkend AAAAAAAELZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7384 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7384                                                          \{\par
7385   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<int, RemoveReference<int>::type}}}
>();\par
7386   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<const char, RemoveReference<const char>::type}}}
>();\par
7387 \}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (RemoveReferenceTest , MacroVersion )}}
\par
{\bkmkstart AAAAAAAEMA}
{\bkmkend AAAAAAAEMA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7402 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7402                                         \{\par
7403   TestGTestRemoveReference<int, int>();\par
7404   TestGTestRemoveReference<const char, const char&>();\par
7405 \}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (RemoveReferenceTest , RemovesReference )}}
\par
{\bkmkstart AAAAAAAEMB}
{\bkmkend AAAAAAAEMB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7390 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7390                                             \{\par
7391   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<int, RemoveReference<int&>::type}}}
>();\par
7392   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<const char, RemoveReference<const char&>::type}}}
>();\par
7393 \}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (RemoveReferenceToConstTest , Works )}}
\par
{\bkmkstart AAAAAAAEMC}
{\bkmkend AAAAAAAEMC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7441 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7441                                         \{\par
7442   TestGTestRemoveReferenceAndConst<int, int>();\par
7443   TestGTestRemoveReferenceAndConst<double, double&>();\par
7444   TestGTestRemoveReferenceAndConst<char, const char>();\par
7445   TestGTestRemoveReferenceAndConst<char, const char&>();\par
7446   TestGTestRemoveReferenceAndConst<const char*, const char*>();\par
7447 \}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (SkipPrefixTest , DoesNotSkipWhenPrefixDoesNotMatch )}}
\par
{\bkmkstart AAAAAAAEMF}
{\bkmkend AAAAAAAEMF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7695 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7695                                                         \{\par
7696   {\cf17 const} {\cf18 char}* {\cf17 const} str = {\cf22 "world"};\par
7697 \par
7698   {\cf17 const} {\cf18 char}* p = str;\par
7699   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXY" }{}}{\fldrslt {\cs37\ul\cf2 SkipPrefix}}}
({\cf22 "W"}, &p));\par
7700   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(str, p);\par
7701 \par
7702   p = str;\par
7703   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXY" }{}}{\fldrslt {\cs37\ul\cf2 SkipPrefix}}}
({\cf22 "world!"}, &p));\par
7704   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(str, p);\par
7705 \}\par
}
{
\ql
References EXPECT_EQ, EXPECT_FALSE, and testing::internal::SkipPrefix().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_afeb79bbd7756bbeca262cb79315856a4_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (SkipPrefixTest , SkipsWhenPrefixMatches )}}
\par
{\bkmkstart AAAAAAAEMG}
{\bkmkend AAAAAAAEMG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7683 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7683                                              \{\par
7684   {\cf17 const} {\cf18 char}* {\cf17 const} str = {\cf22 "hello"};\par
7685 \par
7686   {\cf17 const} {\cf18 char}* p = str;\par
7687   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXY" }{}}{\fldrslt {\cs37\ul\cf2 SkipPrefix}}}
({\cf22 ""}, &p));\par
7688   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(str, p);\par
7689 \par
7690   p = str;\par
7691   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABXY" }{}}{\fldrslt {\cs37\ul\cf2 SkipPrefix}}}
({\cf22 "hell"}, &p));\par
7692   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(str + 4, p);\par
7693 \}\par
}
{
\ql
References EXPECT_EQ, EXPECT_TRUE, and testing::internal::SkipPrefix().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a0c38bd27f49371439ed463c1bb44f444_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StaticAssertTypeEqTest , CompilesForEqualTypes )}}
\par
{\bkmkstart AAAAAAAEMH}
{\bkmkend AAAAAAAEMH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6886 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6886                                                     \{\par
6887   StaticAssertTypeEq<int, IntAlias>();\par
6888   StaticAssertTypeEq<int*, IntAlias*>();\par
6889 \}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StaticAssertTypeEqTest , WorksInClass )}}
\par
{\bkmkstart AAAAAAAEMI}
{\bkmkend AAAAAAAEMI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6878 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6878                                            \{\par
6879   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBR" }{}}{\fldrslt {\cs37\ul\cf2 StaticAssertTypeEqTestHelper<bool>}}}
();\par
6880 \}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StreamingAssertionsTest , FloatingPointEquals )}}
\par
{\bkmkstart AAAAAAAEMU}
{\bkmkend AAAAAAAEMU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6699 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6699                                                    \{\par
6700   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLD" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FLOAT_EQ}}}
(1.0, 1.0) << {\cf22 "unexpected failure"};\par
6701   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJX" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_FLOAT_EQ}}}
(1.0, 1.0) << {\cf22 "unexpected failure"};\par
6702   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIX" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_NONFATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLD" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FLOAT_EQ}}}
(0.0, 1.0) << {\cf22 "expected failure"},\par
6703                           {\cf22 "expected failure"});\par
6704   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJX" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_FLOAT_EQ}}}
(0.0, 1.0) << {\cf22 "expected failure"},\par
6705                        {\cf22 "expected failure"});\par
6706 \}\par
}
{
\ql
References ASSERT_FLOAT_EQ, EXPECT_FATAL_FAILURE, EXPECT_FLOAT_EQ, and EXPECT_NONFATAL_FAILURE.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StreamingAssertionsTest , IntegerEquals )}}
\par
{\bkmkstart AAAAAAAEMV}
{\bkmkend AAAAAAAEMV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6645 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6645                                              \{\par
6646   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(1, 1) << {\cf22 "unexpected failure"};\par
6647   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJU" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_EQ}}}
(1, 1) << {\cf22 "unexpected failure"};\par
6648   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIX" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_NONFATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(1, 2) << {\cf22 "expected failure"},\par
6649                           {\cf22 "expected failure"});\par
6650   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJU" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_EQ}}}
(1, 2) << {\cf22 "expected failure"},\par
6651                        {\cf22 "expected failure"});\par
6652 \}\par
}
{
\ql
References ASSERT_EQ, EXPECT_EQ, EXPECT_FATAL_FAILURE, and EXPECT_NONFATAL_FAILURE.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StreamingAssertionsTest , IntegerLessThan )}}
\par
{\bkmkstart AAAAAAAEMW}
{\bkmkend AAAAAAAEMW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6654 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6654                                                \{\par
6655   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLI" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_LT}}}
(1, 2) << {\cf22 "unexpected failure"};\par
6656   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKE" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_LT}}}
(1, 2) << {\cf22 "unexpected failure"};\par
6657   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIX" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_NONFATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLI" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_LT}}}
(2, 1) << {\cf22 "expected failure"},\par
6658                           {\cf22 "expected failure"});\par
6659   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKE" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_LT}}}
(2, 1) << {\cf22 "expected failure"},\par
6660                        {\cf22 "expected failure"});\par
6661 \}\par
}
{
\ql
References ASSERT_LT, EXPECT_FATAL_FAILURE, EXPECT_LT, and EXPECT_NONFATAL_FAILURE.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StreamingAssertionsTest , StringNotEqualIgnoringCase )}}
\par
{\bkmkstart AAAAAAAEMX}
{\bkmkend AAAAAAAEMX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6690 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6690                                                           \{\par
6691   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLO" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STRCASENE}}}
({\cf22 "foo"}, {\cf22 "bar"}) << {\cf22 "unexpected failure"};\par
6692   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKQ" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_STRCASENE}}}
({\cf22 "foo"}, {\cf22 "bar"}) << {\cf22 "unexpected failure"};\par
6693   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIX" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_NONFATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLO" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STRCASENE}}}
({\cf22 "foo"}, {\cf22 "FOO"}) << {\cf22 "expected failure"},\par
6694                           {\cf22 "expected failure"});\par
6695   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKQ" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_STRCASENE}}}
({\cf22 "bar"}, {\cf22 "BAR"}) << {\cf22 "expected failure"},\par
6696                        {\cf22 "expected failure"});\par
6697 \}\par
}
{
\ql
References ASSERT_STRCASENE, EXPECT_FATAL_FAILURE, EXPECT_NONFATAL_FAILURE, and EXPECT_STRCASENE.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StreamingAssertionsTest , StringsEqual )}}
\par
{\bkmkstart AAAAAAAEMY}
{\bkmkend AAAAAAAEMY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6663 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6663                                             \{\par
6664   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "foo"}, {\cf22 "foo"}) << {\cf22 "unexpected failure"};\par
6665   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKS" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_STREQ}}}
({\cf22 "foo"}, {\cf22 "foo"}) << {\cf22 "unexpected failure"};\par
6666   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIX" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_NONFATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLP" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STREQ}}}
({\cf22 "foo"}, {\cf22 "bar"}) << {\cf22 "expected failure"},\par
6667                           {\cf22 "expected failure"});\par
6668   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKS" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_STREQ}}}
({\cf22 "foo"}, {\cf22 "bar"}) << {\cf22 "expected failure"},\par
6669                        {\cf22 "expected failure"});\par
6670 \}\par
}
{
\ql
References ASSERT_STREQ, EXPECT_FATAL_FAILURE, EXPECT_NONFATAL_FAILURE, and EXPECT_STREQ.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StreamingAssertionsTest , StringsEqualIgnoringCase )}}
\par
{\bkmkstart AAAAAAAEMZ}
{\bkmkend AAAAAAAEMZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6681 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6681                                                         \{\par
6682   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLN" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STRCASEEQ}}}
({\cf22 "foo"}, {\cf22 "FOO"}) << {\cf22 "unexpected failure"};\par
6683   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKN" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_STRCASEEQ}}}
({\cf22 "foo"}, {\cf22 "FOO"}) << {\cf22 "unexpected failure"};\par
6684   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIX" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_NONFATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLN" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STRCASEEQ}}}
({\cf22 "foo"}, {\cf22 "bar"}) << {\cf22 "expected failure"},\par
6685                           {\cf22 "expected failure"});\par
6686   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKN" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_STRCASEEQ}}}
({\cf22 "foo"}, {\cf22 "bar"}) << {\cf22 "expected failure"},\par
6687                        {\cf22 "expected failure"});\par
6688 \}\par
}
{
\ql
References ASSERT_STRCASEEQ, EXPECT_FATAL_FAILURE, EXPECT_NONFATAL_FAILURE, and EXPECT_STRCASEEQ.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StreamingAssertionsTest , StringsNotEqual )}}
\par
{\bkmkstart AAAAAAAENA}
{\bkmkend AAAAAAAENA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6672 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6672                                                \{\par
6673   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLQ" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STRNE}}}
({\cf22 "foo"}, {\cf22 "bar"}) << {\cf22 "unexpected failure"};\par
6674   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKU" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_STRNE}}}
({\cf22 "foo"}, {\cf22 "bar"}) << {\cf22 "unexpected failure"};\par
6675   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIX" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_NONFATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLQ" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_STRNE}}}
({\cf22 "foo"}, {\cf22 "foo"}) << {\cf22 "expected failure"},\par
6676                           {\cf22 "expected failure"});\par
6677   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKU" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_STRNE}}}
({\cf22 "foo"}, {\cf22 "foo"}) << {\cf22 "expected failure"},\par
6678                        {\cf22 "expected failure"});\par
6679 \}\par
}
{
\ql
References ASSERT_STRNE, EXPECT_FATAL_FAILURE, EXPECT_NONFATAL_FAILURE, and EXPECT_STRNE.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StreamingAssertionsTest , Truth )}}
\par
{\bkmkstart AAAAAAAENB}
{\bkmkend AAAAAAAENB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6622 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6622                                      \{\par
6623   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\cf17 true}) << {\cf22 "unexpected failure"};\par
6624   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKY" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_TRUE}}}
({\cf17 true}) << {\cf22 "unexpected failure"};\par
6625   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIX" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_NONFATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
({\cf17 false}) << {\cf22 "expected failure"},\par
6626                           {\cf22 "expected failure"});\par
6627   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKY" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_TRUE}}}
({\cf17 false}) << {\cf22 "expected failure"},\par
6628                        {\cf22 "expected failure"});\par
6629 \}\par
}
{
\ql
References ASSERT_TRUE, EXPECT_FATAL_FAILURE, EXPECT_NONFATAL_FAILURE, and EXPECT_TRUE.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StreamingAssertionsTest , Truth2 )}}
\par
{\bkmkstart AAAAAAAENC}
{\bkmkend AAAAAAAENC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6631 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6631                                       \{\par
6632   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\cf17 false}) << {\cf22 "unexpected failure"};\par
6633   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJW" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_FALSE}}}
({\cf17 false}) << {\cf22 "unexpected failure"};\par
6634   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIX" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_NONFATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
({\cf17 true}) << {\cf22 "expected failure"},\par
6635                           {\cf22 "expected failure"});\par
6636   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJW" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_FALSE}}}
({\cf17 true}) << {\cf22 "expected failure"},\par
6637                        {\cf22 "expected failure"});\par
6638 \}\par
}
{
\ql
References ASSERT_FALSE, EXPECT_FALSE, EXPECT_FATAL_FAILURE, and EXPECT_NONFATAL_FAILURE.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StreamingAssertionsTest , Unconditional )}}
\par
{\bkmkstart AAAAAAAEND}
{\bkmkend AAAAAAAEND}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6609 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6609                                              \{\par
6610   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMA" }{}}{\fldrslt {\cs37\ul\cf2 SUCCEED}}}
() << {\cf22 "expected success"};\par
6611   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIX" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_NONFATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJN" }{}}{\fldrslt {\cs37\ul\cf2 ADD_FAILURE}}}
() << {\cf22 "expected failure"},\par
6612                           {\cf22 "expected failure"});\par
6613   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIV" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FATAL_FAILURE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLT" }{}}{\fldrslt {\cs37\ul\cf2 FAIL}}}
() << {\cf22 "expected failure"},\par
6614                        {\cf22 "expected failure"});\par
6615 \}\par
}
{
\ql
References ADD_FAILURE, EXPECT_FATAL_FAILURE, EXPECT_NONFATAL_FAILURE, FAIL, and SUCCEED.}\par
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (TestEventListenersTest , Append )}}
\par
{\bkmkstart AAAAAAAENT}
{\bkmkend AAAAAAAENT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7043 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7043                                      \{\par
7044   {\cf18 int} on_start_counter = 0;\par
7045   {\cf18 bool} is_destroyed = {\cf17 false};\par
7046   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
* listener = {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
(&on_start_counter, &is_destroyed);\par
7047   \{\par
7048     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUL" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListeners}}}
 listeners;\par
7049     listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUM" }{}}{\fldrslt {\cs37\ul\cf2 Append}}}
(listener);\par
7050     TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(\par
7051         *UnitTest::GetInstance());\par
7052     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(1, on_start_counter);\par
7053   \}\par
7054   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(is_destroyed);\par
7055 \}\par
}
{
\ql
References TestEventListeners::Append(), EXPECT_EQ, and EXPECT_TRUE.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a4b3f65b804787ed25c4136df142e1f77_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (TestEventListenersTest , ConstructionWorks )}}
\par
{\bkmkstart AAAAAAAENU}
{\bkmkend AAAAAAAENU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7007 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7007                                                 \{\par
7008   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUL" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListeners}}}
 listeners;\par
7009 \par
7010   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(TestEventListenersAccessor::GetRepeater(&listeners) != NULL);\par
7011   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUN" }{}}{\fldrslt {\cs37\ul\cf2 default_result_printer}}}
() == NULL);\par
7012   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUO" }{}}{\fldrslt {\cs37\ul\cf2 default_xml_generator}}}
() == NULL);\par
7013 \}\par
}
{
\ql
References TestEventListeners::default_result_printer(), TestEventListeners::default_xml_generator(), and EXPECT_TRUE.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a7b39d7fb43a28e8098af85e3ee51eece_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (TestEventListenersTest , DestructionWorks )}}
\par
{\bkmkstart AAAAAAAENV}
{\bkmkend AAAAAAAENV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7017 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7017                                                \{\par
7018   {\cf18 bool} default_result_printer_is_destroyed = {\cf17 false};\par
7019   {\cf18 bool} default_xml_printer_is_destroyed = {\cf17 false};\par
7020   {\cf18 bool} extra_listener_is_destroyed = {\cf17 false};\par
7021   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
* default_result_printer = {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
(\par
7022       NULL, &default_result_printer_is_destroyed);\par
7023   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
* default_xml_printer = {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
(\par
7024       NULL, &default_xml_printer_is_destroyed);\par
7025   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
* extra_listener = {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
(\par
7026       NULL, &extra_listener_is_destroyed);\par
7027 \par
7028   \{\par
7029     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUL" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListeners}}}
 listeners;\par
7030     TestEventListenersAccessor::SetDefaultResultPrinter(&listeners,\par
7031                                                         default_result_printer);\par
7032     TestEventListenersAccessor::SetDefaultXmlGenerator(&listeners,\par
7033                                                        default_xml_printer);\par
7034     listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUM" }{}}{\fldrslt {\cs37\ul\cf2 Append}}}
(extra_listener);\par
7035   \}\par
7036   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(default_result_printer_is_destroyed);\par
7037   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(default_xml_printer_is_destroyed);\par
7038   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(extra_listener_is_destroyed);\par
7039 \}\par
}
{
\ql
References TestEventListeners::Append(), and EXPECT_TRUE.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_a1d1592cafc34c09de7a810a7c4855162_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TEST\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (TestEventListenersTest , Release )}}
\par
{\bkmkstart AAAAAAAENW}
{\bkmkend AAAAAAAENW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7138 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7138                                       \{\par
7139   {\cf18 int} on_start_counter = 0;\par
7140   {\cf18 bool} is_destroyed = {\cf17 false};\par
7141   {\cf20 // Although Append passes the ownership of this object to the list,}\par
7142   {\cf20 // the following calls release it, and we need to delete it before the}\par
7143   {\cf20 // test ends.}\par
7144   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
* listener = {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEBV" }{}}{\fldrslt {\cs37\ul\cf2 TestListener}}}
(&on_start_counter, &is_destroyed);\par
7145   \{\par
7146     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUL" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListeners}}}
 listeners;\par
7147     listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUM" }{}}{\fldrslt {\cs37\ul\cf2 Append}}}
(listener);\par
7148     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(listener, listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUP" }{}}{\fldrslt {\cs37\ul\cf2 Release}}}
(listener));\par
7149     TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(\par
7150         *UnitTest::GetInstance());\par
7151     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLS" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_TRUE}}}
(listeners.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEUP" }{}}{\fldrslt {\cs37\ul\cf2 Release}}}
(listener) == NULL);\par
7152   \}\par
7153   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLB" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_EQ}}}
(0, on_start_counter);\par
7154   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABLC" }{}}{\fldrslt {\cs37\ul\cf2 EXPECT_FALSE}}}
(is_destroyed);\par
7155   {\cf17 delete} listener;\par
7156 \}\par
}
{
\ql
References TestEventListeners::Append(), EXPECT_EQ, EXPECT_FALSE, EXPECT_TRUE, and TestEventListeners::Release().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "df/d01/gtest__unittest_8cc_aefe7d8b3422fb27b9c7281c0434881be_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TestGTestAddReference\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TestGTestAddReference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void TestGTestAddReference ()}}
\par
{\bkmkstart AAAAAAAETQ}
{\bkmkend AAAAAAAETQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7464 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7464                              \{\par
7465   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<T1, GTEST_ADD_REFERENCE_(T2)>}}}
();\par
7466 \}\par
}
}
{\xe \v TestGTestReferenceToConst\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TestGTestReferenceToConst}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void TestGTestReferenceToConst ()}}
\par
{\bkmkstart AAAAAAAETR}
{\bkmkend AAAAAAAETR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7476 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7476                                  \{\par
7477   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<T1, GTEST_REFERENCE_TO_CONST_(T2)>}}}
();\par
7478 \}\par
}
}
{\xe \v TestGTestRemoveConst\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TestGTestRemoveConst}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void TestGTestRemoveConst ()}}
\par
{\bkmkstart AAAAAAAETS}
{\bkmkend AAAAAAAETS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7424 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7424                             \{\par
7425   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<T1, GTEST_REMOVE_CONST_(T2)>}}}
();\par
7426 \}\par
}
}
{\xe \v TestGTestRemoveReference\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TestGTestRemoveReference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void TestGTestRemoveReference ()}}
\par
{\bkmkstart AAAAAAAETT}
{\bkmkend AAAAAAAETT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7398 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7398                                 \{\par
7399   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<T1, GTEST_REMOVE_REFERENCE_(T2)>}}}
();\par
7400 \}\par
}
}
{\xe \v TestGTestRemoveReferenceAndConst\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:TestGTestRemoveReferenceAndConst}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void TestGTestRemoveReferenceAndConst ()}}
\par
{\bkmkstart AAAAAAAETU}
{\bkmkend AAAAAAAETU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7437 of file gtest_unittest.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7437                                         \{\par
7438   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGY" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssertTypesEqual<T1, GTEST_REMOVE_REFERENCE_AND_CONST_(T2)>}}}
();\par
7439 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v GTEST_ATTRIBUTE_UNUSED_\:gtest_unittest.cc}
{\xe \v gtest_unittest.cc\:GTEST_ATTRIBUTE_UNUSED_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool dummy2 GTEST_ATTRIBUTE_UNUSED_ = StaticAssertTypeEq<bool, bool>(){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAEUB}
{\bkmkend AAAAAAAEUB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 6866 of file gtest_unittest.cc.}\par
}
}