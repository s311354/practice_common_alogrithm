{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::XmlUnitTestResultPrinter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter}
{\bkmkstart AAAAAAABCV}
{\bkmkend AAAAAAABCV}
Inheritance diagram for testing::internal::XmlUnitTestResultPrinter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::XmlUnitTestResultPrinter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b OnTestIterationEnd} (const UnitTest &unit_test, int iteration)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b XmlUnitTestResultPrinter} (const char *output_file)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b GTEST_DISALLOW_COPY_AND_ASSIGN_} ({\b XmlUnitTestResultPrinter})\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Private Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b std::string} {\b EscapeXml} (const {\b std::string} &str, bool is_attribute)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b std::string} {\b EscapeXmlAttribute} (const {\b std::string} &str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b std::string} {\b EscapeXmlText} (const char *str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b IsNormalizableWhitespace} (char c)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b IsValidXmlCharacter} (char c)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b OutputXmlAttribute} ({\b std::ostream} *stream, const {\b std::string} &element_name, const {\b std::string} &name, const {\b std::string} &value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b OutputXmlCDataSection} (::{\b std::ostream} *stream, const char *data)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b OutputXmlTestInfo} (::{\b std::ostream} *stream, const char *test_case_name, const TestInfo &test_info)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b PrintXmlTestCase} (::{\b std::ostream} *stream, const TestCase &test_case)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b PrintXmlUnitTest} (::{\b std::ostream} *stream, const UnitTest &unit_test)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b std::string} {\b RemoveInvalidXmlCharacters} (const {\b std::string} &str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b std::string} {\b TestPropertiesAsXmlAttributes} (const TestResult &result)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b std::string} {\b output_file_}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid }
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v XmlUnitTestResultPrinter\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:XmlUnitTestResultPrinter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
testing::internal::XmlUnitTestResultPrinter::XmlUnitTestResultPrinter (const char *  {\i output_file}){\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABCW}
{\bkmkend AAAAAAABCW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3423     : output_file_(output_file) \{\par
3424   {\cf19 if} (output_file_.c_str() == NULL || output_file_.empty()) \{\par
3425     fprintf(stderr, {\cf22 "XML output file may not be null\\n"});\par
3426     fflush(stderr);\par
3427     exit(EXIT_FAILURE);\par
3428   \}\par
3429 \}\par
}
{
\ql
References std::string::c_str(), std::string::empty(), and output_file_.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_afdaf88e6764c18ce0dcc3733d7a06e31_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v EscapeXml\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:EscapeXml}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::string} testing::internal::XmlUnitTestResultPrinter::EscapeXml (const {\b std::string} &  {\i str}, bool  {\i is_attribute}){\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCX}
{\bkmkend AAAAAAABCX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3477                                              \{\par
3478   Message m;\par
3479 \par
3480   {\cf19 for} ({\cf18 size_t} i = 0; i < str.size(); ++i) \{\par
3481     {\cf17 const} {\cf18 char} ch = str[i];\par
3482     {\cf19 switch} (ch) \{\par
3483       {\cf19 case} {\cf23 '<'}:\par
3484         m << {\cf22 "&lt;"};\par
3485         {\cf19 break};\par
3486       {\cf19 case} {\cf23 '>'}:\par
3487         m << {\cf22 "&gt;"};\par
3488         {\cf19 break};\par
3489       {\cf19 case} {\cf23 '&'}:\par
3490         m << {\cf22 "&amp;"};\par
3491         {\cf19 break};\par
3492       {\cf19 case} {\cf23 '\\''}:\par
3493         {\cf19 if} (is_attribute)\par
3494           m << {\cf22 "&apos;"};\par
3495         {\cf19 else}\par
3496           m << {\cf23 '\\''};\par
3497         {\cf19 break};\par
3498       {\cf19 case} {\cf23 '"'}:\par
3499         {\cf19 if} (is_attribute)\par
3500           m << {\cf22 "&quot;"};\par
3501         {\cf19 else}\par
3502           m << {\cf23 '"'};\par
3503         {\cf19 break};\par
3504       {\cf19 default}:\par
3505         {\cf19 if} (IsValidXmlCharacter(ch)) \{\par
3506           {\cf19 if} (is_attribute && IsNormalizableWhitespace(ch))\par
3507             m << {\cf22 "&#x"} << String::FormatByte({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch))\par
3508               << {\cf22 ";"};\par
3509           {\cf19 else}\par
3510             m << ch;\par
3511         \}\par
3512         {\cf19 break};\par
3513     \}\par
3514   \}\par
3515 \par
3516   {\cf19 return} m.GetString();\par
3517 \}\par
}
{
\ql
References IsNormalizableWhitespace(), IsValidXmlCharacter(), and std::string::size().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_adadf42cf46ade9b26743466ce4b52f36_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v EscapeXmlAttribute\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:EscapeXmlAttribute}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static {\b std::string} testing::internal::XmlUnitTestResultPrinter::EscapeXmlAttribute (const {\b std::string} &  {\i str}){\f2 [inline]}, {\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCY}
{\bkmkend AAAAAAABCY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3377                                                             \{\par
3378     {\cf19 return} EscapeXml(str, {\cf17 true});\par
3379   \}\par
}
{
\ql
Referenced by OutputXmlAttribute(), OutputXmlTestInfo(), and TestPropertiesAsXmlAttributes().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_aad574d7bb0c24578d5acc57817b9d367_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v EscapeXmlText\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:EscapeXmlText}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static {\b std::string} testing::internal::XmlUnitTestResultPrinter::EscapeXmlText (const char *  {\i str}){\f2 [inline]}, {\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCZ}
{\bkmkend AAAAAAABCZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3382                                                   \{\par
3383     {\cf19 return} EscapeXml(str, {\cf17 false});\par
3384   \}\par
}
}
{\xe \v GTEST_DISALLOW_COPY_AND_ASSIGN_\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:GTEST_DISALLOW_COPY_AND_ASSIGN_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
testing::internal::XmlUnitTestResultPrinter::GTEST_DISALLOW_COPY_AND_ASSIGN_ ({\b XmlUnitTestResultPrinter} ){\f2 [private]}}}
\par
{\bkmkstart AAAAAAABDA}
{\bkmkend AAAAAAABDA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v IsNormalizableWhitespace\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:IsNormalizableWhitespace}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static bool testing::internal::XmlUnitTestResultPrinter::IsNormalizableWhitespace (char  {\i c}){\f2 [inline]}, {\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAABDB}
{\bkmkend AAAAAAABDB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3358                                                \{\par
3359     {\cf19 return} c == 0x9 || c == 0xA || c == 0xD;\par
3360   \}\par
}
{
\ql
Referenced by EscapeXml().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_af9d5af6e5d0c505d5c3bd50a8d2a8d76_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v IsValidXmlCharacter\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:IsValidXmlCharacter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static bool testing::internal::XmlUnitTestResultPrinter::IsValidXmlCharacter (char  {\i c}){\f2 [inline]}, {\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAABDC}
{\bkmkend AAAAAAABDC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3363                                           \{\par
3364     {\cf19 return} IsNormalizableWhitespace(c) || c >= 0x20;\par
3365   \}\par
}
{
\ql
Referenced by EscapeXml(), and RemoveInvalidXmlCharacters().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_a2b83a24e3ec8544efa1156f9d6e51873_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v OnTestIterationEnd\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:OnTestIterationEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::XmlUnitTestResultPrinter::OnTestIterationEnd (const UnitTest &  {\i unit_test}, int  {\i iteration}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABDD}
{\bkmkend AAAAAAABDD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3433                                                          \{\par
3434   FILE* xmlout = NULL;\par
3435   FilePath output_file(output_file_);\par
3436   FilePath output_dir(output_file.RemoveFileName());\par
3437 \par
3438   {\cf19 if} (output_dir.CreateDirectoriesRecursively()) \{\par
3439     xmlout = posix::FOpen(output_file_.c_str(), {\cf22 "w"});\par
3440   \}\par
3441   {\cf19 if} (xmlout == NULL) \{\par
3442     {\cf20 // TODO(wan): report the reason of the failure.}\par
3443     {\cf20 //}\par
3444     {\cf20 // We don't do it for now as:}\par
3445     {\cf20 //}\par
3446     {\cf20 //   1. There is no urgent need for it.}\par
3447     {\cf20 //   2. It's a bit involved to make the errno variable thread-safe on}\par
3448     {\cf20 //      all three operating systems (Linux, Windows, and Mac OS).}\par
3449     {\cf20 //   3. To interpret the meaning of errno in a thread-safe way,}\par
3450     {\cf20 //      we need the strerror_r() function, which is not available on}\par
3451     {\cf20 //      Windows.}\par
3452     fprintf(stderr,\par
3453             {\cf22 "Unable to open file \\"%s\\"\\n"},\par
3454             output_file_.c_str());\par
3455     fflush(stderr);\par
3456     exit(EXIT_FAILURE);\par
3457   \}\par
3458   std::stringstream stream;\par
3459   PrintXmlUnitTest(&stream, unit_test);\par
3460   fprintf(xmlout, {\cf22 "%s"}, StringStreamToString(&stream).c_str());\par
3461   fclose(xmlout);\par
3462 \}\par
}
{
\ql
References std::string::c_str(), output_file_, PrintXmlUnitTest(), and testing::internal::StringStreamToString().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_a2ae986dd2f4f2aed31cc6f3bc8c56898_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v OutputXmlAttribute\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:OutputXmlAttribute}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::XmlUnitTestResultPrinter::OutputXmlAttribute ({\b std::ostream} *  {\i stream}, const {\b std::string} &  {\i element_name}, const {\b std::string} &  {\i name}, const {\b std::string} &  {\i value}){\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAABDE}
{\bkmkend AAAAAAABDE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3611                             \{\par
3612   {\cf17 const} std::vector<std::string>& allowed_names =\par
3613       GetReservedAttributesForElement(element_name);\par
3614 \par
3615   GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=\par
3616                    allowed_names.end())\par
3617       << {\cf22 "Attribute "} << name << {\cf22 " is not allowed for element <"} << element_name\par
3618       << {\cf22 ">."};\par
3619 \par
3620   *stream << {\cf22 " "} << name << {\cf22 "=\\""} << EscapeXmlAttribute(value) << {\cf22 "\\""};\par
3621 \}\par
}
{
\ql
References std::vector< T >::begin(), std::vector< T >::end(), EscapeXmlAttribute(), std::find(), and testing::GetReservedAttributesForElement().}\par
{
\ql
Referenced by OutputXmlTestInfo(), PrintXmlTestCase(), and PrintXmlUnitTest().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_aa8ca7066de948d26d171597430c75839_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_aa8ca7066de948d26d171597430c75839_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v OutputXmlCDataSection\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:OutputXmlCDataSection}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::XmlUnitTestResultPrinter::OutputXmlCDataSection (::{\b std::ostream} *  {\i stream}, const char *  {\i data}){\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAABDF}
{\bkmkend AAAAAAABDF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3589                                                                        \{\par
3590   {\cf17 const} {\cf18 char}* segment = data;\par
3591   *stream << {\cf22 "<![CDATA["};\par
3592   {\cf19 for} (;;) \{\par
3593     {\cf17 const} {\cf18 char}* {\cf17 const} next_segment = strstr(segment, {\cf22 "]]>"});\par
3594     {\cf19 if} (next_segment != NULL) \{\par
3595       stream->write(\par
3596           segment, {\cf17 static_cast<}std::streamsize{\cf17 >}(next_segment - segment));\par
3597       *stream << {\cf22 "]]>]]&gt;<![CDATA["};\par
3598       segment = next_segment + strlen({\cf22 "]]>"});\par
3599     \} {\cf19 else} \{\par
3600       *stream << segment;\par
3601       {\cf19 break};\par
3602     \}\par
3603   \}\par
3604   *stream << {\cf22 "]]>"};\par
3605 \}\par
}
{
\ql
References std::ostream::write().}\par
{
\ql
Referenced by OutputXmlTestInfo().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_a41bccd75f54932c5b3b8cce1f94dbd54_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_a41bccd75f54932c5b3b8cce1f94dbd54_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v OutputXmlTestInfo\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:OutputXmlTestInfo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::XmlUnitTestResultPrinter::OutputXmlTestInfo (::{\b std::ostream} *  {\i stream}, const char *  {\i test_case_name}, const TestInfo &  {\i test_info}){\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAABDG}
{\bkmkend AAAAAAABDG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3627                                                                             \{\par
3628   {\cf17 const} TestResult& result = *test_info.result();\par
3629   {\cf17 const} std::string kTestcase = {\cf22 "testcase"};\par
3630 \par
3631   *stream << {\cf22 "    <testcase"};\par
3632   OutputXmlAttribute(stream, kTestcase, {\cf22 "name"}, test_info.name());\par
3633 \par
3634   {\cf19 if} (test_info.value_param() != NULL) \{\par
3635     OutputXmlAttribute(stream, kTestcase, {\cf22 "value_param"},\par
3636                        test_info.value_param());\par
3637   \}\par
3638   {\cf19 if} (test_info.type_param() != NULL) \{\par
3639     OutputXmlAttribute(stream, kTestcase, {\cf22 "type_param"}, test_info.type_param());\par
3640   \}\par
3641 \par
3642   OutputXmlAttribute(stream, kTestcase, {\cf22 "status"},\par
3643                      test_info.should_run() ? {\cf22 "run"} : {\cf22 "notrun"});\par
3644   OutputXmlAttribute(stream, kTestcase, {\cf22 "time"},\par
3645                      FormatTimeInMillisAsSeconds(result.elapsed_time()));\par
3646   OutputXmlAttribute(stream, kTestcase, {\cf22 "classname"}, test_case_name);\par
3647   *stream << TestPropertiesAsXmlAttributes(result);\par
3648 \par
3649   {\cf18 int} failures = 0;\par
3650   {\cf19 for} ({\cf18 int} i = 0; i < result.total_part_count(); ++i) \{\par
3651     {\cf17 const} TestPartResult& part = result.GetTestPartResult(i);\par
3652     {\cf19 if} (part.failed()) \{\par
3653       {\cf19 if} (++failures == 1) \{\par
3654         *stream << {\cf22 ">\\n"};\par
3655       \}\par
3656       {\cf17 const} {\cf18 string} location = internal::FormatCompilerIndependentFileLocation(\par
3657           part.file_name(), part.line_number());\par
3658       {\cf17 const} {\cf18 string} summary = location + {\cf22 "\\n"} + part.summary();\par
3659       *stream << {\cf22 "      <failure message=\\""}\par
3660               << EscapeXmlAttribute(summary.c_str())\par
3661               << {\cf22 "\\" type=\\"\\">"};\par
3662       {\cf17 const} {\cf18 string} detail = location + {\cf22 "\\n"} + part.message();\par
3663       OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());\par
3664       *stream << {\cf22 "</failure>\\n"};\par
3665     \}\par
3666   \}\par
3667 \par
3668   {\cf19 if} (failures == 0)\par
3669     *stream << {\cf22 " />\\n"};\par
3670   {\cf19 else}\par
3671     *stream << {\cf22 "    </testcase>\\n"};\par
3672 \}\par
}
{
\ql
References EscapeXmlAttribute(), testing::internal::FormatCompilerIndependentFileLocation(), testing::internal::FormatTimeInMillisAsSeconds(), OutputXmlAttribute(), OutputXmlCDataSection(), RemoveInvalidXmlCharacters(), and TestPropertiesAsXmlAttributes().}\par
{
\ql
Referenced by PrintXmlTestCase().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_af642843faed4cd28c77d688f6f2820d7_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_af642843faed4cd28c77d688f6f2820d7_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PrintXmlTestCase\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:PrintXmlTestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::XmlUnitTestResultPrinter::PrintXmlTestCase (::{\b std::ostream} *  {\i stream}, const TestCase &  {\i test_case}){\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAABDH}
{\bkmkend AAAAAAABDH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3676                                                                            \{\par
3677   {\cf17 const} std::string kTestsuite = {\cf22 "testsuite"};\par
3678   *stream << {\cf22 "  <"} << kTestsuite;\par
3679   OutputXmlAttribute(stream, kTestsuite, {\cf22 "name"}, test_case.name());\par
3680   OutputXmlAttribute(stream, kTestsuite, {\cf22 "tests"},\par
3681                      StreamableToString(test_case.reportable_test_count()));\par
3682   OutputXmlAttribute(stream, kTestsuite, {\cf22 "failures"},\par
3683                      StreamableToString(test_case.failed_test_count()));\par
3684   OutputXmlAttribute(\par
3685       stream, kTestsuite, {\cf22 "disabled"},\par
3686       StreamableToString(test_case.reportable_disabled_test_count()));\par
3687   OutputXmlAttribute(stream, kTestsuite, {\cf22 "errors"}, {\cf22 "0"});\par
3688   OutputXmlAttribute(stream, kTestsuite, {\cf22 "time"},\par
3689                      FormatTimeInMillisAsSeconds(test_case.elapsed_time()));\par
3690   *stream << TestPropertiesAsXmlAttributes(test_case.ad_hoc_test_result())\par
3691           << {\cf22 ">\\n"};\par
3692 \par
3693   {\cf19 for} ({\cf18 int} i = 0; i < test_case.total_test_count(); ++i) \{\par
3694     {\cf19 if} (test_case.GetTestInfo(i)->is_reportable())\par
3695       OutputXmlTestInfo(stream, test_case.name(), *test_case.GetTestInfo(i));\par
3696   \}\par
3697   *stream << {\cf22 "  </"} << kTestsuite << {\cf22 ">\\n"};\par
3698 \}\par
}
{
\ql
References testing::internal::FormatTimeInMillisAsSeconds(), OutputXmlAttribute(), OutputXmlTestInfo(), and TestPropertiesAsXmlAttributes().}\par
{
\ql
Referenced by PrintXmlUnitTest().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_a7f7accabeac896d4271f36d24ca02dba_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_a7f7accabeac896d4271f36d24ca02dba_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PrintXmlUnitTest\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:PrintXmlUnitTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::XmlUnitTestResultPrinter::PrintXmlUnitTest (::{\b std::ostream} *  {\i stream}, const UnitTest &  {\i unit_test}){\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAABDI}
{\bkmkend AAAAAAABDI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3702                                                                            \{\par
3703   {\cf17 const} std::string kTestsuites = {\cf22 "testsuites"};\par
3704 \par
3705   *stream << {\cf22 "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n"};\par
3706   *stream << {\cf22 "<"} << kTestsuites;\par
3707 \par
3708   OutputXmlAttribute(stream, kTestsuites, {\cf22 "tests"},\par
3709                      StreamableToString(unit_test.reportable_test_count()));\par
3710   OutputXmlAttribute(stream, kTestsuites, {\cf22 "failures"},\par
3711                      StreamableToString(unit_test.failed_test_count()));\par
3712   OutputXmlAttribute(\par
3713       stream, kTestsuites, {\cf22 "disabled"},\par
3714       StreamableToString(unit_test.reportable_disabled_test_count()));\par
3715   OutputXmlAttribute(stream, kTestsuites, {\cf22 "errors"}, {\cf22 "0"});\par
3716   OutputXmlAttribute(\par
3717       stream, kTestsuites, {\cf22 "timestamp"},\par
3718       FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));\par
3719   OutputXmlAttribute(stream, kTestsuites, {\cf22 "time"},\par
3720                      FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));\par
3721 \par
3722   {\cf19 if} (GTEST_FLAG(shuffle)) \{\par
3723     OutputXmlAttribute(stream, kTestsuites, {\cf22 "random_seed"},\par
3724                        StreamableToString(unit_test.random_seed()));\par
3725   \}\par
3726 \par
3727   *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());\par
3728 \par
3729   OutputXmlAttribute(stream, kTestsuites, {\cf22 "name"}, {\cf22 "AllTests"});\par
3730   *stream << {\cf22 ">\\n"};\par
3731 \par
3732   {\cf19 for} ({\cf18 int} i = 0; i < unit_test.total_test_case_count(); ++i) \{\par
3733     {\cf19 if} (unit_test.GetTestCase(i)->reportable_test_count() > 0)\par
3734       PrintXmlTestCase(stream, *unit_test.GetTestCase(i));\par
3735   \}\par
3736   *stream << {\cf22 "</"} << kTestsuites << {\cf22 ">\\n"};\par
3737 \}\par
}
{
\ql
References testing::internal::FormatEpochTimeInMillisAsIso8601(), testing::internal::FormatTimeInMillisAsSeconds(), OutputXmlAttribute(), PrintXmlTestCase(), and TestPropertiesAsXmlAttributes().}\par
{
\ql
Referenced by OnTestIterationEnd().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_a3be1c8766241d0f34cdf59b45a52f73b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_a3be1c8766241d0f34cdf59b45a52f73b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v RemoveInvalidXmlCharacters\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:RemoveInvalidXmlCharacters}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::string} testing::internal::XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters (const {\b std::string} &  {\i str}){\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAABDJ}
{\bkmkend AAAAAAABDJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3523                           \{\par
3524   std::string output;\par
3525   output.reserve(str.size());\par
3526   {\cf19 for} (std::string::const_iterator it = str.begin(); it != str.end(); ++it)\par
3527     {\cf19 if} (IsValidXmlCharacter(*it))\par
3528       output.push_back(*it);\par
3529 \par
3530   {\cf19 return} output;\par
3531 \}\par
}
{
\ql
References std::string::begin(), std::string::end(), IsValidXmlCharacter(), std::string::push_back(), std::string::reserve(), and std::string::size().}\par
{
\ql
Referenced by OutputXmlTestInfo().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_aa14cb72f42a346841482cbafa65e3155_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_aa14cb72f42a346841482cbafa65e3155_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v TestPropertiesAsXmlAttributes\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:TestPropertiesAsXmlAttributes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::string} testing::internal::XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes (const TestResult &  {\i result}){\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAABDK}
{\bkmkend AAAAAAABDK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3742                               \{\par
3743   Message attributes;\par
3744   {\cf19 for} ({\cf18 int} i = 0; i < result.test_property_count(); ++i) \{\par
3745     {\cf17 const} TestProperty& {\cf17 property} = result.GetTestProperty(i);\par
3746     attributes << {\cf22 " "} << {\cf17 property}.key() << {\cf22 "="}\par
3747         << {\cf22 "\\""} << EscapeXmlAttribute(property.value()) << {\cf22 "\\""};\par
3748   \}\par
3749   {\cf19 return} attributes.GetString();\par
3750 \}\par
}
{
\ql
References EscapeXmlAttribute().}\par
{
\ql
Referenced by OutputXmlTestInfo(), PrintXmlTestCase(), and PrintXmlUnitTest().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_aaac4f1352a2cc46f6a69994d45999f0b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1XmlUnitTestResultPrinter_aaac4f1352a2cc46f6a69994d45999f0b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v output_file_\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:output_file_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b std::string} testing::internal::XmlUnitTestResultPrinter::output_file_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABDL}
{\bkmkend AAAAAAABDL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by OnTestIterationEnd(), and XmlUnitTestResultPrinter().}\par
}
}