{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UnitTestImpl Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl}
{\bkmkstart AAAAAAAAZQ}
{\bkmkend AAAAAAAAZQ}
\par
{
{\f2 #include <gtest-internal-inl.h>}}\par
Collaboration diagram for testing::internal::UnitTestImpl:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b ReactionToSharding} \{ {\b HONOR_SHARDING_PROTOCOL}
, {\b IGNORE_SHARDING_PROTOCOL}
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const TestResult * {\b ad_hoc_test_result} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b AddTestInfo} (Test::SetUpTestCaseFunc set_up_tc, Test::TearDownTestCaseFunc tear_down_tc, TestInfo *test_info)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b catch_exceptions} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ClearAdHocTestResult} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ClearNonAdHocTestResult} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ConfigureXmlOutput} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const TestCase * {\b current_test_case} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TestInfo * {\b current_test_info} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const TestInfo * {\b current_test_info} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TestResult * {\b current_test_result} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::string} {\b CurrentOsStackTraceExceptTop} (int skip_count) GTEST_NO_INLINE_\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b disabled_test_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TimeInMillis {\b elapsed_time} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::vector}< Environment * > & {\b environments} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b Failed} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b failed_test_case_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b failed_test_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b FilterTests} ({\b ReactionToSharding} shard_tests)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TestPartResultReporterInterface * {\b GetGlobalTestPartResultReporter} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TestCase * {\b GetMutableTestCase} (int i)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TestCase * {\b GetTestCase} (const char *test_case_name, const char *type_param, Test::SetUpTestCaseFunc set_up_tc, Test::TearDownTestCaseFunc tear_down_tc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const TestCase * {\b GetTestCase} (int i) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TestPartResultReporterInterface * {\b GetTestPartResultReporterForCurrentThread} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::vector}< {\b TraceInfo} > & {\b gtest_trace_stack} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b std::vector}< {\b TraceInfo} > & {\b gtest_trace_stack} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TestEventListeners * {\b listeners} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ListTestsMatchingFilter} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b OsStackTraceGetterInterface} * {\b os_stack_trace_getter} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b Passed} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PostFlagParsingInit} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
internal::Random * {\b random} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b random_seed} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b RecordProperty} (const TestProperty &test_property)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b RegisterParameterizedTests} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b reportable_disabled_test_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b reportable_test_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b RunAllTests} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b set_current_test_case} (TestCase *a_current_test_case)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b set_current_test_info} (TestInfo *a_current_test_info)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b set_os_stack_trace_getter} ({\b OsStackTraceGetterInterface} *getter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetGlobalTestPartResultReporter} (TestPartResultReporterInterface *reporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetTestPartResultReporterForCurrentThread} (TestPartResultReporterInterface *reporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ShuffleTests} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TimeInMillis {\b start_timestamp} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b successful_test_case_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b successful_test_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b test_case_to_run_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b test_to_run_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b total_test_case_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b total_test_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b UnitTestImpl} (UnitTest *parent)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b UnshuffleTests} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~UnitTestImpl} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b GTEST_DISALLOW_COPY_AND_ASSIGN_} ({\b UnitTestImpl})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b set_catch_exceptions} (bool value)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TestResult {\b ad_hoc_test_result_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b catch_exceptions_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TestCase * {\b current_test_case_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TestInfo * {\b current_test_info_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DefaultGlobalTestPartResultReporter} {\b default_global_test_part_result_reporter_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DefaultPerThreadTestPartResultReporter} {\b default_per_thread_test_part_result_reporter_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TimeInMillis {\b elapsed_time_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::vector}< Environment * > {\b environments_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
internal::Mutex {\b global_test_part_result_reporter_mutex_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TestPartResultReporterInterface * {\b global_test_part_result_repoter_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
internal::ThreadLocal< {\b std::vector}< {\b TraceInfo} > > {\b gtest_trace_stack_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b last_death_test_case_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TestEventListeners {\b listeners_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
internal::FilePath {\b original_working_dir_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b OsStackTraceGetterInterface} * {\b os_stack_trace_getter_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UnitTest *const {\b parent_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
internal::ThreadLocal< TestPartResultReporterInterface * > {\b per_thread_test_part_result_reporter_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b post_flag_parse_init_performed_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
internal::Random {\b random_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b random_seed_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TimeInMillis {\b start_timestamp_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::vector}< int > {\b test_case_indices_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::vector}< TestCase * > {\b test_cases_}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ::testing::UnitTest}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid }
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Enumeration Documentation\par
\pard\plain 
{\xe \v ReactionToSharding\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:ReactionToSharding}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b testing::internal::UnitTestImpl::ReactionToSharding}}}
\par
{\bkmkstart AAAAAAAAZR}
{\bkmkend AAAAAAAAZR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v HONOR_SHARDING_PROTOCOL\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:HONOR_SHARDING_PROTOCOL}
{\qr HONOR_SHARDING_PROTOCOL{\bkmkstart AAAAAAAAZS}
{\bkmkend AAAAAAAAZS}
\cell }{\cell }{\row }
{\xe \v IGNORE_SHARDING_PROTOCOL\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:IGNORE_SHARDING_PROTOCOL}
{\qr IGNORE_SHARDING_PROTOCOL{\bkmkstart AAAAAAAAZT}
{\bkmkend AAAAAAAAZT}
\cell }{\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 717                           \{\par
718     HONOR_SHARDING_PROTOCOL,\par
719     IGNORE_SHARDING_PROTOCOL\par
720   \};\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v UnitTestImpl\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:UnitTestImpl}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
testing::internal::UnitTestImpl::UnitTestImpl (UnitTest *  {\i parent}){\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAAAZU}
{\bkmkend AAAAAAAAZU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4326     : parent_(parent),\par
4327       GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 {\cf20 /* using this in initializer */})\par
4328       default_global_test_part_result_reporter_(this),\par
4329       default_per_thread_test_part_result_reporter_(this),\par
4330       GTEST_DISABLE_MSC_WARNINGS_POP_()\par
4331       global_test_part_result_repoter_(\par
4332           &default_global_test_part_result_reporter_),\par
4333       per_thread_test_part_result_reporter_(\par
4334           &default_per_thread_test_part_result_reporter_),\par
4335 {\cf21 #if GTEST_HAS_PARAM_TEST}\par
4336       parameterized_test_registry_(),\par
4337       parameterized_tests_registered_({\cf17 false}),\par
4338 {\cf21 #endif  }{\cf20 // GTEST_HAS_PARAM_TEST}\par
4339       last_death_test_case_(-1),\par
4340       current_test_case_(NULL),\par
4341       current_test_info_(NULL),\par
4342       ad_hoc_test_result_(),\par
4343       os_stack_trace_getter_(NULL),\par
4344       post_flag_parse_init_performed_({\cf17 false}),\par
4345       random_seed_(0),  {\cf20 // Will be overridden by the flag before first use.}\par
4346       random_(0),  {\cf20 // Will be reseeded before first use.}\par
4347       start_timestamp_(0),\par
4348       elapsed_time_(0),\par
4349 {\cf21 #if GTEST_HAS_DEATH_TEST}\par
4350       death_test_factory_({\cf17 new} DefaultDeathTestFactory),\par
4351 {\cf21 #endif}\par
4352       {\cf20 // Will be overridden by the flag before first use.}\par
4353       catch_exceptions_({\cf17 false}) \{\par
4354   listeners()->SetDefaultResultPrinter({\cf17 new} PrettyUnitTestResultPrinter);\par
4355 \}\par
}
{
\ql
References listeners().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a5fb75faa88ee71f26e16473455b70839_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ~UnitTestImpl\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:~UnitTestImpl}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
testing::internal::UnitTestImpl::~UnitTestImpl (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAZV}
{\bkmkend AAAAAAAAZV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4357                             \{\par
4358   {\cf20 // Deletes every TestCase.}\par
4359   ForEach(test_cases_, internal::Delete<TestCase>);\par
4360 \par
4361   {\cf20 // Deletes every Environment.}\par
4362   ForEach(environments_, internal::Delete<Environment>);\par
4363 \par
4364   {\cf17 delete} os_stack_trace_getter_;\par
4365 \}\par
}
{
\ql
References environments_, testing::internal::ForEach(), os_stack_trace_getter_, and test_cases_.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_ae8bfe40adf9772237ea51299af113575_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v ad_hoc_test_result\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:ad_hoc_test_result}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const TestResult* testing::internal::UnitTestImpl::ad_hoc_test_result () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAZW}
{\bkmkend AAAAAAAAZW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 597 \{ {\cf19 return} &ad_hoc_test_result_; \}\par
}
}
{\xe \v AddTestInfo\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:AddTestInfo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::UnitTestImpl::AddTestInfo (Test::SetUpTestCaseFunc  {\i set_up_tc}, Test::TearDownTestCaseFunc  {\i tear_down_tc}, TestInfo *  {\i test_info}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAZX}
{\bkmkend AAAAAAAAZX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 647                                         \{\par
648     {\cf20 // In order to support thread-safe death tests, we need to}\par
649     {\cf20 // remember the original working directory when the test program}\par
650     {\cf20 // was first invoked.  We cannot do this in RUN_ALL_TESTS(), as}\par
651     {\cf20 // the user may have changed the current directory before calling}\par
652     {\cf20 // RUN_ALL_TESTS().  Therefore we capture the current directory in}\par
653     {\cf20 // AddTestInfo(), which is called to register a TEST or TEST_F}\par
654     {\cf20 // before main() is reached.}\par
655     {\cf19 if} (original_working_dir_.IsEmpty()) \{\par
656       original_working_dir_.Set(FilePath::GetCurrentDir());\par
657       GTEST_CHECK_(!original_working_dir_.IsEmpty())\par
658           << {\cf22 "Failed to get the current working directory."};\par
659     \}\par
660 \par
661     GetTestCase(test_info->test_case_name(),\par
662                 test_info->type_param(),\par
663                 set_up_tc,\par
664                 tear_down_tc)->AddTestInfo(test_info);\par
665   \}\par
}
{
\ql
Referenced by testing::internal::MakeAndRegisterTestInfo().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a1cc87dfc91377ebec4a3ff4192dfcba9_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v catch_exceptions\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:catch_exceptions}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool testing::internal::UnitTestImpl::catch_exceptions () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAZY}
{\bkmkend AAAAAAAAZY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 803 \{ {\cf19 return} catch_exceptions_; \}\par
}
}
{\xe \v ClearAdHocTestResult\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:ClearAdHocTestResult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::UnitTestImpl::ClearAdHocTestResult (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAZZ}
{\bkmkend AAAAAAAAZZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 707                               \{\par
708     ad_hoc_test_result_.Clear();\par
709   \}\par
}
}
{\xe \v ClearNonAdHocTestResult\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:ClearNonAdHocTestResult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::UnitTestImpl::ClearNonAdHocTestResult (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAA}
{\bkmkend AAAAAAABAA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 702                                  \{\par
703     ForEach(test_cases_, TestCase::ClearTestCaseResult);\par
704   \}\par
}
{
\ql
References testing::internal::ForEach().}\par
{
\ql
Referenced by RunAllTests().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a96c2a5b23541ef01020c402644563ba1_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a96c2a5b23541ef01020c402644563ba1_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ConfigureXmlOutput\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:ConfigureXmlOutput}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::UnitTestImpl::ConfigureXmlOutput ()}}
\par
{\bkmkstart AAAAAAABAB}
{\bkmkend AAAAAAABAB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4400                                       \{\par
4401   {\cf17 const} std::string& output_format = UnitTestOptions::GetOutputFormat();\par
4402   {\cf19 if} (output_format == {\cf22 "xml"}) \{\par
4403     listeners()->SetDefaultXmlGenerator({\cf17 new} XmlUnitTestResultPrinter(\par
4404         UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));\par
4405   \} {\cf19 else} {\cf19 if} (output_format != {\cf22 ""}) \{\par
4406     printf({\cf22 "WARNING: unrecognized output format \\"%s\\" ignored.\\n"},\par
4407            output_format.c_str());\par
4408     fflush(stdout);\par
4409   \}\par
4410 \}\par
}
{
\ql
References std::string::c_str(), testing::internal::UnitTestOptions::GetAbsolutePathToOutputFile(), testing::internal::UnitTestOptions::GetOutputFormat(), and listeners().}\par
{
\ql
Referenced by PostFlagParsingInit().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a21cd7b2928de03a55b5252f29dd5ae6d_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a21cd7b2928de03a55b5252f29dd5ae6d_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v current_test_case\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:current_test_case}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const TestCase* testing::internal::UnitTestImpl::current_test_case () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAC}
{\bkmkend AAAAAAABAC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 733 \{ {\cf19 return} current_test_case_; \}\par
}
}
{\xe \v current_test_info\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:current_test_info}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TestInfo* testing::internal::UnitTestImpl::current_test_info (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAD}
{\bkmkend AAAAAAABAD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 734 \{ {\cf19 return} current_test_info_; \}\par
}
}
{\xe \v current_test_info\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:current_test_info}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const TestInfo* testing::internal::UnitTestImpl::current_test_info () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAE}
{\bkmkend AAAAAAABAE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 735 \{ {\cf19 return} current_test_info_; \}\par
}
}
{\xe \v current_test_result\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:current_test_result}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TestResult * testing::internal::UnitTestImpl::current_test_result ()}}
\par
{\bkmkstart AAAAAAABAF}
{\bkmkend AAAAAAABAF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4932                                               \{\par
4933   {\cf19 return} current_test_info_ ?\par
4934       &(current_test_info_->result_) : &ad_hoc_test_result_;\par
4935 \}\par
}
{
\ql
References ad_hoc_test_result_, and current_test_info_.}\par
{
\ql
Referenced by testing::internal::DefaultGlobalTestPartResultReporter::ReportTestPartResult().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_aba3caef4ad23ce98be80250aeb0cc787_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v CurrentOsStackTraceExceptTop\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:CurrentOsStackTraceExceptTop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::string} testing::internal::UnitTestImpl::CurrentOsStackTraceExceptTop (int  {\i skip_count})}}
\par
{\bkmkstart AAAAAAABAG}
{\bkmkend AAAAAAABAG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 796                                                                    \{\par
797   {\cf19 return} os_stack_trace_getter()->CurrentStackTrace(\par
798       {\cf17 static_cast<}{\cf18 int}{\cf17 >}(GTEST_FLAG(stack_trace_depth)),\par
799       skip_count + 1\par
800       {\cf20 // Skips the user-specified number of frames plus this function}\par
801       {\cf20 // itself.}\par
802       );  {\cf20 // NOLINT}\par
803 \}\par
}
{
\ql
References testing::internal::OsStackTraceGetterInterface::CurrentStackTrace(), and os_stack_trace_getter().}\par
{
\ql
Referenced by testing::internal::GetCurrentOsStackTraceExceptTop().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a61c0a51ac4e57d9f884f646ca6dd2210_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a61c0a51ac4e57d9f884f646ca6dd2210_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v disabled_test_count\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:disabled_test_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::internal::UnitTestImpl::disabled_test_count () const}}
\par
{\bkmkstart AAAAAAABAH}
{\bkmkend AAAAAAABAH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 767                                             \{\par
768   {\cf19 return} SumOverTestCaseList(test_cases_, &TestCase::disabled_test_count);\par
769 \}\par
}
{
\ql
References testing::internal::SumOverTestCaseList(), and test_cases_.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a0c18b2a9cb240722b1e38a3530aa2269_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v elapsed_time\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:elapsed_time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TimeInMillis testing::internal::UnitTestImpl::elapsed_time () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAI}
{\bkmkend AAAAAAABAI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 564 \{ {\cf19 return} elapsed_time_; \}\par
}
}
{\xe \v environments\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:environments}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::vector}<Environment*>& testing::internal::UnitTestImpl::environments (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAJ}
{\bkmkend AAAAAAABAJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 739 \{ {\cf19 return} environments_; \}\par
}
}
{\xe \v Failed\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:Failed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool testing::internal::UnitTestImpl::Failed () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAK}
{\bkmkend AAAAAAABAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 571                       \{\par
572     {\cf19 return} failed_test_case_count() > 0 || ad_hoc_test_result()->Failed();\par
573   \}\par
}
}
{\xe \v failed_test_case_count\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:failed_test_case_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::internal::UnitTestImpl::failed_test_case_count () const}}
\par
{\bkmkstart AAAAAAABAL}
{\bkmkend AAAAAAABAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 735                                                \{\par
736   {\cf19 return} CountIf(test_cases_, TestCaseFailed);\par
737 \}\par
}
{
\ql
References testing::internal::CountIf(), test_cases_, and testing::internal::TestCaseFailed().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_af981a537231e1dad4c1f092c6fdec1ff_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v failed_test_count\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:failed_test_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::internal::UnitTestImpl::failed_test_count () const}}
\par
{\bkmkstart AAAAAAABAM}
{\bkmkend AAAAAAABAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 756                                           \{\par
757   {\cf19 return} SumOverTestCaseList(test_cases_, &TestCase::failed_test_count);\par
758 \}\par
}
{
\ql
References testing::internal::SumOverTestCaseList(), and test_cases_.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_ad0abe95b66466268363d7fa407bac41b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v FilterTests\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:FilterTests}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::internal::UnitTestImpl::FilterTests ({\b ReactionToSharding}  {\i shard_tests})}}
\par
{\bkmkstart AAAAAAABAN}
{\bkmkend AAAAAAABAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4789                                                             \{\par
4790   {\cf17 const} Int32 total_shards = shard_tests == HONOR_SHARDING_PROTOCOL ?\par
4791       Int32FromEnvOrDie(kTestTotalShards, -1) : -1;\par
4792   {\cf17 const} Int32 shard_index = shard_tests == HONOR_SHARDING_PROTOCOL ?\par
4793       Int32FromEnvOrDie(kTestShardIndex, -1) : -1;\par
4794 \par
4795   {\cf20 // num_runnable_tests are the number of tests that will}\par
4796   {\cf20 // run across all shards (i.e., match filter and are not disabled).}\par
4797   {\cf20 // num_selected_tests are the number of tests to be run on}\par
4798   {\cf20 // this shard.}\par
4799   {\cf18 int} num_runnable_tests = 0;\par
4800   {\cf18 int} num_selected_tests = 0;\par
4801   {\cf19 for} ({\cf18 size_t} i = 0; i < test_cases_.size(); i++) \{\par
4802     TestCase* {\cf17 const} test_case = test_cases_[i];\par
4803     {\cf17 const} std::string &test_case_name = test_case->name();\par
4804     test_case->set_should_run({\cf17 false});\par
4805 \par
4806     {\cf19 for} ({\cf18 size_t} j = 0; j < test_case->test_info_list().size(); j++) \{\par
4807       TestInfo* {\cf17 const} test_info = test_case->test_info_list()[j];\par
4808       {\cf17 const} std::string test_name(test_info->name());\par
4809       {\cf20 // A test is disabled if test case name or test name matches}\par
4810       {\cf20 // kDisableTestFilter.}\par
4811       {\cf17 const} {\cf18 bool} is_disabled =\par
4812           internal::UnitTestOptions::MatchesFilter(test_case_name,\par
4813                                                    kDisableTestFilter) ||\par
4814           internal::UnitTestOptions::MatchesFilter(test_name,\par
4815                                                    kDisableTestFilter);\par
4816       test_info->is_disabled_ = is_disabled;\par
4817 \par
4818       {\cf17 const} {\cf18 bool} matches_filter =\par
4819           internal::UnitTestOptions::FilterMatchesTest(test_case_name,\par
4820                                                        test_name);\par
4821       test_info->matches_filter_ = matches_filter;\par
4822 \par
4823       {\cf17 const} {\cf18 bool} is_runnable =\par
4824           (GTEST_FLAG(also_run_disabled_tests) || !is_disabled) &&\par
4825           matches_filter;\par
4826 \par
4827       {\cf17 const} {\cf18 bool} is_selected = is_runnable &&\par
4828           (shard_tests == IGNORE_SHARDING_PROTOCOL ||\par
4829            ShouldRunTestOnShard(total_shards, shard_index,\par
4830                                 num_runnable_tests));\par
4831 \par
4832       num_runnable_tests += is_runnable;\par
4833       num_selected_tests += is_selected;\par
4834 \par
4835       test_info->should_run_ = is_selected;\par
4836       test_case->set_should_run(test_case->should_run() || is_selected);\par
4837     \}\par
4838   \}\par
4839   {\cf19 return} num_selected_tests;\par
4840 \}\par
}
{
\ql
References testing::internal::UnitTestOptions::FilterMatchesTest(), HONOR_SHARDING_PROTOCOL, IGNORE_SHARDING_PROTOCOL, testing::internal::Int32FromEnvOrDie(), testing::kDisableTestFilter, testing::kTestShardIndex, testing::kTestTotalShards, testing::internal::UnitTestOptions::MatchesFilter(), testing::internal::ShouldRunTestOnShard(), std::vector< T >::size(), and test_cases_.}\par
{
\ql
Referenced by RunAllTests().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_abd47e447f0c2557ed528db0350671bed_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_abd47e447f0c2557ed528db0350671bed_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetGlobalTestPartResultReporter\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:GetGlobalTestPartResultReporter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TestPartResultReporterInterface * testing::internal::UnitTestImpl::GetGlobalTestPartResultReporter ()}}
\par
{\bkmkstart AAAAAAABAO}
{\bkmkend AAAAAAABAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 705                                               \{\par
706   internal::MutexLock lock(&global_test_part_result_reporter_mutex_);\par
707   {\cf19 return} global_test_part_result_repoter_;\par
708 \}\par
}
{
\ql
References global_test_part_result_reporter_mutex_, and global_test_part_result_repoter_.}\par
{
\ql
Referenced by testing::internal::DefaultPerThreadTestPartResultReporter::ReportTestPartResult().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a1cd291fd6751654924362164735d4b49_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetMutableTestCase\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:GetMutableTestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TestCase* testing::internal::UnitTestImpl::GetMutableTestCase (int  {\i i}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAP}
{\bkmkend AAAAAAABAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 584                                       \{\par
585     {\cf17 const} {\cf18 int} index = GetElementOr(test_case_indices_, i, -1);\par
586     {\cf19 return} index < 0 ? NULL : test_cases_[index];\par
587   \}\par
}
{
\ql
References testing::internal::GetElementOr().}\par
{
\ql
Referenced by RunAllTests().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a2ca71a08060037357fc7e1a406b89add_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a2ca71a08060037357fc7e1a406b89add_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetTestCase\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:GetTestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TestCase * testing::internal::UnitTestImpl::GetTestCase (const char *  {\i test_case_name}, const char *  {\i type_param}, Test::SetUpTestCaseFunc  {\i set_up_tc}, Test::TearDownTestCaseFunc  {\i tear_down_tc})}}
\par
{\bkmkstart AAAAAAABAQ}
{\bkmkend AAAAAAABAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4505                                                                            \{\par
4506   {\cf20 // Can we find a TestCase with the given name?}\par
4507   {\cf17 const} std::vector<TestCase*>::const_iterator test_case =\par
4508       std::find_if(test_cases_.begin(), test_cases_.end(),\par
4509                    TestCaseNameIs(test_case_name));\par
4510 \par
4511   {\cf19 if} (test_case != test_cases_.end())\par
4512     {\cf19 return} *test_case;\par
4513 \par
4514   {\cf20 // No.  Let's create one.}\par
4515   TestCase* {\cf17 const} new_test_case =\par
4516       {\cf17 new} TestCase(test_case_name, type_param, set_up_tc, tear_down_tc);\par
4517 \par
4518   {\cf20 // Is this a death test case?}\par
4519   {\cf19 if} (internal::UnitTestOptions::MatchesFilter(test_case_name,\par
4520                                                kDeathTestCaseFilter)) \{\par
4521     {\cf20 // Yes.  Inserts the test case after the last death test case}\par
4522     {\cf20 // defined so far.  This only works when the test cases haven't}\par
4523     {\cf20 // been shuffled.  Otherwise we may end up running a death test}\par
4524     {\cf20 // after a non-death test.}\par
4525     ++last_death_test_case_;\par
4526     test_cases_.insert(test_cases_.begin() + last_death_test_case_,\par
4527                        new_test_case);\par
4528   \} {\cf19 else} \{\par
4529     {\cf20 // No.  Appends to the end of the list.}\par
4530     test_cases_.push_back(new_test_case);\par
4531   \}\par
4532 \par
4533   test_case_indices_.push_back({\cf17 static_cast<}{\cf18 int}{\cf17 >}(test_case_indices_.size()));\par
4534   {\cf19 return} new_test_case;\par
4535 \}\par
}
{
\ql
References std::vector< T >::begin(), std::vector< T >::end(), std::find_if(), std::vector< T >::insert(), testing::kDeathTestCaseFilter, last_death_test_case_, testing::internal::UnitTestOptions::MatchesFilter(), std::vector< T >::push_back(), std::vector< T >::size(), test_case_indices_, and test_cases_.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_ac5684d824a59e963cb3274c79d0b6df3_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetTestCase\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:GetTestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const TestCase* testing::internal::UnitTestImpl::GetTestCase (int  {\i i}) const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAR}
{\bkmkend AAAAAAABAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 577                                            \{\par
578     {\cf17 const} {\cf18 int} index = GetElementOr(test_case_indices_, i, -1);\par
579     {\cf19 return} index < 0 ? NULL : test_cases_[i];\par
580   \}\par
}
{
\ql
References testing::internal::GetElementOr().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a6438e18ea4904d239a3db7b036a52229_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetTestPartResultReporterForCurrentThread\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:GetTestPartResultReporterForCurrentThread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TestPartResultReporterInterface * testing::internal::UnitTestImpl::GetTestPartResultReporterForCurrentThread ()}}
\par
{\bkmkstart AAAAAAABAS}
{\bkmkend AAAAAAABAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 719                                                         \{\par
720   {\cf19 return} per_thread_test_part_result_reporter_.get();\par
721 \}\par
}
{
\ql
References per_thread_test_part_result_reporter_.}\par
}
{\xe \v GTEST_DISALLOW_COPY_AND_ASSIGN_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:GTEST_DISALLOW_COPY_AND_ASSIGN_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
testing::internal::UnitTestImpl::GTEST_DISALLOW_COPY_AND_ASSIGN_ ({\b UnitTestImpl} ){\f2 [private]}}}
\par
{\bkmkstart AAAAAAABAT}
{\bkmkend AAAAAAABAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v gtest_trace_stack\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:gtest_trace_stack}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::vector}<{\b TraceInfo}>& testing::internal::UnitTestImpl::gtest_trace_stack (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAU}
{\bkmkend AAAAAAABAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 742                                             \{\par
743     {\cf19 return} *(gtest_trace_stack_.pointer());\par
744   \}\par
}
}
{\xe \v gtest_trace_stack\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:gtest_trace_stack}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b std::vector}<{\b TraceInfo}>& testing::internal::UnitTestImpl::gtest_trace_stack () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAV}
{\bkmkend AAAAAAABAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 745                                                         \{\par
746     {\cf19 return} gtest_trace_stack_.get();\par
747   \}\par
}
}
{\xe \v listeners\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:listeners}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TestEventListeners* testing::internal::UnitTestImpl::listeners (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAW}
{\bkmkend AAAAAAABAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 590 \{ {\cf19 return} &listeners_; \}\par
}
{
\ql
Referenced by ConfigureXmlOutput(), PostFlagParsingInit(), testing::internal::DefaultGlobalTestPartResultReporter::ReportTestPartResult(), RunAllTests(), and UnitTestImpl().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a67211f8475936f88d0e4d30f841c0da4_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ListTestsMatchingFilter\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:ListTestsMatchingFilter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::UnitTestImpl::ListTestsMatchingFilter ()}}
\par
{\bkmkstart AAAAAAABAX}
{\bkmkend AAAAAAABAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4865                                            \{\par
4866   {\cf20 // Print at most this many characters for each type/value parameter.}\par
4867   {\cf17 const} {\cf18 int} kMaxParamLength = 250;\par
4868 \par
4869   {\cf19 for} ({\cf18 size_t} i = 0; i < test_cases_.size(); i++) \{\par
4870     {\cf17 const} TestCase* {\cf17 const} test_case = test_cases_[i];\par
4871     {\cf18 bool} printed_test_case_name = {\cf17 false};\par
4872 \par
4873     {\cf19 for} ({\cf18 size_t} j = 0; j < test_case->test_info_list().size(); j++) \{\par
4874       {\cf17 const} TestInfo* {\cf17 const} test_info =\par
4875           test_case->test_info_list()[j];\par
4876       {\cf19 if} (test_info->matches_filter_) \{\par
4877         {\cf19 if} (!printed_test_case_name) \{\par
4878           printed_test_case_name = {\cf17 true};\par
4879           printf({\cf22 "%s."}, test_case->name());\par
4880           {\cf19 if} (test_case->type_param() != NULL) \{\par
4881             printf({\cf22 "  # %s = "}, kTypeParamLabel);\par
4882             {\cf20 // We print the type parameter on a single line to make}\par
4883             {\cf20 // the output easy to parse by a program.}\par
4884             PrintOnOneLine(test_case->type_param(), kMaxParamLength);\par
4885           \}\par
4886           printf({\cf22 "\\n"});\par
4887         \}\par
4888         printf({\cf22 "  %s"}, test_info->name());\par
4889         {\cf19 if} (test_info->value_param() != NULL) \{\par
4890           printf({\cf22 "  # %s = "}, kValueParamLabel);\par
4891           {\cf20 // We print the value parameter on a single line to make the}\par
4892           {\cf20 // output easy to parse by a program.}\par
4893           PrintOnOneLine(test_info->value_param(), kMaxParamLength);\par
4894         \}\par
4895         printf({\cf22 "\\n"});\par
4896       \}\par
4897     \}\par
4898   \}\par
4899   fflush(stdout);\par
4900 \}\par
}
{
\ql
References testing::internal::kTypeParamLabel, testing::internal::kValueParamLabel, testing::internal::PrintOnOneLine(), std::vector< T >::size(), and test_cases_.}\par
{
\ql
Referenced by RunAllTests().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_ad2cfedef41d3d29aad23c2c64214e6f3_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_ad2cfedef41d3d29aad23c2c64214e6f3_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v os_stack_trace_getter\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:os_stack_trace_getter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b OsStackTraceGetterInterface} * testing::internal::UnitTestImpl::os_stack_trace_getter ()}}
\par
{\bkmkstart AAAAAAABAY}
{\bkmkend AAAAAAABAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4918                                                                  \{\par
4919   {\cf19 if} (os_stack_trace_getter_ == NULL) \{\par
4920 {\cf21 #ifdef GTEST_OS_STACK_TRACE_GETTER_}\par
4921     os_stack_trace_getter_ = {\cf17 new} GTEST_OS_STACK_TRACE_GETTER_;\par
4922 {\cf21 #else}\par
4923     os_stack_trace_getter_ = {\cf17 new} OsStackTraceGetter;\par
4924 {\cf21 #endif  }{\cf20 // GTEST_OS_STACK_TRACE_GETTER_}\par
4925   \}\par
4926 \par
4927   {\cf19 return} os_stack_trace_getter_;\par
4928 \}\par
}
{
\ql
References os_stack_trace_getter_.}\par
{
\ql
Referenced by CurrentOsStackTraceExceptTop().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a71753679854f7fbba6c1568eb422fecb_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Passed\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:Passed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool testing::internal::UnitTestImpl::Passed () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAZ}
{\bkmkend AAAAAAABAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 567 \{ {\cf19 return} !Failed(); \}\par
}
{
\ql
Referenced by RunAllTests().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_ae8e461369acfec902da382bc02297fe5_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PostFlagParsingInit\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:PostFlagParsingInit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::UnitTestImpl::PostFlagParsingInit ()}}
\par
{\bkmkstart AAAAAAABBA}
{\bkmkend AAAAAAABBA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4436                                        \{\par
4437   {\cf20 // Ensures that this function does not execute more than once.}\par
4438   {\cf19 if} (!post_flag_parse_init_performed_) \{\par
4439     post_flag_parse_init_performed_ = {\cf17 true};\par
4440 \par
4441 {\cf21 #if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)}\par
4442     {\cf20 // Register to send notifications about key process state changes.}\par
4443     listeners()->Append({\cf17 new} GTEST_CUSTOM_TEST_EVENT_LISTENER_());\par
4444 {\cf21 #endif  }{\cf20 // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)}\par
4445 \par
4446 {\cf21 #if GTEST_HAS_DEATH_TEST}\par
4447     InitDeathTestSubprocessControlInfo();\par
4448     SuppressTestEventsIfInSubprocess();\par
4449 {\cf21 #endif  }{\cf20 // GTEST_HAS_DEATH_TEST}\par
4450 \par
4451     {\cf20 // Registers parameterized tests. This makes parameterized tests}\par
4452     {\cf20 // available to the UnitTest reflection API without running}\par
4453     {\cf20 // RUN_ALL_TESTS.}\par
4454     RegisterParameterizedTests();\par
4455 \par
4456     {\cf20 // Configures listeners for XML output. This makes it possible for users}\par
4457     {\cf20 // to shut down the default XML output before invoking RUN_ALL_TESTS.}\par
4458     ConfigureXmlOutput();\par
4459 \par
4460 {\cf21 #if GTEST_CAN_STREAM_RESULTS_}\par
4461     {\cf20 // Configures listeners for streaming test results to the specified server.}\par
4462     ConfigureStreamingOutput();\par
4463 {\cf21 #endif  }{\cf20 // GTEST_CAN_STREAM_RESULTS_}\par
4464   \}\par
4465 \}\par
}
{
\ql
References ConfigureXmlOutput(), listeners(), post_flag_parse_init_performed_, and RegisterParameterizedTests().}\par
{
\ql
Referenced by testing::internal::InitGoogleTestImpl(), and RunAllTests().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a772894193104b1b2516f16e6ff813168_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a772894193104b1b2516f16e6ff813168_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v random\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:random}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
internal::Random* testing::internal::UnitTestImpl::random (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABBB}
{\bkmkend AAAAAAABBB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 792 \{ {\cf19 return} &random_; \}\par
}
{
\ql
Referenced by RunAllTests(), and ShuffleTests().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_ab3b45b5eb4d583219a3602011ea44347_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v random_seed\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:random_seed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::internal::UnitTestImpl::random_seed () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABBC}
{\bkmkend AAAAAAABBC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 789 \{ {\cf19 return} random_seed_; \}\par
}
{
\ql
Referenced by RunAllTests().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a625b9fb6d17b008c44fc902255e6343c_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v RecordProperty\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:RecordProperty}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::UnitTestImpl::RecordProperty (const TestProperty &  {\i test_property})}}
\par
{\bkmkstart AAAAAAABBD}
{\bkmkend AAAAAAABBD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4372                                                                    \{\par
4373   std::string xml_element;\par
4374   TestResult* test_result;  {\cf20 // TestResult appropriate for property recording.}\par
4375 \par
4376   {\cf19 if} (current_test_info_ != NULL) \{\par
4377     xml_element = {\cf22 "testcase"};\par
4378     test_result = &(current_test_info_->result_);\par
4379   \} {\cf19 else} {\cf19 if} (current_test_case_ != NULL) \{\par
4380     xml_element = {\cf22 "testsuite"};\par
4381     test_result = &(current_test_case_->ad_hoc_test_result_);\par
4382   \} {\cf19 else} \{\par
4383     xml_element = {\cf22 "testsuites"};\par
4384     test_result = &ad_hoc_test_result_;\par
4385   \}\par
4386   test_result->RecordProperty(xml_element, test_property);\par
4387 \}\par
}
{
\ql
References ad_hoc_test_result_, current_test_case_, and current_test_info_.}\par
}
{\xe \v RegisterParameterizedTests\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:RegisterParameterizedTests}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::UnitTestImpl::RegisterParameterizedTests ()}}
\par
{\bkmkstart AAAAAAABBE}
{\bkmkend AAAAAAABBE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2617                                               \{\par
2618 {\cf21 #if GTEST_HAS_PARAM_TEST}\par
2619   {\cf19 if} (!parameterized_tests_registered_) \{\par
2620     parameterized_test_registry_.RegisterTests();\par
2621     parameterized_tests_registered_ = {\cf17 true};\par
2622   \}\par
2623 {\cf21 #endif}\par
2624 \}\par
}
{
\ql
Referenced by PostFlagParsingInit().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_af84d2515f1a272a8783f00a3e8c0aff8_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v reportable_disabled_test_count\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:reportable_disabled_test_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::internal::UnitTestImpl::reportable_disabled_test_count () const}}
\par
{\bkmkstart AAAAAAABBF}
{\bkmkend AAAAAAABBF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 761                                                        \{\par
762   {\cf19 return} SumOverTestCaseList(test_cases_,\par
763                              &TestCase::reportable_disabled_test_count);\par
764 \}\par
}
{
\ql
References testing::internal::SumOverTestCaseList(), and test_cases_.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a04827d118a329af68a1de2d6b93eb4e5_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v reportable_test_count\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:reportable_test_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::internal::UnitTestImpl::reportable_test_count () const}}
\par
{\bkmkstart AAAAAAABBG}
{\bkmkend AAAAAAABBG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 772                                               \{\par
773   {\cf19 return} SumOverTestCaseList(test_cases_, &TestCase::reportable_test_count);\par
774 \}\par
}
{
\ql
References testing::internal::SumOverTestCaseList(), and test_cases_.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_addb3896c4e0973bb5d2744fcb158afce_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v RunAllTests\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:RunAllTests}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool testing::internal::UnitTestImpl::RunAllTests ()}}
\par
{\bkmkstart AAAAAAABBH}
{\bkmkend AAAAAAABBH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4551                                \{\par
4552   {\cf20 // Makes sure InitGoogleTest() was called.}\par
4553   {\cf19 if} (!GTestIsInitialized()) \{\par
4554     printf({\cf22 "%s"},\par
4555            {\cf22 "\\nThis test program did NOT call ::testing::InitGoogleTest "}\par
4556            {\cf22 "before calling RUN_ALL_TESTS().  Please fix it.\\n"});\par
4557     {\cf19 return} {\cf17 false};\par
4558   \}\par
4559 \par
4560   {\cf20 // Do not run any test if the --help flag was specified.}\par
4561   {\cf19 if} (g_help_flag)\par
4562     {\cf19 return} {\cf17 true};\par
4563 \par
4564   {\cf20 // Repeats the call to the post-flag parsing initialization in case the}\par
4565   {\cf20 // user didn't call InitGoogleTest.}\par
4566   PostFlagParsingInit();\par
4567 \par
4568   {\cf20 // Even if sharding is not on, test runners may want to use the}\par
4569   {\cf20 // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding}\par
4570   {\cf20 // protocol.}\par
4571   internal::WriteToShardStatusFileIfNeeded();\par
4572 \par
4573   {\cf20 // True iff we are in a subprocess for running a thread-safe-style}\par
4574   {\cf20 // death test.}\par
4575   {\cf18 bool} in_subprocess_for_death_test = {\cf17 false};\par
4576 \par
4577 {\cf21 #if GTEST_HAS_DEATH_TEST}\par
4578   in_subprocess_for_death_test = (internal_run_death_test_flag_.get() != NULL);\par
4579 {\cf21 # if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)}\par
4580   {\cf19 if} (in_subprocess_for_death_test) \{\par
4581     GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();\par
4582   \}\par
4583 {\cf21 # endif  }{\cf20 // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)}\par
4584 {\cf21 #endif  }{\cf20 // GTEST_HAS_DEATH_TEST}\par
4585 \par
4586   {\cf17 const} {\cf18 bool} should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,\par
4587                                         in_subprocess_for_death_test);\par
4588 \par
4589   {\cf20 // Compares the full test names with the filter to decide which}\par
4590   {\cf20 // tests to run.}\par
4591   {\cf17 const} {\cf18 bool} has_tests_to_run = FilterTests(should_shard\par
4592                                               ? HONOR_SHARDING_PROTOCOL\par
4593                                               : IGNORE_SHARDING_PROTOCOL) > 0;\par
4594 \par
4595   {\cf20 // Lists the tests and exits if the --gtest_list_tests flag was specified.}\par
4596   {\cf19 if} (GTEST_FLAG(list_tests)) \{\par
4597     {\cf20 // This must be called *after* FilterTests() has been called.}\par
4598     ListTestsMatchingFilter();\par
4599     {\cf19 return} {\cf17 true};\par
4600   \}\par
4601 \par
4602   random_seed_ = GTEST_FLAG(shuffle) ?\par
4603       GetRandomSeedFromFlag(GTEST_FLAG(random_seed)) : 0;\par
4604 \par
4605   {\cf20 // True iff at least one test has failed.}\par
4606   {\cf18 bool} failed = {\cf17 false};\par
4607 \par
4608   TestEventListener* repeater = listeners()->repeater();\par
4609 \par
4610   start_timestamp_ = GetTimeInMillis();\par
4611   repeater->OnTestProgramStart(*parent_);\par
4612 \par
4613   {\cf20 // How many times to repeat the tests?  We don't want to repeat them}\par
4614   {\cf20 // when we are inside the subprocess of a death test.}\par
4615   {\cf17 const} {\cf18 int} repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG(repeat);\par
4616   {\cf20 // Repeats forever if the repeat count is negative.}\par
4617   {\cf17 const} {\cf18 bool} forever = repeat < 0;\par
4618   {\cf19 for} ({\cf18 int} i = 0; forever || i != repeat; i++) \{\par
4619     {\cf20 // We want to preserve failures generated by ad-hoc test}\par
4620     {\cf20 // assertions executed before RUN_ALL_TESTS().}\par
4621     ClearNonAdHocTestResult();\par
4622 \par
4623     {\cf17 const} TimeInMillis start = GetTimeInMillis();\par
4624 \par
4625     {\cf20 // Shuffles test cases and tests if requested.}\par
4626     {\cf19 if} (has_tests_to_run && GTEST_FLAG(shuffle)) \{\par
4627       random()->Reseed(random_seed_);\par
4628       {\cf20 // This should be done before calling OnTestIterationStart(),}\par
4629       {\cf20 // such that a test event listener can see the actual test order}\par
4630       {\cf20 // in the event.}\par
4631       ShuffleTests();\par
4632     \}\par
4633 \par
4634     {\cf20 // Tells the unit test event listeners that the tests are about to start.}\par
4635     repeater->OnTestIterationStart(*parent_, i);\par
4636 \par
4637     {\cf20 // Runs each test case if there is at least one test to run.}\par
4638     {\cf19 if} (has_tests_to_run) \{\par
4639       {\cf20 // Sets up all environments beforehand.}\par
4640       repeater->OnEnvironmentsSetUpStart(*parent_);\par
4641       ForEach(environments_, SetUpEnvironment);\par
4642       repeater->OnEnvironmentsSetUpEnd(*parent_);\par
4643 \par
4644       {\cf20 // Runs the tests only if there was no fatal failure during global}\par
4645       {\cf20 // set-up.}\par
4646       {\cf19 if} (!Test::HasFatalFailure()) \{\par
4647         {\cf19 for} ({\cf18 int} test_index = 0; test_index < total_test_case_count();\par
4648              test_index++) \{\par
4649           GetMutableTestCase(test_index)->Run();\par
4650         \}\par
4651       \}\par
4652 \par
4653       {\cf20 // Tears down all environments in reverse order afterwards.}\par
4654       repeater->OnEnvironmentsTearDownStart(*parent_);\par
4655       std::for_each(environments_.rbegin(), environments_.rend(),\par
4656                     TearDownEnvironment);\par
4657       repeater->OnEnvironmentsTearDownEnd(*parent_);\par
4658     \}\par
4659 \par
4660     elapsed_time_ = GetTimeInMillis() - start;\par
4661 \par
4662     {\cf20 // Tells the unit test event listener that the tests have just finished.}\par
4663     repeater->OnTestIterationEnd(*parent_, i);\par
4664 \par
4665     {\cf20 // Gets the result and clears it.}\par
4666     {\cf19 if} (!Passed()) \{\par
4667       failed = {\cf17 true};\par
4668     \}\par
4669 \par
4670     {\cf20 // Restores the original test order after the iteration.  This}\par
4671     {\cf20 // allows the user to quickly repro a failure that happens in the}\par
4672     {\cf20 // N-th iteration without repeating the first (N - 1) iterations.}\par
4673     {\cf20 // This is not enclosed in "if (GTEST_FLAG(shuffle)) \{ ... \}", in}\par
4674     {\cf20 // case the user somehow changes the value of the flag somewhere}\par
4675     {\cf20 // (it's always safe to unshuffle the tests).}\par
4676     UnshuffleTests();\par
4677 \par
4678     {\cf19 if} (GTEST_FLAG(shuffle)) \{\par
4679       {\cf20 // Picks a new random seed for each iteration.}\par
4680       random_seed_ = GetNextRandomSeed(random_seed_);\par
4681     \}\par
4682   \}\par
4683 \par
4684   repeater->OnTestProgramEnd(*parent_);\par
4685 \par
4686   {\cf19 return} !failed;\par
4687 \}\par
}
{
\ql
References ClearNonAdHocTestResult(), elapsed_time_, environments_, FilterTests(), std::for_each(), testing::internal::ForEach(), testing::internal::g_help_flag, GetMutableTestCase(), testing::internal::GetNextRandomSeed(), testing::internal::GetRandomSeedFromFlag(), testing::internal::GetTimeInMillis(), testing::internal::GTestIsInitialized(), HONOR_SHARDING_PROTOCOL, IGNORE_SHARDING_PROTOCOL, testing::kTestShardIndex, testing::kTestTotalShards, listeners(), ListTestsMatchingFilter(), parent_, Passed(), PostFlagParsingInit(), random(), random_seed(), random_seed_, std::vector< T >::rbegin(), std::vector< T >::rend(), testing::internal::SetUpEnvironment(), testing::internal::ShouldShard(), ShuffleTests(), start_timestamp_, testing::internal::TearDownEnvironment(), total_test_case_count(), UnshuffleTests(), and testing::internal::WriteToShardStatusFileIfNeeded().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a1fb6be9971f4768c4136a05aa9e7e375_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v set_catch_exceptions\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:set_catch_exceptions}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::UnitTestImpl::set_catch_exceptions (bool  {\i value}){\f2 [inline]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAABBI}
{\bkmkend AAAAAAABBI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 810 \{ catch_exceptions_ = value; \}\par
}
}
{\xe \v set_current_test_case\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:set_current_test_case}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::UnitTestImpl::set_current_test_case (TestCase *  {\i a_current_test_case}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABBJ}
{\bkmkend AAAAAAABBJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 676                                                             \{\par
677     current_test_case_ = a_current_test_case;\par
678   \}\par
}
}
{\xe \v set_current_test_info\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:set_current_test_info}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::UnitTestImpl::set_current_test_info (TestInfo *  {\i a_current_test_info}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABBK}
{\bkmkend AAAAAAABBK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 683                                                             \{\par
684     current_test_info_ = a_current_test_info;\par
685   \}\par
}
}
{\xe \v set_os_stack_trace_getter\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:set_os_stack_trace_getter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::UnitTestImpl::set_os_stack_trace_getter ({\b OsStackTraceGetterInterface} *  {\i getter})}}
\par
{\bkmkstart AAAAAAABBL}
{\bkmkend AAAAAAABBL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4908                                          \{\par
4909   {\cf19 if} (os_stack_trace_getter_ != getter) \{\par
4910     {\cf17 delete} os_stack_trace_getter_;\par
4911     os_stack_trace_getter_ = getter;\par
4912   \}\par
4913 \}\par
}
{
\ql
References os_stack_trace_getter_.}\par
}
{\xe \v SetGlobalTestPartResultReporter\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:SetGlobalTestPartResultReporter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::UnitTestImpl::SetGlobalTestPartResultReporter (TestPartResultReporterInterface *  {\i reporter})}}
\par
{\bkmkstart AAAAAAABBM}
{\bkmkend AAAAAAABBM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 712                                                \{\par
713   internal::MutexLock lock(&global_test_part_result_reporter_mutex_);\par
714   global_test_part_result_repoter_ = reporter;\par
715 \}\par
}
{
\ql
References global_test_part_result_reporter_mutex_, and global_test_part_result_repoter_.}\par
}
{\xe \v SetTestPartResultReporterForCurrentThread\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:SetTestPartResultReporterForCurrentThread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::UnitTestImpl::SetTestPartResultReporterForCurrentThread (TestPartResultReporterInterface *  {\i reporter})}}
\par
{\bkmkstart AAAAAAABBN}
{\bkmkend AAAAAAABBN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 725                                                \{\par
726   per_thread_test_part_result_reporter_.set(reporter);\par
727 \}\par
}
{
\ql
References per_thread_test_part_result_reporter_.}\par
}
{\xe \v ShuffleTests\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:ShuffleTests}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::UnitTestImpl::ShuffleTests ()}}
\par
{\bkmkstart AAAAAAABBO}
{\bkmkend AAAAAAABBO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4939                                 \{\par
4940   {\cf20 // Shuffles the death test cases.}\par
4941   ShuffleRange(random(), 0, last_death_test_case_ + 1, &test_case_indices_);\par
4942 \par
4943   {\cf20 // Shuffles the non-death test cases.}\par
4944   ShuffleRange(random(), last_death_test_case_ + 1,\par
4945                {\cf17 static_cast<}{\cf18 int}{\cf17 >}(test_cases_.size()), &test_case_indices_);\par
4946 \par
4947   {\cf20 // Shuffles the tests inside each test case.}\par
4948   {\cf19 for} ({\cf18 size_t} i = 0; i < test_cases_.size(); i++) \{\par
4949     test_cases_[i]->ShuffleTests(random());\par
4950   \}\par
4951 \}\par
}
{
\ql
References last_death_test_case_, random(), testing::internal::ShuffleRange(), std::vector< T >::size(), test_case_indices_, and test_cases_.}\par
{
\ql
Referenced by RunAllTests().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_aaaa38e6a4372e6bb9bbe3143a3a32b65_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_aaaa38e6a4372e6bb9bbe3143a3a32b65_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v start_timestamp\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:start_timestamp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TimeInMillis testing::internal::UnitTestImpl::start_timestamp () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABBP}
{\bkmkend AAAAAAABBP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 561 \{ {\cf19 return} start_timestamp_; \}\par
}
}
{\xe \v successful_test_case_count\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:successful_test_case_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::internal::UnitTestImpl::successful_test_case_count () const}}
\par
{\bkmkstart AAAAAAABBQ}
{\bkmkend AAAAAAABBQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 730                                                    \{\par
731   {\cf19 return} CountIf(test_cases_, TestCasePassed);\par
732 \}\par
}
{
\ql
References testing::internal::CountIf(), test_cases_, and testing::internal::TestCasePassed().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a2db3a2b3fed8065dbdd768ee407bf67e_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v successful_test_count\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:successful_test_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::internal::UnitTestImpl::successful_test_count () const}}
\par
{\bkmkstart AAAAAAABBR}
{\bkmkend AAAAAAABBR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 751                                               \{\par
752   {\cf19 return} SumOverTestCaseList(test_cases_, &TestCase::successful_test_count);\par
753 \}\par
}
{
\ql
References testing::internal::SumOverTestCaseList(), and test_cases_.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_ac363f681cbecf10fea5c04408b98e744_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v test_case_to_run_count\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:test_case_to_run_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::internal::UnitTestImpl::test_case_to_run_count () const}}
\par
{\bkmkstart AAAAAAABBS}
{\bkmkend AAAAAAABBS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 746                                                \{\par
747   {\cf19 return} CountIf(test_cases_, ShouldRunTestCase);\par
748 \}\par
}
{
\ql
References testing::internal::CountIf(), testing::internal::ShouldRunTestCase(), and test_cases_.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_aff65061646c6b9857b37097423500bfe_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v test_to_run_count\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:test_to_run_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::internal::UnitTestImpl::test_to_run_count () const}}
\par
{\bkmkstart AAAAAAABBT}
{\bkmkend AAAAAAABBT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 782                                           \{\par
783   {\cf19 return} SumOverTestCaseList(test_cases_, &TestCase::test_to_run_count);\par
784 \}\par
}
{
\ql
References testing::internal::SumOverTestCaseList(), and test_cases_.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a0f15365d1d1ce00eaeb6f8a1370113ec_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v total_test_case_count\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:total_test_case_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::internal::UnitTestImpl::total_test_case_count () const}}
\par
{\bkmkstart AAAAAAABBU}
{\bkmkend AAAAAAABBU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 740                                               \{\par
741   {\cf19 return} {\cf17 static_cast<}{\cf18 int}{\cf17 >}(test_cases_.size());\par
742 \}\par
}
{
\ql
References std::vector< T >::size(), and test_cases_.}\par
{
\ql
Referenced by RunAllTests().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_ac1d81d6b146b2dbce460f9a0a57d4f9e_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_ac1d81d6b146b2dbce460f9a0a57d4f9e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v total_test_count\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:total_test_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::internal::UnitTestImpl::total_test_count () const}}
\par
{\bkmkstart AAAAAAABBV}
{\bkmkend AAAAAAABBV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 777                                          \{\par
778   {\cf19 return} SumOverTestCaseList(test_cases_, &TestCase::total_test_count);\par
779 \}\par
}
{
\ql
References testing::internal::SumOverTestCaseList(), and test_cases_.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a89e8531ee2ba3f0aadc27a95ac6149f1_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v UnshuffleTests\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:UnshuffleTests}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::UnitTestImpl::UnshuffleTests ()}}
\par
{\bkmkstart AAAAAAABBW}
{\bkmkend AAAAAAABBW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4954                                   \{\par
4955   {\cf19 for} ({\cf18 size_t} i = 0; i < test_cases_.size(); i++) \{\par
4956     {\cf20 // Unshuffles the tests in each test case.}\par
4957     test_cases_[i]->UnshuffleTests();\par
4958     {\cf20 // Resets the index of each test case.}\par
4959     test_case_indices_[i] = {\cf17 static_cast<}{\cf18 int}{\cf17 >}(i);\par
4960   \}\par
4961 \}\par
}
{
\ql
References std::vector< T >::size(), test_case_indices_, and test_cases_.}\par
{
\ql
Referenced by RunAllTests().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a1ee7db3bf8284dd9dce4dc857564bce3_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1UnitTestImpl_a1ee7db3bf8284dd9dce4dc857564bce3_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends And Related Function Documentation\par
\pard\plain 
{\xe \v ::testing::UnitTest\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:::testing::UnitTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
friend class ::testing::UnitTest{\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABBX}
{\bkmkend AAAAAAABBX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v ad_hoc_test_result_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:ad_hoc_test_result_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TestResult testing::internal::UnitTestImpl::ad_hoc_test_result_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABBY}
{\bkmkend AAAAAAABBY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by current_test_result(), and RecordProperty().}\par
}
{\xe \v catch_exceptions_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:catch_exceptions_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool testing::internal::UnitTestImpl::catch_exceptions_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABBZ}
{\bkmkend AAAAAAABBZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v current_test_case_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:current_test_case_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TestCase* testing::internal::UnitTestImpl::current_test_case_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCA}
{\bkmkend AAAAAAABCA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by RecordProperty().}\par
}
{\xe \v current_test_info_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:current_test_info_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TestInfo* testing::internal::UnitTestImpl::current_test_info_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCB}
{\bkmkend AAAAAAABCB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by current_test_result(), and RecordProperty().}\par
}
{\xe \v default_global_test_part_result_reporter_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:default_global_test_part_result_reporter_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DefaultGlobalTestPartResultReporter} testing::internal::UnitTestImpl::default_global_test_part_result_reporter_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCC}
{\bkmkend AAAAAAABCC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v default_per_thread_test_part_result_reporter_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:default_per_thread_test_part_result_reporter_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DefaultPerThreadTestPartResultReporter} testing::internal::UnitTestImpl::default_per_thread_test_part_result_reporter_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCD}
{\bkmkend AAAAAAABCD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v elapsed_time_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:elapsed_time_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TimeInMillis testing::internal::UnitTestImpl::elapsed_time_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCE}
{\bkmkend AAAAAAABCE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by RunAllTests().}\par
}
{\xe \v environments_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:environments_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::vector}<Environment*> testing::internal::UnitTestImpl::environments_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCF}
{\bkmkend AAAAAAABCF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by RunAllTests(), and ~UnitTestImpl().}\par
}
{\xe \v global_test_part_result_reporter_mutex_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:global_test_part_result_reporter_mutex_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
internal::Mutex testing::internal::UnitTestImpl::global_test_part_result_reporter_mutex_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCG}
{\bkmkend AAAAAAABCG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by GetGlobalTestPartResultReporter(), and SetGlobalTestPartResultReporter().}\par
}
{\xe \v global_test_part_result_repoter_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:global_test_part_result_repoter_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TestPartResultReporterInterface* testing::internal::UnitTestImpl::global_test_part_result_repoter_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCH}
{\bkmkend AAAAAAABCH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by GetGlobalTestPartResultReporter(), and SetGlobalTestPartResultReporter().}\par
}
{\xe \v gtest_trace_stack_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:gtest_trace_stack_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
internal::ThreadLocal<{\b std::vector}<{\b TraceInfo}> > testing::internal::UnitTestImpl::gtest_trace_stack_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCI}
{\bkmkend AAAAAAABCI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v last_death_test_case_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:last_death_test_case_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::internal::UnitTestImpl::last_death_test_case_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCJ}
{\bkmkend AAAAAAABCJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by GetTestCase(), and ShuffleTests().}\par
}
{\xe \v listeners_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:listeners_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TestEventListeners testing::internal::UnitTestImpl::listeners_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCK}
{\bkmkend AAAAAAABCK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v original_working_dir_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:original_working_dir_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
internal::FilePath testing::internal::UnitTestImpl::original_working_dir_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCL}
{\bkmkend AAAAAAABCL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v os_stack_trace_getter_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:os_stack_trace_getter_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b OsStackTraceGetterInterface}* testing::internal::UnitTestImpl::os_stack_trace_getter_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCM}
{\bkmkend AAAAAAABCM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by os_stack_trace_getter(), set_os_stack_trace_getter(), and ~UnitTestImpl().}\par
}
{\xe \v parent_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:parent_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
UnitTest* const testing::internal::UnitTestImpl::parent_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCN}
{\bkmkend AAAAAAABCN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by RunAllTests().}\par
}
{\xe \v per_thread_test_part_result_reporter_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:per_thread_test_part_result_reporter_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
internal::ThreadLocal<TestPartResultReporterInterface*> testing::internal::UnitTestImpl::per_thread_test_part_result_reporter_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCO}
{\bkmkend AAAAAAABCO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by GetTestPartResultReporterForCurrentThread(), and SetTestPartResultReporterForCurrentThread().}\par
}
{\xe \v post_flag_parse_init_performed_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:post_flag_parse_init_performed_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool testing::internal::UnitTestImpl::post_flag_parse_init_performed_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCP}
{\bkmkend AAAAAAABCP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by PostFlagParsingInit().}\par
}
{\xe \v random_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:random_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
internal::Random testing::internal::UnitTestImpl::random_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCQ}
{\bkmkend AAAAAAABCQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v random_seed_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:random_seed_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::internal::UnitTestImpl::random_seed_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCR}
{\bkmkend AAAAAAABCR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by RunAllTests().}\par
}
{\xe \v start_timestamp_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:start_timestamp_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TimeInMillis testing::internal::UnitTestImpl::start_timestamp_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCS}
{\bkmkend AAAAAAABCS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by RunAllTests().}\par
}
{\xe \v test_case_indices_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:test_case_indices_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::vector}<int> testing::internal::UnitTestImpl::test_case_indices_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCT}
{\bkmkend AAAAAAABCT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by GetTestCase(), ShuffleTests(), and UnshuffleTests().}\par
}
{\xe \v test_cases_\:testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl\:test_cases_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::vector}<TestCase*> testing::internal::UnitTestImpl::test_cases_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAABCU}
{\bkmkend AAAAAAABCU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by disabled_test_count(), failed_test_case_count(), failed_test_count(), FilterTests(), GetTestCase(), ListTestsMatchingFilter(), reportable_disabled_test_count(), reportable_test_count(), ShuffleTests(), successful_test_case_count(), successful_test_count(), test_case_to_run_count(), test_to_run_count(), total_test_case_count(), total_test_count(), UnshuffleTests(), and ~UnitTestImpl().}\par
}
}