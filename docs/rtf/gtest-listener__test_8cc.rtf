{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
lib/googletest/test/gtest-listener_test.cc File Reference\par \pard\plain 
{\tc\tcl2 \v lib/googletest/test/gtest-listener_test.cc}
{\xe \v lib/googletest/test/gtest-listener_test.cc}
{\bkmkstart AAAAAAAAYW}
{\bkmkend AAAAAAAAYW}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "gtest/gtest.h"}\par
{\f2 #include <vector>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for gtest-listener_test.cc:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "gtest-listener__test_8cc__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b testing::internal::EnvironmentInvocationCatcher}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b testing::internal::EventRecordingListener}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b testing::internal::ListenerTest}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
 {\b testing}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
 {\b testing::internal}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char **argv)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b testing::internal::TEST_F} (ListenerTest, DoesBar)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b testing::internal::TEST_F} (ListenerTest, DoesFoo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b VerifyResults} (const {\b std::vector}< {\b std::string} > &data, const char *const *expected_data, size_t expected_data_size)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constants\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::vector}< {\b std::string} > * {\b g_events} = NULL\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:gtest-listener_test.cc}
{\xe \v gtest-listener_test.cc\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char **  {\i argv})}}
\par
{\bkmkstart AAAAAAAAYX}
{\bkmkend AAAAAAAAYX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 201                                 \{\par
202   std::vector<std::string> events;\par
203   g_events = &events;\par
204   InitGoogleTest(&argc, argv);\par
205 \par
206   UnitTest::GetInstance()->listeners().Append(\par
207       {\cf17 new} EventRecordingListener({\cf22 "1st"}));\par
208   UnitTest::GetInstance()->listeners().Append(\par
209       {\cf17 new} EventRecordingListener({\cf22 "2nd"}));\par
210 \par
211   AddGlobalTestEnvironment({\cf17 new} EnvironmentInvocationCatcher);\par
212 \par
213   GTEST_CHECK_(events.size() == 0)\par
214       << {\cf22 "AddGlobalTestEnvironment should not generate any events itself."};\par
215 \par
216   ::testing::GTEST_FLAG(repeat) = 2;\par
217   {\cf18 int} ret_val = RUN_ALL_TESTS();\par
218 \par
219   {\cf17 const} {\cf18 char}* {\cf17 const} expected_events[] = \{\par
220     {\cf22 "1st.OnTestProgramStart"},\par
221     {\cf22 "2nd.OnTestProgramStart"},\par
222     {\cf22 "1st.OnTestIterationStart(0)"},\par
223     {\cf22 "2nd.OnTestIterationStart(0)"},\par
224     {\cf22 "1st.OnEnvironmentsSetUpStart"},\par
225     {\cf22 "2nd.OnEnvironmentsSetUpStart"},\par
226     {\cf22 "Environment::SetUp"},\par
227     {\cf22 "2nd.OnEnvironmentsSetUpEnd"},\par
228     {\cf22 "1st.OnEnvironmentsSetUpEnd"},\par
229     {\cf22 "1st.OnTestCaseStart"},\par
230     {\cf22 "2nd.OnTestCaseStart"},\par
231     {\cf22 "ListenerTest::SetUpTestCase"},\par
232     {\cf22 "1st.OnTestStart"},\par
233     {\cf22 "2nd.OnTestStart"},\par
234     {\cf22 "ListenerTest::SetUp"},\par
235     {\cf22 "ListenerTest::* Test Body"},\par
236     {\cf22 "1st.OnTestPartResult"},\par
237     {\cf22 "2nd.OnTestPartResult"},\par
238     {\cf22 "ListenerTest::TearDown"},\par
239     {\cf22 "2nd.OnTestEnd"},\par
240     {\cf22 "1st.OnTestEnd"},\par
241     {\cf22 "1st.OnTestStart"},\par
242     {\cf22 "2nd.OnTestStart"},\par
243     {\cf22 "ListenerTest::SetUp"},\par
244     {\cf22 "ListenerTest::* Test Body"},\par
245     {\cf22 "1st.OnTestPartResult"},\par
246     {\cf22 "2nd.OnTestPartResult"},\par
247     {\cf22 "ListenerTest::TearDown"},\par
248     {\cf22 "2nd.OnTestEnd"},\par
249     {\cf22 "1st.OnTestEnd"},\par
250     {\cf22 "ListenerTest::TearDownTestCase"},\par
251     {\cf22 "2nd.OnTestCaseEnd"},\par
252     {\cf22 "1st.OnTestCaseEnd"},\par
253     {\cf22 "1st.OnEnvironmentsTearDownStart"},\par
254     {\cf22 "2nd.OnEnvironmentsTearDownStart"},\par
255     {\cf22 "Environment::TearDown"},\par
256     {\cf22 "2nd.OnEnvironmentsTearDownEnd"},\par
257     {\cf22 "1st.OnEnvironmentsTearDownEnd"},\par
258     {\cf22 "2nd.OnTestIterationEnd(0)"},\par
259     {\cf22 "1st.OnTestIterationEnd(0)"},\par
260     {\cf22 "1st.OnTestIterationStart(1)"},\par
261     {\cf22 "2nd.OnTestIterationStart(1)"},\par
262     {\cf22 "1st.OnEnvironmentsSetUpStart"},\par
263     {\cf22 "2nd.OnEnvironmentsSetUpStart"},\par
264     {\cf22 "Environment::SetUp"},\par
265     {\cf22 "2nd.OnEnvironmentsSetUpEnd"},\par
266     {\cf22 "1st.OnEnvironmentsSetUpEnd"},\par
267     {\cf22 "1st.OnTestCaseStart"},\par
268     {\cf22 "2nd.OnTestCaseStart"},\par
269     {\cf22 "ListenerTest::SetUpTestCase"},\par
270     {\cf22 "1st.OnTestStart"},\par
271     {\cf22 "2nd.OnTestStart"},\par
272     {\cf22 "ListenerTest::SetUp"},\par
273     {\cf22 "ListenerTest::* Test Body"},\par
274     {\cf22 "1st.OnTestPartResult"},\par
275     {\cf22 "2nd.OnTestPartResult"},\par
276     {\cf22 "ListenerTest::TearDown"},\par
277     {\cf22 "2nd.OnTestEnd"},\par
278     {\cf22 "1st.OnTestEnd"},\par
279     {\cf22 "1st.OnTestStart"},\par
280     {\cf22 "2nd.OnTestStart"},\par
281     {\cf22 "ListenerTest::SetUp"},\par
282     {\cf22 "ListenerTest::* Test Body"},\par
283     {\cf22 "1st.OnTestPartResult"},\par
284     {\cf22 "2nd.OnTestPartResult"},\par
285     {\cf22 "ListenerTest::TearDown"},\par
286     {\cf22 "2nd.OnTestEnd"},\par
287     {\cf22 "1st.OnTestEnd"},\par
288     {\cf22 "ListenerTest::TearDownTestCase"},\par
289     {\cf22 "2nd.OnTestCaseEnd"},\par
290     {\cf22 "1st.OnTestCaseEnd"},\par
291     {\cf22 "1st.OnEnvironmentsTearDownStart"},\par
292     {\cf22 "2nd.OnEnvironmentsTearDownStart"},\par
293     {\cf22 "Environment::TearDown"},\par
294     {\cf22 "2nd.OnEnvironmentsTearDownEnd"},\par
295     {\cf22 "1st.OnEnvironmentsTearDownEnd"},\par
296     {\cf22 "2nd.OnTestIterationEnd(1)"},\par
297     {\cf22 "1st.OnTestIterationEnd(1)"},\par
298     {\cf22 "2nd.OnTestProgramEnd"},\par
299     {\cf22 "1st.OnTestProgramEnd"}\par
300   \};\par
301   VerifyResults(events,\par
302                 expected_events,\par
303                 {\cf17 sizeof}(expected_events)/{\cf17 sizeof}(expected_events[0]));\par
304 \par
305   {\cf20 // We need to check manually for ad hoc test failures that happen after}\par
306   {\cf20 // RUN_ALL_TESTS finishes.}\par
307   {\cf19 if} (UnitTest::GetInstance()->Failed())\par
308     ret_val = 1;\par
309 \par
310   {\cf19 return} ret_val;\par
311 \}\par
}
{
\ql
References testing::AddGlobalTestEnvironment(), g_events, GTEST_CHECK_, GTEST_FLAG, testing::InitGoogleTest(), RUN_ALL_TESTS(), std::vector< T >::size(), and VerifyResults().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "gtest-listener__test_8cc_a3c04138a5bfe5d72780bb7e82a18e627_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v VerifyResults\:gtest-listener_test.cc}
{\xe \v gtest-listener_test.cc\:VerifyResults}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void VerifyResults (const {\b std::vector}< {\b std::string} > &  {\i data}, const char *const *  {\i expected_data}, size_t  {\i expected_data_size})}}
\par
{\bkmkstart AAAAAAAAYY}
{\bkmkend AAAAAAAAYY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 179                                               \{\par
180   {\cf17 const} {\cf18 size_t} actual_size = data.size();\par
181   {\cf20 // If the following assertion fails, a new entry will be appended to}\par
182   {\cf20 // data.  Hence we save data.size() first.}\par
183   EXPECT_EQ(expected_data_size, actual_size);\par
184 \par
185   {\cf20 // Compares the common prefix.}\par
186   {\cf17 const} {\cf18 size_t} shorter_size = expected_data_size <= actual_size ?\par
187       expected_data_size : actual_size;\par
188   {\cf18 size_t} i = 0;\par
189   {\cf19 for} (; i < shorter_size; ++i) \{\par
190     ASSERT_STREQ(expected_data[i], data[i].c_str())\par
191         << {\cf22 "at position "} << i;\par
192   \}\par
193 \par
194   {\cf20 // Prints extra elements in the actual data.}\par
195   {\cf19 for} (; i < actual_size; ++i) \{\par
196     printf({\cf22 "  Actual event #%lu: %s\\n"},\par
197         {\cf17 static_cast<}{\cf18 unsigned} {\cf18 long}{\cf17 >}(i), data[i].c_str());\par
198   \}\par
199 \}\par
}
{
\ql
References ASSERT_STREQ, and EXPECT_EQ.}\par
{
\ql
Referenced by main().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "gtest-listener__test_8cc_ab9d583cd17d35925ad3d12f864d57fe9_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v g_events\:gtest-listener_test.cc}
{\xe \v gtest-listener_test.cc\:g_events}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::vector}<{\b std::string}>* g_events = NULL}}
\par
{\bkmkstart AAAAAAAAYZ}
{\bkmkend AAAAAAAAYZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by main(), testing::internal::EventRecordingListener::OnEnvironmentsSetUpEnd(), testing::internal::EventRecordingListener::OnEnvironmentsSetUpStart(), testing::internal::EventRecordingListener::OnEnvironmentsTearDownEnd(), testing::internal::EventRecordingListener::OnEnvironmentsTearDownStart(), testing::internal::EventRecordingListener::OnTestCaseEnd(), testing::internal::EventRecordingListener::OnTestCaseStart(), testing::internal::EventRecordingListener::OnTestEnd(), testing::internal::EventRecordingListener::OnTestIterationEnd(), testing::internal::EventRecordingListener::OnTestIterationStart(), testing::internal::EventRecordingListener::OnTestPartResult(), testing::internal::EventRecordingListener::OnTestProgramEnd(), testing::internal::EventRecordingListener::OnTestProgramStart(), testing::internal::EventRecordingListener::OnTestStart(), testing::internal::EnvironmentInvocationCatcher::SetUp(), testing::internal::ListenerTest::SetUp(), testing::internal::ListenerTest::SetUpTestCase(), testing::internal::EnvironmentInvocationCatcher::TearDown(), testing::internal::ListenerTest::TearDown(), testing::internal::ListenerTest::TearDownTestCase(), and testing::internal::TEST_F().}\par
}
}