{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::PrettyUnitTestResultPrinter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter}
{\bkmkstart AAAAAAAAXP}
{\bkmkend AAAAAAAAXP}
Inheritance diagram for testing::internal::PrettyUnitTestResultPrinter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1PrettyUnitTestResultPrinter__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::PrettyUnitTestResultPrinter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1PrettyUnitTestResultPrinter__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b OnEnvironmentsSetUpEnd} (const UnitTest &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b OnEnvironmentsSetUpStart} (const UnitTest &unit_test)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b OnEnvironmentsTearDownEnd} (const UnitTest &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b OnEnvironmentsTearDownStart} (const UnitTest &unit_test)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b OnTestCaseEnd} (const TestCase &test_case)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b OnTestCaseStart} (const TestCase &test_case)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b OnTestEnd} (const TestInfo &test_info)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b OnTestIterationEnd} (const UnitTest &unit_test, int iteration)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b OnTestIterationStart} (const UnitTest &unit_test, int iteration)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b OnTestPartResult} (const TestPartResult &result)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b OnTestProgramEnd} (const UnitTest &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b OnTestProgramStart} (const UnitTest &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b OnTestStart} (const TestInfo &test_info)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b PrettyUnitTestResultPrinter} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b PrintTestName} (const char *test_case, const char *test)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Private Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b PrintFailedTests} (const UnitTest &unit_test)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid }
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v PrettyUnitTestResultPrinter\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:PrettyUnitTestResultPrinter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
testing::internal::PrettyUnitTestResultPrinter::PrettyUnitTestResultPrinter (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAXQ}
{\bkmkend AAAAAAAAXQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3031 \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v OnEnvironmentsSetUpEnd\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnEnvironmentsSetUpEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void testing::internal::PrettyUnitTestResultPrinter::OnEnvironmentsSetUpEnd (const UnitTest & ){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAXR}
{\bkmkend AAAAAAAAXR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3040 \{\}\par
}
}
{\xe \v OnEnvironmentsSetUpStart\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnEnvironmentsSetUpStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart (const UnitTest &  {\i unit_test}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAXS}
{\bkmkend AAAAAAAAXS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3092                        \{\par
3093   ColoredPrintf(COLOR_GREEN,  {\cf22 "[----------] "});\par
3094   printf({\cf22 "Global test environment set-up.\\n"});\par
3095   fflush(stdout);\par
3096 \}\par
}
{
\ql
References testing::internal::COLOR_GREEN, and testing::internal::ColoredPrintf().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_a846a5e82b421e04fcdd2b1b2b64b162f_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v OnEnvironmentsTearDownEnd\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnEnvironmentsTearDownEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void testing::internal::PrettyUnitTestResultPrinter::OnEnvironmentsTearDownEnd (const UnitTest & ){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAXT}
{\bkmkend AAAAAAAAXT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3047 \{\}\par
}
}
{\xe \v OnEnvironmentsTearDownStart\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnEnvironmentsTearDownStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart (const UnitTest &  {\i unit_test}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAXU}
{\bkmkend AAAAAAAAXU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3162                        \{\par
3163   ColoredPrintf(COLOR_GREEN,  {\cf22 "[----------] "});\par
3164   printf({\cf22 "Global test environment tear-down\\n"});\par
3165   fflush(stdout);\par
3166 \}\par
}
{
\ql
References testing::internal::COLOR_GREEN, and testing::internal::ColoredPrintf().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_afea9dc849c92fdbc1d8505f4c74ffc1a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v OnTestCaseEnd\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestCaseEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestCaseEnd (const TestCase &  {\i test_case}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAXV}
{\bkmkend AAAAAAAAXV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3149                                                                          \{\par
3150   {\cf19 if} (!GTEST_FLAG(print_time)) {\cf19 return};\par
3151 \par
3152   {\cf17 const} std::string counts =\par
3153       FormatCountableNoun(test_case.test_to_run_count(), {\cf22 "test"}, {\cf22 "tests"});\par
3154   ColoredPrintf(COLOR_GREEN, {\cf22 "[----------] "});\par
3155   printf({\cf22 "%s from %s (%s ms total)\\n\\n"},\par
3156          counts.c_str(), test_case.name(),\par
3157          internal::StreamableToString(test_case.elapsed_time()).c_str());\par
3158   fflush(stdout);\par
3159 \}\par
}
{
\ql
References std::string::c_str(), testing::internal::COLOR_GREEN, testing::internal::ColoredPrintf(), and testing::FormatCountableNoun().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_a7a62fe58fa6f6aace813eb62b31e5a51_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v OnTestCaseStart\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestCaseStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestCaseStart (const TestCase &  {\i test_case}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAXW}
{\bkmkend AAAAAAAAXW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3098                                                                            \{\par
3099   {\cf17 const} std::string counts =\par
3100       FormatCountableNoun(test_case.test_to_run_count(), {\cf22 "test"}, {\cf22 "tests"});\par
3101   ColoredPrintf(COLOR_GREEN, {\cf22 "[----------] "});\par
3102   printf({\cf22 "%s from %s"}, counts.c_str(), test_case.name());\par
3103   {\cf19 if} (test_case.type_param() == NULL) \{\par
3104     printf({\cf22 "\\n"});\par
3105   \} {\cf19 else} \{\par
3106     printf({\cf22 ", where %s = %s\\n"}, kTypeParamLabel, test_case.type_param());\par
3107   \}\par
3108   fflush(stdout);\par
3109 \}\par
}
{
\ql
References std::string::c_str(), testing::internal::COLOR_GREEN, testing::internal::ColoredPrintf(), testing::FormatCountableNoun(), and testing::internal::kTypeParamLabel.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_adcb68c729565d4bcdf8418a52902c3de_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v OnTestEnd\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestEnd (const TestInfo &  {\i test_info}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAXX}
{\bkmkend AAAAAAAAXX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3130                                                                      \{\par
3131   {\cf19 if} (test_info.result()->Passed()) \{\par
3132     ColoredPrintf(COLOR_GREEN, {\cf22 "[       OK ] "});\par
3133   \} {\cf19 else} \{\par
3134     ColoredPrintf(COLOR_RED, {\cf22 "[  FAILED  ] "});\par
3135   \}\par
3136   PrintTestName(test_info.test_case_name(), test_info.name());\par
3137   {\cf19 if} (test_info.result()->Failed())\par
3138     PrintFullTestCommentIfPresent(test_info);\par
3139 \par
3140   {\cf19 if} (GTEST_FLAG(print_time)) \{\par
3141     printf({\cf22 " (%s ms)\\n"}, internal::StreamableToString(\par
3142            test_info.result()->elapsed_time()).c_str());\par
3143   \} {\cf19 else} \{\par
3144     printf({\cf22 "\\n"});\par
3145   \}\par
3146   fflush(stdout);\par
3147 \}\par
}
{
\ql
References testing::internal::COLOR_GREEN, testing::internal::COLOR_RED, testing::internal::ColoredPrintf(), and testing::internal::PrintFullTestCommentIfPresent().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_a06749ff2b32a16c127374ecd015f13e0_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v OnTestIterationEnd\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestIterationEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestIterationEnd (const UnitTest &  {\i unit_test}, int  {\i iteration}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAXY}
{\bkmkend AAAAAAAAXY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3194                                                             \{\par
3195   ColoredPrintf(COLOR_GREEN,  {\cf22 "[==========] "});\par
3196   printf({\cf22 "%s from %s ran."},\par
3197          FormatTestCount(unit_test.test_to_run_count()).c_str(),\par
3198          FormatTestCaseCount(unit_test.test_case_to_run_count()).c_str());\par
3199   {\cf19 if} (GTEST_FLAG(print_time)) \{\par
3200     printf({\cf22 " (%s ms total)"},\par
3201            internal::StreamableToString(unit_test.elapsed_time()).c_str());\par
3202   \}\par
3203   printf({\cf22 "\\n"});\par
3204   ColoredPrintf(COLOR_GREEN,  {\cf22 "[  PASSED  ] "});\par
3205   printf({\cf22 "%s.\\n"}, FormatTestCount(unit_test.successful_test_count()).c_str());\par
3206 \par
3207   {\cf18 int} num_failures = unit_test.failed_test_count();\par
3208   {\cf19 if} (!unit_test.Passed()) \{\par
3209     {\cf17 const} {\cf18 int} failed_test_count = unit_test.failed_test_count();\par
3210     ColoredPrintf(COLOR_RED,  {\cf22 "[  FAILED  ] "});\par
3211     printf({\cf22 "%s, listed below:\\n"}, FormatTestCount(failed_test_count).c_str());\par
3212     PrintFailedTests(unit_test);\par
3213     printf({\cf22 "\\n%2d FAILED %s\\n"}, num_failures,\par
3214                         num_failures == 1 ? {\cf22 "TEST"} : {\cf22 "TESTS"});\par
3215   \}\par
3216 \par
3217   {\cf18 int} num_disabled = unit_test.reportable_disabled_test_count();\par
3218   {\cf19 if} (num_disabled && !GTEST_FLAG(also_run_disabled_tests)) \{\par
3219     {\cf19 if} (!num_failures) \{\par
3220       printf({\cf22 "\\n"});  {\cf20 // Add a spacer if no FAILURE banner is displayed.}\par
3221     \}\par
3222     ColoredPrintf(COLOR_YELLOW,\par
3223                   {\cf22 "  YOU HAVE %d DISABLED %s\\n\\n"},\par
3224                   num_disabled,\par
3225                   num_disabled == 1 ? {\cf22 "TEST"} : {\cf22 "TESTS"});\par
3226   \}\par
3227   {\cf20 // Ensure that Google Test output is printed before, e.g., heapchecker output.}\par
3228   fflush(stdout);\par
3229 \}\par
}
{
\ql
References std::string::c_str(), testing::internal::COLOR_GREEN, testing::internal::COLOR_RED, testing::internal::COLOR_YELLOW, testing::internal::ColoredPrintf(), testing::FormatTestCaseCount(), and testing::FormatTestCount().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_ac29b30216023baddda04ef5889f484ff_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v OnTestIterationStart\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestIterationStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestIterationStart (const UnitTest &  {\i unit_test}, int  {\i iteration}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAXZ}
{\bkmkend AAAAAAAAXZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3057                                               \{\par
3058   {\cf19 if} (GTEST_FLAG(repeat) != 1)\par
3059     printf({\cf22 "\\nRepeating all tests (iteration %d) . . .\\n\\n"}, iteration + 1);\par
3060 \par
3061   {\cf17 const} {\cf18 char}* {\cf17 const} filter = GTEST_FLAG(filter).c_str();\par
3062 \par
3063   {\cf20 // Prints the filter if it's not *.  This reminds the user that some}\par
3064   {\cf20 // tests may be skipped.}\par
3065   {\cf19 if} (!String::CStringEquals(filter, kUniversalFilter)) \{\par
3066     ColoredPrintf(COLOR_YELLOW,\par
3067                   {\cf22 "Note: %s filter = %s\\n"}, GTEST_NAME_, filter);\par
3068   \}\par
3069 \par
3070   {\cf19 if} (internal::ShouldShard(kTestTotalShards, kTestShardIndex, {\cf17 false})) \{\par
3071     {\cf17 const} Int32 shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);\par
3072     ColoredPrintf(COLOR_YELLOW,\par
3073                   {\cf22 "Note: This is test shard %d of %s.\\n"},\par
3074                   {\cf17 static_cast<}{\cf18 int}{\cf17 >}(shard_index) + 1,\par
3075                   internal::posix::GetEnv(kTestTotalShards));\par
3076   \}\par
3077 \par
3078   {\cf19 if} (GTEST_FLAG(shuffle)) \{\par
3079     ColoredPrintf(COLOR_YELLOW,\par
3080                   {\cf22 "Note: Randomizing tests' orders with a seed of %d .\\n"},\par
3081                   unit_test.random_seed());\par
3082   \}\par
3083 \par
3084   ColoredPrintf(COLOR_GREEN,  {\cf22 "[==========] "});\par
3085   printf({\cf22 "Running %s from %s.\\n"},\par
3086          FormatTestCount(unit_test.test_to_run_count()).c_str(),\par
3087          FormatTestCaseCount(unit_test.test_case_to_run_count()).c_str());\par
3088   fflush(stdout);\par
3089 \}\par
}
{
\ql
References std::string::c_str(), testing::internal::COLOR_GREEN, testing::internal::COLOR_YELLOW, testing::internal::ColoredPrintf(), testing::FormatTestCaseCount(), testing::FormatTestCount(), testing::internal::Int32FromEnvOrDie(), testing::kTestShardIndex, testing::kTestTotalShards, testing::kUniversalFilter, and testing::internal::ShouldShard().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_abdba10a8c97e272ab4cee97cb652c957_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v OnTestPartResult\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestPartResult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestPartResult (const TestPartResult &  {\i result}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAYA}
{\bkmkend AAAAAAAAYA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3120                                   \{\par
3121   {\cf20 // If the test part succeeded, we don't need to do anything.}\par
3122   {\cf19 if} (result.type() == TestPartResult::kSuccess)\par
3123     {\cf19 return};\par
3124 \par
3125   {\cf20 // Print failure message from the assertion (e.g. expected this and got that).}\par
3126   PrintTestPartResult(result);\par
3127   fflush(stdout);\par
3128 \}\par
}
{
\ql
References testing::internal::PrintTestPartResult().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_a7589e8df7485349498a3a81bf16e2f68_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v OnTestProgramEnd\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestProgramEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void testing::internal::PrettyUnitTestResultPrinter::OnTestProgramEnd (const UnitTest & ){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAYB}
{\bkmkend AAAAAAAAYB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3049 \{\}\par
}
}
{\xe \v OnTestProgramStart\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestProgramStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void testing::internal::PrettyUnitTestResultPrinter::OnTestProgramStart (const UnitTest & ){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAYC}
{\bkmkend AAAAAAAAYC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3037 \{\}\par
}
}
{\xe \v OnTestStart\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestStart (const TestInfo &  {\i test_info}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAYD}
{\bkmkend AAAAAAAAYD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3111                                                                        \{\par
3112   ColoredPrintf(COLOR_GREEN,  {\cf22 "[ RUN      ] "});\par
3113   PrintTestName(test_info.test_case_name(), test_info.name());\par
3114   printf({\cf22 "\\n"});\par
3115   fflush(stdout);\par
3116 \}\par
}
{
\ql
References testing::internal::COLOR_GREEN, and testing::internal::ColoredPrintf().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_a5078ee71cfa97e37ae7a9366149195c5_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PrintFailedTests\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:PrintFailedTests}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::PrintFailedTests (const UnitTest &  {\i unit_test}){\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAYE}
{\bkmkend AAAAAAAAYE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3169                                                                             \{\par
3170   {\cf17 const} {\cf18 int} failed_test_count = unit_test.failed_test_count();\par
3171   {\cf19 if} (failed_test_count == 0) \{\par
3172     {\cf19 return};\par
3173   \}\par
3174 \par
3175   {\cf19 for} ({\cf18 int} i = 0; i < unit_test.total_test_case_count(); ++i) \{\par
3176     {\cf17 const} TestCase& test_case = *unit_test.GetTestCase(i);\par
3177     {\cf19 if} (!test_case.should_run() || (test_case.failed_test_count() == 0)) \{\par
3178       {\cf19 continue};\par
3179     \}\par
3180     {\cf19 for} ({\cf18 int} j = 0; j < test_case.total_test_count(); ++j) \{\par
3181       {\cf17 const} TestInfo& test_info = *test_case.GetTestInfo(j);\par
3182       {\cf19 if} (!test_info.should_run() || test_info.result()->Passed()) \{\par
3183         {\cf19 continue};\par
3184       \}\par
3185       ColoredPrintf(COLOR_RED, {\cf22 "[  FAILED  ] "});\par
3186       printf({\cf22 "%s.%s"}, test_case.name(), test_info.name());\par
3187       PrintFullTestCommentIfPresent(test_info);\par
3188       printf({\cf22 "\\n"});\par
3189     \}\par
3190   \}\par
3191 \}\par
}
{
\ql
References testing::internal::COLOR_RED, testing::internal::ColoredPrintf(), and testing::internal::PrintFullTestCommentIfPresent().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_aca5a9dc08998948e293b307d931b3f86_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PrintTestName\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:PrintTestName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static void testing::internal::PrettyUnitTestResultPrinter::PrintTestName (const char *  {\i test_case}, const char *  {\i test}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAYF}
{\bkmkend AAAAAAAAYF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3032                                                                        \{\par
3033     printf({\cf22 "%s.%s"}, test_case, test);\par
3034   \}\par
}
}
}