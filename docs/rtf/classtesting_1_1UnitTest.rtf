{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::UnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::UnitTest}
{\xe \v testing::UnitTest}
{\bkmkstart AAAAAAABPE}
{\bkmkend AAAAAAABPE}
\par
{
{\f2 #include <gtest.h>}}\par
Collaboration diagram for testing::UnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b TestResult} & {\b ad_hoc_test_result} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b TestCase} * {\b current_test_case} () const {\b GTEST_LOCK_EXCLUDED_}({\b mutex_})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b TestInfo} * {\b current_test_info} () const {\b GTEST_LOCK_EXCLUDED_}({\b mutex_})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b disabled_test_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TimeInMillis {\b elapsed_time} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b Failed} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b failed_test_case_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b failed_test_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b TestCase} * {\b GetTestCase} (int i) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestEventListeners} & {\b listeners} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b original_working_dir} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b Passed} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b random_seed} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b reportable_disabled_test_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b reportable_test_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b Run} () {\b GTEST_MUST_USE_RESULT_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TimeInMillis {\b start_timestamp} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b successful_test_case_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b successful_test_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b test_case_to_run_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b test_to_run_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b total_test_case_count} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b total_test_count} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b UnitTest} * {\b GetInstance} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Package Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b GTEST_DISALLOW_COPY_AND_ASSIGN_} ({\b UnitTest})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PopGTestTrace} () {\b GTEST_LOCK_EXCLUDED_}({\b mutex_})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PushGTestTrace} (const {\b internal::TraceInfo} &trace) {\b GTEST_LOCK_EXCLUDED_}({\b mutex_})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b UnitTest} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~UnitTest} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Package Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b __pad0__}:UnitTestImpl* {\b impl}() const \{ return {\b impl_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b __pad1__}:UnitTestImpl* {\b internal::GetUnitTestImpl}()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b __pad2__}:ReportFailureInUnknownLocation( {\b TestPartResult::Type} result_type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b internal::UnitTestImpl} * {\b impl_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b std::string} & {\b message}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b internal::Mutex} {\b mutex_}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Environment} * {\b AddEnvironment} ({\b Environment} *env)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b AddTestPartResult} ({\b TestPartResult::Type} result_type, const char *file_name, int line_number, const {\b std::string} &{\b message}, const {\b std::string} &os_stack_trace) {\b GTEST_LOCK_EXCLUDED_}({\b mutex_})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} * {\b GetMutableTestCase} (int i)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b internal::UnitTestImpl} * {\b impl} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b RecordProperty} (const {\b std::string} &key, const {\b std::string} &value)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Environment} * {\b AddGlobalTestEnvironment} ({\b Environment} *env)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b internal::AssertHelper}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b internal::ScopedTrace}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b internal::StreamingListenerTest}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b internal::UnitTestRecordPropertyTestHelper}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Test}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid }
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v UnitTest\:testing::UnitTest}
{\xe \v testing::UnitTest\:UnitTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
testing::UnitTest::UnitTest (){\f2 [package]}}}
\par
{\bkmkstart AAAAAAABPF}
{\bkmkend AAAAAAABPF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4299                    \{\par
4300   impl_ = {\cf17 new} internal::UnitTestImpl({\cf17 this});\par
4301 \}\par
}
{
\ql
References impl_.}\par
{
\ql
Referenced by GetInstance().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a5e646d37f980429c310af696c8775f5c_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ~UnitTest\:testing::UnitTest}
{\xe \v testing::UnitTest\:~UnitTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
testing::UnitTest::~UnitTest (){\f2 [package]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABPG}
{\bkmkend AAAAAAABPG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4304                     \{\par
4305   {\cf17 delete} impl_;\par
4306 \}\par
}
{
\ql
References impl_.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v ad_hoc_test_result\:testing::UnitTest}
{\xe \v testing::UnitTest\:ad_hoc_test_result}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b TestResult} & testing::UnitTest::ad_hoc_test_result () const}}
\par
{\bkmkstart AAAAAAABPH}
{\bkmkend AAAAAAABPH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4069                                                      \{\par
4070   {\cf19 return} *impl()->ad_hoc_test_result();\par
4071 \}\par
}
{
\ql
References testing::internal::UnitTestImpl::ad_hoc_test_result(), and impl().}\par
{
\ql
Referenced by testing::internal::XmlUnitTestResultPrinter::PrintXmlUnitTest().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_aa59dde4c3dc43a920ed142a27670686c_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_aa59dde4c3dc43a920ed142a27670686c_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v AddEnvironment\:testing::UnitTest}
{\xe \v testing::UnitTest\:AddEnvironment}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Environment} * testing::UnitTest::AddEnvironment ({\b Environment} *  {\i env}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAABPI}
{\bkmkend AAAAAAABPI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4095                                                       \{\par
4096   {\cf19 if} (env == NULL) \{\par
4097     {\cf19 return} NULL;\par
4098   \}\par
4099 \par
4100   impl_->environments().push_back(env);\par
4101   {\cf19 return} env;\par
4102 \}\par
}
{
\ql
References testing::internal::UnitTestImpl::environments(), and impl_.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a1eb8e999b8696889bf1c64b4f0161203_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v AddTestPartResult\:testing::UnitTest}
{\xe \v testing::UnitTest\:AddTestPartResult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::UnitTest::AddTestPartResult ({\b TestPartResult::Type}  {\i result_type}, const char *  {\i file_name}, int  {\i line_number}, const {\b std::string} &  {\i message}, const {\b std::string} &  {\i os_stack_trace}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAABPJ}
{\bkmkend AAAAAAABPJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4113                                                                   \{\par
4114   Message msg;\par
4115   msg << message;\par
4116 \par
4117   internal::MutexLock lock(&mutex_);\par
4118   {\cf19 if} (impl_->gtest_trace_stack().size() > 0) \{\par
4119     msg << {\cf22 "\\n"} << GTEST_NAME_ << {\cf22 " trace:"};\par
4120 \par
4121     {\cf19 for} ({\cf18 int} i = {\cf17 static_cast<}{\cf18 int}{\cf17 >}(impl_->gtest_trace_stack().size());\par
4122          i > 0; --i) \{\par
4123       {\cf17 const} internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];\par
4124       msg << {\cf22 "\\n"} << internal::FormatFileLocation(trace.file, trace.line)\par
4125           << {\cf22 " "} << trace.message;\par
4126     \}\par
4127   \}\par
4128 \par
4129   {\cf19 if} (os_stack_trace.c_str() != NULL && !os_stack_trace.empty()) \{\par
4130     msg << internal::kStackTraceMarker << os_stack_trace;\par
4131   \}\par
4132 \par
4133   {\cf17 const} TestPartResult result =\par
4134     TestPartResult(result_type, file_name, line_number,\par
4135                    msg.GetString().c_str());\par
4136   impl_->GetTestPartResultReporterForCurrentThread()->\par
4137       ReportTestPartResult(result);\par
4138 \par
4139   {\cf19 if} (result_type != TestPartResult::kSuccess) \{\par
4140     {\cf20 // gtest_break_on_failure takes precedence over}\par
4141     {\cf20 // gtest_throw_on_failure.  This allows a user to set the latter}\par
4142     {\cf20 // in the code (perhaps in order to use Google Test assertions}\par
4143     {\cf20 // with another testing framework) and specify the former on the}\par
4144     {\cf20 // command line for debugging.}\par
4145     {\cf19 if} (GTEST_FLAG(break_on_failure)) \{\par
4146 {\cf21 #if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT}\par
4147       {\cf20 // Using DebugBreak on Windows allows gtest to still break into a debugger}\par
4148       {\cf20 // when a failure happens and both the --gtest_break_on_failure and}\par
4149       {\cf20 // the --gtest_catch_exceptions flags are specified.}\par
4150       DebugBreak();\par
4151 {\cf21 #else}\par
4152       {\cf20 // Dereference NULL through a volatile pointer to prevent the compiler}\par
4153       {\cf20 // from removing. We use this rather than abort() or __builtin_trap() for}\par
4154       {\cf20 // portability: Symbian doesn't implement abort() well, and some debuggers}\par
4155       {\cf20 // don't correctly trap abort().}\par
4156       *{\cf17 static_cast<}{\cf17 volatile }{\cf18 int}*{\cf17 >}(NULL) = 1;\par
4157 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS}\par
4158     \} {\cf19 else} {\cf19 if} (GTEST_FLAG(throw_on_failure)) \{\par
4159 {\cf21 #if GTEST_HAS_EXCEPTIONS}\par
4160       {\cf19 throw} internal::GoogleTestFailureException(result);\par
4161 {\cf21 #else}\par
4162       {\cf20 // We cannot call abort() as it generates a pop-up in debug mode}\par
4163       {\cf20 // that cannot be suppressed in VC 7.1 or below.}\par
4164       exit(1);\par
4165 {\cf21 #endif}\par
4166     \}\par
4167   \}\par
4168 \}\par
}
{
\ql
References std::string::c_str(), testing::internal::TraceInfo::file, testing::internal::FormatFileLocation(), testing::Message::GetString(), GTEST_FLAG, GTEST_NAME_, testing::internal::kStackTraceMarker, testing::TestPartResult::kSuccess, testing::internal::TraceInfo::line, and testing::internal::TraceInfo::message.}\par
{
\ql
Referenced by testing::internal::ReportFailureInUnknownLocation().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a1d157d2e9a5c1d3405333410c6b13932_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a1d157d2e9a5c1d3405333410c6b13932_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v current_test_case\:testing::UnitTest}
{\xe \v testing::UnitTest\:current_test_case}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b TestCase} * testing::UnitTest::current_test_case () const}}
\par
{\bkmkstart AAAAAAABPK}
{\bkmkend AAAAAAABPK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4272                                  \{\par
4273   internal::MutexLock lock(&mutex_);\par
4274   {\cf19 return} impl_->current_test_case();\par
4275 \}\par
}
{
\ql
References testing::internal::UnitTestImpl::current_test_case(), impl_, and mutex_.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a2bf61896036ae03edbd7bceed14f9e18_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v current_test_info\:testing::UnitTest}
{\xe \v testing::UnitTest\:current_test_info}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b TestInfo} * testing::UnitTest::current_test_info () const}}
\par
{\bkmkstart AAAAAAABPL}
{\bkmkend AAAAAAABPL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4280                                  \{\par
4281   internal::MutexLock lock(&mutex_);\par
4282   {\cf19 return} impl_->current_test_info();\par
4283 \}\par
}
{
\ql
References testing::internal::UnitTestImpl::current_test_info(), impl_, and mutex_.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a088eaf814a33085ace3d881d22e6bdea_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v disabled_test_count\:testing::UnitTest}
{\xe \v testing::UnitTest\:disabled_test_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::UnitTest::disabled_test_count () const}}
\par
{\bkmkstart AAAAAAABPM}
{\bkmkend AAAAAAABPM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4028                                         \{\par
4029   {\cf19 return} impl()->disabled_test_count();\par
4030 \}\par
}
{
\ql
References testing::internal::UnitTestImpl::disabled_test_count(), and impl().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_ad69ccf3d4a9bc7333badeafbde3bc76b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v elapsed_time\:testing::UnitTest}
{\xe \v testing::UnitTest\:elapsed_time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b internal::TimeInMillis} testing::UnitTest::elapsed_time () const}}
\par
{\bkmkstart AAAAAAABPN}
{\bkmkend AAAAAAABPN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4050                                                   \{\par
4051   {\cf19 return} impl()->elapsed_time();\par
4052 \}\par
}
{
\ql
References testing::internal::UnitTestImpl::elapsed_time(), and impl().}\par
{
\ql
Referenced by testing::internal::PrettyUnitTestResultPrinter::OnTestIterationEnd(), and testing::internal::XmlUnitTestResultPrinter::PrintXmlUnitTest().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_acf608411a17cb3b40a1e9d724f262b3b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_acf608411a17cb3b40a1e9d724f262b3b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Failed\:testing::UnitTest}
{\xe \v testing::UnitTest\:Failed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool testing::UnitTest::Failed () const}}
\par
{\bkmkstart AAAAAAABPO}
{\bkmkend AAAAAAABPO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4059 \{ {\cf19 return} impl()->Failed(); \}\par
}
{
\ql
References testing::internal::UnitTestImpl::Failed(), and impl().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a706f29e765916616b11a271a65948727_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v failed_test_case_count\:testing::UnitTest}
{\xe \v testing::UnitTest\:failed_test_case_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::UnitTest::failed_test_case_count () const}}
\par
{\bkmkstart AAAAAAABPP}
{\bkmkend AAAAAAABPP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3999                                            \{\par
4000   {\cf19 return} impl()->failed_test_case_count();\par
4001 \}\par
}
{
\ql
References testing::internal::UnitTestImpl::failed_test_case_count(), and impl().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_abc0fa297a4103f7cdd9627ae27d9d0ef_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v failed_test_count\:testing::UnitTest}
{\xe \v testing::UnitTest\:failed_test_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::UnitTest::failed_test_count () const}}
\par
{\bkmkstart AAAAAAABPQ}
{\bkmkend AAAAAAABPQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4020 \{ {\cf19 return} impl()->failed_test_count(); \}\par
}
{
\ql
References testing::internal::UnitTestImpl::failed_test_count(), and impl().}\par
{
\ql
Referenced by testing::internal::PrettyUnitTestResultPrinter::OnTestIterationEnd(), testing::internal::PrettyUnitTestResultPrinter::PrintFailedTests(), and testing::internal::XmlUnitTestResultPrinter::PrintXmlUnitTest().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_ace1c860482b4ae5c341df5a9665e5c08_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_ace1c860482b4ae5c341df5a9665e5c08_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetInstance\:testing::UnitTest}
{\xe \v testing::UnitTest\:GetInstance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b UnitTest} * testing::UnitTest::GetInstance (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABPR}
{\bkmkend AAAAAAABPR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3972                                 \{\par
3973   {\cf20 // When compiled with MSVC 7.1 in optimized mode, destroying the}\par
3974   {\cf20 // UnitTest object upon exiting the program messes up the exit code,}\par
3975   {\cf20 // causing successful tests to appear failed.  We have to use a}\par
3976   {\cf20 // different implementation in this case to bypass the compiler bug.}\par
3977   {\cf20 // This implementation makes the compiler happy, at the cost of}\par
3978   {\cf20 // leaking the UnitTest object.}\par
3979 \par
3980   {\cf20 // CodeGear C++Builder insists on a public destructor for the}\par
3981   {\cf20 // default implementation.  Use this implementation to keep good OO}\par
3982   {\cf20 // design with private destructor.}\par
3983 \par
3984 {\cf21 #if (_MSC_VER == 1310 && !defined(_DEBUG)) || defined(__BORLANDC__)}\par
3985   {\cf17 static} UnitTest* {\cf17 const} instance = {\cf17 new} UnitTest;\par
3986   {\cf19 return} instance;\par
3987 {\cf21 #else}\par
3988   {\cf17 static} UnitTest instance;\par
3989   {\cf19 return} &instance;\par
3990 {\cf21 #endif  }{\cf20 // (_MSC_VER == 1310 && !defined(_DEBUG)) || defined(__BORLANDC__)}\par
3991 \}\par
}
{
\ql
References UnitTest().}\par
{
\ql
Referenced by testing::internal::UnitTestOptions::GetAbsolutePathToOutputFile(), testing::internal::GetUnitTestImpl(), testing::internal::AssertHelper::operator=(), testing::Test::RecordProperty(), testing::internal::ReportFailureInUnknownLocation(), testing::TestInfo::Run(), testing::TestCase::Run(), testing::internal::ScopedTrace::ScopedTrace(), and testing::internal::ScopedTrace::~ScopedTrace().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a24192400b70b3b946746954e9574fb8e_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a24192400b70b3b946746954e9574fb8e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetMutableTestCase\:testing::UnitTest}
{\xe \v testing::UnitTest\:GetMutableTestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TestCase} * testing::UnitTest::GetMutableTestCase (int  {\i i}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAABPS}
{\bkmkend AAAAAAABPS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4075                                             \{\par
4076   {\cf19 return} impl()->GetMutableTestCase(i);\par
4077 \}\par
}
{
\ql
References testing::internal::UnitTestImpl::GetMutableTestCase(), and impl().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_ad741830280b12c07874b2d37a6ee5c02_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetTestCase\:testing::UnitTest}
{\xe \v testing::UnitTest\:GetTestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b TestCase} * testing::UnitTest::GetTestCase (int  {\i i}) const}}
\par
{\bkmkstart AAAAAAABPT}
{\bkmkend AAAAAAABPT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4063                                                  \{\par
4064   {\cf19 return} impl()->GetTestCase(i);\par
4065 \}\par
}
{
\ql
References testing::internal::UnitTestImpl::GetTestCase(), and impl().}\par
{
\ql
Referenced by testing::internal::PrettyUnitTestResultPrinter::PrintFailedTests(), and testing::internal::XmlUnitTestResultPrinter::PrintXmlUnitTest().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a724d4c8be4481e0c1523a22b72dc7dac_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a724d4c8be4481e0c1523a22b72dc7dac_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GTEST_DISALLOW_COPY_AND_ASSIGN_\:testing::UnitTest}
{\xe \v testing::UnitTest\:GTEST_DISALLOW_COPY_AND_ASSIGN_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
testing::UnitTest::GTEST_DISALLOW_COPY_AND_ASSIGN_ ({\b UnitTest} ){\f2 [package]}}}
\par
{\bkmkstart AAAAAAABPU}
{\bkmkend AAAAAAABPU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v impl\:testing::UnitTest}
{\xe \v testing::UnitTest\:impl}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b internal::UnitTestImpl}* testing::UnitTest::impl (){\f2 [inline]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAABPV}
{\bkmkend AAAAAAABPV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1287 \{ {\cf19 return} impl_; \}\par
}
{
\ql
Referenced by ad_hoc_test_result(), disabled_test_count(), elapsed_time(), Failed(), failed_test_case_count(), failed_test_count(), GetMutableTestCase(), GetTestCase(), testing::internal::GetUnitTestImpl(), listeners(), testing::internal::AssertHelper::operator=(), Passed(), reportable_disabled_test_count(), reportable_test_count(), Run(), start_timestamp(), successful_test_case_count(), successful_test_count(), test_case_to_run_count(), test_to_run_count(), total_test_case_count(), and total_test_count().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a4df5d11a58affb337d7fa62eaa07690e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v listeners\:testing::UnitTest}
{\xe \v testing::UnitTest\:listeners}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TestEventListeners} & testing::UnitTest::listeners ()}}
\par
{\bkmkstart AAAAAAABPW}
{\bkmkend AAAAAAABPW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4081                                         \{\par
4082   {\cf19 return} *impl()->listeners();\par
4083 \}\par
}
{
\ql
References impl(), and testing::internal::UnitTestImpl::listeners().}\par
{
\ql
Referenced by testing::TestInfo::Run(), and testing::TestCase::Run().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_aac10085cf7c0d1751306db10cdd953cb_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_aac10085cf7c0d1751306db10cdd953cb_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v original_working_dir\:testing::UnitTest}
{\xe \v testing::UnitTest\:original_working_dir}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * testing::UnitTest::original_working_dir () const}}
\par
{\bkmkstart AAAAAAABPX}
{\bkmkend AAAAAAABPX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4265                                                  \{\par
4266   {\cf19 return} impl_->original_working_dir_.c_str();\par
4267 \}\par
}
{
\ql
References testing::internal::FilePath::c_str(), impl_, and testing::internal::UnitTestImpl::original_working_dir_.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_af6809b7747785c80f7a2f31f6b39b152_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Passed\:testing::UnitTest}
{\xe \v testing::UnitTest\:Passed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool testing::UnitTest::Passed () const}}
\par
{\bkmkstart AAAAAAABPY}
{\bkmkend AAAAAAABPY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4055 \{ {\cf19 return} impl()->Passed(); \}\par
}
{
\ql
References impl(), and testing::internal::UnitTestImpl::Passed().}\par
{
\ql
Referenced by testing::internal::PrettyUnitTestResultPrinter::OnTestIterationEnd().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a7c9b327bc14cb8a282c789dc6513a55b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a7c9b327bc14cb8a282c789dc6513a55b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PopGTestTrace\:testing::UnitTest}
{\xe \v testing::UnitTest\:PopGTestTrace}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::UnitTest::PopGTestTrace (){\f2 [package]}}}
\par
{\bkmkstart AAAAAAABPZ}
{\bkmkend AAAAAAABPZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4318                                  \{\par
4319   internal::MutexLock lock(&mutex_);\par
4320   impl_->gtest_trace_stack().pop_back();\par
4321 \}\par
}
{
\ql
References testing::internal::UnitTestImpl::gtest_trace_stack(), impl_, and mutex_.}\par
{
\ql
Referenced by testing::internal::ScopedTrace::~ScopedTrace().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a70b3e3282778bc9a36520fe0a8be3c57_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a70b3e3282778bc9a36520fe0a8be3c57_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PushGTestTrace\:testing::UnitTest}
{\xe \v testing::UnitTest\:PushGTestTrace}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::UnitTest::PushGTestTrace (const {\b internal::TraceInfo} &  {\i trace}){\f2 [package]}}}
\par
{\bkmkstart AAAAAAABQA}
{\bkmkend AAAAAAABQA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4311                                  \{\par
4312   internal::MutexLock lock(&mutex_);\par
4313   impl_->gtest_trace_stack().push_back(trace);\par
4314 \}\par
}
{
\ql
Referenced by testing::internal::ScopedTrace::ScopedTrace().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_af455b953108ff09b3b6e41011653e78a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v random_seed\:testing::UnitTest}
{\xe \v testing::UnitTest\:random_seed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::UnitTest::random_seed () const}}
\par
{\bkmkstart AAAAAAABQB}
{\bkmkend AAAAAAABQB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4286 \{ {\cf19 return} impl_->random_seed(); \}\par
}
{
\ql
References impl_, and testing::internal::UnitTestImpl::random_seed().}\par
{
\ql
Referenced by testing::internal::PrettyUnitTestResultPrinter::OnTestIterationStart(), and testing::internal::XmlUnitTestResultPrinter::PrintXmlUnitTest().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_adddc090a06f2d3a0e68f3762ee262688_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_adddc090a06f2d3a0e68f3762ee262688_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v RecordProperty\:testing::UnitTest}
{\xe \v testing::UnitTest\:RecordProperty}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::UnitTest::RecordProperty (const {\b std::string} &  {\i key}, const {\b std::string} &  {\i value}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAABQC}
{\bkmkend AAAAAAABQC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4176                                                       \{\par
4177   impl_->RecordProperty(TestProperty(key, value));\par
4178 \}\par
}
{
\ql
References impl_, and testing::internal::UnitTestImpl::RecordProperty().}\par
{
\ql
Referenced by testing::Test::RecordProperty().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a2c96a4a02c34095e07c6999e7686367f_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a2c96a4a02c34095e07c6999e7686367f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v reportable_disabled_test_count\:testing::UnitTest}
{\xe \v testing::UnitTest\:reportable_disabled_test_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::UnitTest::reportable_disabled_test_count () const}}
\par
{\bkmkstart AAAAAAABQD}
{\bkmkend AAAAAAABQD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4023                                                    \{\par
4024   {\cf19 return} impl()->reportable_disabled_test_count();\par
4025 \}\par
}
{
\ql
References impl(), and testing::internal::UnitTestImpl::reportable_disabled_test_count().}\par
{
\ql
Referenced by testing::internal::PrettyUnitTestResultPrinter::OnTestIterationEnd(), and testing::internal::XmlUnitTestResultPrinter::PrintXmlUnitTest().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a2a2835db178d5c8569507db9f0a3d54f_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a2a2835db178d5c8569507db9f0a3d54f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v reportable_test_count\:testing::UnitTest}
{\xe \v testing::UnitTest\:reportable_test_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::UnitTest::reportable_test_count () const}}
\par
{\bkmkstart AAAAAAABQE}
{\bkmkend AAAAAAABQE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4033                                           \{\par
4034   {\cf19 return} impl()->reportable_test_count();\par
4035 \}\par
}
{
\ql
References impl(), and testing::internal::UnitTestImpl::reportable_test_count().}\par
{
\ql
Referenced by testing::internal::XmlUnitTestResultPrinter::PrintXmlUnitTest().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a449d0e0350ef146040cd37679c005248_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a449d0e0350ef146040cd37679c005248_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Run\:testing::UnitTest}
{\xe \v testing::UnitTest\:Run}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::UnitTest::Run ()}}
\par
{\bkmkstart AAAAAAABQF}
{\bkmkend AAAAAAABQF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4185                   \{\par
4186   {\cf17 const} {\cf18 bool} in_death_test_child_process =\par
4187       internal::GTEST_FLAG(internal_run_death_test).length() > 0;\par
4188 \par
4189   {\cf20 // Google Test implements this protocol for catching that a test}\par
4190   {\cf20 // program exits before returning control to Google Test:}\par
4191   {\cf20 //}\par
4192   {\cf20 //   1. Upon start, Google Test creates a file whose absolute path}\par
4193   {\cf20 //      is specified by the environment variable}\par
4194   {\cf20 //      TEST_PREMATURE_EXIT_FILE.}\par
4195   {\cf20 //   2. When Google Test has finished its work, it deletes the file.}\par
4196   {\cf20 //}\par
4197   {\cf20 // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before}\par
4198   {\cf20 // running a Google-Test-based test program and check the existence}\par
4199   {\cf20 // of the file at the end of the test execution to see if it has}\par
4200   {\cf20 // exited prematurely.}\par
4201 \par
4202   {\cf20 // If we are in the child process of a death test, don't}\par
4203   {\cf20 // create/delete the premature exit file, as doing so is unnecessary}\par
4204   {\cf20 // and will confuse the parent process.  Otherwise, create/delete}\par
4205   {\cf20 // the file upon entering/leaving this function.  If the program}\par
4206   {\cf20 // somehow exits before this function has a chance to return, the}\par
4207   {\cf20 // premature-exit file will be left undeleted, causing a test runner}\par
4208   {\cf20 // that understands the premature-exit-file protocol to report the}\par
4209   {\cf20 // test as having failed.}\par
4210   {\cf17 const} internal::ScopedPrematureExitFile premature_exit_file(\par
4211       in_death_test_child_process ?\par
4212       NULL : internal::posix::GetEnv({\cf22 "TEST_PREMATURE_EXIT_FILE"}));\par
4213 \par
4214   {\cf20 // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be}\par
4215   {\cf20 // used for the duration of the program.}\par
4216   impl()->set_catch_exceptions(GTEST_FLAG(catch_exceptions));\par
4217 \par
4218 {\cf21 #if GTEST_HAS_SEH}\par
4219   {\cf20 // Either the user wants Google Test to catch exceptions thrown by the}\par
4220   {\cf20 // tests or this is executing in the context of death test child}\par
4221   {\cf20 // process. In either case the user does not want to see pop-up dialogs}\par
4222   {\cf20 // about crashes - they are expected.}\par
4223   {\cf19 if} (impl()->catch_exceptions() || in_death_test_child_process) \{\par
4224 {\cf21 # if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT}\par
4225     {\cf20 // SetErrorMode doesn't exist on CE.}\par
4226     SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |\par
4227                  SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);\par
4228 {\cf21 # endif  }{\cf20 // !GTEST_OS_WINDOWS_MOBILE}\par
4229 \par
4230 {\cf21 # if (defined(_MSC_VER) || GTEST_OS_WINDOWS_MINGW) && !GTEST_OS_WINDOWS_MOBILE}\par
4231     {\cf20 // Death test children can be terminated with _abort().  On Windows,}\par
4232     {\cf20 // _abort() can show a dialog with a warning message.  This forces the}\par
4233     {\cf20 // abort message to go to stderr instead.}\par
4234     _set_error_mode(_OUT_TO_STDERR);\par
4235 {\cf21 # endif}\par
4236 \par
4237 {\cf21 # if _MSC_VER >= 1400 && !GTEST_OS_WINDOWS_MOBILE}\par
4238     {\cf20 // In the debug version, Visual Studio pops up a separate dialog}\par
4239     {\cf20 // offering a choice to debug the aborted program. We need to suppress}\par
4240     {\cf20 // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement}\par
4241     {\cf20 // executed. Google Test will notify the user of any unexpected}\par
4242     {\cf20 // failure via stderr.}\par
4243     {\cf20 //}\par
4244     {\cf20 // VC++ doesn't define _set_abort_behavior() prior to the version 8.0.}\par
4245     {\cf20 // Users of prior VC versions shall suffer the agony and pain of}\par
4246     {\cf20 // clicking through the countless debug dialogs.}\par
4247     {\cf20 // TODO(vladl@google.com): find a way to suppress the abort dialog() in the}\par
4248     {\cf20 // debug mode when compiled with VC 7.1 or lower.}\par
4249     {\cf19 if} (!GTEST_FLAG(break_on_failure))\par
4250       _set_abort_behavior(\par
4251           0x0,                                    {\cf20 // Clear the following flags:}\par
4252           _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  {\cf20 // pop-up window, core dump.}\par
4253 {\cf21 # endif}\par
4254   \}\par
4255 {\cf21 #endif  }{\cf20 // GTEST_HAS_SEH}\par
4256 \par
4257   {\cf19 return} internal::HandleExceptionsInMethodIfSupported(\par
4258       impl(),\par
4259       &internal::UnitTestImpl::RunAllTests,\par
4260       {\cf22 "auxiliary test code (environments or event listeners)"}) ? 0 : 1;\par
4261 \}\par
}
{
\ql
References testing::internal::posix::GetEnv(), GTEST_FLAG, testing::internal::HandleExceptionsInMethodIfSupported(), impl(), testing::internal::UnitTestImpl::RunAllTests(), and testing::internal::UnitTestImpl::set_catch_exceptions().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a2febc800536b44500565f4c423f359d3_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v start_timestamp\:testing::UnitTest}
{\xe \v testing::UnitTest\:start_timestamp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b internal::TimeInMillis} testing::UnitTest::start_timestamp () const}}
\par
{\bkmkstart AAAAAAABQG}
{\bkmkend AAAAAAABQG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4045                                                      \{\par
4046     {\cf19 return} impl()->start_timestamp();\par
4047 \}\par
}
{
\ql
References impl(), and testing::internal::UnitTestImpl::start_timestamp().}\par
{
\ql
Referenced by testing::internal::XmlUnitTestResultPrinter::PrintXmlUnitTest().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a3d83fe1cc5570a1c34f9754b0f56d65f_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a3d83fe1cc5570a1c34f9754b0f56d65f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v successful_test_case_count\:testing::UnitTest}
{\xe \v testing::UnitTest\:successful_test_case_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::UnitTest::successful_test_case_count () const}}
\par
{\bkmkstart AAAAAAABQH}
{\bkmkend AAAAAAABQH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3994                                                \{\par
3995   {\cf19 return} impl()->successful_test_case_count();\par
3996 \}\par
}
{
\ql
References impl(), and testing::internal::UnitTestImpl::successful_test_case_count().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_acaa2ab71f53c25ffe0242a91c14e173f_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v successful_test_count\:testing::UnitTest}
{\xe \v testing::UnitTest\:successful_test_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::UnitTest::successful_test_count () const}}
\par
{\bkmkstart AAAAAAABQI}
{\bkmkend AAAAAAABQI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4015                                           \{\par
4016   {\cf19 return} impl()->successful_test_count();\par
4017 \}\par
}
{
\ql
References impl(), and testing::internal::UnitTestImpl::successful_test_count().}\par
{
\ql
Referenced by testing::internal::PrettyUnitTestResultPrinter::OnTestIterationEnd().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a49ee8056e357ad497e67399447dd5a40_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a49ee8056e357ad497e67399447dd5a40_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v test_case_to_run_count\:testing::UnitTest}
{\xe \v testing::UnitTest\:test_case_to_run_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::UnitTest::test_case_to_run_count () const}}
\par
{\bkmkstart AAAAAAABQJ}
{\bkmkend AAAAAAABQJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4010                                            \{\par
4011   {\cf19 return} impl()->test_case_to_run_count();\par
4012 \}\par
}
{
\ql
References impl(), and testing::internal::UnitTestImpl::test_case_to_run_count().}\par
{
\ql
Referenced by testing::internal::PrettyUnitTestResultPrinter::OnTestIterationEnd(), and testing::internal::PrettyUnitTestResultPrinter::OnTestIterationStart().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a965248fbe72f9fede5de921b6666943b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a965248fbe72f9fede5de921b6666943b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v test_to_run_count\:testing::UnitTest}
{\xe \v testing::UnitTest\:test_to_run_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::UnitTest::test_to_run_count () const}}
\par
{\bkmkstart AAAAAAABQK}
{\bkmkend AAAAAAABQK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4041 \{ {\cf19 return} impl()->test_to_run_count(); \}\par
}
{
\ql
References impl(), and testing::internal::UnitTestImpl::test_to_run_count().}\par
{
\ql
Referenced by testing::internal::PrettyUnitTestResultPrinter::OnTestIterationEnd(), and testing::internal::PrettyUnitTestResultPrinter::OnTestIterationStart().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a461f46b2976f135d2a65e8d3def746e9_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a461f46b2976f135d2a65e8d3def746e9_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v total_test_case_count\:testing::UnitTest}
{\xe \v testing::UnitTest\:total_test_case_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::UnitTest::total_test_case_count () const}}
\par
{\bkmkstart AAAAAAABQL}
{\bkmkend AAAAAAABQL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4004                                           \{\par
4005   {\cf19 return} impl()->total_test_case_count();\par
4006 \}\par
}
{
\ql
References impl(), and testing::internal::UnitTestImpl::total_test_case_count().}\par
{
\ql
Referenced by testing::internal::PrettyUnitTestResultPrinter::PrintFailedTests(), and testing::internal::XmlUnitTestResultPrinter::PrintXmlUnitTest().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a93fc8f4eebc3212d06468ad216830ced_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_a93fc8f4eebc3212d06468ad216830ced_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v total_test_count\:testing::UnitTest}
{\xe \v testing::UnitTest\:total_test_count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::UnitTest::total_test_count () const}}
\par
{\bkmkstart AAAAAAABQM}
{\bkmkend AAAAAAABQM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4038 \{ {\cf19 return} impl()->total_test_count(); \}\par
}
{
\ql
References impl(), and testing::internal::UnitTestImpl::total_test_count().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1UnitTest_af6e02fcf76fd7247687f4e8af6e7ef41_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends And Related Function Documentation\par
\pard\plain 
{\xe \v AddGlobalTestEnvironment\:testing::UnitTest}
{\xe \v testing::UnitTest\:AddGlobalTestEnvironment}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Environment}* AddGlobalTestEnvironment ({\b Environment} *  {\i env}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABQN}
{\bkmkend AAAAAAABQN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1350                                                                \{\par
1351   {\cf19 return} UnitTest::GetInstance()->AddEnvironment(env);\par
1352 \}\par
}
}
{\xe \v internal::AssertHelper\:testing::UnitTest}
{\xe \v testing::UnitTest\:internal::AssertHelper}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
friend class {\b internal::AssertHelper}{\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABQO}
{\bkmkend AAAAAAABQO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v internal::ScopedTrace\:testing::UnitTest}
{\xe \v testing::UnitTest\:internal::ScopedTrace}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
friend class {\b internal::ScopedTrace}{\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABQP}
{\bkmkend AAAAAAABQP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v internal::StreamingListenerTest\:testing::UnitTest}
{\xe \v testing::UnitTest\:internal::StreamingListenerTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
friend class internal::StreamingListenerTest{\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABQQ}
{\bkmkend AAAAAAABQQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v internal::UnitTestRecordPropertyTestHelper\:testing::UnitTest}
{\xe \v testing::UnitTest\:internal::UnitTestRecordPropertyTestHelper}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
friend class internal::UnitTestRecordPropertyTestHelper{\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABQR}
{\bkmkend AAAAAAABQR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Test\:testing::UnitTest}
{\xe \v testing::UnitTest\:Test}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
friend class {\b Test}{\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABQS}
{\bkmkend AAAAAAABQS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v __pad0__\:testing::UnitTest}
{\xe \v testing::UnitTest\:__pad0__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
testing::UnitTest::__pad0__{\f2 [package]}}}
\par
{\bkmkstart AAAAAAABQT}
{\bkmkend AAAAAAABQT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v __pad1__\:testing::UnitTest}
{\xe \v testing::UnitTest\:__pad1__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
testing::UnitTest::__pad1__{\f2 [package]}}}
\par
{\bkmkstart AAAAAAABQU}
{\bkmkend AAAAAAABQU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v __pad2__\:testing::UnitTest}
{\xe \v testing::UnitTest\:__pad2__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
testing::UnitTest::__pad2__{\f2 [package]}}}
\par
{\bkmkstart AAAAAAABQV}
{\bkmkend AAAAAAABQV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v impl_\:testing::UnitTest}
{\xe \v testing::UnitTest\:impl_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b internal::UnitTestImpl}* testing::UnitTest::impl_{\f2 [package]}}}
\par
{\bkmkstart AAAAAAABQW}
{\bkmkend AAAAAAABQW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by AddEnvironment(), current_test_case(), current_test_info(), original_working_dir(), PopGTestTrace(), random_seed(), RecordProperty(), UnitTest(), and ~UnitTest().}\par
}
{\xe \v message\:testing::UnitTest}
{\xe \v testing::UnitTest\:message}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b std::string}& testing::UnitTest::message{\f2 [package]}}}
\par
{\bkmkstart AAAAAAABQX}
{\bkmkend AAAAAAABQX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mutex_\:testing::UnitTest}
{\xe \v testing::UnitTest\:mutex_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b internal::Mutex} testing::UnitTest::mutex_{\f2 [mutable]}, {\f2 [package]}}}
\par
{\bkmkstart AAAAAAABQY}
{\bkmkend AAAAAAABQY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by current_test_case(), current_test_info(), and PopGTestTrace().}\par
}
}