{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::edit_distance Namespace Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::edit_distance}
{\xe \v testing::internal::edit_distance}
{\bkmkstart AAAAAAACCG}
{\bkmkend AAAAAAACCG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
 {\b anonymous_namespace\{gtest.cc\}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b EditType} \{ {\b kMatch}
, {\b kAdd}
, {\b kRemove}
, {\b kReplace}
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::vector}< {\b EditType} > {\b CalculateOptimalEdits} (const {\b std::vector}< size_t > &left, const {\b std::vector}< size_t > &right)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::vector}< {\b EditType} > {\b CalculateOptimalEdits} (const {\b std::vector}< {\b std::string} > &left, const {\b std::vector}< {\b std::string} > &right)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::string} {\b CreateUnifiedDiff} (const {\b std::vector}< {\b std::string} > &left, const {\b std::vector}< {\b std::string} > &right, size_t context)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v EditType\:testing::internal::edit_distance}
{\xe \v testing::internal::edit_distance\:EditType}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b testing::internal::edit_distance::EditType}}}
\par
{\bkmkstart AAAAAAACCH}
{\bkmkend AAAAAAACCH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v kMatch\:testing::internal::edit_distance}
{\xe \v testing::internal::edit_distance\:kMatch}
{\qr kMatch{\bkmkstart AAAAAAACCI}
{\bkmkend AAAAAAACCI}
\cell }{\cell }{\row }
{\xe \v kAdd\:testing::internal::edit_distance}
{\xe \v testing::internal::edit_distance\:kAdd}
{\qr kAdd{\bkmkstart AAAAAAACCJ}
{\bkmkend AAAAAAACCJ}
\cell }{\cell }{\row }
{\xe \v kRemove\:testing::internal::edit_distance}
{\xe \v testing::internal::edit_distance\:kRemove}
{\qr kRemove{\bkmkstart AAAAAAACCK}
{\bkmkend AAAAAAACCK}
\cell }{\cell }{\row }
{\xe \v kReplace\:testing::internal::edit_distance}
{\xe \v testing::internal::edit_distance\:kReplace}
{\qr kReplace{\bkmkstart AAAAAAACCL}
{\bkmkend AAAAAAACCL}
\cell }{\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 180 \{ kMatch, kAdd, kRemove, kReplace \};\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v CalculateOptimalEdits\:testing::internal::edit_distance}
{\xe \v testing::internal::edit_distance\:CalculateOptimalEdits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b GTEST_API_} {\b std::vector}< {\b EditType} > testing::internal::edit_distance::CalculateOptimalEdits (const {\b std::vector}< size_t > &  {\i left}, const {\b std::vector}< size_t > &  {\i right})}}
\par
{\bkmkstart AAAAAAACCM}
{\bkmkend AAAAAAACCM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1029                                                                             \{\par
1030   std::vector<std::vector<double> > costs(\par
1031       left.size() + 1, std::vector<double>(right.size() + 1));\par
1032   std::vector<std::vector<EditType> > best_move(\par
1033       left.size() + 1, std::vector<EditType>(right.size() + 1));\par
1034 \par
1035   {\cf20 // Populate for empty right.}\par
1036   {\cf19 for} ({\cf18 size_t} l_i = 0; l_i < costs.size(); ++l_i) \{\par
1037     costs[l_i][0] = {\cf17 static_cast<}{\cf18 double}{\cf17 >}(l_i);\par
1038     best_move[l_i][0] = kRemove;\par
1039   \}\par
1040   {\cf20 // Populate for empty left.}\par
1041   {\cf19 for} ({\cf18 size_t} r_i = 1; r_i < costs[0].size(); ++r_i) \{\par
1042     costs[0][r_i] = {\cf17 static_cast<}{\cf18 double}{\cf17 >}(r_i);\par
1043     best_move[0][r_i] = kAdd;\par
1044   \}\par
1045 \par
1046   {\cf19 for} ({\cf18 size_t} l_i = 0; l_i < left.size(); ++l_i) \{\par
1047     {\cf19 for} ({\cf18 size_t} r_i = 0; r_i < right.size(); ++r_i) \{\par
1048       {\cf19 if} (left[l_i] == right[r_i]) \{\par
1049         {\cf20 // Found a match. Consume it.}\par
1050         costs[l_i + 1][r_i + 1] = costs[l_i][r_i];\par
1051         best_move[l_i + 1][r_i + 1] = kMatch;\par
1052         {\cf19 continue};\par
1053       \}\par
1054 \par
1055       {\cf17 const} {\cf18 double} add = costs[l_i + 1][r_i];\par
1056       {\cf17 const} {\cf18 double} remove = costs[l_i][r_i + 1];\par
1057       {\cf17 const} {\cf18 double} replace = costs[l_i][r_i];\par
1058       {\cf19 if} (add < remove && add < replace) \{\par
1059         costs[l_i + 1][r_i + 1] = add + 1;\par
1060         best_move[l_i + 1][r_i + 1] = kAdd;\par
1061       \} {\cf19 else} {\cf19 if} (remove < add && remove < replace) \{\par
1062         costs[l_i + 1][r_i + 1] = remove + 1;\par
1063         best_move[l_i + 1][r_i + 1] = kRemove;\par
1064       \} {\cf19 else} \{\par
1065         {\cf20 // We make replace a little more expensive than add/remove to lower}\par
1066         {\cf20 // their priority.}\par
1067         costs[l_i + 1][r_i + 1] = replace + 1.00001;\par
1068         best_move[l_i + 1][r_i + 1] = kReplace;\par
1069       \}\par
1070     \}\par
1071   \}\par
1072 \par
1073   {\cf20 // Reconstruct the best path. We do it in reverse order.}\par
1074   std::vector<EditType> best_path;\par
1075   {\cf19 for} ({\cf18 size_t} l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) \{\par
1076     EditType move = best_move[l_i][r_i];\par
1077     best_path.push_back(move);\par
1078     l_i -= move != kAdd;\par
1079     r_i -= move != kRemove;\par
1080   \}\par
1081   std::reverse(best_path.begin(), best_path.end());\par
1082   {\cf19 return} best_path;\par
1083 \}\par
}
{
\ql
References std::vector< T >::begin(), std::vector< T >::end(), kAdd, kMatch, kRemove, kReplace, testing::internal::move(), std::vector< T >::push_back(), std::reverse(), and std::vector< T >::size().}\par
{
\ql
Referenced by CalculateOptimalEdits(), and CreateUnifiedDiff().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "namespacetesting_1_1internal_1_1edit__distance_a455a044d22764a657122b69b0238840a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "namespacetesting_1_1internal_1_1edit__distance_a455a044d22764a657122b69b0238840a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v CalculateOptimalEdits\:testing::internal::edit_distance}
{\xe \v testing::internal::edit_distance\:CalculateOptimalEdits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b GTEST_API_} {\b std::vector}< {\b EditType} > testing::internal::edit_distance::CalculateOptimalEdits (const {\b std::vector}< {\b std::string} > &  {\i left}, const {\b std::vector}< {\b std::string} > &  {\i right})}}
\par
{\bkmkstart AAAAAAACCN}
{\bkmkend AAAAAAACCN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1106                                        \{\par
1107   std::vector<size_t> left_ids, right_ids;\par
1108   \{\par
1109     InternalStrings intern_table;\par
1110     {\cf19 for} ({\cf18 size_t} i = 0; i < left.size(); ++i) \{\par
1111       left_ids.push_back(intern_table.GetId(left[i]));\par
1112     \}\par
1113     {\cf19 for} ({\cf18 size_t} i = 0; i < right.size(); ++i) \{\par
1114       right_ids.push_back(intern_table.GetId(right[i]));\par
1115     \}\par
1116   \}\par
1117   {\cf19 return} CalculateOptimalEdits(left_ids, right_ids);\par
1118 \}\par
}
{
\ql
References CalculateOptimalEdits(), and std::vector< T >::push_back().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "namespacetesting_1_1internal_1_1edit__distance_ade198faa03ccb623b42e55575ffab182_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v CreateUnifiedDiff\:testing::internal::edit_distance}
{\xe \v testing::internal::edit_distance\:CreateUnifiedDiff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b GTEST_API_} {\b std::string} testing::internal::edit_distance::CreateUnifiedDiff (const {\b std::vector}< {\b std::string} > &  {\i left}, const {\b std::vector}< {\b std::string} > &  {\i right}, size_t  {\i context})}}
\par
{\bkmkstart AAAAAAACCO}
{\bkmkend AAAAAAACCO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1205                                               \{\par
1206   {\cf17 const} std::vector<EditType> edits = CalculateOptimalEdits(left, right);\par
1207 \par
1208   {\cf18 size_t} l_i = 0, r_i = 0, edit_i = 0;\par
1209   std::stringstream ss;\par
1210   {\cf19 while} (edit_i < edits.size()) \{\par
1211     {\cf20 // Find first edit.}\par
1212     {\cf19 while} (edit_i < edits.size() && edits[edit_i] == kMatch) \{\par
1213       ++l_i;\par
1214       ++r_i;\par
1215       ++edit_i;\par
1216     \}\par
1217 \par
1218     {\cf20 // Find the first line to include in the hunk.}\par
1219     {\cf17 const} {\cf18 size_t} prefix_context = std::min(l_i, context);\par
1220     Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);\par
1221     {\cf19 for} ({\cf18 size_t} i = prefix_context; i > 0; --i) \{\par
1222       hunk.PushLine({\cf23 ' '}, left[l_i - i].c_str());\par
1223     \}\par
1224 \par
1225     {\cf20 // Iterate the edits until we found enough suffix for the hunk or the input}\par
1226     {\cf20 // is over.}\par
1227     {\cf18 size_t} n_suffix = 0;\par
1228     {\cf19 for} (; edit_i < edits.size(); ++edit_i) \{\par
1229       {\cf19 if} (n_suffix >= context) \{\par
1230         {\cf20 // Continue only if the next hunk is very close.}\par
1231         std::vector<EditType>::const_iterator it = edits.begin() + edit_i;\par
1232         {\cf19 while} (it != edits.end() && *it == kMatch) ++it;\par
1233         {\cf19 if} (it == edits.end() || (it - edits.begin()) - edit_i >= context) \{\par
1234           {\cf20 // There is no next edit or it is too far away.}\par
1235           {\cf19 break};\par
1236         \}\par
1237       \}\par
1238 \par
1239       EditType edit = edits[edit_i];\par
1240       {\cf20 // Reset count when a non match is found.}\par
1241       n_suffix = edit == kMatch ? n_suffix + 1 : 0;\par
1242 \par
1243       {\cf19 if} (edit == kMatch || edit == kRemove || edit == kReplace) \{\par
1244         hunk.PushLine(edit == kMatch ? {\cf23 ' '} : {\cf23 '-'}, left[l_i].c_str());\par
1245       \}\par
1246       {\cf19 if} (edit == kAdd || edit == kReplace) \{\par
1247         hunk.PushLine({\cf23 '+'}, right[r_i].c_str());\par
1248       \}\par
1249 \par
1250       {\cf20 // Advance indices, depending on edit type.}\par
1251       l_i += edit != kAdd;\par
1252       r_i += edit != kRemove;\par
1253     \}\par
1254 \par
1255     {\cf19 if} (!hunk.has_edits()) \{\par
1256       {\cf20 // We are done. We don't want this hunk.}\par
1257       {\cf19 break};\par
1258     \}\par
1259 \par
1260     hunk.PrintTo(&ss);\par
1261   \}\par
1262   {\cf19 return} ss.str();\par
1263 \}\par
}
{
\ql
References std::vector< T >::begin(), CalculateOptimalEdits(), std::vector< T >::end(), kAdd, kMatch, kRemove, kReplace, std::min(), std::vector< T >::size(), and std::stringstream::str().}\par
{
\ql
Referenced by testing::internal::EqFailure().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "namespacetesting_1_1internal_1_1edit__distance_aec6a04ff6b3487a6744d116dbc2dc3e7_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "namespacetesting_1_1internal_1_1edit__distance_aec6a04ff6b3487a6744d116dbc2dc3e7_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
}