{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GraphRepresentationList Class Reference\par \pard\plain 
{\tc\tcl2 \v GraphRepresentationList}
{\xe \v GraphRepresentationList}
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interface of {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAT" }{}}{\fldrslt {\cs37\ul\cf2 Graph}}} Representation. }}\par
{
{\f2 #include <graph_representation.h>}}\par
Inheritance diagram for GraphRepresentationList:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d8/d10/classcommon_1_1_graph_representation_list__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for GraphRepresentationList:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d1/d60/classcommon_1_1_graph_representation_list__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJT" }{}}{\fldrslt {\cs37\ul\cf2 AddEdge}}}
 (const int source, const int destination)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJU" }{}}{\fldrslt {\cs37\ul\cf2 BFS}}}
 ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Brief function description here. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJV" }{}}{\fldrslt {\cs37\ul\cf2 ContainsCycle}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJW" }{}}{\fldrslt {\cs37\ul\cf2 DFS}}}
 ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Depth First Search. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJY" }{}}{\fldrslt {\cs37\ul\cf2 GraphRepresentationList}}}
 (const {\b string} graph_type)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJX" }{}}{\fldrslt {\cs37\ul\cf2 PrintDebug}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJZ" }{}}{\fldrslt {\cs37\ul\cf2 ~GraphRepresentationList}}}
 ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b unique_ptr}< {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABA" }{}}{\fldrslt {\cs37\ul\cf2 common::GraphRepresentation}}}
 > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJE" }{}}{\fldrslt {\cs37\ul\cf2 GetRepresentation}}}
 (const {\b string} representation_type, const {\b string} graph_type)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b vector}< {\b vector}< int > > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b string} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJQ" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJJ" }{}}{\fldrslt {\cs37\ul\cf2 vertices}}}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b string} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJF" }{}}{\fldrslt {\cs37\ul\cf2 kGraphTypeDirected}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b string} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJR" }{}}{\fldrslt {\cs37\ul\cf2 kGraphTypeUndirected}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b string} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACBZ" }{}}{\fldrslt {\cs37\ul\cf2 kRepresentationTypeList}}}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b string} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJS" }{}}{\fldrslt {\cs37\ul\cf2 kRepresentationTypeMatrix}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Interface of {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAT" }{}}{\fldrslt {\cs37\ul\cf2 Graph}}} Representation. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The strategy pattern seperates the selection of algorithm from the implementation og the algorithm. Allows for the selection to be made based upon context. \par
}{
Definition at line 47 of file graph_representation.h.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v GraphRepresentationList\:GraphRepresentationList}
{\xe \v GraphRepresentationList\:GraphRepresentationList}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 GraphRepresentationList}}}
 (const {\b string}  {\i graph_type})}}
\par
{\bkmkstart AAAAAAACJY}
{\bkmkend AAAAAAACJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 50 of file graph_representation.h.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 50 : {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJM" }{}}{\fldrslt {\cs37\ul\cf2 GraphRepresentation}}}
(graph_type) \{\};\par
}
}
{\xe \v ~GraphRepresentationList\:GraphRepresentationList}
{\xe \v GraphRepresentationList\:~GraphRepresentationList}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual ~{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABB" }{}}{\fldrslt {\cs37\ul\cf2 GraphRepresentationList}}}
 (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACJZ}
{\bkmkend AAAAAAACJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 51 of file graph_representation.h.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 51 \{\};\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v AddEdge\:GraphRepresentationList}
{\xe \v GraphRepresentationList\:AddEdge}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void AddEdge (const int  {\i source}, const int  {\i destination}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACJT}
{\bkmkend AAAAAAACJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJG" }{}}{\fldrslt {\cs37\ul\cf2 GraphRepresentation}}}
.}\par
{
Definition at line 38 of file graph_representation.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 39 \{\par
40     {\cf20 /* static_cast can be used to convert from an int to a char. However, the resulting char may not have enough bits to hold the entire int vaule */}\par
41     {\cf18 unsigned} {\cf18 long} source_index = {\cf17 static_cast<}{\cf18 unsigned} {\cf18 long}{\cf17 >}(source);\par
42 \par
43     {\cf18 int} size_required = std::max(source, destination) + 1;\par
44 \par
45     {\cf19 while} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
.size() < size_required) \{\par
46         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
.push_back(vector<int>());\par
47     \}\par
48 \par
49     {\cf20 /* Operator[] does not do range checking. Accessing element not presenting in vector silently leads to undefined behaviors; .ar() member function does range checking and throws an expception when you are tring to access nonexisting element.*/}\par
50     {\cf17 auto} adjacent_vertices = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
.at(source_index);\par
51 \par
52     std::vector<int>::iterator it = std::find(adjacent_vertices.begin(), adjacent_vertices.end(), destination);\par
53 \par
54     {\cf20 // Don't add edge twice}\par
55     {\cf19 if} (it == adjacent_vertices.end()) \{\par
56         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
.at(source_index).push_back(destination);\par
57     \}\par
58 \par
59     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJJ" }{}}{\fldrslt {\cs37\ul\cf2 vertices}}}
 = {\cf17 static_cast<}{\cf18 int}{\cf17 >}({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
.size());\par
60 \}\par
}
{
\ql
References vector< T >::end(), std::find(), and std::max().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "db/df9/classcommon_1_1_graph_representation_list_af2711b2aec837d248c94c50cb7687648_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v BFS\:GraphRepresentationList}
{\xe \v GraphRepresentationList\:BFS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void BFS (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACJU}
{\bkmkend AAAAAAACJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Brief function description here. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Detailed description: Breadth First Search is traversing algorithm where you should start traversing from a selected node (source or parent node) and traverse the graph layerwise thus exploring the neighbour nodes. refer to {\field {\*\fldinst { HYPERLINK "https://www.hackerearth.com/practice/algorithms/graphs/breadth-first-search/practice-problems/" }{}}{\fldrslt {\cs37\ul\cf2 https://www.hackerearth.com/practice/algorithms/graphs/breadth-first-search/practice-problems/}}}
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Return parameter description \par
}}}{
Reimplemented from {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJH" }{}}{\fldrslt {\cs37\ul\cf2 GraphRepresentation}}}
.}\par
{
Definition at line 68 of file graph_representation.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 69 \{\par
70     std::vector<int> components;\par
71 \par
72     {\cf17 const} {\cf18 int} NULL_PARENT = -1;\par
73     {\cf20 // creates an array on the heap that has a lifetime for as long as you need it}\par
74     {\cf18 int} *parents = {\cf17 new} {\cf18 int} [{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJJ" }{}}{\fldrslt {\cs37\ul\cf2 vertices}}}
];\par
75     assert(parents);\par
76 \par
77     {\cf20 /* Assigns vaule to the frist n elements of sequence pointed by first */}\par
78     std::fill_n(parents, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJJ" }{}}{\fldrslt {\cs37\ul\cf2 vertices}}}
, NULL_PARENT);\par
79 \par
80     std::cout << {\cf22 "\\n----------------\\nBFS: "} << std::endl;\par
81 \par
82     {\cf20 // traversing from source (parent node) }\par
83     {\cf19 for} ({\cf18 unsigned} {\cf18 long} i = 0; i < {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
.size(); ++i) \{\par
84         {\cf19 if} (parents[i] == NULL_PARENT) \{\par
85             components.push_back(i);\par
86         \}\par
87 \par
88         std::queue<int> to_visit;\par
89         to_visit.push(i);\par
90 \par
91 {\cf20 //         std::cout << "\\nparent node: " << i << std::endl;}\par
92         {\cf20 // exploring the neighbour nodes}\par
93         {\cf19 while}(!to_visit.empty())\{\par
94             {\cf18 int} vertex = to_visit.front();\par
95             to_visit.pop();\par
96             std::cout << vertex << {\cf22 " "};\par
97 \par
98             {\cf20 // exploring all nodes at the present depth prior to moving on to the nodes at the next depth level}\par
99             {\cf19 for} ({\cf18 unsigned} {\cf18 long} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARR" }{}}{\fldrslt {\cs37\ul\cf2 n}}}
 = 0; {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARR" }{}}{\fldrslt {\cs37\ul\cf2 n}}}
 < {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
[vertex].size(); ++{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARR" }{}}{\fldrslt {\cs37\ul\cf2 n}}}
) \{\par
100                 {\cf18 int} neighbor = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
[vertex].at({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARR" }{}}{\fldrslt {\cs37\ul\cf2 n}}}
);\par
101                 {\cf19 if} (parents[neighbor] == NULL_PARENT) \{\par
102                     parents[neighbor] = vertex;\par
103                     to_visit.push(neighbor);\par
104                 \}\par
105             \}\par
106         \}\par
107     \}\par
108 \par
109     std::cout << {\cf22 "\\n\\n Parents: "}<< std::endl;\par
110 \par
111     {\cf19 for} ({\cf18 int} i = 0; i < {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJJ" }{}}{\fldrslt {\cs37\ul\cf2 vertices}}}
; ++i) \{\par
112         std::cout << i << {\cf22 " : "} << parents[i] << std::endl;\par
113     \}\par
114 \par
115     std::cout << {\cf22 "\\n Components: "} << components.size() << std::endl;\par
116     {\cf19 for} ({\cf17 auto} it = components.begin();  it != components.end() ; ++it) \{\par
117         std::cout << *it << std::endl;\par
118     \}\par
119 \par
120     std::cout << std::endl;\par
121 \par
122     {\cf17 delete} [] parents;\par
123 \}\par
}
{
\ql
References vector< T >::begin(), queue< T >::empty(), vector< T >::end(), std::endl(), std::fill_n(), queue< T >::front(), testing::internal::posix::n, queue< T >::pop(), queue< T >::push(), vector< T >::push_back(), and vector< T >::size().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "db/df9/classcommon_1_1_graph_representation_list_ade13d4605967d4ec20bb4d462eb6e624_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ContainsCycle\:GraphRepresentationList}
{\xe \v GraphRepresentationList\:ContainsCycle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ContainsCycle (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACJV}
{\bkmkend AAAAAAACJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJL" }{}}{\fldrslt {\cs37\ul\cf2 GraphRepresentation}}}
.}\par
{
Definition at line 186 of file graph_representation.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 187 \{\par
188     {\cf18 bool} contains_cycle = {\cf17 false};\par
189     {\cf17 const} {\cf18 int} STATUS_NEW = 0;\par
190     {\cf17 const} {\cf18 int} STATUS_STARTED = 1;\par
191     {\cf17 const} {\cf18 int} STATUS_FINISHED = 2;\par
192 \par
193     {\cf19 for} ({\cf18 unsigned} {\cf18 long} i = 0; i < {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
.size(); ++i) \{\par
194         {\cf18 int} * nodes = {\cf17 new} {\cf18 int} [{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJJ" }{}}{\fldrslt {\cs37\ul\cf2 vertices}}}
]();\par
195         assert(nodes);\par
196         fill_n(nodes, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJJ" }{}}{\fldrslt {\cs37\ul\cf2 vertices}}}
, STATUS_NEW);\par
197         std::stack<int> to_visit; {\cf20 // LIFO}\par
198 \par
199         to_visit.push(i);\par
200         {\cf19 while} (!(to_visit.empty() || contains_cycle)) \{\par
201             {\cf18 int} vertex = to_visit.top();\par
202             to_visit.pop();\par
203 \par
204             {\cf19 if} (nodes[vertex] == STATUS_STARTED) \{\par
205                 nodes[vertex] = STATUS_FINISHED;\par
206                 {\cf19 continue};\par
207             \}\par
208 \par
209             nodes[vertex] = STATUS_STARTED;\par
210 \par
211             {\cf20 // push back onto stack so we can tell when vertex is finished.}\par
212             to_visit.push(vertex);\par
213 \par
214             {\cf19 for} ({\cf18 unsigned} {\cf18 long} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARR" }{}}{\fldrslt {\cs37\ul\cf2 n}}}
 = 0; {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARR" }{}}{\fldrslt {\cs37\ul\cf2 n}}}
 < {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
[vertex].size(); ++{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARR" }{}}{\fldrslt {\cs37\ul\cf2 n}}}
) \{\par
215                 {\cf18 int} neighbor = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
[vertex].at({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARR" }{}}{\fldrslt {\cs37\ul\cf2 n}}}
);\par
216 \par
217                 {\cf19 if} (nodes[neighbor] == STATUS_NEW) \{\par
218                     to_visit.push(neighbor);\par
219                 \} {\cf19 else} {\cf19 if} (nodes[neighbor] == STATUS_STARTED) \{\par
220                     contains_cycle = {\cf17 true};\par
221                     {\cf19 break};\par
222                 \} {\cf19 else} {\cf19 if} (nodes[neighbor] == STATUS_FINISHED) \{\par
223                     {\cf20 // skip, already seen}\par
224                 \}\par
225             \}\par
226         \}\par
227 \par
228         {\cf17 delete}[] nodes;\par
229     \}\par
230 \par
231     {\cf19 return} contains_cycle;\par
232 \}\par
}
{
\ql
References stack< T >::empty(), std::fill_n(), testing::internal::posix::n, stack< T >::pop(), stack< T >::push(), and stack< T >::top().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "db/df9/classcommon_1_1_graph_representation_list_a094ec99ad1b124c0dd56e43760247b6f_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v DFS\:GraphRepresentationList}
{\xe \v GraphRepresentationList\:DFS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void DFS (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACJW}
{\bkmkend AAAAAAACJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Depth First Search. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Depth First Search is a recursive algorithm that uses the idea of backtracking. It involves searches of all the nodes by going ahead if possible, else by backtracking. refer to {\field {\*\fldinst { HYPERLINK "https://www.hackerearth.com/practice/algorithms/graphs/depth-first-search/tutorial/" }{}}{\fldrslt {\cs37\ul\cf2 https://www.hackerearth.com/practice/algorithms/graphs/depth-first-search/tutorial/}}}
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
None \par
}}}{
Reimplemented from {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJI" }{}}{\fldrslt {\cs37\ul\cf2 GraphRepresentation}}}
.}\par
{
Definition at line 131 of file graph_representation.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 132 \{\par
133     std::vector<int> components;\par
134 \par
135     {\cf17 const} {\cf18 int} NULL_PARENT = -1;\par
136     {\cf18 int} *parents = {\cf17 new} {\cf18 int} [{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJJ" }{}}{\fldrslt {\cs37\ul\cf2 vertices}}}
]();\par
137     assert(parents);\par
138     fill_n(parents, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJJ" }{}}{\fldrslt {\cs37\ul\cf2 vertices}}}
, NULL_PARENT);\par
139 \par
140     std::cout << {\cf22 "\\n----------------\\nDFS: "} << std::endl;\par
141 \par
142     {\cf19 for} ({\cf18 unsigned} {\cf18 long} i = 0; i < {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
.size(); ++i) \{\par
143         {\cf19 if} (parents[i] == NULL_PARENT) \{\par
144             components.push_back(i);\par
145         \}\par
146 \par
147         std::stack<int> to_visit; {\cf20 // LIFO}\par
148 \par
149         to_visit.push(i);\par
150 \par
151         {\cf20 // exploring all nodes}\par
152         {\cf19 while} (!to_visit.empty()) \{\par
153             {\cf18 int} vertex = to_visit.top();\par
154             to_visit.pop();\par
155 \par
156             std::cout << vertex << {\cf22 " "};\par
157 \par
158             {\cf20 // exploring as far as possible along each branch before backtracking}\par
159 {\cf20 //             std::cout << "Depth of " << vertex << ": " << adjust_list[vertex].size() << std::endl;}\par
160             {\cf19 for} ({\cf18 unsigned} {\cf18 long} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARR" }{}}{\fldrslt {\cs37\ul\cf2 n}}}
 = 0; {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARR" }{}}{\fldrslt {\cs37\ul\cf2 n}}}
 < {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
[vertex].size(); {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARR" }{}}{\fldrslt {\cs37\ul\cf2 n}}}
++) \{\par
161                 {\cf18 int} neighbor = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
[vertex].at({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARR" }{}}{\fldrslt {\cs37\ul\cf2 n}}}
);\par
162                 {\cf19 if} (parents[neighbor] == NULL_PARENT) \{\par
163                     parents[neighbor] = vertex;\par
164                     to_visit.push(neighbor);\par
165                 \}\par
166             \}\par
167         \}\par
168     \}\par
169 \par
170     std::cout << {\cf22 "\\n\\nParents: "} << std::endl;\par
171 \par
172     {\cf19 for} ({\cf18 int} i = 0; i < {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJJ" }{}}{\fldrslt {\cs37\ul\cf2 vertices}}}
; ++i) \{\par
173         std::cout << i << {\cf22 " : "} << parents[i] << std::endl;\par
174     \}\par
175 \par
176     std::cout << {\cf22 "\\n Components: "} << components.size() << std::endl;\par
177     {\cf19 for} ({\cf17 auto} it = components.begin();  it != components.end() ; ++it) \{\par
178         std::cout << *it << std::endl;\par
179     \}\par
180 \par
181     std::cout << std::endl;\par
182 \par
183     {\cf17 delete} [] parents;\par
184 \}\par
}
{
\ql
References vector< T >::begin(), stack< T >::empty(), vector< T >::end(), std::endl(), std::fill_n(), testing::internal::posix::n, stack< T >::pop(), stack< T >::push(), vector< T >::push_back(), vector< T >::size(), and stack< T >::top().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "db/df9/classcommon_1_1_graph_representation_list_a58d3be579a41554e41aa8c86cb8cf0a6_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetRepresentation\:GraphRepresentationList}
{\xe \v GraphRepresentationList\:GetRepresentation}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b unique_ptr}< {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABA" }{}}{\fldrslt {\cs37\ul\cf2 GraphRepresentation}}}
 > GetRepresentation (const {\b string}  {\i representation_type}, const {\b string}  {\i graph_type}){\f2 [static]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACJE}
{\bkmkend AAAAAAACJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 17 of file graph_representation.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 18 \{\par
19     {\cf19 if} (representation_type == {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACBZ" }{}}{\fldrslt {\cs37\ul\cf2 kRepresentationTypeList}}}
) \{\par
20         {\cf19 return} unique_ptr<GraphRepresentation>({\cf17 new} GraphRepresentationList(graph_type));\par
21     \} {\cf19 else} \{\par
22         std::cout << {\cf22 "Graph Representation type not supported."} << std::endl;\par
23         exit(EXIT_FAILURE);\par
24     \}\par
25 \}\par
}
{
\ql
References std::endl(), and std::exit().}\par
{
\ql
Referenced by GraphDirected::GraphDirected().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d4/df5/classcommon_1_1_graph_representation_ab5318abef6747ff8cc2e126abfc048be_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d4/df5/classcommon_1_1_graph_representation_ab5318abef6747ff8cc2e126abfc048be_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PrintDebug\:GraphRepresentationList}
{\xe \v GraphRepresentationList\:PrintDebug}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void PrintDebug (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACJX}
{\bkmkend AAAAAAACJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJK" }{}}{\fldrslt {\cs37\ul\cf2 GraphRepresentation}}}
.}\par
{
Definition at line 234 of file graph_representation.cc.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 235 \{\par
236     std::cout << {\cf22 "Adjacency List:"} << std::endl;\par
237     std::cout << {\cf22 "Vertices: "} << {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACJJ" }{}}{\fldrslt {\cs37\ul\cf2 vertices}}}
 << std::endl;\par
238 \par
239     {\cf19 for} ({\cf18 unsigned} {\cf18 long} i = 0;  i < {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
.size(); ++ i) \{\par
240         std::cout << i << {\cf22 ":"}  << std::endl;\par
241         {\cf19 for} ({\cf18 unsigned} {\cf18 long} j = 0; j < {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
[i].size(); ++j) \{\par
242             std::cout << {\cf22 " "} << {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKA" }{}}{\fldrslt {\cs37\ul\cf2 adjust_list}}}
[i].at(j) << std::endl;\par
243         \}\par
244         std::cout << std::endl;\par
245     \}\par
246 \}\par
}
{
\ql
References std::endl().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "db/df9/classcommon_1_1_graph_representation_list_a7c4557fcada1ff8b18f1d62cec1056a1_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v adjust_list\:GraphRepresentationList}
{\xe \v GraphRepresentationList\:adjust_list}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b vector}<{\b vector}<int> > adjust_list}}
\par
{\bkmkstart AAAAAAACKA}
{\bkmkend AAAAAAACKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 59 of file graph_representation.h.}\par
}
{\xe \v kGraphTypeDirected\:GraphRepresentationList}
{\xe \v GraphRepresentationList\:kGraphTypeDirected}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b string} kGraphTypeDirected{\f2 [static]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACJF}
{\bkmkend AAAAAAACJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 26 of file graph_representation.h.}\par
{
\ql
Referenced by GraphDirected::GraphDirected().}\par
}
{\xe \v kGraphTypeUndirected\:GraphRepresentationList}
{\xe \v GraphRepresentationList\:kGraphTypeUndirected}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b string} kGraphTypeUndirected{\f2 [static]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACJR}
{\bkmkend AAAAAAACJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 27 of file graph_representation.h.}\par
}
{\xe \v kRepresentationTypeList\:GraphRepresentationList}
{\xe \v GraphRepresentationList\:kRepresentationTypeList}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b string} kRepresentationTypeList{\f2 [static]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACBZ}
{\bkmkend AAAAAAACBZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 24 of file graph_representation.h.}\par
{
\ql
Referenced by main().}\par
}
{\xe \v kRepresentationTypeMatrix\:GraphRepresentationList}
{\xe \v GraphRepresentationList\:kRepresentationTypeMatrix}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b string} kRepresentationTypeMatrix{\f2 [static]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACJS}
{\bkmkend AAAAAAACJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 25 of file graph_representation.h.}\par
}
{\xe \v type\:GraphRepresentationList}
{\xe \v GraphRepresentationList\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b string} type{\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACJQ}
{\bkmkend AAAAAAACJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 37 of file graph_representation.h.}\par
}
{\xe \v vertices\:GraphRepresentationList}
{\xe \v GraphRepresentationList\:vertices}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int vertices{\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACJJ}
{\bkmkend AAAAAAACJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 38 of file graph_representation.h.}\par
{
\ql
Referenced by GraphDirected::GetVertexCount().}\par
}
}