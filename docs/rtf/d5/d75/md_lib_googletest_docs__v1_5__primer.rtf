{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\i Google C++ Testing Framework}  helps you write better C++ tests.\par
No matter whether you work on Linux, Windows, or a Mac, if you write C++ code, Google Test can help you.\par
So what makes a good test, and how does Google C++ Testing Framework fit in? We believe:{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be {\i independent}  and {\i repeatable} . It's a pain to debug a test that succeeds or fails as a result of other tests. Google C++ Testing Framework isolates the tests by running each of them on a different object. When a test fails, Google C++ Testing Framework allows you to run it in isolation for quick debugging.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be well {\i organized}  and reflect the structure of the tested code. Google C++ Testing Framework groups related tests into test cases that can share data and subroutines. This common pattern is easy to recognize and makes tests easy to maintain. Such consistency is especially helpful when people switch projects and start to work on a new code base.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be {\i portable}  and {\i reusable} . The open-source community has a lot of code that is platform-neutral, its tests should also be platform-neutral. Google C++ Testing Framework works on different OSes, with different compilers (gcc, MSVC, and others), with or without exceptions, so Google C++ Testing Framework tests can easily work with a variety of configurations. (Note that the current release only contains build scripts for Linux - we are actively working on scripts for other platforms.)\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When tests fail, they should provide as much {\i information}  about the problem as possible. Google C++ Testing Framework doesn't stop at the first test failure. Instead, it only stops the current test and continues with the next. You can also set up tests that report non-fatal failures after which the current test continues. Thus, you can detect and fix multiple bugs in a single run-edit-compile cycle.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The testing framework should liberate test writers from housekeeping chores and let them focus on the test {\i content} . Google C++ Testing Framework automatically keeps track of all tests defined, and doesn't require the user to enumerate them in order to run them.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be {\i fast} . With Google C++ Testing Framework, you can reuse shared resources across tests and pay for the set-up/tear-down only once, without making tests depend on each other.\par}
\par
Since Google C++ Testing Framework is based on the popular xUnit architecture, you'll feel right at home if you've used JUnit or PyUnit before. If not, it will take you about 10 minutes to learn the basics and get started. So let's go!\par
{\i Note:}  We sometimes refer to Google C++ Testing Framework informally as {\i Google Test} .\par
{\bkmkstart AAAAAAAFKI}
{\bkmkend AAAAAAAFKI}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Setting up a New Test Project
\par}
{\tc\tcl2 \v Setting up a New Test Project}
To write a test program using Google Test, you need to compile Google Test into a library and link your test with it. We provide build files for some popular build systems ({\f2 msvc/}  for Visual Studio, {\f2 xcode/}  for Mac Xcode, {\f2 make/}  for GNU make, {\f2 codegear/}  for Borland C++ Builder, and the autotools script in the Google Test root directory). If your build system is not on this list, you can take a look at {\f2 make/Makefile}  to learn how Google Test should be compiled (basically you want to compile {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKF" }{}}{\fldrslt {\cs37\ul\cf2 src/gtest-all.cc}}}}  with {\f2 GTEST_ROOT}  and {\f2 GTEST_ROOT/include}  in the header search path, where {\f2 GTEST_ROOT}  is the Google Test root directory).\par
Once you are able to compile the Google Test library, you should create a project or build target for your test program. Make sure you have {\f2 GTEST_ROOT/include}  in the header search path so that the compiler can find {\f2 <{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJL" }{}}{\fldrslt {\cs37\ul\cf2 gtest/gtest.h}}}>}  when compiling your test. Set up your test project to link with the Google Test library (for example, in Visual Studio, this is done by adding a dependency on {\f2 gtest.vcproj} ).\par
If you still have questions, take a look at how Google Test's own tests are built and use them as examples.\par}
{\bkmkstart AAAAAAAFKJ}
{\bkmkend AAAAAAAFKJ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Basic Concepts
\par}
{\tc\tcl2 \v Basic Concepts}
When using Google Test, you start by writing {\i assertions} , which are statements that check whether a condition is true. An assertion's result can be {\i success} , {\i nonfatal failure} , or {\i fatal failure} . If a fatal failure occurs, it aborts the current function; otherwise the program continues normally.\par
{\i Tests}  use assertions to verify the tested code's behavior. If a test crashes or has a failed assertion, then it {\i fails} ; otherwise it {\i succeeds} .\par
A {\i test case}  contains one or many tests. You should group your tests into test cases that reflect the structure of the tested code. When multiple tests in a test case need to share common objects and subroutines, you can put them into a {\i test fixture}  class.\par
A {\i test program}  can contain multiple test cases.\par
We'll now explain how to write a test program, starting at the individual assertion level and building up to tests and test cases.\par}
{\bkmkstart AAAAAAAFKK}
{\bkmkend AAAAAAAFKK}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Assertions
\par}
{\tc\tcl2 \v Assertions}
Google Test assertions are macros that resemble function calls. You test a class or function by making assertions about its behavior. When an assertion fails, Google Test prints the assertion's source file and line number location, along with a failure message. You may also supply a custom failure message which will be appended to Google Test's message.\par
The assertions come in pairs that test the same thing but have different effects on the current function. {\f2 ASSERT_*}  versions generate fatal failures when they fail, and {\b abort the current function} . {\f2 EXPECT_*}  versions generate nonfatal failures, which don't abort the current function. Usually {\f2 EXPECT_*}  are preferred, as they allow more than one failures to be reported in a test. However, you should use {\f2 ASSERT_*}  if it doesn't make sense to continue when the assertion in question fails.\par
Since a failed {\f2 ASSERT_*}  returns from the current function immediately, possibly skipping clean-up code that comes after it, it may cause a space leak. Depending on the nature of the leak, it may or may not be worth fixing - so keep this in mind if you get a heap checker error in addition to assertion errors.\par
To provide a custom failure message, simply stream it into the macro using the {\f2 <<}  operator, or a sequence of such operators. An example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_EQ(x.size(), y.size()) << "Vectors x and y are of unequal length";\par
\par
for (int i = 0; i < x.size(); ++i) \{\par
  EXPECT_EQ(x[i], y[i]) << "Vectors x and y differ at index " << i;\par
\}\par
}
\par
Anything that can be streamed to an {\f2 ostream}  can be streamed to an assertion macro\'96in particular, C strings and {\f2 string}  objects. If a wide string ({\f2 wchar_t*} , {\f2 TCHAR*}  in {\f2 UNICODE}  mode on Windows, or {\f2 {\b std::wstring}} ) is streamed to an assertion, it will be translated to UTF-8 when printed.\par
{\bkmkstart AAAAAAAFKL}
{\bkmkend AAAAAAAFKL}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Basic Assertions
\par}
{\tc\tcl3 \v Basic Assertions}
These assertions do basic true/false condition testing. \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}    \cell }{{\b Nonfatal assertion}    \cell }{{\b Verifies}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_TRUE(} _condition_{\f2 )} ;   \cell }{{\f2 EXPECT_TRUE(} _condition_{\f2 )} ;   \cell }{{\i condition}  is true    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_FALSE(} _condition_{\f2 )} ;   \cell }{{\f2 EXPECT_FALSE(} _condition_{\f2 )} ;   \cell }{{\i condition}  is false   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Remember, when they fail, {\f2 ASSERT_*}  yields a fatal failure and returns from the current function, while {\f2 EXPECT_*}  yields a nonfatal failure, allowing the function to continue running. In either case, an assertion failure means its containing test fails.\par
{\i Availability} : Linux, Windows, Mac.\par}
{\bkmkstart AAAAAAAFKM}
{\bkmkend AAAAAAAFKM}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Binary Comparison
\par}
{\tc\tcl3 \v Binary Comparison}
This section describes assertions that compare two values.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}    \cell }{{\b Nonfatal assertion}    \cell }{{\b Verifies}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_EQ(} _expected_{\f2 ,} _actual_{\f2 );}    \cell }{{\f2 EXPECT_EQ(} _expected_{\f2 ,} _actual_{\f2 );}    \cell }{{\i expected}  {\f2 ==}  {\i actual}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NE(} _val1_{\f2 ,} _val2_{\f2 );}    \cell }{{\f2 EXPECT_NE(} _val1_{\f2 ,} _val2_{\f2 );}    \cell }{{\i val1}  {\f2 !=}  {\i val2}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_LT(} _val1_{\f2 ,} _val2_{\f2 );}    \cell }{{\f2 EXPECT_LT(} _val1_{\f2 ,} _val2_{\f2 );}    \cell }{{\i val1}  {\f2 <}  {\i val2}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_LE(} _val1_{\f2 ,} _val2_{\f2 );}    \cell }{{\f2 EXPECT_LE(} _val1_{\f2 ,} _val2_{\f2 );}    \cell }{{\i val1}  {\f2 <=}  {\i val2}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_GT(} _val1_{\f2 ,} _val2_{\f2 );}    \cell }{{\f2 EXPECT_GT(} _val1_{\f2 ,} _val2_{\f2 );}    \cell }{{\i val1}  {\f2 >}  {\i val2}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_GE(} _val1_{\f2 ,} _val2_{\f2 );}    \cell }{{\f2 EXPECT_GE(} _val1_{\f2 ,} _val2_{\f2 );}    \cell }{{\i val1}  {\f2 >=}  {\i val2}    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
In the event of a failure, Google Test prints both {\i val1}  and {\i val2}  . In {\f2 ASSERT_EQ*}  and {\f2 EXPECT_EQ*}  (and all other equality assertions we'll introduce later), you should put the expression you want to test in the position of {\i actual} , and put its expected value in {\i expected} , as Google Test's failure messages are optimized for this convention.\par
Value arguments must be comparable by the assertion's comparison operator or you'll get a compiler error. Values must also support the {\f2 <<}  operator for streaming to an {\f2 ostream} . All built-in types support this.\par
These assertions can work with a user-defined type, but only if you define the corresponding comparison operator (e.g. {\f2 ==} , {\f2 <} , etc). If the corresponding operator is defined, prefer using the {\f2 ASSERT_*()}  macros because they will print out not only the result of the comparison, but the two operands as well.\par
Arguments are always evaluated exactly once. Therefore, it's OK for the arguments to have side effects. However, as with any ordinary C/C++ function, the arguments' evaluation order is undefined (i.e. the compiler is free to choose any order) and your code should not depend on any particular argument evaluation order.\par
{\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABJU" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_EQ()}}}}  does pointer equality on pointers. If used on two C strings, it tests if they are in the same memory location, not if they have the same value. Therefore, if you want to compare C strings (e.g. {\f2 const char*} ) by value, use {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKS" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_STREQ()}}}}  , which will be described later on. In particular, to assert that a C string is {\f2 NULL} , use {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABKS" }{}}{\fldrslt {\cs37\ul\cf2 ASSERT_STREQ(NULL, c_string)}}}}  . However, to compare two {\f2 string}  objects, you should use {\f2 ASSERT_EQ} .\par
Macros in this section work with both narrow and wide string objects ({\f2 string}  and {\f2 wstring} ).\par
{\i Availability} : Linux, Windows, Mac.\par}
{\bkmkstart AAAAAAAFKN}
{\bkmkend AAAAAAAFKN}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
String Comparison
\par}
{\tc\tcl3 \v String Comparison}
The assertions in this group compare two {\b C strings} . If you want to compare two {\f2 string}  objects, use {\f2 EXPECT_EQ} , {\f2 EXPECT_NE} , and etc instead.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}    \cell }{{\b Nonfatal assertion}    \cell }{{\b Verifies}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STREQ(} _expected_str_{\f2 ,} _actual_str_{\f2 );}    \cell }{{\f2 EXPECT_STREQ(} _expected_str_{\f2 ,} _actual_str_{\f2 );}    \cell }{the two C strings have the same content    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STRNE(} _str1_{\f2 ,} _str2_{\f2 );}    \cell }{{\f2 EXPECT_STRNE(} _str1_{\f2 ,} _str2_{\f2 );}    \cell }{the two C strings have different content    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STRCASEEQ(} _expected_str_{\f2 ,} _actual_str_{\f2 );}    \cell }{{\f2 EXPECT_STRCASEEQ(} _expected_str_{\f2 ,} _actual_str_{\f2 );}    \cell }{the two C strings have the same content, ignoring case    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STRCASENE(} _str1_{\f2 ,} _str2_{\f2 );}    \cell }{{\f2 EXPECT_STRCASENE(} _str1_{\f2 ,} _str2_{\f2 );}    \cell }{the two C strings have different content, ignoring case   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Note that "CASE" in an assertion name means that case is ignored.\par
{\f2 *STREQ*}  and {\f2 *STRNE*}  also accept wide C strings ({\f2 wchar_t*} ). If a comparison of two wide strings fails, their values will be printed as UTF-8 narrow strings.\par
A {\f2 NULL}  pointer and an empty string are considered {\i different} .\par
{\i Availability} : Linux, Windows, Mac.\par
See also: For more string comparison tricks (substring, prefix, suffix, and regular expression matching, for example), see the [AdvancedGuide Advanced Google Test Guide].\par}
\par}
{\bkmkstart AAAAAAAFKO}
{\bkmkend AAAAAAAFKO}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Simple Tests
\par}
{\tc\tcl2 \v Simple Tests}
To create a test:{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Use the {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMB" }{}}{\fldrslt {\cs37\ul\cf2 TEST()}}}}  macro to define and name a test function, These are ordinary C++ functions that don't return a value.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In this function, along with any valid C++ statements you want to include, use the various Google Test assertions to check values.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The test's result is determined by the assertions; if any assertion in the test fails (either fatally or non-fatally), or if the test crashes, the entire test fails. Otherwise, it succeeds.\par}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(test_case_name, test_name) \{\par
 ... test body ...\par
\}\par
}
\par
{\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMB" }{}}{\fldrslt {\cs37\ul\cf2 TEST()}}}}  arguments go from general to specific. The {\i first}  argument is the name of the test case, and the {\i second}  argument is the test's name within the test case. Remember that a test case can contain any number of individual tests. A test's {\i full name}  consists of its containing test case and its individual name. Tests from different test cases can have the same individual name.\par
For example, let's take a simple integer function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int Factorial(int n); // Returns the factorial of n\par
}
\par
A test case for this function might look like: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Tests factorial of 0.\par
TEST(FactorialTest, HandlesZeroInput) \{\par
  EXPECT_EQ(1, Factorial(0));\par
\}\par
\par
// Tests factorial of positive numbers.\par
TEST(FactorialTest, HandlesPositiveInput) \{\par
  EXPECT_EQ(1, Factorial(1));\par
  EXPECT_EQ(2, Factorial(2));\par
  EXPECT_EQ(6, Factorial(3));\par
  EXPECT_EQ(40320, Factorial(8));\par
\}\par
}
\par
Google Test groups the test results by test cases, so logically-related tests should be in the same test case; in other words, the first argument to their {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMB" }{}}{\fldrslt {\cs37\ul\cf2 TEST()}}}}  should be the same. In the above example, we have two tests, {\f2 HandlesZeroInput}  and {\f2 HandlesPositiveInput} , that belong to the same test case {\f2 FactorialTest} .\par
{\i Availability} : Linux, Windows, Mac.\par}
{\bkmkstart AAAAAAAFKP}
{\bkmkend AAAAAAAFKP}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Test Fixtures: Using the Same Data Configuration for Multiple Tests
\par}
{\tc\tcl2 \v Test Fixtures: Using the Same Data Configuration for Multiple Tests}
If you find yourself writing two or more tests that operate on similar data, you can use a {\i test fixture} . It allows you to reuse the same configuration of objects for several different tests.\par
To create a fixture, just:{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Derive a class from {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABOI" }{}}{\fldrslt {\cs37\ul\cf2 testing::Test}}}}  . Start its body with {\f2 protected:}  or {\f2 public:}  as we'll want to access fixture members from sub-classes.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Inside the class, declare any objects you plan to use.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If necessary, write a default constructor or {\f2 SetUp()}  function to prepare the objects for each test. A common mistake is to spell {\f2 SetUp()}  as {\f2 Setup()}  with a small {\f2 u}  - don't let that happen to you.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If necessary, write a destructor or {\f2 TearDown()}  function to release any resources you allocated in {\f2 SetUp()}  . To learn when you should use the constructor/destructor and when you should use {\f2 SetUp()/TearDown()} , read this {\field {\*\fldinst { HYPERLINK "V1_5_FAQ.md#should-i-use-the-constructordestructor-of-the-test-fixture-or-the-set-uptear-down-function" }{}}{\fldrslt {\cs37\ul\cf2 FAQ entry}}}.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If needed, define subroutines for your tests to share.\par}
\par
When using a fixture, use {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMD" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F()}}}}  instead of {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMB" }{}}{\fldrslt {\cs37\ul\cf2 TEST()}}}}  as it allows you to access objects and subroutines in the test fixture: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(test_case_name, test_name) \{\par
 ... test body ...\par
\}\par
}
\par
Like {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMB" }{}}{\fldrslt {\cs37\ul\cf2 TEST()}}}} , the first argument is the test case name, but for {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMD" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F()}}}}  this must be the name of the test fixture class. You've probably guessed: {\f2 _F}  is for fixture.\par
Unfortunately, the C++ macro system does not allow us to create a single macro that can handle both types of tests. Using the wrong macro causes a compiler error.\par
Also, you must first define a test fixture class before using it in a {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMD" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F()}}}} , or you'll get the compiler error "`virtual outside class
declaration`".\par
For each test defined with {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMD" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F()}}}} , Google Test will:{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a {\i fresh}  test fixture at runtime\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Immediately initialize it via {\f2 SetUp()}  ,\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Run the test\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Clean up by calling {\f2 TearDown()} \par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Delete the test fixture. Note that different tests in the same test case have different test fixture objects, and Google Test always deletes a test fixture before it creates the next one. Google Test does not reuse the same test fixture for multiple tests. Any changes one test makes to the fixture do not affect other tests.\par}
\par
As an example, let's write tests for a FIFO queue class named {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACCV" }{}}{\fldrslt {\cs37\ul\cf2 Queue}}}} , which has the following interface: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename E> // E is the element type.\par
class Queue \{\par
 public:\par
  Queue();\par
  void Enqueue(const E& element);\par
  E* Dequeue(); // Returns NULL if the queue is empty.\par
  size_t size() const;\par
  ...\par
\};\par
}
\par
First, define a fixture class. By convention, you should give it the name {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADJM" }{}}{\fldrslt {\cs37\ul\cf2 FooTest}}}}  where {\f2 Foo}  is the class being tested. {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class QueueTest : public ::testing::Test \{\par
 protected:\par
  virtual void SetUp() \{\par
    q1_.Enqueue(1);\par
    q2_.Enqueue(2);\par
    q2_.Enqueue(3);\par
  \}\par
\par
  // virtual void TearDown() \{\}\par
\par
  Queue<int> q0_;\par
  Queue<int> q1_;\par
  Queue<int> q2_;\par
\};\par
}
\par
In this case, {\f2 TearDown()}  is not needed since we don't have to clean up after each test, other than what's already done by the destructor.\par
Now we'll write tests using {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMD" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F()}}}}  and this fixture. {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(QueueTest, IsEmptyInitially) \{\par
  EXPECT_EQ(0, q0_.size());\par
\}\par
\par
TEST_F(QueueTest, DequeueWorks) \{\par
  int* n = q0_.Dequeue();\par
  EXPECT_EQ(NULL, n);\par
\par
  n = q1_.Dequeue();\par
  ASSERT_TRUE(n != NULL);\par
  EXPECT_EQ(1, *n);\par
  EXPECT_EQ(0, q1_.size());\par
  delete n;\par
\par
  n = q2_.Dequeue();\par
  ASSERT_TRUE(n != NULL);\par
  EXPECT_EQ(2, *n);\par
  EXPECT_EQ(1, q2_.size());\par
  delete n;\par
\}\par
}
\par
The above uses both {\f2 ASSERT_*}  and {\f2 EXPECT_*}  assertions. The rule of thumb is to use {\f2 EXPECT_*}  when you want the test to continue to reveal more errors after the assertion failure, and use {\f2 ASSERT_*}  when continuing after failure doesn't make sense. For example, the second assertion in the {\f2 Dequeue}  test is {\f2 ASSERT_TRUE(n != NULL)} , as we need to dereference the pointer {\f2 n}  later, which would lead to a segfault when {\f2 n}  is {\f2 NULL} .\par
When these tests run, the following happens:{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Google Test constructs a {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACCY" }{}}{\fldrslt {\cs37\ul\cf2 QueueTest}}}}  object (let's call it {\f2 t1}  ).\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 t1.SetUp()}  initializes {\f2 t1}  .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The first test ( {\f2 IsEmptyInitially}  ) runs on {\f2 t1}  .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 t1.TearDown()}  cleans up after the test finishes.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 t1}  is destructed.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The above steps are repeated on another {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACCY" }{}}{\fldrslt {\cs37\ul\cf2 QueueTest}}}}  object, this time running the {\f2 DequeueWorks}  test.\par}
\par
{\i Availability} : Linux, Windows, Mac.\par
{\i Note} : Google Test automatically saves all {\i Google Test}  flags when a test object is constructed, and restores them when it is destructed.\par}
{\bkmkstart AAAAAAAFKQ}
{\bkmkend AAAAAAAFKQ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Invoking the Tests
\par}
{\tc\tcl2 \v Invoking the Tests}
{\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMB" }{}}{\fldrslt {\cs37\ul\cf2 TEST()}}}}  and {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMD" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F()}}}}  implicitly register their tests with Google Test. So, unlike with many other C++ testing frameworks, you don't have to re-list all your defined tests in order to run them.\par
After defining your tests, you can run them with {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNW" }{}}{\fldrslt {\cs37\ul\cf2 RUN_ALL_TESTS()}}}}  , which returns {\f2 0}  if all the tests are successful, or {\f2 1}  otherwise. Note that {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNW" }{}}{\fldrslt {\cs37\ul\cf2 RUN_ALL_TESTS()}}}}  runs {\i all tests}  in your link unit \'96 they can be from different test cases, or even different source files.\par
When invoked, the {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNW" }{}}{\fldrslt {\cs37\ul\cf2 RUN_ALL_TESTS()}}}}  macro:{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Saves the state of all Google Test flags.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Creates a test fixture object for the first test.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Initializes it via {\f2 SetUp()} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Runs the test on the fixture object.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Cleans up the fixture via {\f2 TearDown()} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Deletes the fixture.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Restores the state of all Google Test flags.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeats the above steps for the next test, until all tests have run.\par}
\par
In addition, if the text fixture's constructor generates a fatal failure in step 2, there is no point for step 3 - 5 and they are thus skipped. Similarly, if step 3 generates a fatal failure, step 4 will be skipped.\par
{\i Important} : You must not ignore the return value of {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNW" }{}}{\fldrslt {\cs37\ul\cf2 RUN_ALL_TESTS()}}}} , or {\f2 gcc}  will give you a compiler error. The rationale for this design is that the automated testing service determines whether a test has passed based on its exit code, not on its stdout/stderr output; thus your {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAK" }{}}{\fldrslt {\cs37\ul\cf2 main()}}}}  function must return the value of {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNW" }{}}{\fldrslt {\cs37\ul\cf2 RUN_ALL_TESTS()}}}} .\par
Also, you should call {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNW" }{}}{\fldrslt {\cs37\ul\cf2 RUN_ALL_TESTS()}}}}  only {\b once} . Calling it more than once conflicts with some advanced Google Test features (e.g. thread-safe death tests) and thus is not supported.\par
{\i Availability} : Linux, Windows, Mac.\par}
{\bkmkstart AAAAAAAFKR}
{\bkmkend AAAAAAAFKR}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Writing the main() Function
\par}
{\tc\tcl2 \v Writing the main() Function}
You can start from this boilerplate: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "this/package/foo.h"\par
#include <gtest/gtest.h>\par
\par
namespace \{\par
\par
// The fixture for testing class Foo.\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  // You can remove any or all of the following functions if its body\par
  // is empty.\par
\par
  FooTest() \{\par
    // You can do set-up work for each test here.\par
  \}\par
\par
  virtual ~FooTest() \{\par
    // You can do clean-up work that doesn't throw exceptions here.\par
  \}\par
\par
  // If the constructor and destructor are not enough for setting up\par
  // and cleaning up each test, you can define the following methods:\par
\par
  virtual void SetUp() \{\par
    // Code here will be called immediately after the constructor (right\par
    // before each test).\par
  \}\par
\par
  virtual void TearDown() \{\par
    // Code here will be called immediately after each test (right\par
    // before the destructor).\par
  \}\par
\par
  // Objects declared here can be used by all tests in the test case for Foo.\par
\};\par
\par
// Tests that the Foo::Bar() method does Abc.\par
TEST_F(FooTest, MethodBarDoesAbc) \{\par
  const string input_filepath = "this/package/testdata/myinputfile.dat";\par
  const string output_filepath = "this/package/testdata/myoutputfile.dat";\par
  Foo f;\par
  EXPECT_EQ(0, f.Bar(input_filepath, output_filepath));\par
\}\par
\par
// Tests that Foo does Xyz.\par
TEST_F(FooTest, DoesXyz) \{\par
  // Exercises the Xyz feature of Foo.\par
\}\par
\par
\}  // namespace\par
\par
int main(int argc, char **argv) \{\par
  ::testing::InitGoogleTest(&argc, argv);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
The {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 testing::InitGoogleTest()}}}}  function parses the command line for Google Test flags, and removes all recognized flags. This allows the user to control a test program's behavior via various flags, which we'll cover in {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFIQ" }{}}{\fldrslt {\cs37\ul\cf2 AdvancedGuide}}}. You must call this function before calling {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNW" }{}}{\fldrslt {\cs37\ul\cf2 RUN_ALL_TESTS()}}}} , or the flags won't be properly initialized.\par
On Windows, {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 InitGoogleTest()}}}}  also works with wide strings, so it can be used in programs compiled in {\f2 UNICODE}  mode as well.\par
But maybe you think that writing all those {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAK" }{}}{\fldrslt {\cs37\ul\cf2 main()}}} functions is too much work? We agree with you completely and that's why Google Test provides a basic implementation of {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAK" }{}}{\fldrslt {\cs37\ul\cf2 main()}}}. If it fits your needs, then just link your test with gtest_main library and you are good to go.\par
{\bkmkstart AAAAAAAFKS}
{\bkmkend AAAAAAAFKS}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Important note for Visual C++ users
\par}
{\tc\tcl3 \v Important note for Visual C++ users}
If you put your tests into a library and your {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAK" }{}}{\fldrslt {\cs37\ul\cf2 main()}}}}  function is in a different library or in your .exe file, those tests will not run. The reason is a {\field {\*\fldinst { HYPERLINK "https://connect.microsoft.com/feedback/viewfeedback.aspx?FeedbackID=244410&siteid=210" }{}}{\fldrslt {\cs37\ul\cf2 bug}}} in Visual C++. When you define your tests, Google Test creates certain static objects to register them. These objects are not referenced from elsewhere but their constructors are still supposed to run. When Visual C++ linker sees that nothing in the library is referenced from other places it throws the library out. You have to reference your library with tests from your main program to keep the linker from discarding it. Here is how to do it. Somewhere in your library code declare a function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid __declspec(dllexport) int PullInMyLibrary() \{ return 0; \}\par
}
 If you put your tests in a static library (not DLL) then {\f2 __declspec(dllexport)}  is not required. Now, in your main program, write a code that invokes that function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int PullInMyLibrary();\par
static int dummy = PullInMyLibrary();\par
}
 This will keep your tests referenced and will make them register themselves at startup.\par
In addition, if you define your tests in a static library, add {\f2 /OPT:NOREF}  to your main program linker options. If you use MSVC++ IDE, go to your .exe project properties/Configuration Properties/Linker/Optimization and set References setting to {\f2 Keep Unreferenced Data (/OPT:NOREF)} . This will keep Visual C++ linker from discarding individual symbols generated by your tests from the final executable.\par
There is one more pitfall, though. If you use Google Test as a static library (that's how it is defined in gtest.vcproj) your tests must also reside in a static library. If you have to have them in a DLL, you {\i must}  change Google Test to build into a DLL as well. Otherwise your tests will not run correctly or will not run at all. The general conclusion here is: make your life easier - do not write your tests in libraries!\par}
\par}
{\bkmkstart AAAAAAAFKT}
{\bkmkend AAAAAAAFKT}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Where to Go from Here
\par}
{\tc\tcl2 \v Where to Go from Here}
Congratulations! You've learned the Google Test basics. You can Start writing and running Google Test tests, read some {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFDH" }{}}{\fldrslt {\cs37\ul\cf2 samples}}}, or continue with {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFIQ" }{}}{\fldrslt {\cs37\ul\cf2 AdvancedGuide}}}, which describes many more useful Google Test features.\par}
{\bkmkstart AAAAAAAFKU}
{\bkmkend AAAAAAAFKU}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Known Limitations
\par}
{\tc\tcl2 \v Known Limitations}
Google Test is designed to be thread-safe. The implementation is thread-safe on systems where the {\f2 pthreads}  library is available. It is currently {\i unsafe}  to use Google Test assertions from two threads concurrently on other systems (e.g. Windows). In most tests this is not an issue as usually the assertions are done in the main thread. If you want to help, you can volunteer to implement the necessary synchronization primitives in {\f2 gtest-port.h}  for your platform. \par}
}}
}