{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Now that you have read {\b Primer} and learned how to write tests using Google Test, it's time to learn some new tricks. This document will show you more assertions as well as how to construct complex failure messages, propagate fatal failures, reuse and speed up your test fixtures, and use various flags with your tests.\par
{\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid {\tc\tcl1 More Assertions} \par}
This section covers some less frequently used, but still significant, assertions.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Explicit Success and Failure} \par}
These three assertions do not actually test a value or expression. Instead, they generate a success or failure directly. Like the macros that actually perform a test, you may stream a custom failure message into the them.\par
| {\f2 {\b SUCCEED()};}  | |:----------\'97|\par
Generates a success. This does NOT make the overall test succeed. A test is considered successful only if none of its assertions fail during its execution.\par
Note: {\f2 {\b SUCCEED()}}  is purely documentary and currently doesn't generate any user-visible output. However, we may add {\f2 {\b SUCCEED()}}  messages to Google Test's output in the future.\par
| {\f2 {\b FAIL()};}  | {\f2 {\b ADD_FAILURE()};}  | |:--------\'97|:--------------\'97|\par
{\f2 FAIL*}  generates a fatal failure while {\f2 ADD_FAILURE*}  generates a nonfatal failure. These are useful when control flow, rather than a Boolean expression, deteremines the test's success or failure. For example, you might want to write something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid switch(expression) \{\par
  case 1: ... some checks ...\par
  case 2: ... some other checks\par
  ...\par
  default: FAIL() << "We shouldn't get here.";\par
\}\par
}
\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Exception Assertions} \par}
These are for verifying that a piece of code throws (or does not throw) an exception of the given type:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}    \cell }{{\b Nonfatal assertion}    \cell }{{\b Verifies}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_THROW(} _statement_, {\i exception_type} {\f2 );}    \cell }{{\f2 EXPECT_THROW(} _statement_, {\i exception_type} {\f2 );}    \cell }{{\i statement}  throws an exception of the given type    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_ANY_THROW(} _statement_{\f2 );}    \cell }{{\f2 EXPECT_ANY_THROW(} _statement_{\f2 );}    \cell }{{\i statement}  throws an exception of any type    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NO_THROW(} _statement_{\f2 );}    \cell }{{\f2 EXPECT_NO_THROW(} _statement_{\f2 );}    \cell }{{\i statement}  doesn't throw any exception   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Examples:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_THROW(Foo(5), bar_exception);\par
\par
EXPECT_NO_THROW(\{\par
  int n = 5;\par
  Bar(&n);\par
\});\par
}
\par
{\i Availability} : Linux, Windows, Mac; since version 1.1.0.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Predicate Assertions for Better Error Messages} \par}
Even though Google Test has a rich set of assertions, they can never be complete, as it's impossible (nor a good idea) to anticipate all the scenarios a user might run into. Therefore, sometimes a user has to use {\f2 {\b EXPECT_TRUE()}}  to check a complex expression, for lack of a better macro. This has the problem of not showing you the values of the parts of the expression, making it hard to understand what went wrong. As a workaround, some users choose to construct the failure message by themselves, streaming it into {\f2 {\b EXPECT_TRUE()}} . However, this is awkward especially when the expression has side-effects or is expensive to evaluate.\par
Google Test gives you three different options to solve this problem:\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using an Existing Boolean Function} \par}
If you already have a function or a functor that returns {\f2 bool}  (or a type that can be implicitly converted to {\f2 bool} ), you can use it in a {\i predicate assertion}  to get the function arguments printed for free:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}    \cell }{{\b Nonfatal assertion}    \cell }{{\b Verifies}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_PRED1(} _pred1, val1_{\f2 );}    \cell }{{\f2 EXPECT_PRED1(} _pred1, val1_{\f2 );}    \cell }{{\i pred1(val1)}  returns true    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_PRED2(} _pred2, val1, val2_{\f2 );}    \cell }{{\f2 EXPECT_PRED2(} _pred2, val1, val2_{\f2 );}    \cell }{{\i pred2(val1, val2)}  returns true    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{...   \cell }{...   \cell }{...   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
In the above, {\i predn}  is an {\i n} -ary predicate function or functor, where {\i val1} , {\i val2} , ..., and {\i valn}  are its arguments. The assertion succeeds if the predicate returns {\f2 true}  when applied to the given arguments, and fails otherwise. When the assertion fails, it prints the value of each argument. In either case, the arguments are evaluated exactly once.\par
Here's an example. Given\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Returns true iff m and n have no common divisors except 1.\par
bool MutuallyPrime(int m, int n) \{ ... \}\par
const int a = 3;\par
const int b = 4;\par
const int c = 10;\par
}
\par
the assertion {\f2 {\b EXPECT_PRED2(MutuallyPrime, a, b)};}  will succeed, while the assertion {\f2 {\b EXPECT_PRED2(MutuallyPrime, b, c)};}  will fail with the message\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
!MutuallyPrime(b, c) is false, where\par

b is 4\par

c is 10\par

\par}
{\b Notes:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If you see a compiler error "no matching function to call" when using {\f2 ASSERT_PRED*}  or {\f2 EXPECT_PRED*} , please see {\f2 this} for how to resolve it.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Currently we only provide predicate assertions of arity <= 5. If you need a higher-arity assertion, let us know.\par}
\par
{\i Availability} : Linux, Windows, Mac\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using a Function That Returns an AssertionResult} \par}
While {\f2 EXPECT_PRED*()}  and friends are handy for a quick job, the syntax is not satisfactory: you have to use different macros for different arities, and it feels more like Lisp than C++. The {\f2 {\b testing::AssertionResult}}  class solves this problem.\par
An {\f2 AssertionResult}  object represents the result of an assertion (whether it's a success or a failure, and an associated message). You can create an {\f2 AssertionResult}  using one of these factory functions:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace testing \{\par
\par
// Returns an AssertionResult object to indicate that an assertion has\par
// succeeded.\par
AssertionResult AssertionSuccess();\par
\par
// Returns an AssertionResult object to indicate that an assertion has\par
// failed.\par
AssertionResult AssertionFailure();\par
\par
\}\par
}
\par
You can then use the {\f2 <<}  operator to stream messages to the {\f2 AssertionResult}  object.\par
To provide more readable messages in Boolean assertions (e.g. {\f2 {\b EXPECT_TRUE()}} ), write a predicate function that returns {\f2 AssertionResult}  instead of {\f2 bool} . For example, if you define {\f2 {\b IsEven()}}  as:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::AssertionResult IsEven(int n) \{\par
  if ((n % 2) == 0)\par
    return ::testing::AssertionSuccess();\par
  else\par
    return ::testing::AssertionFailure() << n << " is odd";\par
\}\par
}
\par
instead of:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid bool IsEven(int n) \{\par
  return (n % 2) == 0;\par
\}\par
}
\par
the failed assertion {\f2 EXPECT_TRUE(IsEven(Fib(4)))}  will print:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
Value of: !IsEven(Fib(4))\par

Actual: false (*3 is odd*)\par

Expected: true\par

\par}
instead of a more opaque\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
Value of: !IsEven(Fib(4))\par

Actual: false\par

Expected: true\par

\par}
If you want informative messages in {\f2 EXPECT_FALSE}  and {\f2 ASSERT_FALSE}  as well, and are fine with making the predicate slower in the success case, you can supply a success message:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::AssertionResult IsEven(int n) \{\par
  if ((n % 2) == 0)\par
    return ::testing::AssertionSuccess() << n << " is even";\par
  else\par
    return ::testing::AssertionFailure() << n << " is odd";\par
\}\par
}
\par
Then the statement {\f2 EXPECT_FALSE(IsEven(Fib(6)))}  will print\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
Value of: !IsEven(Fib(6))\par

Actual: true (8 is even)\par

Expected: false\par

\par}
{\i Availability} : Linux, Windows, Mac; since version 1.4.1.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using a Predicate-Formatter} \par}
If you find the default message generated by {\f2 (ASSERT|EXPECT)_PRED*}  and {\f2 (ASSERT|EXPECT)_(TRUE|FALSE)}  unsatisfactory, or some arguments to your predicate do not support streaming to {\f2 ostream} , you can instead use the following {\i predicate-formatter assertions}  to {\i fully}  customize how the message is formatted:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}    \cell }{{\b Nonfatal assertion}    \cell }{{\b Verifies}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_PRED_FORMAT1(} _pred_format1, val1_{\f2 );}    \cell }{{\f2 EXPECT_PRED_FORMAT1(} _pred_format1, val1_{\f2 ); \\ilinebr </td> <td class="markdownTableBodyLeft"> _pred\\_format1(val1)_ is successful \\ilinebr </td> </tr> <tr class="markdownTableRowEven"> <td class="markdownTableBodyLeft">} ASSERT_PRED_FORMAT2({\f2 _pred\\_format2, val1, val2_} );{\f2 \\ilinebr </td> <td class="markdownTableBodyLeft">} EXPECT_PRED_FORMAT2({\f2 _pred\\_format2, val1, val2_} );{\f2 \\ilinebr </td> <td class="markdownTableBodyLeft"> _pred\\_format2(val1, val2)_ is successful \\ilinebr </td> </tr> <tr class="markdownTableRowOdd"> <td class="markdownTableBodyLeft">} ...{\f2 \\ilinebr </td> <td class="markdownTableBodyLeft">} ...{\f2 \\ilinebr </td> <td class="markdownTableBodyLeft">} ...`   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The difference between this and the previous two groups of macros is that instead of a predicate, {\f2 (ASSERT|EXPECT)_PRED_FORMAT*}  take a {\i predicate-formatter}  ({\i pred_formatn} ), which is a function or functor with the signature:\par
{\f2 {\b testing::AssertionResult} PredicateFormattern(const char*} _expr1_{\f2 , const char*} _expr2_{\f2 , ... const char*} _exprn_{\f2 , T1} _val1_{\f2 , T2} _val2_{\f2 , ... Tn} _valn_{\f2 );} \par
where {\i val1} , {\i val2} , ..., and {\i valn}  are the values of the predicate arguments, and {\i expr1} , {\i expr2} , ..., and {\i exprn}  are the corresponding expressions as they appear in the source code. The types {\f2 T1} , {\f2 T2} , ..., and {\f2 Tn}  can be either value types or reference types. For example, if an argument has type {\f2 Foo} , you can declare it as either {\f2 Foo}  or {\f2 const Foo&} , whichever is appropriate.\par
A predicate-formatter returns a {\f2 {\b testing::AssertionResult}}  object to indicate whether the assertion has succeeded or not. The only way to create such an object is to call one of these factory functions:\par
As an example, let's improve the failure message in the previous example, which uses {\f2 {\b EXPECT_PRED2()}} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Returns the smallest prime common divisor of m and n,\par
// or 1 when m and n are mutually prime.\par
int SmallestPrimeCommonDivisor(int m, int n) \{ ... \}\par
\par
// A predicate-formatter for asserting that two integers are mutually prime.\par
::testing::AssertionResult AssertMutuallyPrime(const char* m_expr,\par
                                               const char* n_expr,\par
                                               int m,\par
                                               int n) \{\par
  if (MutuallyPrime(m, n))\par
    return ::testing::AssertionSuccess();\par
\par
  return ::testing::AssertionFailure()\par
      << m_expr << " and " << n_expr << " (" << m << " and " << n\par
      << ") are not mutually prime, " << "as they have a common divisor "\par
      << SmallestPrimeCommonDivisor(m, n);\par
\}\par
}
\par
With this predicate-formatter, we can use\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED_FORMAT2(AssertMutuallyPrime, b, c);\par
}
\par
to generate the message\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
b and c (4 and 10) are not mutually prime, as they have a common divisor 2.\par

\par}
As you may have realized, many of the assertions we introduced earlier are special cases of {\f2 (EXPECT|ASSERT)_PRED_FORMAT*} . In fact, most of them are indeed defined using {\f2 (EXPECT|ASSERT)_PRED_FORMAT*} .\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Floating-Point Comparison} \par}
Comparing floating-point numbers is tricky. Due to round-off errors, it is very unlikely that two floating-points will match exactly. Therefore, {\f2 ASSERT_EQ}  's naive comparison usually doesn't work. And since floating-points can have a wide value range, no single fixed error bound works. It's better to compare by a fixed relative error bound, except for values close to 0 due to the loss of precision there.\par
In general, for floating-point comparison to make sense, the user needs to carefully choose the error bound. If they don't want or care to, comparing in terms of Units in the Last Place (ULPs) is a good default, and Google Test provides assertions to do this. Full details about ULPs are quite long; if you want to learn more, see {\f2 this article on float comparison}.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Floating-Point Macros} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}    \cell }{{\b Nonfatal assertion}    \cell }{{\b Verifies}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_FLOAT_EQ(} _expected, actual_{\f2 );}    \cell }{{\f2 EXPECT_FLOAT_EQ(} _expected, actual_{\f2 );}    \cell }{the two {\f2 float}  values are almost equal    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_DOUBLE_EQ(} _expected, actual_{\f2 );}    \cell }{{\f2 EXPECT_DOUBLE_EQ(} _expected, actual_{\f2 );}    \cell }{the two {\f2 double}  values are almost equal   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
By "almost equal", we mean the two values are within 4 ULP's from each other.\par
The following assertions allow you to choose the acceptable error bound:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}    \cell }{{\b Nonfatal assertion}    \cell }{{\b Verifies}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NEAR(} _val1, val2, abs_error_{\f2 );}    \cell }{{\f2 EXPECT_NEAR} _(val1, val2, abs_error_<tt>);   \cell }{the difference between {\i val1}  and {\i val2}  doesn't exceed the given absolute error   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Floating-Point Predicate-Format Functions} \par}
Some floating-point operations are useful, but not that often used. In order to avoid an explosion of new macros, we provide them as predicate-format functions that can be used in predicate assertion macros (e.g. {\f2 EXPECT_PRED_FORMAT2} , etc).\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED_FORMAT2(::testing::FloatLE, val1, val2);\par
EXPECT_PRED_FORMAT2(::testing::DoubleLE, val1, val2);\par
}
\par
Verifies that {\i val1}  is less than, or almost equal to, {\i val2} . You can replace {\f2 EXPECT_PRED_FORMAT2}  in the above table with {\f2 ASSERT_PRED_FORMAT2} .\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Windows HRESULT assertions} \par}
These assertions test for {\f2 HRESULT}  success or failure.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}    \cell }{{\b Nonfatal assertion}    \cell }{{\b Verifies}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_HRESULT_SUCCEEDED(} _expression_{\f2 );}    \cell }{{\f2 EXPECT_HRESULT_SUCCEEDED(} _expression_{\f2 );}    \cell }{{\i expression}  is a success {\f2 HRESULT}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_HRESULT_FAILED(} _expression_{\f2 );}    \cell }{{\f2 EXPECT_HRESULT_FAILED(} _expression_{\f2 );}    \cell }{{\i expression}  is a failure {\f2 HRESULT}    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The generated output contains the human-readable error message associated with the {\f2 HRESULT}  code returned by {\i expression} .\par
You might use them like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CComPtr shell;\par
ASSERT_HRESULT_SUCCEEDED(shell.CoCreateInstance(L"Shell.Application"));\par
CComVariant empty;\par
ASSERT_HRESULT_SUCCEEDED(shell->ShellExecute(CComBSTR(url), empty, empty, empty, empty));\par
}
\par
{\i Availability} : Windows.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Type Assertions} \par}
You can call the function {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::StaticAssertTypeEq<T1, T2>();\par
}
 to assert that types {\f2 T1}  and {\f2 T2}  are the same. The function does nothing if the assertion is satisfied. If the types are different, the function call will fail to compile, and the compiler error message will likely (depending on the compiler) show you the actual values of {\f2 T1}  and {\f2 T2} . This is mainly useful inside template code.\par
{\i Caveat:}  When used inside a member function of a class template or a function template, {\f2 StaticAssertTypeEq<T1, T2>()}  is effective {\i only if}  the function is instantiated. For example, given: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T> class Foo \{\par
 public:\par
  void Bar() \{ ::testing::StaticAssertTypeEq<int, T>(); \}\par
\};\par
}
 the code: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Test1() \{ Foo<bool> foo; \}\par
}
 will {\i not}  generate a compiler error, as {\f2 Foo<bool>::Bar()}  is never actually instantiated. Instead, you need: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Test2() \{ Foo<bool> foo; foo.Bar(); \}\par
}
 to cause a compiler error.\par
{\i Availability:}  Linux, Windows, Mac; since version 1.3.0.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Assertion Placement} \par}
You can use assertions in any C++ function. In particular, it doesn't have to be a method of the test fixture class. The one constraint is that assertions that generate a fatal failure ({\f2 FAIL*}  and {\f2 ASSERT_*} ) can only be used in void-returning functions. This is a consequence of Google Test not using exceptions. By placing it in a non-void function you'll get a confusing compile error like {\f2 "error: void value not ignored as it ought to be"} .\par
If you need to use assertions in a function that returns non-void, one option is to make the function return the value in an out parameter instead. For example, you can rewrite {\f2 T2 Foo(T1 x)}  to {\f2 void Foo(T1 x, T2* result)} . You need to make sure that {\f2 *result}  contains some sensible value even when the function returns prematurely. As the function now returns {\f2 void} , you can use any assertion inside of it.\par
If changing the function's type is not an option, you should just use assertions that generate non-fatal failures, such as {\f2 ADD_FAILURE*}  and {\f2 EXPECT_*} .\par
{\i Note} : Constructors and destructors are not considered void-returning functions, according to the C++ language specification, and so you may not use fatal assertions in them. You'll get a compilation error if you try. A simple workaround is to transfer the entire body of the constructor or destructor to a private void-returning method. However, you should be aware that a fatal assertion failure in a constructor does not terminate the current test, as your intuition might suggest; it merely returns from the constructor early, possibly leaving your object in a partially-constructed state. Likewise, a fatal assertion failure in a destructor may leave your object in a partially-destructed state. Use assertions carefully in these situations!\par
{\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid {\tc\tcl1 Death Tests} \par}
In many applications, there are assertions that can cause application failure if a condition is not met. These sanity checks, which ensure that the program is in a known good state, are there to fail at the earliest possible time after some program state is corrupted. If the assertion checks the wrong condition, then the program may proceed in an erroneous state, which could lead to memory corruption, security holes, or worse. Hence it is vitally important to test that such assertion statements work as expected.\par
Since these precondition checks cause the processes to die, we call such tests {\i death tests} . More generally, any test that checks that a program terminates in an expected fashion is also a death test.\par
If you want to test {\f2 EXPECT_*()/ASSERT_*()}  failures in your test code, see {\f2 Catching Failures}.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 How to Write a Death Test} \par}
Google Test has the following macros to support death tests:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}    \cell }{{\b Nonfatal assertion}    \cell }{{\b Verifies}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_DEATH(} _statement, regex_{\f2 ); \\ilinebr </td> <td class="markdownTableBodyLeft">} EXPECT_DEATH({\f2 _statement, regex_} );   \cell }{{\i statement}  crashes with the given error    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_DEATH_IF_SUPPORTED(} _statement, regex_{\f2 ); \\ilinebr </td> <td class="markdownTableBodyLeft">} EXPECT_DEATH_IF_SUPPORTED({\f2 _statement, regex_} );   \cell }{if death tests are supported, verifies that {\i statement}  crashes with the given error; otherwise verifies nothing    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_EXIT(} _statement, predicate, regex_{\f2 ); \\ilinebr </td> <td class="markdownTableBodyLeft">} EXPECT_EXIT({\f2 _statement, predicate, regex_} );   \cell }{{\i statement}  exits with the given error and its exit code matches {\i predicate}    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
where {\i statement}  is a statement that is expected to cause the process to die, {\i predicate}  is a function or function object that evaluates an integer exit status, and {\i regex}  is a regular expression that the stderr output of {\i statement}  is expected to match. Note that {\i statement}  can be {\i any valid statement}  (including {\i compound statement} ) and doesn't have to be an expression.\par
As usual, the {\f2 ASSERT}  variants abort the current test function, while the {\f2 EXPECT}  variants do not.\par
{\b Note:}  We use the word "crash" here to mean that the process terminates with a {\i non-zero}  exit status code. There are two possibilities: either the process has called {\f2 exit()}  or {\f2 _exit()}  with a non-zero value, or it may be killed by a signal.\par
This means that if {\i statement}  terminates the process with a 0 exit code, it is {\i not}  considered a crash by {\f2 EXPECT_DEATH} . Use {\f2 EXPECT_EXIT}  instead if this is the case, or if you want to restrict the exit code more precisely.\par
A predicate here must accept an {\f2 int}  and return a {\f2 bool} . The death test succeeds only if the predicate returns {\f2 true} . Google Test defines a few predicates that handle the most common cases:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::ExitedWithCode(exit_code)\par
}
\par
This expression is {\f2 true}  if the program exited normally with the given exit code.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::KilledBySignal(signal_number)  // Not available on Windows.\par
}
\par
This expression is {\f2 true}  if the program was killed by the given signal.\par
The {\f2 *_DEATH}  macros are convenient wrappers for {\f2 *_EXIT}  that use a predicate that verifies the process' exit code is non-zero.\par
Note that a death test only cares about three things:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab does {\i statement}  abort or exit the process?\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab (in the case of {\f2 ASSERT_EXIT}  and {\f2 EXPECT_EXIT} ) does the exit status satisfy {\i predicate} ? Or (in the case of {\f2 ASSERT_DEATH}  and {\f2 EXPECT_DEATH} ) is the exit status non-zero? And\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab does the stderr output match {\i regex} ?\par}
\par
In particular, if {\i statement}  generates an {\f2 ASSERT_*}  or {\f2 EXPECT_*}  failure, it will {\b not}  cause the death test to fail, as Google Test assertions don't abort the process.\par
To write a death test, simply use one of the above macros inside your test function. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(My*DeathTest*, Foo) \{\par
  // This death test uses a compound statement.\par
  ASSERT_DEATH(\{ int n = 5; Foo(&n); \}, "Error on line .* of Foo()");\par
\}\par
TEST(MyDeathTest, NormalExit) \{\par
  EXPECT_EXIT(NormalExit(), ::testing::ExitedWithCode(0), "Success");\par
\}\par
TEST(MyDeathTest, KillMyself) \{\par
  EXPECT_EXIT(KillMyself(), ::testing::KilledBySignal(SIGKILL), "Sending myself unblockable signal");\par
\}\par
}
\par
verifies that:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 Foo(5)}  causes the process to die with the given error message,\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 NormalExit()}  causes the process to print {\f2 "Success"}  to stderr and exit with exit code 0, and\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 KillMyself()}  kills the process with signal {\f2 SIGKILL} .\par}
\par
The test function body may contain other assertions and statements as well, if necessary.\par
{\i Important:}  We strongly recommend you to follow the convention of naming your test case (not test) {\f2 *DeathTest}  when it contains a death test, as demonstrated in the above example. The {\f2 Death Tests And Threads}  section below explains why.\par
If a test fixture class is shared by normal tests and death tests, you can use typedef to introduce an alias for the fixture class and avoid duplicating its code: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{ ... \};\par
\par
typedef FooTest FooDeathTest;\par
\par
TEST_F(FooTest, DoesThis) \{\par
  // normal test\par
\}\par
\par
TEST_F(FooDeathTest, DoesThat) \{\par
  // death test\par
\}\par
}
\par
{\i Availability:}  Linux, Windows (requires MSVC 8.0 or above), Cygwin, and Mac (the latter three are supported since v1.3.0). {\f2 (ASSERT|EXPECT)_DEATH_IF_SUPPORTED}  are new in v1.4.0.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Regular Expression Syntax} \par}
On POSIX systems (e.g. Linux, Cygwin, and Mac), Google Test uses the {\f2 POSIX extended regular expression} syntax in death tests. To learn about this syntax, you may want to read this {\f2 Wikipedia entry}.\par
On Windows, Google Test uses its own simple regular expression implementation. It lacks many features you can find in POSIX extended regular expressions. For example, we don't support union ({\f2 "x|y"} ), grouping ({\f2 "(xy)"} ), brackets ({\f2 "[xy]"} ), and repetition count ({\f2 "x\{5,7\}"} ), among others. Below is what we do support ({\f2 A}  denotes a literal character, period ({\f2 .} ), or a single {\f2 \\\\}  escape sequence; {\f2 x}  and {\f2 y}  denote regular expressions.):\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 c}    \cell }{matches any literal character {\f2 c}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\d}    \cell }{matches any decimal digit    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\D}    \cell }{matches any character that's not a decimal digit    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\f}    \cell }{matches {\f2 \\f}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\n}    \cell }{matches {\f2 \\n}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\r}    \cell }{matches {\f2 \\r}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\s}    \cell }{matches any ASCII whitespace, including {\f2 \\n}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\S}    \cell }{matches any character that's not a whitespace    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\t}    \cell }{matches {\f2 \\t}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\v}    \cell }{matches {\f2 \\v}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\w}    \cell }{matches any letter, {\f2 _} , or decimal digit    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\W}    \cell }{matches any character that {\f2 \\\\w}  doesn't match    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\c}    \cell }{matches any literal character {\f2 c} , which must be a punctuation    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 .}    \cell }{matches any single character except {\f2 \\n}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A?}    \cell }{matches 0 or 1 occurrences of {\f2 A}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A*}    \cell }{matches 0 or many occurrences of {\f2 A}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A+}    \cell }{matches 1 or many occurrences of {\f2 A}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ^}    \cell }{matches the beginning of a string (not that of each line)    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $}    \cell }{matches the end of a string (not that of each line)    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 xy}    \cell }{matches {\f2 x}  followed by {\f2 y}    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
To help you determine which capability is available on your system, Google Test defines macro {\f2 GTEST_USES_POSIX_RE=1}  when it uses POSIX extended regular expressions, or {\f2 GTEST_USES_SIMPLE_RE=1}  when it uses the simple version. If you want your death tests to work in both cases, you can either {\f2 #if}  on these macros or use the more limited syntax only.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 How It Works} \par}
Under the hood, {\f2 ASSERT_EXIT()}  spawns a new process and executes the death test statement in that process. The details of of how precisely that happens depend on the platform and the variable {\f2 ::testing::GTEST_FLAG(death_test_style)}  (which is initialized from the command-line flag {\f2 --gtest_death_test_style} ).\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
On POSIX systems, {\f2 fork()}  (or {\f2 clone()}  on Linux) is used to spawn the child, after which:{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the variable's value is {\f2 "fast"} , the death test statement is immediately executed.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the variable's value is {\f2 "threadsafe"} , the child process re-executes the unit test binary just as it was originally invoked, but with some extra flags to cause just the single death test under consideration to be run.\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
On Windows, the child is spawned using the {\f2 CreateProcess()}  API, and re-executes the binary to cause just the single death test under consideration to be run - much like the {\f2 threadsafe}  mode on POSIX.\par}
\par
Other values for the variable are illegal and will cause the death test to fail. Currently, the flag's default value is {\f2 "fast"} . However, we reserve the right to change it in the future. Therefore, your tests should not depend on this.\par
In either case, the parent process waits for the child process to complete, and checks that\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab the child's exit status satisfies the predicate, and\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab the child's stderr matches the regular expression.\par}
\par
If the death test statement runs to completion without dying, the child process will nonetheless terminate, and the assertion fails.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Death Tests And Threads} \par}
The reason for the two death test styles has to do with thread safety. Due to well-known problems with forking in the presence of threads, death tests should be run in a single-threaded context. Sometimes, however, it isn't feasible to arrange that kind of environment. For example, statically-initialized modules may start threads before main is ever reached. Once threads have been created, it may be difficult or impossible to clean them up.\par
Google Test has three features intended to raise awareness of threading issues.\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab A warning is emitted if multiple threads are running when a death test is encountered.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Test cases with a name ending in "DeathTest" are run before all other tests.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab It uses {\f2 clone()}  instead of {\f2 fork()}  to spawn the child process on Linux ({\f2 clone()}  is not available on Cygwin and Mac), as {\f2 fork()}  is more likely to cause the child to hang when the parent process has multiple threads.\par}
\par
It's perfectly fine to create threads inside a death test statement; they are executed in a separate process and cannot affect the parent.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Death Test Styles} \par}
The "threadsafe" death test style was introduced in order to help mitigate the risks of testing in a possibly multithreaded environment. It trades increased test execution time (potentially dramatically so) for improved thread safety. We suggest using the faster, default "fast" style unless your test has specific problems with it.\par
You can choose a particular style of death tests by setting the flag programmatically:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::FLAGS_gtest_death_test_style = "threadsafe";\par
}
\par
You can do this in {\f2 {\b main()}}  to set the style for all death tests in the binary, or in individual tests. Recall that flags are saved before running each test and restored afterwards, so you need not do that yourself. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyDeathTest, TestOne) \{\par
  ::testing::FLAGS_gtest_death_test_style = "threadsafe";\par
  // This test is run in the "threadsafe" style:\par
  ASSERT_DEATH(ThisShouldDie(), "");\par
\}\par
\par
TEST(MyDeathTest, TestTwo) \{\par
  // This test is run in the "fast" style:\par
  ASSERT_DEATH(ThisShouldDie(), "");\par
\}\par
\par
int main(int argc, char** argv) \{\par
  ::testing::InitGoogleTest(&argc, argv);\par
  ::testing::FLAGS_gtest_death_test_style = "fast";\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Caveats} \par}
The {\i statement}  argument of {\f2 ASSERT_EXIT()}  can be any valid C++ statement except that it can not return from the current function. This means {\i statement}  should not contain {\f2 return}  or a macro that might return (e.g. {\f2 {\b ASSERT_TRUE()}}  ). If {\i statement}  returns before it crashes, Google Test will print an error message, and the test will fail.\par
Since {\i statement}  runs in the child process, any in-memory side effect (e.g. modifying a variable, releasing memory, etc) it causes will {\i not}  be observable in the parent process. In particular, if you release memory in a death test, your program will fail the heap check as the parent process will never see the memory reclaimed. To solve this problem, you can\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab try not to free memory in a death test;\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab free the memory again in the parent process; or\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab do not use the heap checker in your program.\par}
\par
Due to an implementation detail, you cannot place multiple death test assertions on the same line; otherwise, compilation will fail with an unobvious error message.\par
Despite the improved thread safety afforded by the "threadsafe" style of death test, thread problems such as deadlock are still possible in the presence of handlers registered with {\f2 pthread_atfork(3)} .\par
{\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid {\tc\tcl1 Using Assertions in Sub-routines} \par}
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Adding Traces to Assertions} \par}
If a test sub-routine is called from several places, when an assertion inside it fails, it can be hard to tell which invocation of the sub-routine the failure is from. You can alleviate this problem using extra logging or custom failure messages, but that usually clutters up your tests. A better solution is to use the {\f2 SCOPED_TRACE}  macro:\par
| {\f2 SCOPED_TRACE(} _message_{\f2 );}  | |:--------------------------\'97|\par
where {\i message}  can be anything streamable to {\f2 {\b std::ostream}} . This macro will cause the current file name, line number, and the given message to be added in every failure message. The effect will be undone when the control leaves the current lexical scope.\par
For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10: void Sub1(int n) \{\par
11:   EXPECT_EQ(1, Bar(n));\par
12:   EXPECT_EQ(2, Bar(n + 1));\par
13: \}\par
14:\par
15: TEST(FooTest, Bar) \{\par
16:   \{\par
17:     SCOPED_TRACE("A");  // This trace point will be included in\par
18:                         // every failure in this scope.\par
19:     Sub1(1);\par
20:   \}\par
21:   // Now it won't.\par
22:   Sub1(9);\par
23: \}\par
}
\par
could result in messages like these:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid path/to/foo_test.cc:11: Failure\par
Value of: Bar(n)\par
Expected: 1\par
  Actual: 2\par
   Trace:\par
path/to/foo_test.cc:17: A\par
\par
path/to/foo_test.cc:12: Failure\par
Value of: Bar(n + 1)\par
Expected: 2\par
  Actual: 3\par
}
\par
Without the trace, it would've been difficult to know which invocation of {\f2 Sub1()}  the two failures come from respectively. (You could add an extra message to each assertion in {\f2 Sub1()}  to indicate the value of {\f2 n} , but that's tedious.)\par
Some tips on using {\f2 SCOPED_TRACE} :\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab With a suitable message, it's often enough to use {\f2 SCOPED_TRACE}  at the beginning of a sub-routine, instead of at each call site.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When calling sub-routines inside a loop, make the loop iterator part of the message in {\f2 SCOPED_TRACE}  such that you can know which iteration the failure is from.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Sometimes the line number of the trace point is enough for identifying the particular invocation of a sub-routine. In this case, you don't have to choose a unique message for {\f2 SCOPED_TRACE} . You can simply use {\f2 ""} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You can use {\f2 SCOPED_TRACE}  in an inner scope when there is one in the outer scope. In this case, all active trace points will be included in the failure messages, in reverse order they are encountered.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The trace dump is clickable in Emacs' compilation buffer - hit return on a line number and you'll be taken to that line in the source file!\par}
\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Propagating Fatal Failures} \par}
A common pitfall when using {\f2 ASSERT_*}  and {\f2 FAIL*}  is not understanding that when they fail they only abort the {\i current function} , not the entire test. For example, the following test will segfault: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Subroutine() \{\par
  // Generates a fatal failure and aborts the current function.\par
  ASSERT_EQ(1, 2);\par
  // The following won't be executed.\par
  ...\par
\}\par
\par
TEST(FooTest, Bar) \{\par
  Subroutine();\par
  // The intended behavior is for the fatal failure\par
  // in Subroutine() to abort the entire test.\par
  // The actual behavior: the function goes on after Subroutine() returns.\par
  int* p = NULL;\par
  *p = 3; // Segfault!\par
\}\par
}
\par
Since we don't use exceptions, it is technically impossible to implement the intended behavior here. To alleviate this, Google Test provides two solutions. You could use either the {\f2 (ASSERT|EXPECT)_NO_FATAL_FAILURE}  assertions or the {\f2 HasFatalFailure()}  function. They are described in the following two subsections.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Asserting on Subroutines} \par}
As shown above, if your test calls a subroutine that has an {\f2 ASSERT_*}  failure in it, the test will continue after the subroutine returns. This may not be what you want.\par
Often people want fatal failures to propagate like exceptions. For that Google Test offers the following macros:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}    \cell }{{\b Nonfatal assertion}    \cell }{{\b Verifies}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NO_FATAL_FAILURE(} _statement_{\f2 );}    \cell }{{\f2 EXPECT_NO_FATAL_FAILURE(} _statement_{\f2 );}    \cell }{{\i statement}  doesn't generate any new fatal failures in the current thread.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Only failures in the thread that executes the assertion are checked to determine the result of this type of assertions. If {\i statement}  creates new threads, failures in these threads are ignored.\par
Examples:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_NO_FATAL_FAILURE(Foo());\par
\par
int i;\par
EXPECT_NO_FATAL_FAILURE(\{\par
  i = Bar();\par
\});\par
}
\par
{\i Availability:}  Linux, Windows, Mac. Assertions from multiple threads are currently not supported.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Checking for Failures in the Current Test} \par}
{\f2 HasFatalFailure()}  in the {\f2 {\b testing::Test}}  class returns {\f2 true}  if an assertion in the current test has suffered a fatal failure. This allows functions to catch fatal failures in a sub-routine and return early.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Test \{\par
 public:\par
  ...\par
  static bool HasFatalFailure();\par
\};\par
}
\par
The typical usage, which basically simulates the behavior of a thrown exception, is:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(FooTest, Bar) \{\par
  Subroutine();\par
  // Aborts if Subroutine() had a fatal failure.\par
  if (HasFatalFailure())\par
    return;\par
  // The following won't be executed.\par
  ...\par
\}\par
}
\par
If {\f2 HasFatalFailure()}  is used outside of {\f2 {\b TEST()}}  , {\f2 {\b TEST_F()}}  , or a test fixture, you must add the {\f2 {\b testing::Test}::}  prefix, as in:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid if (::testing::Test::HasFatalFailure())\par
  return;\par
}
\par
Similarly, {\f2 HasNonfatalFailure()}  returns {\f2 true}  if the current test has at least one non-fatal failure, and {\f2 HasFailure()}  returns {\f2 true}  if the current test has at least one failure of either kind.\par
{\i Availability:}  Linux, Windows, Mac. {\f2 HasNonfatalFailure()}  and {\f2 HasFailure()}  are available since version 1.4.0.\par
{\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid {\tc\tcl1 Logging Additional Information} \par}
In your test code, you can call {\f2 RecordProperty("key", value)}  to log additional information, where {\f2 value}  can be either a C string or a 32-bit integer. The {\i last}  value recorded for a key will be emitted to the XML output if you specify one. For example, the test\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(WidgetUsageTest, MinAndMaxWidgets) \{\par
  RecordProperty("MaximumWidgets", ComputeMaxUsage());\par
  RecordProperty("MinimumWidgets", ComputeMinUsage());\par
\}\par
}
\par
will output XML like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
  <testcase name="MinAndMaxWidgets" status="run" time="6" classname="WidgetUsageTest"\par
            MaximumWidgets="12"\par
            MinimumWidgets="9" />\par
...\par
}
\par
{\i Note} :{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 RecordProperty()}  is a static member of the {\f2 Test}  class. Therefore it needs to be prefixed with {\f2 {\b testing::Test}::}  if used outside of the {\f2 TEST}  body and the test fixture class.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 key}  must be a valid XML attribute name, and cannot conflict with the ones already used by Google Test ({\f2 name} , {\f2 status} , {\f2 time} , and {\f2 classname} ).\par}
\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid {\tc\tcl1 Sharing Resources Between Tests in the Same Test Case} \par}
Google Test creates a new test fixture object for each test in order to make tests independent and easier to debug. However, sometimes tests use resources that are expensive to set up, making the one-copy-per-test model prohibitively expensive.\par
If the tests don't change the resource, there's no harm in them sharing a single resource copy. So, in addition to per-test set-up/tear-down, Google Test also supports per-test-case set-up/tear-down. To use it:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In your test fixture class (say {\f2 {\b FooTest}}  ), define as {\f2 static}  some member variables to hold the shared resources.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In the same test fixture class, define a {\f2 static void SetUpTestCase()}  function (remember not to spell it as **{\f2 SetupTestCase} ** with a small {\f2 u} !) to set up the shared resources and a {\f2 static void TearDownTestCase()}  function to tear them down.\par}
\par
That's it! Google Test automatically calls {\f2 SetUpTestCase()}  before running the {\i first test}  in the {\f2 {\b FooTest}}  test case (i.e. before creating the first {\f2 {\b FooTest}}  object), and calls {\f2 TearDownTestCase()}  after running the {\i last test}  in it (i.e. after deleting the last {\f2 {\b FooTest}}  object). In between, the tests can use the shared resources.\par
Remember that the test order is undefined, so your code can't depend on a test preceding or following another. Also, the tests must either not modify the state of any shared resource, or, if they do modify the state, they must restore the state to its original value before passing control to the next test.\par
Here's an example of per-test-case set-up and tear-down: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{\par
 protected:\par
  // Per-test-case set-up.\par
  // Called before the first test in this test case.\par
  // Can be omitted if not needed.\par
  static void SetUpTestCase() \{\par
    shared_resource_ = new ...;\par
  \}\par
\par
  // Per-test-case tear-down.\par
  // Called after the last test in this test case.\par
  // Can be omitted if not needed.\par
  static void TearDownTestCase() \{\par
    delete shared_resource_;\par
    shared_resource_ = NULL;\par
  \}\par
\par
  // You can define per-test set-up and tear-down logic as usual.\par
  virtual void SetUp() \{ ... \}\par
  virtual void TearDown() \{ ... \}\par
\par
  // Some expensive resource shared by all tests.\par
  static T* shared_resource_;\par
\};\par
\par
T* FooTest::shared_resource_ = NULL;\par
\par
TEST_F(FooTest, Test1) \{\par
  ... you can refer to shared_resource here ...\par
\}\par
TEST_F(FooTest, Test2) \{\par
  ... you can refer to shared_resource here ...\par
\}\par
}
\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid {\tc\tcl1 Global Set-Up and Tear-Down} \par}
Just as you can do set-up and tear-down at the test level and the test case level, you can also do it at the test program level. Here's how.\par
First, you subclass the {\f2 {\b testing::Environment}}  class to define a test environment, which knows how to set-up and tear-down:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Environment \{\par
 public:\par
  virtual ~Environment() \{\}\par
  // Override this to define how to set up the environment.\par
  virtual void SetUp() \{\}\par
  // Override this to define how to tear down the environment.\par
  virtual void TearDown() \{\}\par
\};\par
}
\par
Then, you register an instance of your environment class with Google Test by calling the {\f2 {\b testing::AddGlobalTestEnvironment()}}  function:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Environment* AddGlobalTestEnvironment(Environment* env);\par
}
\par
Now, when {\f2 {\b RUN_ALL_TESTS()}}  is called, it first calls the {\f2 SetUp()}  method of the environment object, then runs the tests if there was no fatal failures, and finally calls {\f2 TearDown()}  of the environment object.\par
It's OK to register multiple environment objects. In this case, their {\f2 SetUp()}  will be called in the order they are registered, and their {\f2 TearDown()}  will be called in the reverse order.\par
Note that Google Test takes ownership of the registered environment objects. Therefore {\b do not delete them}  by yourself.\par
You should call {\f2 {\b AddGlobalTestEnvironment()}}  before {\f2 {\b RUN_ALL_TESTS()}}  is called, probably in {\f2 {\b main()}} . If you use {\f2 gtest_main} , you need to call this before {\f2 {\b main()}}  starts for it to take effect. One way to do this is to define a global variable like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::Environment* const foo_env = ::testing::AddGlobalTestEnvironment(new FooEnvironment);\par
}
\par
However, we strongly recommend you to write your own {\f2 {\b main()}}  and call {\f2 {\b AddGlobalTestEnvironment()}}  there, as relying on initialization of global variables makes the code harder to read and may cause problems when you register multiple environments from different translation units and the environments have dependencies among them (remember that the compiler doesn't guarantee the order in which global variables from different translation units are initialized).\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid {\tc\tcl1 Value Parameterized Tests} \par}
{\i Value-parameterized tests}  allow you to test your code with different parameters without writing multiple copies of the same test.\par
Suppose you write a test for your code and then realize that your code is affected by a presence of a Boolean command line flag.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyCodeTest, TestFoo) \{\par
  // A code to test foo().\par
\}\par
}
\par
Usually people factor their test code into a function with a Boolean parameter in such situations. The function sets the flag, then executes the testing code.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void TestFooHelper(bool flag_value) \{\par
  flag = flag_value;\par
  // A code to test foo().\par
\}\par
\par
TEST(MyCodeTest, TestFooo) \{\par
  TestFooHelper(false);\par
  TestFooHelper(true);\par
\}\par
}
\par
But this setup has serious drawbacks. First, when a test assertion fails in your tests, it becomes unclear what value of the parameter caused it to fail. You can stream a clarifying message into your {\f2 EXPECT} /{\f2 ASSERT}  statements, but it you'll have to do it with all of them. Second, you have to add one such helper function per test. What if you have ten tests? Twenty? A hundred?\par
Value-parameterized tests will let you write your test only once and then easily instantiate and run it with an arbitrary number of parameter values.\par
Here are some other situations when value-parameterized tests come handy:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You wan to test different implementations of an OO interface.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to test your code over various inputs (a.k.a. data-driven testing). This feature is easy to abuse, so please exercise your good sense when doing it!\par}
\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 How to Write Value-Parameterized Tests} \par}
To write value-parameterized tests, first you should define a fixture class. It must be derived from {\f2 ::testing::TestWithParam<T>} , where {\f2 T}  is the type of your parameter values. {\f2 TestWithParam<T>}  is itself derived from {\f2 {\b testing::Test}} . {\f2 T}  can be any copyable type. If it's a raw pointer, you are responsible for managing the lifespan of the pointed values.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::TestWithParam<const char*> \{\par
  // You can implement all the usual fixture class members here.\par
  // To access the test parameter, call GetParam() from class\par
  // TestWithParam<T>.\par
\};\par
}
\par
Then, use the {\f2 TEST_P}  macro to define as many test patterns using this fixture as you want. The {\f2 _P}  suffix is for "parameterized" or "pattern", whichever you prefer to think.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_P(FooTest, DoesBlah) \{\par
  // Inside a test, access the test parameter with the GetParam() method\par
  // of the TestWithParam<T> class:\par
  EXPECT_TRUE(foo.Blah(GetParam()));\par
  ...\par
\}\par
\par
TEST_P(FooTest, HasBlahBlah) \{\par
  ...\par
\}\par
}
\par
Finally, you can use {\f2 INSTANTIATE_TEST_CASE_P}  to instantiate the test case with any set of parameters you want. Google Test defines a number of functions for generating test parameters. They return what we call (surprise!) {\i parameter generators} . Here is a summary of them, which are all in the {\f2 testing}  namespace:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Range(begin, end[, step])}    \cell }{Yields values {\f2 \{begin, begin+step, begin+step+step, ...\}} . The values do not include {\f2 end} . {\f2 step}  defaults to 1.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Values(v1, v2, ..., vN)}    \cell }{Yields values {\f2 \{v1, v2, ..., vN\}} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ValuesIn(container)}  and {\f2 ValuesIn(begin, end)}    \cell }{Yields values from a C-style array, an STL-style container, or an iterator range {\f2 [begin, end)} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 {\b Bool()}}    \cell }{Yields sequence {\f2 \{false, true\}} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Combine(g1, g2, ..., gN)}    \cell }{Yields all combinations (the Cartesian product for the math savvy) of the values generated by the {\f2 N}  generators. This is only available if your system provides the {\f2 <tr1/tuple>}  header. If you are sure your system does, and Google Test disagrees, you can override it by defining {\f2 GTEST_HAS_TR1_TUPLE=1} . See comments in {\f2 include/gtest/internal/gtest-port.h} for more information.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
For more details, see the comments at the definitions of these functions in the {\f2 source code}.\par
The following statement will instantiate tests from the {\f2 {\b FooTest}}  test case each with parameter values {\f2 "meeny"} , {\f2 "miny"} , and {\f2 "moe"} .\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INSTANTIATE_TEST_CASE_P(InstantiationName,\par
                        FooTest,\par
                        ::testing::Values("meeny", "miny", "moe"));\par
}
\par
To distinguish different instances of the pattern (yes, you can instantiate it more than once), the first argument to {\f2 INSTANTIATE_TEST_CASE_P}  is a prefix that will be added to the actual test case name. Remember to pick unique prefixes for different instantiations. The tests from the instantiation above will have these names:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.DoesBlah/0}  for {\f2 "meeny"} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.DoesBlah/1}  for {\f2 "miny"} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.DoesBlah/2}  for {\f2 "moe"} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.HasBlahBlah/0}  for {\f2 "meeny"} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.HasBlahBlah/1}  for {\f2 "miny"} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.HasBlahBlah/2}  for {\f2 "moe"} \par}
\par
You can use these names in {\f2 \'96gtest-filter}.\par
This statement will instantiate all tests from {\f2 {\b FooTest}}  again, each with parameter values {\f2 "cat"}  and {\f2 "dog"} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid const char* pets[] = \{"cat", "dog"\};\par
INSTANTIATE_TEST_CASE_P(AnotherInstantiationName, FooTest,\par
                        ::testing::ValuesIn(pets));\par
}
\par
The tests from the instantiation above will have these names:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.DoesBlah/0}  for {\f2 "cat"} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.DoesBlah/1}  for {\f2 "dog"} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.HasBlahBlah/0}  for {\f2 "cat"} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.HasBlahBlah/1}  for {\f2 "dog"} \par}
\par
Please note that {\f2 INSTANTIATE_TEST_CASE_P}  will instantiate {\i all}  tests in the given test case, whether their definitions come before or {\i after}  the {\f2 INSTANTIATE_TEST_CASE_P}  statement.\par
You can see {\f2 these} {\f2 files} for more examples.\par
{\i Availability} : Linux, Windows (requires MSVC 8.0 or above), Mac; since version 1.2.0.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Creating Value-Parameterized Abstract Tests} \par}
In the above, we define and instantiate {\f2 {\b FooTest}}  in the same source file. Sometimes you may want to define value-parameterized tests in a library and let other people instantiate them later. This pattern is known as {\i abstract tests} . As an example of its application, when you are designing an interface you can write a standard suite of abstract tests (perhaps using a factory function as the test parameter) that all implementations of the interface are expected to pass. When someone implements the interface, he can instantiate your suite to get all the interface-conformance tests for free.\par
To define abstract tests, you should organize your code like this:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Put the definition of the parameterized test fixture class (e.g. {\f2 {\b FooTest}} ) in a header file, say {\f2 foo_param_test.h} . Think of this as {\i declaring}  your abstract tests.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Put the {\f2 TEST_P}  definitions in {\f2 foo_param_test.cc} , which includes {\f2 foo_param_test.h} . Think of this as {\i implementing}  your abstract tests.\par}
\par
Once they are defined, you can instantiate them by including {\f2 foo_param_test.h} , invoking {\f2 {\b INSTANTIATE_TEST_CASE_P()}} , and linking with {\f2 foo_param_test.cc} . You can instantiate the same abstract test case multiple times, possibly in different source files.\par
{\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid {\tc\tcl1 Typed Tests} \par}
Suppose you have multiple implementations of the same interface and want to make sure that all of them satisfy some common requirements. Or, you may have defined several types that are supposed to conform to the same "concept" and you want to verify it. In both cases, you want the same test logic repeated for different types.\par
While you can write one {\f2 TEST}  or {\f2 TEST_F}  for each type you want to test (and you may even factor the test logic into a function template that you invoke from the {\f2 TEST} ), it's tedious and doesn't scale: if you want {\i m}  tests over {\i n}  types, you'll end up writing {\i m*n}  {\f2 TEST} s.\par
{\i Typed tests}  allow you to repeat the same test logic over a list of types. You only need to write the test logic once, although you must know the type list when writing typed tests. Here's how you do it:\par
First, define a fixture class template. It should be parameterized by a type. Remember to derive it from {\f2 {\b testing::Test}} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T>\par
class FooTest : public ::testing::Test \{\par
 public:\par
  ...\par
  typedef std::list<T> List;\par
  static T shared_;\par
  T value_;\par
\};\par
}
\par
Next, associate a list of types with the test case, which will be repeated for each type in the list:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef ::testing::Types<char, int, unsigned int> MyTypes;\par
TYPED_TEST_CASE(FooTest, MyTypes);\par
}
\par
The {\f2 typedef}  is necessary for the {\f2 TYPED_TEST_CASE}  macro to parse correctly. Otherwise the compiler will think that each comma in the type list introduces a new macro argument.\par
Then, use {\f2 {\b TYPED_TEST()}}  instead of {\f2 {\b TEST_F()}}  to define a typed test for this test case. You can repeat this as many times as you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TYPED_TEST(FooTest, DoesBlah) \{\par
  // Inside a test, refer to the special name TypeParam to get the type\par
  // parameter.  Since we are inside a derived class template, C++ requires\par
  // us to visit the members of FooTest via 'this'.\par
  TypeParam n = this->value_;\par
\par
  // To visit static members of the fixture, add the 'TestFixture::'\par
  // prefix.\par
  n += TestFixture::shared_;\par
\par
  // To refer to typedefs in the fixture, add the 'typename TestFixture::'\par
  // prefix.  The 'typename' is required to satisfy the compiler.\par
  typename TestFixture::List values;\par
  values.push_back(n);\par
  ...\par
\}\par
\par
TYPED_TEST(FooTest, HasPropertyA) \{ ... \}\par
}
\par
You can see {\f2 {\b samples/sample6_unittest.cc}}  for a complete example.\par
{\i Availability:}  Linux, Windows (requires MSVC 8.0 or above), Mac; since version 1.1.0.\par
{\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid {\tc\tcl1 Type-Parameterized Tests} \par}
{\i Type-parameterized tests}  are like typed tests, except that they don't require you to know the list of types ahead of time. Instead, you can define the test logic first and instantiate it with different type lists later. You can even instantiate it more than once in the same program.\par
If you are designing an interface or concept, you can define a suite of type-parameterized tests to verify properties that any valid implementation of the interface/concept should have. Then, the author of each implementation can just instantiate the test suite with his type to verify that it conforms to the requirements, without having to write similar tests repeatedly. Here's an example:\par
First, define a fixture class template, as we did with typed tests:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T>\par
class FooTest : public ::testing::Test \{\par
  ...\par
\};\par
}
\par
Next, declare that you will define a type-parameterized test case:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TYPED_TEST_CASE_P(FooTest);\par
}
\par
The {\f2 _P}  suffix is for "parameterized" or "pattern", whichever you prefer to think.\par
Then, use {\f2 {\b TYPED_TEST_P()}}  to define a type-parameterized test. You can repeat this as many times as you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TYPED_TEST_P(FooTest, DoesBlah) \{\par
  // Inside a test, refer to TypeParam to get the type parameter.\par
  TypeParam n = 0;\par
  ...\par
\}\par
\par
TYPED_TEST_P(FooTest, HasPropertyA) \{ ... \}\par
}
\par
Now the tricky part: you need to register all test patterns using the {\f2 REGISTER_TYPED_TEST_CASE_P}  macro before you can instantiate them. The first argument of the macro is the test case name; the rest are the names of the tests in this test case:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid REGISTER_TYPED_TEST_CASE_P(FooTest,\par
                           DoesBlah, HasPropertyA);\par
}
\par
Finally, you are free to instantiate the pattern with the types you want. If you put the above code in a header file, you can {\f2 #include}  it in multiple C++ source files and instantiate it multiple times.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef ::testing::Types<char, int, unsigned int> MyTypes;\par
INSTANTIATE_TYPED_TEST_CASE_P(My, FooTest, MyTypes);\par
}
\par
To distinguish different instances of the pattern, the first argument to the {\f2 INSTANTIATE_TYPED_TEST_CASE_P}  macro is a prefix that will be added to the actual test case name. Remember to pick unique prefixes for different instances.\par
In the special case where the type list contains only one type, you can write that type directly without {\f2 ::testing::Types<...>} , like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INSTANTIATE_TYPED_TEST_CASE_P(My, FooTest, int);\par
}
\par
You can see {\f2 {\b samples/sample6_unittest.cc}}  for a complete example.\par
{\i Availability:}  Linux, Windows (requires MSVC 8.0 or above), Mac; since version 1.1.0.\par
{\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid {\tc\tcl1 Testing Private Code} \par}
If you change your software's internal implementation, your tests should not break as long as the change is not observable by users. Therefore, per the {\i black-box testing principle} , most of the time you should test your code through its public interfaces.\par
If you still find yourself needing to test internal implementation code, consider if there's a better design that wouldn't require you to do so. If you absolutely have to test non-public interface code though, you can. There are two cases to consider:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Static functions ({\i not}  the same as static member functions!) or unnamed namespaces, and\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Private or protected class members\par}
\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Static Functions} \par}
Both static functions and definitions/declarations in an unnamed namespace are only visible within the same translation unit. To test them, you can {\f2 #include}  the entire {\f2 .cc}  file being tested in your {\f2 *_test.cc}  file. ({\f2 #include} ing {\f2 .cc}  files is not a good way to reuse code - you should not do this in production code!)\par
However, a better approach is to move the private code into the {\f2 foo::internal}  namespace, where {\f2 foo}  is the namespace your project normally uses, and put the private declarations in a {\f2 *-internal.h}  file. Your production {\f2 .cc}  files and your tests are allowed to include this internal header, but your clients are not. This way, you can fully test your internal implementation without leaking it to your clients.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Private Class Members} \par}
Private class members are only accessible from within the class or by friends. To access a class' private members, you can declare your test fixture as a friend to the class and define accessors in your fixture. Tests using the fixture can then access the private members of your production class via the accessors in the fixture. Note that even though your fixture is a friend to your production class, your tests are not automatically friends to it, as they are technically defined in sub-classes of the fixture.\par
Another way to test private members is to refactor them into an implementation class, which is then declared in a {\f2 *-internal.h}  file. Your clients aren't allowed to include this header but your tests can. Such is called the Pimpl (Private Implementation) idiom.\par
Or, you can declare an individual test as a friend of your class by adding this line in the class body:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid FRIEND_TEST(TestCaseName, TestName);\par
}
\par
For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
#include <gtest/gtest_prod.h>\par
\par
// Defines FRIEND_TEST.\par
class Foo \{\par
  ...\par
 private:\par
  FRIEND_TEST(FooTest, BarReturnsZeroOnNull);\par
  int Bar(void* x);\par
\};\par
\par
// foo_test.cc\par
...\par
TEST(FooTest, BarReturnsZeroOnNull) \{\par
  Foo foo;\par
  EXPECT_EQ(0, foo.Bar(NULL));\par
  // Uses Foo's private member Bar().\par
\}\par
}
\par
Pay special attention when your class is defined in a namespace, as you should define your test fixtures and tests in the same namespace if you want them to be friends of your class. For example, if the code to be tested looks like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace my_namespace \{\par
\par
class Foo \{\par
  friend class FooTest;\par
  FRIEND_TEST(FooTest, Bar);\par
  FRIEND_TEST(FooTest, Baz);\par
  ...\par
  definition of the class Foo\par
  ...\par
\};\par
\par
\}  // namespace my_namespace\par
}
\par
Your test code should be something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace my_namespace \{\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  ...\par
\};\par
\par
TEST_F(FooTest, Bar) \{ ... \}\par
TEST_F(FooTest, Baz) \{ ... \}\par
\par
\}  // namespace my_namespace\par
}
\par
{\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid {\tc\tcl1 Catching Failures} \par}
If you are building a testing utility on top of Google Test, you'll want to test your utility. What framework would you use to test it? Google Test, of course.\par
The challenge is to verify that your testing utility reports failures correctly. In frameworks that report a failure by throwing an exception, you could catch the exception and assert on it. But Google Test doesn't use exceptions, so how do we test that a piece of code generates an expected failure?\par
{\f2 <{\b gtest/gtest-spi.h}>}  contains some constructs to do this. After {\f2 #include} ing this header, you can use\par
| {\f2 EXPECT_FATAL_FAILURE(} _statement, substring_{\f2 );}  | |:-----------------------------------------------\'97|\par
to assert that {\i statement}  generates a fatal (e.g. {\f2 ASSERT_*} ) failure whose message contains the given {\i substring} , or use\par
| {\f2 EXPECT_NONFATAL_FAILURE(} _statement, substring_{\f2 );}  | |:--------------------------------------------------\'97|\par
if you are expecting a non-fatal (e.g. {\f2 EXPECT_*} ) failure.\par
For technical reasons, there are some caveats:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You cannot stream a failure message to either macro.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\i statement}  in {\f2 {\b EXPECT_FATAL_FAILURE()}}  cannot reference local non-static variables or non-static members of {\f2 this}  object.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\i statement}  in {\f2 {\b EXPECT_FATAL_FAILURE()}}  cannot return a value.\par}
\par
{\i Note:}  Google Test is designed with threads in mind. Once the synchronization primitives in {\f2 <{\b gtest/internal/gtest-port.h}>}  have been implemented, Google Test will become thread-safe, meaning that you can then use assertions in multiple threads concurrently. Before\par
that, however, Google Test only supports single-threaded usage. Once thread-safe, {\f2 {\b EXPECT_FATAL_FAILURE()}}  and {\f2 {\b EXPECT_NONFATAL_FAILURE()}}  will capture failures in the current thread only. If {\i statement}  creates new threads, failures in these threads will be ignored. If you want to capture failures from all threads instead, you should use the following macros:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_FATAL_FAILURE_ON_ALL_THREADS(} _statement, substring_{\f2 );}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(} _statement, substring_{\f2 );}    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid {\tc\tcl1 Getting the Current Test's Name} \par}
Sometimes a function may need to know the name of the currently running test. For example, you may be using the {\f2 SetUp()}  method of your test fixture to set the golden file name based on which test is running. The {\f2 {\b testing::TestInfo}}  class has this information:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace testing \{\par
\par
class TestInfo \{\par
 public:\par
  // Returns the test case name and the test name, respectively.\par
  //\par
  // Do NOT delete or free the return value - it's managed by the\par
  // TestInfo class.\par
  const char* test_case_name() const;\par
  const char* name() const;\par
\};\par
\par
\}  // namespace testing\par
}
\par
{\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid To obtain a {\f2 TestInfo}  object for the currently running test, call \par
}{\f2 current_test_info()}  on the {\f2 UnitTest}  singleton object:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Gets information about the currently running test.\par
// Do NOT delete the returned object - it's managed by the UnitTest class.\par
const ::testing::TestInfo* const test_info =\par
  ::testing::UnitTest::GetInstance()->current_test_info();\par
printf("We are in test %s of test case %s.\\n",\par
       test_info->name(), test_info->test_case_name());\par
}
\par
{\f2 current_test_info()}  returns a null pointer if no test is running. In particular, you cannot find the test case name in {\f2 TestCaseSetUp()} , {\f2 TestCaseTearDown()}  (where you know the test case name implicitly), or functions called from them.\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid {\tc\tcl1 Extending Google Test by Handling Test Events} \par}
Google Test provides an {\b event listener API}  to let you receive notifications about the progress of a test program and test failures. The events you can listen to include the start and end of the test program, a test case, or a test method, among others. You may use this API to augment or replace the standard console output, replace the XML output, or provide a completely different form of output, such as a GUI or a database. You can also use test events as checkpoints to implement a resource leak checker, for example.\par
{\i Availability:}  Linux, Windows, Mac; since v1.4.0.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Defining Event Listeners} \par}
To define a event listener, you subclass either {\f2 testing::TestEventListener} or {\f2 testing::EmptyTestEventListener}. The former is an (abstract) interface, where {\i each pure virtual method\par
 can be overridden to handle a test event}  (For example, when a test starts, the {\f2 OnTestStart()}  method will be called.). The latter provides an empty implementation of all methods in the interface, such that a subclass only needs to override the methods it cares about.\par
When an event is fired, its context is passed to the handler function as an argument. The following argument types are used:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 UnitTest} reflects the state of the entire test program,\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 TestCase} has information about a test case, which can contain one or more tests,\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 TestInfo} contains the state of a test, and\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 TestPartResult} represents the result of a test assertion.\par}
\par
An event handler function can examine the argument it receives to find out interesting information about the event and the test program's state. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MinimalistPrinter : public ::testing::EmptyTestEventListener \{\par
  // Called before a test starts.\par
  virtual void OnTestStart(const ::testing::TestInfo& test_info) \{\par
    printf("*** Test %s.%s starting.\\n",\par
           test_info.test_case_name(), test_info.name());\par
  \}\par
\par
  // Called after a failed assertion or a SUCCESS().\par
  virtual void OnTestPartResult(\par
      const ::testing::TestPartResult& test_part_result) \{\par
    printf("%s in %s:%d\\n%s\\n",\par
           test_part_result.failed() ? "*** Failure" : "Success",\par
           test_part_result.file_name(),\par
           test_part_result.line_number(),\par
           test_part_result.summary());\par
  \}\par
\par
  // Called after a test ends.\par
  virtual void OnTestEnd(const ::testing::TestInfo& test_info) \{\par
    printf("*** Test %s.%s ending.\\n",\par
           test_info.test_case_name(), test_info.name());\par
  \}\par
\};\par
}
\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Using Event Listeners} \par}
To use the event listener you have defined, add an instance of it to the Google Test event listener list (represented by class {\f2 TestEventListeners}{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
note the "s" at the end of the name) in your {\f2 {\b main()}}  function, before calling {\f2 {\b RUN_ALL_TESTS()}} : {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int main(int argc, char** argv) \{\par
  ::testing::InitGoogleTest(&argc, argv);\par
  // Gets hold of the event listener list.\par
  ::testing::TestEventListeners& listeners =\par
      ::testing::UnitTest::GetInstance()->listeners();\par
  // Adds a listener to the end.  Google Test takes the ownership.\par
  listeners.Append(new MinimalistPrinter);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par}
\par
There's only one problem: the default test result printer is still in effect, so its output will mingle with the output from your minimalist printer. To suppress the default printer, just release it from the event listener list and delete it. You can do so by adding one line: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
delete listeners.Release(listeners.default_result_printer());\par
listeners.Append(new MinimalistPrinter);\par
return RUN_ALL_TESTS();\par
}
\par
Now, sit back and enjoy a completely different output from your tests. For more details, you can read this {\f2 sample}.\par
You may append more than one listener to the list. When an {\f2 On*Start()}  or {\f2 OnTestPartResult()}  event is fired, the listeners will receive it in the order they appear in the list (since new listeners are added to the end of the list, the default text printer and the default XML generator will receive the event first). An {\f2 On*End()}  event will be received by the listeners in the {\i reverse}  order. This allows output by listeners added later to be framed by output from listeners added earlier.\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Generating Failures in Listeners} \par}
You may use failure-raising macros ({\f2 EXPECT_*()} , {\f2 ASSERT_*()} , {\f2 {\b FAIL()}} , etc) when processing an event. There are some restrictions:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You cannot generate any failure in {\f2 OnTestPartResult()}  (otherwise it will cause {\f2 OnTestPartResult()}  to be called recursively).\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab A listener that handles {\f2 OnTestPartResult()}  is not allowed to generate any failure.\par}
\par
When you add listeners to the listener list, you should put listeners that handle {\f2 OnTestPartResult()}  {\i before}  listeners that can generate failures. This ensures that failures generated by the latter are attributed to the right test by the former.\par
We have a sample of failure-raising listener {\f2 here}.\par
{\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid {\tc\tcl1 Running Test Programs: Advanced Options} \par}
Google Test test programs are ordinary executables. Once built, you can run them directly and affect their behavior via the following environment variables and/or command line flags. For the flags to work, your programs must call {\f2 {\b testing::InitGoogleTest()}}  before calling {\f2 {\b RUN_ALL_TESTS()}} .\par
To see a list of supported flags and their usage, please run your test program with the {\f2 --help}  flag. You can also use {\f2 -h} , {\f2 -?} , or {\f2 /?}  for short. This feature is added in version 1.3.0.\par
If an option is specified both by an environment variable and by a flag, the latter takes precedence. Most of the options can also be set/read in code: to access the value of command line flag {\f2 --gtest_foo} , write {\f2 ::testing::GTEST_FLAG(foo)} . A common pattern is to set the value of a flag before calling {\f2 {\b testing::InitGoogleTest()}}  to change the default value of the flag: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int main(int argc, char** argv) \{\par
  // Disables elapsed time by default.\par
  ::testing::GTEST_FLAG(print_time) = false;\par
\par
  // This allows the user to override the flag on the command line.\par
  ::testing::InitGoogleTest(&argc, argv);\par
\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Selecting Tests} \par}
This section shows various options for choosing which tests to run.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Listing Test Names} \par}
Sometimes it is necessary to list the available tests in a program before running them so that a filter may be applied if needed. Including the flag {\f2 --gtest_list_tests}  overrides all other flags and lists tests in the following format: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TestCase1.\par
  TestName1\par
  TestName2\par
TestCase2.\par
  TestName\par
}
\par
None of the tests listed are actually run if the flag is provided. There is no corresponding environment variable for this flag.\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Running a Subset of the Tests} \par}
By default, a Google Test program runs all tests the user has defined. Sometimes, you want to run only a subset of the tests (e.g. for debugging or quickly verifying a change). If you set the {\f2 GTEST_FILTER}  environment variable or the {\f2 --gtest_filter}  flag to a filter string, Google Test will only run the tests whose full names (in the form of {\f2 TestCaseName.TestName} ) match the filter.\par
The format of a filter is a '{\f2 :} '-separated list of wildcard patterns (called the positive patterns) optionally followed by a '{\f2 -} ' and another '{\f2 :} '-separated pattern list (called the negative patterns). A test matches the filter if and only if it matches any of the positive patterns but does not match any of the negative patterns.\par
A pattern may contain \'91\'92*'{\f2 (matches any string) or} '?'{\f2 (matches any single character). For convenience, the filter} '{\i -NegativePatterns'{\f2 can be also written as} '-NegativePatterns'`.} \par
{\i For example:} \par
{\i {
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ./foo_test}  Has no flag, and thus runs all its tests.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
`./foo_test \'96gtest_filter={\f2 Also runs everything, due to the single match-everything} *{\f2 value. *} ./foo_test \'96gtest_filter={\b FooTest}.*{\f2 Runs everything in test case} {\b FooTest}{\f2 . *} ./foo_test \'96gtest_filter=*Null*:{\i Constructor} {\f2 Runs any test whose full name contains either} "Null"{\f2 or} "Constructor"{\f2 . *} ./foo_test \'96gtest_filter=-*DeathTest.*{\f2 Runs all non-death tests. *} ./foo_test \'96gtest_filter={\b FooTest}.*-FooTest.Bar{\f2 Runs everything in test case} {\b FooTest}{\f2 except} FooTest.Bar`.\par}
\par
} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Temporarily Disabling Tests} \par}
} \par
{\i } \par
{\i If you have a broken test that you cannot fix right away, you can add the {\f2 DISABLED_}  prefix to its name. This will exclude it from execution. This is better than commenting out the code or using {\f2 #if 0} , as disabled tests are still compiled (and thus won't rot).} \par
{\i If you need to disable all tests in a test case, you can either add {\f2 DISABLED_}  to the front of the name of each test, or alternatively add it to the front of the test case name.} \par
{\i For example, the following tests won't be run by Google Test, even though they will still be compiled:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Tests that Foo does Abc.\par
TEST(FooTest, DISABLED_DoesAbc) \{ ... \}\par
\par
class DISABLED_BarTest : public ::testing::Test \{ ... \};\par
\par
// Tests that Bar does Xyz.\par
TEST_F(DISABLED_BarTest, DoesXyz) \{ ... \}\par
}
} \par
{\i {\i Note:}  This feature should only be used for temporary pain-relief. You still have to fix the disabled tests at a later date. As a reminder, Google Test will print a banner warning you if a test program contains any disabled tests.} \par
{\i {\i Tip:}  You can easily count the number of disabled tests you have using {\f2 grep} . This number can be used as a metric for improving your test quality.} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Temporarily Enabling Disabled Tests} \par}
} \par
{\i } \par
{\i To include {\f2 disabled tests} in test execution, just invoke the test program with the {\f2 --gtest_also_run_disabled_tests}  flag or set the {\f2 GTEST_ALSO_RUN_DISABLED_TESTS}  environment variable to a value other than {\f2 0} . You can combine this with the {\f2 \'96gtest_filter} flag to further select which disabled tests to run.} \par
{\i {\i Availability:}  Linux, Windows, Mac; since version 1.3.0.} \par
{\i {\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Repeating the Tests} \par}
} \par
{\i } \par
{\i Once in a while you'll run into a test whose result is hit-or-miss. Perhaps it will fail only 1% of the time, making it rather hard to reproduce the bug under a debugger. This can be a major source of frustration.} \par
{\i The {\f2 --gtest_repeat}  flag allows you to repeat all (or selected) test methods in a program many times. Hopefully, a flaky test will eventually fail and give you a chance to debug. Here's how to use it:} \par
{\i \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=1000}    \cell }{Repeat foo_test 1000 times and don't stop at failures.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=-1}    \cell }{A negative count means repeating forever.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=1000 --gtest_break_on_failure}    \cell }{Repeat foo_test 1000 times, stopping at the first failure. This is especially useful when running under a debugger: when the testfails, it will drop into the debugger and you can then inspect variables and stacks.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=1000 --gtest_filter=FooBar}    \cell }{Repeat the tests whose name matches the filter 1000 times.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
} \par
{\i If your test program contains global set-up/tear-down code registered using {\f2 {\b AddGlobalTestEnvironment()}} , it will be repeated in each iteration as well, as the flakiness may be in it. You can also specify the repeat count by setting the {\f2 GTEST_REPEAT}  environment variable.} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Shuffling the Tests} \par}
} \par
{\i } \par
{\i You can specify the {\f2 --gtest_shuffle}  flag (or set the {\f2 GTEST_SHUFFLE}  environment variable to {\f2 1} ) to run the tests in a program in a random order. This helps to reveal bad dependencies between tests.} \par
{\i By default, Google Test uses a random seed calculated from the current time. Therefore you'll get a different order every time. The console output includes the random seed value, such that you can reproduce an order-related test failure later. To specify the random seed explicitly, use the {\f2 --gtest_random_seed=SEED}  flag (or set the {\f2 GTEST_RANDOM_SEED}  environment variable), where {\f2 SEED}  is an integer between 0 and 99999. The seed value 0 is special: it tells Google Test to do the default behavior of calculating the seed from the current time.} \par
{\i If you combine this with {\f2 --gtest_repeat=N} , Google Test will pick a different random seed and re-shuffle the tests in each iteration.} \par
{\i {\i Availability:}  Linux, Windows, Mac; since v1.4.0.} \par
{\i {\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Controlling Test Output} \par}
} \par
{\i } \par
{\i This section teaches how to tweak the way test results are reported.} \par
{\i {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Colored Terminal Output} \par}
} \par
{\i } \par
{\i Google Test can use colors in its terminal output to make it easier to spot the separation between tests, and whether tests passed.} \par
{\i You can set the GTEST_COLOR environment variable or set the {\f2 --gtest_color}  command line flag to {\f2 yes} , {\f2 no} , or {\f2 auto}  (the default) to enable colors, disable colors, or let Google Test decide. When the value is {\f2 auto} , Google Test will use colors if and only if the output goes to a terminal and (on non-Windows platforms) the {\f2 TERM}  environment variable is set to {\f2 xterm}  or {\f2 xterm-color} .} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Suppressing the Elapsed Time} \par}
} \par
{\i } \par
{\i By default, Google Test prints the time it takes to run each test. To suppress that, run the test program with the {\f2 --gtest_print_time=0}  command line flag. Setting the {\f2 GTEST_PRINT_TIME}  environment variable to {\f2 0}  has the same effect.} \par
{\i {\i Availability:}  Linux, Windows, Mac. (In Google Test 1.3.0 and lower, the default behavior is that the elapsed time is {\b not}  printed.)} \par
{\i {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Generating an XML Report} \par}
} \par
{\i } \par
{\i Google Test can emit a detailed XML report to a file in addition to its normal textual output. The report contains the duration of each test, and thus can help you identify slow tests.} \par
{\i To generate the XML report, set the {\f2 GTEST_OUTPUT}  environment variable or the {\f2 --gtest_output}  flag to the string {\f2 "xml:_path_to_output_file_"} , which will create the file at the given location. You can also just use the string {\f2 "xml"} , in which case the output can be found in the {\f2 test_detail.xml}  file in the current directory.} \par
{\i If you specify a directory (for example, {\f2 "xml:output/directory/"}  on Linux or {\f2 "xml:output\\directory\\"}  on Windows), Google Test will create the XML file in that directory, named after the test executable (e.g. {\f2 foo_test.xml}  for test program {\f2 foo_test}  or {\f2 foo_test.exe} ). If the file already exists (perhaps left over from a previous run), Google Test will pick a different name (e.g. {\f2 foo_test_1.xml} ) to avoid overwriting it.} \par
{\i The report uses the format described here. It is based on the {\f2 junitreport}  Ant task and can be parsed by popular continuous build systems like {\f2 Hudson}. Since that format was originally intended for Java, a little interpretation is required to make it apply to Google Test tests, as shown here:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid <testsuites name="AllTests" ...>\par
  <testsuite name="test_case_name" ...>\par
    <testcase name="test_name" ...>\par
      <failure message="..."/>\par
      <failure message="..."/>\par
      <failure message="..."/>\par
    </testcase>\par
  </testsuite>\par
</testsuites>\par
}
} \par
{\i {
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The root {\f2 <testsuites>}  element corresponds to the entire test program.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 <testsuite>}  elements correspond to Google Test test cases.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 <testcase>}  elements correspond to Google Test test functions.\par}
\par
} \par
{\i For instance, the following program} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MathTest, Addition) \{ ... \}\par
TEST(MathTest, Subtraction) \{ ... \}\par
TEST(LogicTest, NonContradiction) \{ ... \}\par
}
} \par
{\i could generate this report:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid <?xml version="1.0" encoding="UTF-8"?>\par
<testsuites tests="3" failures="1" errors="0" time="35" name="AllTests">\par
  <testsuite name="MathTest" tests="2" failures="1"* errors="0" time="15">\par
    <testcase name="Addition" status="run" time="7" classname="">\par
      <failure message="Value of: add(1, 1)&#x0A; Actual: 3&#x0A;Expected: 2" type=""/>\par
      <failure message="Value of: add(1, -1)&#x0A; Actual: 1&#x0A;Expected: 0" type=""/>\par
    </testcase>\par
    <testcase name="Subtraction" status="run" time="5" classname="">\par
    </testcase>\par
  </testsuite>\par
  <testsuite name="LogicTest" tests="1" failures="0" errors="0" time="5">\par
    <testcase name="NonContradiction" status="run" time="5" classname="">\par
    </testcase>\par
  </testsuite>\par
</testsuites>\par
}
} \par
{\i Things to note:} \par
{\i {
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The {\f2 tests}  attribute of a {\f2 <testsuites>}  or {\f2 <testsuite>}  element tells how many test functions the Google Test program or test case contains, while the {\f2 failures}  attribute tells how many of them failed.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The {\f2 time}  attribute expresses the duration of the test, test case, or entire test program in milliseconds.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Each {\f2 <failure>}  element corresponds to a single failed Google Test assertion.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Some JUnit concepts don't apply to Google Test, yet we have to conform to the DTD. Therefore you'll see some dummy elements and attributes in the report. You can safely ignore these parts.\par}
\par
} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Controlling How Failures Are Reported} \par}
} \par
{\i } \par
{\i {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Turning Assertion Failures into Break-Points} \par}
} \par
{\i } \par
{\i When running test programs under a debugger, it's very convenient if the debugger can catch an assertion failure and automatically drop into interactive mode. Google Test's {\i break-on-failure}  mode supports this behavior.} \par
{\i To enable it, set the {\f2 GTEST_BREAK_ON_FAILURE}  environment variable to a value other than {\f2 0}  . Alternatively, you can use the {\f2 --gtest_break_on_failure}  command line flag.} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Suppressing Pop-ups Caused by Exceptions} \par}
} \par
{\i } \par
{\i On Windows, Google Test may be used with exceptions enabled. Even when exceptions are disabled, an application can still throw structured exceptions (SEH's). If a test throws an exception, by default Google Test doesn't try to catch it. Instead, you'll see a pop-up dialog, at which point you can attach the process to a debugger and easily find out what went wrong.} \par
{\i However, if you don't want to see the pop-ups (for example, if you run the tests in a batch job), set the {\f2 GTEST_CATCH_EXCEPTIONS}  environment variable to a non- {\f2 0}  value, or use the {\f2 --gtest_catch_exceptions}  flag. Google Test now catches all test-thrown exceptions and logs them as failures.} \par
{\i {\i Availability:}  Windows. {\f2 GTEST_CATCH_EXCEPTIONS}  and {\f2 --gtest_catch_exceptions}  have no effect on Google Test's behavior on Linux or Mac, even if exceptions are enabled. It is possible to add support for catching exceptions on these platforms, but it is not implemented yet.} \par
{\i {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Letting Another Testing Framework Drive} \par}
} \par
{\i } \par
{\i If you work on a project that has already been using another testing framework and is not ready to completely switch to Google Test yet, you can get much of Google Test's benefit by using its assertions in your existing tests. Just change your {\f2 {\b main()}}  function to look like:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <gtest/gtest.h>\par
\par
int main(int argc, char** argv) \{\par
  ::testing::GTEST_FLAG(throw_on_failure) = true;\par
  // Important: Google Test must be initialized.\par
  ::testing::InitGoogleTest(&argc, argv);\par
\par
  ... whatever your existing testing framework requires ...\par
\}\par
}
} \par
{\i With that, you can use Google Test assertions in addition to the native assertions your testing framework provides, for example:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void TestFooDoesBar() \{\par
  Foo foo;\par
  EXPECT_LE(foo.Bar(1), 100);     // A Google Test assertion.\par
  CPPUNIT_ASSERT(foo.IsEmpty());  // A native assertion.\par
\}\par
}
} \par
{\i If a Google Test assertion fails, it will print an error message and throw an exception, which will be treated as a failure by your host testing framework. If you compile your code with exceptions disabled, a failed Google Test assertion will instead exit your program with a non-zero code, which will also signal a test failure to your test runner.} \par
{\i If you don't write {\f2 ::testing::GTEST_FLAG(throw_on_failure) = true;}  in your {\f2 {\b main()}} , you can alternatively enable this feature by specifying the {\f2 --gtest_throw_on_failure}  flag on the command-line or setting the {\f2 GTEST_THROW_ON_FAILURE}  environment variable to a non-zero value.} \par
{\i {\i Availability:}  Linux, Windows, Mac; since v1.3.0.} \par
{\i {\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid {\tc\tcl2 Distributing Test Functions to Multiple Machines} \par}
} \par
{\i } \par
{\i If you have more than one machine you can use to run a test program, you might want to run the test functions in parallel and get the result faster. We call this technique {\i sharding} , where each machine is called a {\i shard} .} \par
{\i Google Test is compatible with test sharding. To take advantage of this feature, your test runner (not part of Google Test) needs to do the following:} \par
{\i {
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Allocate a number of machines (shards) to run the tests.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab On each shard, set the {\f2 GTEST_TOTAL_SHARDS}  environment variable to the total number of shards. It must be the same for all shards.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab On each shard, set the {\f2 GTEST_SHARD_INDEX}  environment variable to the index of the shard. Different shards must be assigned different indices, which must be in the range {\f2 [0, GTEST_TOTAL_SHARDS - 1]} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Run the same test program on all shards. When Google Test sees the above two environment variables, it will select a subset of the test functions to run. Across all shards, each test function in the program will be run exactly once.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Wait for all shards to finish, then collect and report the results.\par}
\par
} \par
{\i Your project may have tests that were written without Google Test and thus don't understand this protocol. In order for your test runner to figure out which test supports sharding, it can set the environment variable {\f2 GTEST_SHARD_STATUS_FILE}  to a non-existent file path. If a test program supports sharding, it will create this file to acknowledge the fact (the actual contents of the file are not important at this time; although we may stick some useful information in it in the future.); otherwise it will not create it.} \par
{\i Here's an example to make it clear. Suppose you have a test program {\f2 foo_test}  that contains the following 5 test functions: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(A, V)\par
TEST(A, W)\par
TEST(B, X)\par
TEST(B, Y)\par
TEST(B, Z)\par
}
 and you have 3 machines at your disposal. To run the test functions in parallel, you would set {\f2 GTEST_TOTAL_SHARDS}  to 3 on all machines, and set {\f2 GTEST_SHARD_INDEX}  to 0, 1, and 2 on the machines respectively. Then you would run the same {\f2 foo_test}  on each machine.} \par
{\i Google Test reserves the right to change how the work is distributed across the shards, but here's one possible scenario:} \par
{\i {
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #0 runs {\f2 A.V}  and {\f2 B.X} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #1 runs {\f2 A.W}  and {\f2 B.Y} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #2 runs {\f2 B.Z} .\par}
\par
} \par
{\i {\i Availability:}  Linux, Windows, Mac; since version 1.3.0.} \par
{\i {\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid {\tc\tcl1 Fusing Google Test Source Files} \par}
} \par
{\i } \par
{\i Google Test's implementation consists of ~30 files (excluding its own tests). Sometimes you may want them to be packaged up in two files (a {\f2 .h}  and a {\f2 .cc} ) instead, such that you can easily copy them to a new machine and Start hacking there. For this we provide an experimental Python script {\f2 {\b fuse_gtest_files.py}}  in the {\f2 scripts/}  directory (since release 1.3.0). Assuming you have Python 2.4 or above installed on your machine, just go to that directory and run {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid python fuse_gtest_files.py OUTPUT_DIR\par
}
} \par
{\i and you should see an {\f2 OUTPUT_DIR}  directory being created with files {\f2 {\b gtest/gtest.h}}  and {\f2 gtest/gtest-all.cc}  in it. These files contain everything you need to use Google Test. Just copy them to anywhere you want and you are ready to write tests. You can use the {\f2 scrpts/test/Makefile} file as an example on how to compile your tests against them.} \par
{\i {\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid {\tc\tcl1 Where to Go from Here} \par}
} \par
{\i } \par
{\i Congratulations! You've now learned more advanced Google Test tools and are ready to tackle more complex testing tasks. If you want to dive even deeper, you can read the {\b FAQ}. } \par
}}
}