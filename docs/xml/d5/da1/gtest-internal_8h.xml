<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d5/da1/gtest-internal_8h" kind="file" language="C++">
    <compoundname>gtest-internal.h</compoundname>
    <includes refid="d3/dc9/gtest-port_8h" local="yes">gtest/internal/gtest-port.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">float.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">limits</includes>
    <includes local="no">map</includes>
    <includes local="no">set</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes refid="d6/da4/gtest-message_8h" local="yes">gtest/gtest-message.h</includes>
    <includes refid="d0/d45/gtest-string_8h" local="yes">gtest/internal/gtest-string.h</includes>
    <includes refid="dc/d79/gtest-filepath_8h" local="yes">gtest/internal/gtest-filepath.h</includes>
    <includes refid="d9/d97/gtest-type-util_8h" local="yes">gtest/internal/gtest-type-util.h</includes>
    <includedby refid="df/d09/gtest-port_8cc" local="yes">lib/googletest/src/gtest-port.cc</includedby>
    <includedby refid="d0/d31/gtest-param-test_8h" local="yes">lib/googletest/include/gtest/gtest-param-test.h</includedby>
    <includedby refid="d0/d6d/gtest-printers_8h" local="yes">lib/googletest/include/gtest/gtest-printers.h</includedby>
    <includedby refid="d1/d01/gtest-test-part_8h" local="yes">lib/googletest/include/gtest/gtest-test-part.h</includedby>
    <includedby refid="d0/d1a/gtest-death-test-internal_8h" local="yes">lib/googletest/include/gtest/internal/gtest-death-test-internal.h</includedby>
    <includedby refid="d8/d73/gtest_8h" local="yes">lib/googletest/include/gtest/gtest.h</includedby>
    <includedby refid="dc/df2/gtest-param-util_8h" local="yes">lib/googletest/include/gtest/internal/gtest-param-util.h</includedby>
    <incdepgraph>
      <node id="9">
        <label>sys/stat.h</label>
      </node>
      <node id="21">
        <label>typeinfo</label>
        <link refid="cpp/header/typeinfo" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="23">
        <label>float.h</label>
      </node>
      <node id="16">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="d6/d76/gtest-port-arch_8h"/>
      </node>
      <node id="30">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="dc/d79/gtest-filepath_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="24">
        <label>iomanip</label>
        <link refid="cpp/header/iomanip" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="27">
        <label>set</label>
        <link refid="cpp/header/set" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="29">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="d0/d45/gtest-string_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lib/googletest/include/gtest/internal/gtest-internal.h</label>
        <link refid="d5/da1/gtest-internal_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>algorithm</label>
        <link refid="cpp/header/algorithm" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="22">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="d1/d63/gtest-tuple_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="31">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="d9/d97/gtest-type-util_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>vector</label>
        <link refid="cpp/header/vector" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="8">
        <label>sys/types.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="2">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="d3/dc9/gtest-port_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>unistd.h</label>
      </node>
      <node id="25">
        <label>limits</label>
        <link refid="cpp/header/limits" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="14">
        <label>utility</label>
        <link refid="cpp/header/utility" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="13">
        <label>string</label>
        <link refid="cpp/header/string" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="28">
        <label>gtest/gtest-message.h</label>
        <link refid="d6/da4/gtest-message_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>strings.h</label>
      </node>
      <node id="3">
        <label>ctype.h</label>
      </node>
      <node id="11">
        <label>iostream</label>
        <link refid="cpp/header/iostream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="12">
        <label>sstream</label>
        <link refid="cpp/header/sstream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="20">
        <label>regex.h</label>
      </node>
      <node id="17">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="d5/d66/custom_2gtest-port_8h"/>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
      <node id="26">
        <label>map</label>
        <link refid="cpp/header/map" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="16">
        <label>lib/googletest/include/gtest/internal/gtest-param-util.h</label>
        <link refid="dc/df2/gtest-param-util_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>lib/googletest/include/gtest/gtest.h</label>
        <link refid="d8/d73/gtest_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>lib/googletest/src/gtest-internal-inl.h</label>
        <link refid="d0/da1/gtest-internal-inl_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>lib/googletest/include/gtest/internal/gtest-param-util-generated.h</label>
        <link refid="dc/db7/gtest-param-util-generated_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lib/googletest/include/gtest/internal/gtest-internal.h</label>
        <link refid="d5/da1/gtest-internal_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>lib/googletest/include/gtest/gtest-death-test.h</label>
        <link refid="d4/d59/gtest-death-test_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>lib/googletest/src/gtest-printers.cc</label>
        <link refid="db/d74/gtest-printers_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>lib/googletest/src/gtest-all.cc</label>
        <link refid="d1/d8c/gtest-all_8cc"/>
      </node>
      <node id="8">
        <label>lib/googletest/src/gtest-death-test.cc</label>
        <link refid="de/d50/gtest-death-test_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>lib/googletest/src/gtest_main.cc</label>
        <link refid="d3/d3a/gtest__main_8cc"/>
      </node>
      <node id="10">
        <label>lib/googletest/src/gtest.cc</label>
        <link refid="df/d5b/gtest_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>lib/googletest/src/gtest-typed-test.cc</label>
        <link refid="d9/d5a/gtest-typed-test_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>lib/googletest/src/gtest-test-part.cc</label>
        <link refid="d3/dc2/gtest-test-part_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>lib/googletest/src/gtest-port.cc</label>
        <link refid="df/d09/gtest-port_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>lib/googletest/include/gtest/internal/gtest-death-test-internal.h</label>
        <link refid="d0/d1a/gtest-death-test-internal_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>lib/googletest/include/gtest/gtest-spi.h</label>
        <link refid="dc/dbe/gtest-spi_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>queue_linked_list/tests/queue_linked_list_unit_test.cc</label>
        <link refid="d9/df4/queue__linked__list__unit__test_8cc"/>
      </node>
      <node id="18">
        <label>lib/googletest/include/gtest/gtest-test-part.h</label>
        <link refid="d1/d01/gtest-test-part_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>lib/googletest/include/gtest/gtest-param-test.h</label>
        <link refid="d0/d31/gtest-param-test_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>lib/googletest/include/gtest/gtest-printers.h</label>
        <link refid="d0/d6d/gtest-printers_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="d3/d87/classtesting_1_1internal_1_1_native_array" prot="public">testing::internal::NativeArray</innerclass>
    <innerclass refid="dc/d60/structtesting_1_1internal_1_1_relation_to_source_copy" prot="public">testing::internal::RelationToSourceCopy</innerclass>
    <innernamespace refid="de/d03/namespaceproto2">proto2</innernamespace>
    <innernamespace refid="d0/d75/namespacetesting">testing</innernamespace>
    <innernamespace refid="d0/da7/namespacetesting_1_1internal">testing::internal</innernamespace>
    <innernamespace refid="de/dce/namespacetesting_1_1internal_1_1edit__distance">testing::internal::edit_distance</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1ab389953fc1f7e4efae30d182a0e0a13b" prot="public" static="no">
        <name>GTEST_ADD_REFERENCE_</name>
        <param><defname>T</defname></param>
        <initializer>    typename ::<ref refid="d4/dde/structtesting_1_1internal_1_1_add_reference" kindref="compound">testing::internal::AddReference</ref>&lt;T&gt;::type</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="836" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1ae3c336cbe1ae2bd1b1d019333e4428a0" prot="public" static="no">
        <name>GTEST_CONCAT_TOKEN_</name>
        <param><defname>foo</defname></param>
        <param><defname>bar</defname></param>
        <initializer><ref refid="d5/da1/gtest-internal_8h_1aa39fb5346d3573feebe4257cb3a01fde" kindref="member">GTEST_CONCAT_TOKEN_IMPL_</ref>(foo, bar)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="76" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1aa39fb5346d3573feebe4257cb3a01fde" prot="public" static="no">
        <name>GTEST_CONCAT_TOKEN_IMPL_</name>
        <param><defname>foo</defname></param>
        <param><defname>bar</defname></param>
        <initializer>foo ## bar</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="77" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1a0f9a4c3ea82cc7bf4478eaffdc168358" prot="public" static="no">
        <name>GTEST_FATAL_FAILURE_</name>
        <param><defname>message</defname></param>
        <initializer>  return <ref refid="d5/da1/gtest-internal_8h_1a94c73d5368ec946bc354d0992ad00810" kindref="member">GTEST_MESSAGE_</ref>(message, ::<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7afff22986360310b0356db600c8c2187d" kindref="member">testing::TestPartResult::kFatalFailure</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="1109" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="1109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1ae5dd8e23090e08856613878fa1ff6fca" prot="public" static="no">
        <name>GTEST_IS_NULL_LITERAL_</name>
        <param><defname>x</defname></param>
        <initializer>    (sizeof(::<ref refid="d0/da7/namespacetesting_1_1internal_1afb0731ba39ffef1fa1730ac0699c9025" kindref="member">testing::internal::IsNullLiteralHelper</ref>(x)) == 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="132" column="11" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1a94c73d5368ec946bc354d0992ad00810" prot="public" static="no">
        <name>GTEST_MESSAGE_</name>
        <param><defname>message</defname></param>
        <param><defname>result_type</defname></param>
        <initializer>  <ref refid="d5/da1/gtest-internal_8h_1a8d70025c45a47a493780746dfd66d565" kindref="member">GTEST_MESSAGE_AT_</ref>(__FILE__, __LINE__, message, result_type)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="1106" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="1106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1a8d70025c45a47a493780746dfd66d565" prot="public" static="no">
        <name>GTEST_MESSAGE_AT_</name>
        <param><defname>file</defname></param>
        <param><defname>line</defname></param>
        <param><defname>message</defname></param>
        <param><defname>result_type</defname></param>
        <initializer>  ::<ref refid="dc/dae/classtesting_1_1internal_1_1_assert_helper" kindref="compound">testing::internal::AssertHelper</ref>(result_type, file, line, message) \
    = ::<ref refid="d2/da9/classtesting_1_1_message" kindref="compound">testing::Message</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="1102" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="1102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1a6cb7482cfa03661a91c698eb5895f642" prot="public" static="no">
        <name>GTEST_NONFATAL_FAILURE_</name>
        <param><defname>message</defname></param>
        <initializer>  <ref refid="d5/da1/gtest-internal_8h_1a94c73d5368ec946bc354d0992ad00810" kindref="member">GTEST_MESSAGE_</ref>(message, ::<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7ae354b0d94856044d54b2066ebb74635c" kindref="member">testing::TestPartResult::kNonFatalFailure</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="1112" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="1112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1a9f91fcd24cae0b48fdaeb19102dac525" prot="public" static="no">
        <name>GTEST_REFERENCE_TO_CONST_</name>
        <param><defname>T</defname></param>
        <initializer>    <ref refid="d5/da1/gtest-internal_8h_1ab389953fc1f7e4efae30d182a0e0a13b" kindref="member">GTEST_ADD_REFERENCE_</ref>(const <ref refid="d5/da1/gtest-internal_8h_1a84c72f25a6a6600e3ff8381ca6982ae9" kindref="member">GTEST_REMOVE_REFERENCE_</ref>(T))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="848" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="848" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1a2ffec8c60510eb130af387f5ce9a756a" prot="public" static="no">
        <name>GTEST_REMOVE_CONST_</name>
        <param><defname>T</defname></param>
        <initializer>    typename ::<ref refid="d1/d31/structtesting_1_1internal_1_1_remove_const" kindref="compound">testing::internal::RemoveConst</ref>&lt;T&gt;::type</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="819" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="819" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1a84c72f25a6a6600e3ff8381ca6982ae9" prot="public" static="no">
        <name>GTEST_REMOVE_REFERENCE_</name>
        <param><defname>T</defname></param>
        <initializer>    typename ::<ref refid="db/d62/structtesting_1_1internal_1_1_remove_reference" kindref="compound">testing::internal::RemoveReference</ref>&lt;T&gt;::type</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="788" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1a874567b176266188fabfffb8393267ce" prot="public" static="no">
        <name>GTEST_REMOVE_REFERENCE_AND_CONST_</name>
        <param><defname>T</defname></param>
        <initializer>    <ref refid="d5/da1/gtest-internal_8h_1a2ffec8c60510eb130af387f5ce9a756a" kindref="member">GTEST_REMOVE_CONST_</ref>(<ref refid="d5/da1/gtest-internal_8h_1a84c72f25a6a6600e3ff8381ca6982ae9" kindref="member">GTEST_REMOVE_REFERENCE_</ref>(T))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="823" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="823" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1abe012b550eb3807e8c49f7e161bd1567" prot="public" static="no">
        <name>GTEST_SUCCESS_</name>
        <param><defname>message</defname></param>
        <initializer>  <ref refid="d5/da1/gtest-internal_8h_1a94c73d5368ec946bc354d0992ad00810" kindref="member">GTEST_MESSAGE_</ref>(message, ::<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7af0536797208144380691e2b376ffc1d1" kindref="member">testing::TestPartResult::kSuccess</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="1115" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="1115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1a2e66f7dfc5cb87e0fa0289f653173c69" prot="public" static="no">
        <name>GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_</name>
        <param><defname>statement</defname></param>
        <initializer>  if (::<ref refid="d0/da7/namespacetesting_1_1internal_1af72a7a7eee6997f4ed9e18d9620a7b87" kindref="member">testing::internal::AlwaysTrue</ref>()) { statement; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="1121" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="1121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1ae2d26f0f92fbaf62bf4c1eca45bb2f1f" prot="public" static="no">
        <name>GTEST_TEST_</name>
        <param><defname>test_case_name</defname></param>
        <param><defname>test_name</defname></param>
        <param><defname>parent_class</defname></param>
        <param><defname>parent_id</defname></param>
        <initializer>class <ref refid="d5/da1/gtest-internal_8h_1a87a1ee3a3b9b798195236d053f2e5dcc" kindref="member">GTEST_TEST_CLASS_NAME_</ref>(test_case_name, test_name) : public parent_class {\
 public:\
  <ref refid="d5/da1/gtest-internal_8h_1a87a1ee3a3b9b798195236d053f2e5dcc" kindref="member">GTEST_TEST_CLASS_NAME_</ref>(test_case_name, test_name)() {}\
 private:\
  virtual void TestBody();\
  static ::<ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">testing::TestInfo</ref>* const test_info_ <ref refid="d3/dc9/gtest-port_8h_1acdd47601a9376161c349a5881ccc6918" kindref="member">GTEST_ATTRIBUTE_UNUSED_</ref>;\
  <ref refid="d3/dc9/gtest-port_8h_1aed8c1888c32b588b0681e88b95031e29" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(\
      <ref refid="d5/da1/gtest-internal_8h_1a87a1ee3a3b9b798195236d053f2e5dcc" kindref="member">GTEST_TEST_CLASS_NAME_</ref>(test_case_name, test_name));\
};\
\
::<ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">testing::TestInfo</ref>* const <ref refid="d5/da1/gtest-internal_8h_1a87a1ee3a3b9b798195236d053f2e5dcc" kindref="member">GTEST_TEST_CLASS_NAME_</ref>(test_case_name, test_name)\
  ::test_info_ =\
    ::<ref refid="d0/da7/namespacetesting_1_1internal_1a616199437436015fde76f09d80c6d5e7" kindref="member">testing::internal::MakeAndRegisterTestInfo</ref>(\
        #test_case_name, #test_name, NULL, NULL, \
        ::<ref refid="d7/d69/structtesting_1_1internal_1_1_code_location" kindref="compound">testing::internal::CodeLocation</ref>(__FILE__, __LINE__), \
        (parent_id), \
        parent_class::SetUpTestCase, \
        parent_class::TearDownTestCase, \
        new ::<ref refid="df/d14/classtesting_1_1internal_1_1_test_factory_impl" kindref="compound">testing::internal::TestFactoryImpl</ref>&lt;\
            <ref refid="d5/da1/gtest-internal_8h_1a87a1ee3a3b9b798195236d053f2e5dcc" kindref="member">GTEST_TEST_CLASS_NAME_</ref>(test_case_name, test_name)&gt;);\
void <ref refid="d5/da1/gtest-internal_8h_1a87a1ee3a3b9b798195236d053f2e5dcc" kindref="member">GTEST_TEST_CLASS_NAME_</ref>(test_case_name, test_name)::TestBody()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="1214" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="1214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1af48bbd26d54d4afc5e4cef39b1c76ba3" prot="public" static="no">
        <name>GTEST_TEST_ANY_THROW_</name>
        <param><defname>statement</defname></param>
        <param><defname>fail</defname></param>
        <initializer>  <ref refid="d3/dc9/gtest-port_8h_1a00b3684a621ce1422b55a0e7e8a6aecb" kindref="member">GTEST_AMBIGUOUS_ELSE_BLOCKER_</ref> \
  if (::<ref refid="d0/da7/namespacetesting_1_1internal_1af72a7a7eee6997f4ed9e18d9620a7b87" kindref="member">testing::internal::AlwaysTrue</ref>()) { \
    bool gtest_caught_any = false; \
    try { \
      <ref refid="d5/da1/gtest-internal_8h_1a2e66f7dfc5cb87e0fa0289f653173c69" kindref="member">GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_</ref>(statement); \
    } \
    catch (...) { \
      gtest_caught_any = true; \
    } \
    if (!gtest_caught_any) { \
      goto <ref refid="d5/da1/gtest-internal_8h_1ae3c336cbe1ae2bd1b1d019333e4428a0" kindref="member">GTEST_CONCAT_TOKEN_</ref>(gtest_label_testanythrow_, __LINE__); \
    } \
  } else \
    <ref refid="d5/da1/gtest-internal_8h_1ae3c336cbe1ae2bd1b1d019333e4428a0" kindref="member">GTEST_CONCAT_TOKEN_</ref>(gtest_label_testanythrow_, __LINE__): \
      fail(&quot;Expected: &quot; #statement &quot; throws an exception.\n&quot; \
           &quot;  Actual: it doesn&apos;t.&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="1164" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="1164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1ae8912365e1d00a7a2bd248268c64aa1a" prot="public" static="no">
        <name>GTEST_TEST_BOOLEAN_</name>
        <param><defname>expression</defname></param>
        <param><defname>text</defname></param>
        <param><defname>actual</defname></param>
        <param><defname>expected</defname></param>
        <param><defname>fail</defname></param>
        <initializer>  <ref refid="d3/dc9/gtest-port_8h_1a00b3684a621ce1422b55a0e7e8a6aecb" kindref="member">GTEST_AMBIGUOUS_ELSE_BLOCKER_</ref> \
  if (const ::<ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">testing::AssertionResult</ref> gtest_ar_ = \
      ::<ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">testing::AssertionResult</ref>(expression)) \
    ; \
  else \
    fail(::<ref refid="d0/da7/namespacetesting_1_1internal_1ae1695f7d1559c009775af3911bd8370b" kindref="member">testing::internal::GetBoolAssertionFailureMessage</ref>(\
        gtest_ar_, text, #actual, #expected).c_str())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="1186" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="1186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1a87a1ee3a3b9b798195236d053f2e5dcc" prot="public" static="no">
        <name>GTEST_TEST_CLASS_NAME_</name>
        <param><defname>test_case_name</defname></param>
        <param><defname>test_name</defname></param>
        <initializer>  test_case_name##_##test_name##_Test</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="1210" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="1210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1a1b37a3c446836d33040f3266a6236081" prot="public" static="no">
        <name>GTEST_TEST_NO_FATAL_FAILURE_</name>
        <param><defname>statement</defname></param>
        <param><defname>fail</defname></param>
        <initializer>  <ref refid="d3/dc9/gtest-port_8h_1a00b3684a621ce1422b55a0e7e8a6aecb" kindref="member">GTEST_AMBIGUOUS_ELSE_BLOCKER_</ref> \
  if (::<ref refid="d0/da7/namespacetesting_1_1internal_1af72a7a7eee6997f4ed9e18d9620a7b87" kindref="member">testing::internal::AlwaysTrue</ref>()) { \
    ::<ref refid="d7/d43/classtesting_1_1internal_1_1_has_new_fatal_failure_helper" kindref="compound">testing::internal::HasNewFatalFailureHelper</ref> gtest_fatal_failure_checker; \
    <ref refid="d5/da1/gtest-internal_8h_1a2e66f7dfc5cb87e0fa0289f653173c69" kindref="member">GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_</ref>(statement); \
    if (gtest_fatal_failure_checker.has_new_fatal_failure()) { \
      goto <ref refid="d5/da1/gtest-internal_8h_1ae3c336cbe1ae2bd1b1d019333e4428a0" kindref="member">GTEST_CONCAT_TOKEN_</ref>(gtest_label_testnofatal_, __LINE__); \
    } \
  } else \
    <ref refid="d5/da1/gtest-internal_8h_1ae3c336cbe1ae2bd1b1d019333e4428a0" kindref="member">GTEST_CONCAT_TOKEN_</ref>(gtest_label_testnofatal_, __LINE__): \
      fail(&quot;Expected: &quot; #statement &quot; doesn&apos;t generate new fatal &quot; \
           &quot;failures in the current thread.\n&quot; \
           &quot;  Actual: it does.&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="1195" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="1195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1a9a109d026b5a904646437d7570e13581" prot="public" static="no">
        <name>GTEST_TEST_NO_THROW_</name>
        <param><defname>statement</defname></param>
        <param><defname>fail</defname></param>
        <initializer>  <ref refid="d3/dc9/gtest-port_8h_1a00b3684a621ce1422b55a0e7e8a6aecb" kindref="member">GTEST_AMBIGUOUS_ELSE_BLOCKER_</ref> \
  if (::<ref refid="d0/da7/namespacetesting_1_1internal_1af72a7a7eee6997f4ed9e18d9620a7b87" kindref="member">testing::internal::AlwaysTrue</ref>()) { \
    try { \
      <ref refid="d5/da1/gtest-internal_8h_1a2e66f7dfc5cb87e0fa0289f653173c69" kindref="member">GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_</ref>(statement); \
    } \
    catch (...) { \
      goto <ref refid="d5/da1/gtest-internal_8h_1ae3c336cbe1ae2bd1b1d019333e4428a0" kindref="member">GTEST_CONCAT_TOKEN_</ref>(gtest_label_testnothrow_, __LINE__); \
    } \
  } else \
    <ref refid="d5/da1/gtest-internal_8h_1ae3c336cbe1ae2bd1b1d019333e4428a0" kindref="member">GTEST_CONCAT_TOKEN_</ref>(gtest_label_testnothrow_, __LINE__): \
      fail(&quot;Expected: &quot; #statement &quot; doesn&apos;t throw an exception.\n&quot; \
           &quot;  Actual: it throws.&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="1150" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="1150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/da1/gtest-internal_8h_1a3f71db93eaf30b0cfca9612b9ac32106" prot="public" static="no">
        <name>GTEST_TEST_THROW_</name>
        <param><defname>statement</defname></param>
        <param><defname>expected_exception</defname></param>
        <param><defname>fail</defname></param>
        <initializer>  <ref refid="d3/dc9/gtest-port_8h_1a00b3684a621ce1422b55a0e7e8a6aecb" kindref="member">GTEST_AMBIGUOUS_ELSE_BLOCKER_</ref> \
  if (::<ref refid="d6/dbb/structtesting_1_1internal_1_1_const_char_ptr" kindref="compound">testing::internal::ConstCharPtr</ref> gtest_msg = &quot;&quot;) { \
    bool gtest_caught_expected = false; \
    try { \
      <ref refid="d5/da1/gtest-internal_8h_1a2e66f7dfc5cb87e0fa0289f653173c69" kindref="member">GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_</ref>(statement); \
    } \
    catch (expected_exception const&amp;) { \
      gtest_caught_expected = true; \
    } \
    catch (...) { \
      gtest_msg.value = \
          &quot;Expected: &quot; #statement &quot; throws an exception of type &quot; \
          #expected_exception &quot;.\n  Actual: it throws a different type.&quot;; \
      goto <ref refid="d5/da1/gtest-internal_8h_1ae3c336cbe1ae2bd1b1d019333e4428a0" kindref="member">GTEST_CONCAT_TOKEN_</ref>(gtest_label_testthrow_, __LINE__); \
    } \
    if (!gtest_caught_expected) { \
      gtest_msg.value = \
          &quot;Expected: &quot; #statement &quot; throws an exception of type &quot; \
          #expected_exception &quot;.\n  Actual: it throws nothing.&quot;; \
      goto <ref refid="d5/da1/gtest-internal_8h_1ae3c336cbe1ae2bd1b1d019333e4428a0" kindref="member">GTEST_CONCAT_TOKEN_</ref>(gtest_label_testthrow_, __LINE__); \
    } \
  } else \
    <ref refid="d5/da1/gtest-internal_8h_1ae3c336cbe1ae2bd1b1d019333e4428a0" kindref="member">GTEST_CONCAT_TOKEN_</ref>(gtest_label_testthrow_, __LINE__): \
      fail(gtest_msg.value)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="1124" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="1124" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feb" prot="public" static="no" strong="no">
        <type></type>
        <name>EditType</name>
        <enumvalue id="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba01e3df29bad591c9c7e256a5090662b8" prot="public">
          <name>kMatch</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba8d20f6cca2d49a8732f535cfe28812c8" prot="public">
          <name>kAdd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba7b8140e312f42dd2073bae2374136137" prot="public">
          <name>kRemove</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba9219852c065abae302e91604e5d3594d" prot="public">
          <name>kReplace</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="180" column="1" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="180" bodyend="180"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d0/da7/namespacetesting_1_1internal_1af563307a75d69c5d5bf473780f4ca336" prot="public" static="no">
        <type>FloatingPoint&lt; double &gt;</type>
        <definition>typedef FloatingPoint&lt;double&gt; Double</definition>
        <argsstring></argsstring>
        <name>Double</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="421" column="23" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/da7/namespacetesting_1_1internal_1ac3d3419bbcf73bcb7dc93989970048cf" prot="public" static="no">
        <type>FloatingPoint&lt; float &gt;</type>
        <definition>typedef FloatingPoint&lt;float&gt; Float</definition>
        <argsstring></argsstring>
        <name>Float</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="420" column="23" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/da7/namespacetesting_1_1internal_1a352c9f642298e3ae8c7eb84e3278ba65" prot="public" static="no">
        <type>int</type>
        <definition>typedef int IsContainer</definition>
        <argsstring></argsstring>
        <name>IsContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="930" column="13" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="930" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/da7/namespacetesting_1_1internal_1a7702df52e064b640254945414578e90c" prot="public" static="no">
        <type>char</type>
        <definition>typedef char IsNotContainer</definition>
        <argsstring></argsstring>
        <name>IsNotContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="938" column="14" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="938" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/da7/namespacetesting_1_1internal_1aa56a971a29fe8459940b46db38d3000f" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* SetUpTestCaseFunc) ()</definition>
        <argsstring>)()</argsstring>
        <name>SetUpTestCaseFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="501" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="501" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/da7/namespacetesting_1_1internal_1a7b4a46c5927d126f2df2d955d98e3b8a" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* TearDownTestCaseFunc) ()</definition>
        <argsstring>)()</argsstring>
        <name>TearDownTestCaseFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="502" column="9" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/da7/namespacetesting_1_1internal_1ac535957ba2fde769ce297f9b23db057d" prot="public" static="no">
        <type>const void *</type>
        <definition>typedef const void* TypeId</definition>
        <argsstring></argsstring>
        <name>TypeId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="429" column="20" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a4b24c851ab13569b1b15b3d259b60d2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::AlwaysFalse</definition>
        <argsstring>()</argsstring>
        <name>AlwaysFalse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="736" column="13" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="736" bodyend="736"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1af72a7a7eee6997f4ed9e18d9620a7b87" compoundref="df/d5b/gtest_8cc" startline="4988" endline="4996">testing::internal::AlwaysTrue</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" compoundref="df/d5b/gtest_8cc" startline="2956" endline="3002">testing::internal::ColoredPrintf</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1af72a7a7eee6997f4ed9e18d9620a7b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>GTEST_API_ bool AlwaysTrue</definition>
        <argsstring>()</argsstring>
        <name>AlwaysTrue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="4988" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="4988" bodyend="4996" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="733" declcolumn="17"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a8ca2411dd35c0816107b93cf9ec7ebf0" compoundref="df/d5b/gtest_8cc" startline="4986" endline="4986">testing::internal::IsTrue</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a4b24c851ab13569b1b15b3d259b60d2e" compoundref="d5/da1/gtest-internal_8h" startline="736" endline="736">testing::internal::AlwaysFalse</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a8eb8eddf760375a490e007b20777ec56" compoundref="df/d5b/gtest_8cc" startline="922" endline="937">testing::internal::SplitString</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a03976378124361dddf218c46dc500e5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>GTEST_API_ std::string AppendUserMessage</definition>
        <argsstring>(const std::string &amp;gtest_msg, const Message &amp;user_msg)</argsstring>
        <name>AppendUserMessage</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>gtest_msg</declname>
        </param>
        <param>
          <type>const Message &amp;</type>
          <declname>user_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2001" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="2001" bodyend="2010" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="137" declcolumn="24"/>
        <references refid="cpp/string/basic_string/empty_1">string::empty</references>
        <references refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" compoundref="df/d5b/gtest_8cc" startline="981" endline="983">Message::GetString</references>
        <referencedby refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1aae0e935df830718fd78f39850521d967" compoundref="df/d5b/gtest_8cc" startline="373" endline="381">AssertHelper::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a94a857fe6ff32cf4fdc4769a4071f239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iter</type>
          </param>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>Iter</type>
        <definition>Iter testing::internal::ArrayAwareFind</definition>
        <argsstring>(Iter begin, Iter end, const Element &amp;elem)</argsstring>
        <name>ArrayAwareFind</name>
        <param>
          <type>Iter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Iter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const Element &amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="983" column="6" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="983" bodyend="989"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a4290fdb0c0d7ce6f09d11d80ebe064e3" compoundref="d5/da1/gtest-internal_8h" startline="972" endline="978">testing::internal::ArrayEq</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a49b4d0ee49c0f8c93bab29ebd20630cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::ArrayEq</definition>
        <argsstring>(const T &amp;lhs, const U &amp;rhs)</argsstring>
        <name>ArrayEq</name>
        <param>
          <type>const T &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="960" column="13" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="960" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a4290fdb0c0d7ce6f09d11d80ebe064e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool ArrayEq</definition>
        <argsstring>(const T *lhs, size_t size, const U *rhs)</argsstring>
        <name>ArrayEq</name>
        <param>
          <type>const T *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const U *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="972" column="6" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="972" bodyend="978" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="956" declcolumn="6"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a94a857fe6ff32cf4fdc4769a4071f239" compoundref="d5/da1/gtest-internal_8h" startline="983" endline="989">testing::internal::ArrayAwareFind</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a5cb6f81ee827130024261121c742b26c" compoundref="d5/da1/gtest-internal_8h" startline="964" endline="966">testing::internal::ArrayEq</referencedby>
        <referencedby refid="d3/d87/classtesting_1_1internal_1_1_native_array_1aaad419ed3b939da1279ad0b951649059" compoundref="d5/da1/gtest-internal_8h" startline="1065" endline="1068">NativeArray&lt; Element &gt;::operator==</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a5cb6f81ee827130024261121c742b26c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::ArrayEq</definition>
        <argsstring>(const T(&amp;lhs)[N], const U(&amp;rhs)[N])</argsstring>
        <name>ArrayEq</name>
        <param>
          <type>const T(&amp;)</type>
          <declname>lhs</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const U(&amp;)</type>
          <declname>rhs</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="964" column="13" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="964" bodyend="966"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a4290fdb0c0d7ce6f09d11d80ebe064e3" compoundref="d5/da1/gtest-internal_8h" startline="972" endline="978">testing::internal::ArrayEq</references>
      </memberdef>
      <memberdef kind="function" id="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a5b69c8f2b38f31e87dabf300d7e46903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; EditType &gt;</type>
        <definition>GTEST_API_ std::vector&lt; EditType &gt; CalculateOptimalEdits</definition>
        <argsstring>(const std::vector&lt; size_t &gt; &amp;left, const std::vector&lt; size_t &gt; &amp;right)</argsstring>
        <name>CalculateOptimalEdits</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; size_t &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; size_t &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1028" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="1028" bodyend="1083" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="181" declcolumn="24"/>
        <references refid="cpp/container/vector/begin_1">vector&lt; T &gt;::begin</references>
        <references refid="cpp/container/vector/end_1">vector&lt; T &gt;::end</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba8d20f6cca2d49a8732f535cfe28812c8" compoundref="d5/da1/gtest-internal_8h" startline="180">testing::internal::edit_distance::kAdd</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba01e3df29bad591c9c7e256a5090662b8" compoundref="d5/da1/gtest-internal_8h" startline="180">testing::internal::edit_distance::kMatch</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba7b8140e312f42dd2073bae2374136137" compoundref="d5/da1/gtest-internal_8h" startline="180">testing::internal::edit_distance::kRemove</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba9219852c065abae302e91604e5d3594d" compoundref="d5/da1/gtest-internal_8h" startline="180">testing::internal::edit_distance::kReplace</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a0f6d06bf8c3093b9c22bb08723db201e" compoundref="d3/dc9/gtest-port_8h" startline="1317" endline="1319">testing::internal::move</references>
        <references refid="cpp/container/vector/push_back_1">vector&lt; T &gt;::push_back</references>
        <references refid="cpp/algorithm/reverse_1">std::reverse</references>
        <references refid="cpp/container/vector/size_1">vector&lt; T &gt;::size</references>
        <referencedby refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a96065c74c4a4787a51ad9e58f13a4068" compoundref="df/d5b/gtest_8cc" startline="1104" endline="1118">testing::internal::edit_distance::CalculateOptimalEdits</referencedby>
        <referencedby refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1aef01558937d42283a238a7b55baddd11" compoundref="df/d5b/gtest_8cc" startline="1203" endline="1263">testing::internal::edit_distance::CreateUnifiedDiff</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a96065c74c4a4787a51ad9e58f13a4068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; EditType &gt;</type>
        <definition>GTEST_API_ std::vector&lt; EditType &gt; CalculateOptimalEdits</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;left, const std::vector&lt; std::string &gt; &amp;right)</argsstring>
        <name>CalculateOptimalEdits</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1104" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="1104" bodyend="1118" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="185" declcolumn="24"/>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a5b69c8f2b38f31e87dabf300d7e46903" compoundref="df/d5b/gtest_8cc" startline="1028" endline="1083">testing::internal::edit_distance::CalculateOptimalEdits</references>
        <references refid="cpp/container/vector/push_back_1">vector&lt; T &gt;::push_back</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a84d0e746ba0827cc52b53d22000de0e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::CopyArray</definition>
        <argsstring>(const T &amp;from, U *to)</argsstring>
        <name>CopyArray</name>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>U *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="1000" column="13" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="1000" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ac1dbf4f4a6f74c5943c1d4903bd48b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CopyArray</definition>
        <argsstring>(const T *from, size_t size, U *to)</argsstring>
        <name>CopyArray</name>
        <param>
          <type>const T *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>U *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="1012" column="6" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="1012" bodyend="1016" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="996" declcolumn="6"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a1e7ae855686720615dcd5754c8181c62" compoundref="d5/da1/gtest-internal_8h" startline="1004" endline="1006">testing::internal::CopyArray</referencedby>
        <referencedby refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a10aeecb1d09db4017ea1a41de5f0cd42" compoundref="d5/da1/gtest-internal_8h" startline="1077" endline="1083">NativeArray&lt; Element &gt;::InitCopy</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a1e7ae855686720615dcd5754c8181c62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::CopyArray</definition>
        <argsstring>(const T(&amp;from)[N], U(*to)[N])</argsstring>
        <name>CopyArray</name>
        <param>
          <type>const T(&amp;)</type>
          <declname>from</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>U(*)</type>
          <declname>to</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="1004" column="13" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="1004" bodyend="1006"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1ac1dbf4f4a6f74c5943c1d4903bd48b72" compoundref="d5/da1/gtest-internal_8h" startline="1012" endline="1016">testing::internal::CopyArray</references>
      </memberdef>
      <memberdef kind="function" id="de/dce/namespacetesting_1_1internal_1_1edit__distance_1aef01558937d42283a238a7b55baddd11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>GTEST_API_ std::string CreateUnifiedDiff</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;left, const std::vector&lt; std::string &gt; &amp;right, size_t context)</argsstring>
        <name>CreateUnifiedDiff</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1203" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="1203" bodyend="1263" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="190" declcolumn="24"/>
        <references refid="cpp/container/vector/begin_1">vector&lt; T &gt;::begin</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a5b69c8f2b38f31e87dabf300d7e46903" compoundref="df/d5b/gtest_8cc" startline="1028" endline="1083">testing::internal::edit_distance::CalculateOptimalEdits</references>
        <references refid="cpp/container/vector/end_1">vector&lt; T &gt;::end</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba8d20f6cca2d49a8732f535cfe28812c8" compoundref="d5/da1/gtest-internal_8h" startline="180">testing::internal::edit_distance::kAdd</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba01e3df29bad591c9c7e256a5090662b8" compoundref="d5/da1/gtest-internal_8h" startline="180">testing::internal::edit_distance::kMatch</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba7b8140e312f42dd2073bae2374136137" compoundref="d5/da1/gtest-internal_8h" startline="180">testing::internal::edit_distance::kRemove</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba9219852c065abae302e91604e5d3594d" compoundref="d5/da1/gtest-internal_8h" startline="180">testing::internal::edit_distance::kReplace</references>
        <references refid="cpp/algorithm/min_1">std::min</references>
        <references refid="cpp/container/vector/size_1">vector&lt; T &gt;::size</references>
        <references refid="cpp/io/basic_stringstream/str_1">stringstream::str</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" compoundref="df/d5b/gtest_8cc" startline="1312" endline="1343">testing::internal::EqFailure</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a513107ff8defa97d949937fc1350a56c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>GTEST_API_ std::string testing::internal::DiffStrings</definition>
        <argsstring>(const std::string &amp;left, const std::string &amp;right, size_t *total_line_count)</argsstring>
        <name>DiffStrings</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>total_line_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="200" column="24" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="200" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult EqFailure</definition>
        <argsstring>(const char *lhs_expression, const char *rhs_expression, const std::string &amp;lhs_value, const std::string &amp;rhs_value, bool ignoring_case)</argsstring>
        <name>EqFailure</name>
        <param>
          <type>const char *</type>
          <declname>lhs_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs_expression</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>lhs_value</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>rhs_value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignoring_case</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1312" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1312" bodyend="1343" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="219" declcolumn="28"/>
        <references refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" compoundref="df/d5b/gtest_8cc" startline="1015" endline="1017">testing::AssertionFailure</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1aef01558937d42283a238a7b55baddd11" compoundref="df/d5b/gtest_8cc" startline="1203" endline="1263">testing::internal::edit_distance::CreateUnifiedDiff</references>
        <references refid="cpp/string/basic_string/empty_1">string::empty</references>
        <references refid="cpp/container/vector/size_1">vector&lt; T &gt;::size</references>
        <references refid="de/daf/namespacetesting_1_1internal_1_1anonymous__namespace_02gtest_8cc_03_1a87e3d38ad422ce7018c6fcd4d1f3a938" compoundref="df/d5b/gtest_8cc" startline="1272" endline="1293">testing::internal::anonymous_namespace{gtest.cc}::SplitEscapedString</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a3c265df9280510bd1d78bfd155113393" compoundref="df/d5b/gtest_8cc" startline="1437" endline="1450">testing::internal::CmpHelperEQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a1def8ec9393360a1b34a20528703e7f7" compoundref="d8/d73/gtest_8h" startline="1375" endline="1383">testing::internal::CmpHelperEQFailure</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a98ce463e5dbe0c6120fa817e1f8f2944" compoundref="d8/d73/gtest_8h" startline="1631" endline="1654">testing::internal::CmpHelperFloatingPointEQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a72d1706a1f8e03ef759f9c80712b0072" compoundref="df/d5b/gtest_8cc" startline="1869" endline="1882">testing::internal::CmpHelperSTREQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1aace9bb29e075d3cc3c4e689de03f0e71">testing::internal::GTEST_IMPL_CMP_HELPER_</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ae1695f7d1559c009775af3911bd8370b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>GTEST_API_ std::string GetBoolAssertionFailureMessage</definition>
        <argsstring>(const AssertionResult &amp;assertion_result, const char *expression_text, const char *actual_predicate_value, const char *expected_predicate_value)</argsstring>
        <name>GetBoolAssertionFailureMessage</name>
        <param>
          <type>const AssertionResult &amp;</type>
          <declname>assertion_result</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expression_text</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>actual_predicate_value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expected_predicate_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1346" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="1346" bodyend="1359" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="226" declcolumn="24"/>
        <references refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" compoundref="df/d5b/gtest_8cc" startline="981" endline="983">Message::GetString</references>
        <references refid="d5/dec/classtesting_1_1_assertion_result_1af8f4390dff5acafd3c7e50f76c55687a" compoundref="d8/d73/gtest_8h" startline="297" endline="299">AssertionResult::message</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a1ffce3a1491bc0de802157425b30f3a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>GTEST_API_ std::string GetCurrentOsStackTraceExceptTop</definition>
        <argsstring>(UnitTest *, int skip_count)</argsstring>
        <name>GetCurrentOsStackTraceExceptTop</name>
        <param>
          <type>UnitTest *</type>
          <defname>unit_test</defname>
        </param>
        <param>
          <type>int</type>
          <declname>skip_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="4973" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="4973" bodyend="4978" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="726" declcolumn="24"/>
        <references refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a243591ed1070d5a856b4243810d85f94" compoundref="df/d5b/gtest_8cc" startline="796" endline="803">UnitTestImpl::CurrentOsStackTraceExceptTop</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" compoundref="d0/da1/gtest-internal-inl_8h" startline="927" endline="929">testing::internal::GetUnitTestImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1af4406515630591b54fcdf093991b14e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TypeId</type>
        <definition>GTEST_API_ TypeId GetTestTypeId</definition>
        <argsstring>()</argsstring>
        <name>GetTestTypeId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="620" column="8" bodyfile="lib/googletest/src/gtest.cc" bodystart="620" bodyend="622" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="460" declcolumn="19"/>
        <referencedby refid="df/d69/classtesting_1_1_test_1a33853de09fa3a19530ef4db93e81d4a9" compoundref="df/d5b/gtest_8cc" startline="2269" endline="2328">Test::HasSameFixtureClass</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a6b108e56fdc68ea937ffb3759fb55ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>TypeId</type>
        <definition>TypeId testing::internal::GetTypeId</definition>
        <argsstring>()</argsstring>
        <name>GetTypeId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="447" column="8" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="447" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1acb6ea1086293c1d6636e3c67941351fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>IsContainer</type>
        <definition>IsContainer testing::internal::IsContainerTest</definition>
        <argsstring>(int, typename C::iterator *=NULL, typename C::const_iterator *=NULL)</argsstring>
        <name>IsContainerTest</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>typename C::iterator *</type>
          <defval>NULL</defval>
        </param>
        <param>
          <type>typename C::const_iterator *</type>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="932" column="13" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="932" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1af545a2ae928b8a9e7581978234464275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>IsNotContainer</type>
        <definition>IsNotContainer testing::internal::IsContainerTest</definition>
        <argsstring>(long)</argsstring>
        <name>IsContainerTest</name>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="940" column="16" bodyfile="lib/googletest/include/gtest/internal/gtest-internal.h" bodystart="940" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ab53ecfa1632a871ce7c692d722a75a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char(&amp;</type>
        <definition>char(&amp; testing::internal::IsNullLiteralHelper</definition>
        <argsstring>(...))[2]</argsstring>
        <name>IsNullLiteralHelper</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="122" column="1" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="122" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1afb0731ba39ffef1fa1730ac0699c9025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char testing::internal::IsNullLiteralHelper</definition>
        <argsstring>(Secret *p)</argsstring>
        <name>IsNullLiteralHelper</name>
        <param>
          <type>Secret *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/internal/gtest-internal.h" line="121" column="6" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="121" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a616199437436015fde76f09d80c6d5e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TestInfo *</type>
        <definition>GTEST_API_ TestInfo * MakeAndRegisterTestInfo</definition>
        <argsstring>(const char *test_case_name, const char *name, const char *type_param, const char *value_param, CodeLocation code_location, TypeId fixture_class_id, SetUpTestCaseFunc set_up_tc, TearDownTestCaseFunc tear_down_tc, TestFactoryBase *factory)</argsstring>
        <name>MakeAndRegisterTestInfo</name>
        <param>
          <type>const char *</type>
          <declname>test_case_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type_param</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value_param</declname>
        </param>
        <param>
          <type>CodeLocation</type>
          <declname>code_location</declname>
        </param>
        <param>
          <type>TypeId</type>
          <declname>fixture_class_id</declname>
        </param>
        <param>
          <type>SetUpTestCaseFunc</type>
          <declname>set_up_tc</declname>
        </param>
        <param>
          <type>TearDownTestCaseFunc</type>
          <declname>tear_down_tc</declname>
        </param>
        <param>
          <type>TestFactoryBase *</type>
          <declname>factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2543" column="10" bodyfile="lib/googletest/src/gtest.cc" bodystart="2543" bodyend="2558" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="529" declcolumn="21"/>
        <references refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a0f73735489a968e6f6d57f791a246615" compoundref="d0/da1/gtest-internal-inl_8h" startline="645" endline="665">UnitTestImpl::AddTestInfo</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" compoundref="d0/da1/gtest-internal-inl_8h" startline="927" endline="929">testing::internal::GetUnitTestImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>::std::string testing::PrintToString</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>PrintToString</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest-printers.h" line="980" column="15" bodyfile="lib/googletest/include/gtest/gtest-printers.h" bodystart="980" bodyend="984" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="94" declcolumn="15"/>
        <references refid="d6/d8f/classtesting_1_1internal_1_1_universal_terse_printer_1ac137bd6f09f642f1cd84e6da21383ff0" compoundref="d0/d6d/gtest-printers_8h" startline="783" endline="785">UniversalTersePrinter&lt; T &gt;::Print</references>
        <references refid="cpp/io/basic_stringstream/str_1">stringstream::str</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a72d1706a1f8e03ef759f9c80712b0072" compoundref="df/d5b/gtest_8cc" startline="1869" endline="1882">testing::internal::CmpHelperSTREQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a675759a40d2867bc51981f7594f6beca" compoundref="df/d5b/gtest_8cc" startline="1885" endline="1897">testing::internal::CmpHelperSTRNE</referencedby>
        <referencedby refid="d9/d47/classtesting_1_1internal_1_1_format_for_comparison_1a71c59ddcde066d9d31b76924801f7c89" compoundref="d0/d6d/gtest-printers_8h" startline="275" endline="277">FormatForComparison&lt; ToPrint, OtherOperand &gt;::Format</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1aace9bb29e075d3cc3c4e689de03f0e71">testing::internal::GTEST_IMPL_CMP_HELPER_</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1abcf66fcfdb8c336eba8636bc8b49b4aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>GTEST_API_ bool SkipPrefix</definition>
        <argsstring>(const char *prefix, const char **pstr)</argsstring>
        <name>SkipPrefix</name>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>pstr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5001" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="5001" bodyend="5008" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="543" declcolumn="17"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a6fff795269f50673e358438721710d6f" compoundref="df/d5b/gtest_8cc" startline="5105" endline="5112">testing::internal::HasGoogleTestFlagPrefix</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2005,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Authors:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan),<sp/>eefacm@gmail.com<sp/>(Sean<sp/>Mcafee)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Google<sp/>C++<sp/>Testing<sp/>Framework<sp/>(Google<sp/>Test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>header<sp/>file<sp/>declares<sp/>functions<sp/>and<sp/>macros<sp/>used<sp/>internally<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test.<sp/><sp/>They<sp/>are<sp/>subject<sp/>to<sp/>change<sp/>without<sp/>notice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/dc9/gtest-port_8h" kindref="compound">gtest/internal/gtest-port.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/wait.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;<ref refid="cpp/header/stdexcept" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">stdexcept</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/iomanip" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">iomanip</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/limits" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">limits</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/map" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">map</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/set" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">set</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">string</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">vector</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d6/da4/gtest-message_8h" kindref="compound">gtest/gtest-message.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d0/d45/gtest-string_8h" kindref="compound">gtest/internal/gtest-string.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dc/d79/gtest-filepath_8h" kindref="compound">gtest/internal/gtest-filepath.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d9/d97/gtest-type-util_8h" kindref="compound">gtest/internal/gtest-type-util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Due<sp/>to<sp/>C++<sp/>preprocessor<sp/>weirdness,<sp/>we<sp/>need<sp/>double<sp/>indirection<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>concatenate<sp/>two<sp/>tokens<sp/>when<sp/>one<sp/>of<sp/>them<sp/>is<sp/>__LINE__.<sp/><sp/>Writing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>foo<sp/>##<sp/>__LINE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>result<sp/>in<sp/>the<sp/>token<sp/>foo__LINE__,<sp/>instead<sp/>of<sp/>foo<sp/>followed<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>current<sp/>line<sp/>number.<sp/><sp/>For<sp/>more<sp/>details,<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.parashift.com/c++-faq-lite/misc-technical-issues.html#faq-39.6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="d5/da1/gtest-internal_8h_1ae3c336cbe1ae2bd1b1d019333e4428a0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_CONCAT_TOKEN_(foo,<sp/>bar)<sp/>GTEST_CONCAT_TOKEN_IMPL_(foo,<sp/>bar)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="d5/da1/gtest-internal_8h_1aa39fb5346d3573feebe4257cb3a01fde" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_CONCAT_TOKEN_IMPL_(foo,<sp/>bar)<sp/>foo<sp/>##<sp/>bar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ProtocolMessage;</highlight></codeline>
<codeline lineno="80" refid="de/d03/namespaceproto2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="de/d03/namespaceproto2" kindref="compound">proto2</ref><sp/>{<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message;<sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d0/d75/namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declarations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AssertionResult;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Result<sp/>of<sp/>an<sp/>assertion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Represents<sp/>a<sp/>failure<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Test;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Represents<sp/>a<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestInfo;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Information<sp/>about<sp/>a<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestPartResult;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Result<sp/>of<sp/>a<sp/>test<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnitTest;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>collection<sp/>of<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::string</ref><sp/><ref refid="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" kindref="member">PrintToString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TraceInfo;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Information<sp/>about<sp/>a<sp/>trace<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ScopedTrace;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>scoped<sp/>trace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestInfoImpl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Opaque<sp/>implementation<sp/>of<sp/>TestInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnitTestImpl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Opaque<sp/>implementation<sp/>of<sp/>UnitTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>text<sp/>used<sp/>in<sp/>failure<sp/>messages<sp/>to<sp/>indicate<sp/>the<sp/>start<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stack<sp/>trace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a728a6aad655cf4704dad1a048212c570" kindref="member">kStackTraceMarker</ref>[];</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Two<sp/>overloaded<sp/>helpers<sp/>for<sp/>checking<sp/>at<sp/>compile<sp/>time<sp/>whether<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expression<sp/>is<sp/>a<sp/>null<sp/>pointer<sp/>literal<sp/>(i.e.<sp/>NULL<sp/>or<sp/>any<sp/>0-valued</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compile-time<sp/>integral<sp/>constant).<sp/><sp/>Their<sp/>return<sp/>values<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>different<sp/>sizes,<sp/>so<sp/>we<sp/>can<sp/>use<sp/>sizeof()<sp/>to<sp/>test<sp/>which<sp/>version<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>picked<sp/>by<sp/>the<sp/>compiler.<sp/><sp/>These<sp/>helpers<sp/>have<sp/>no<sp/>implementations,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>only<sp/>need<sp/>their<sp/>signatures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>IsNullLiteralHelper(x),<sp/>the<sp/>compiler<sp/>will<sp/>pick<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>version<sp/>if<sp/>x<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>Secret*,<sp/>and<sp/>pick<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>version<sp/>otherwise.<sp/><sp/>Since<sp/>Secret<sp/>is<sp/>a<sp/>secret<sp/>and<sp/>incomplete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type,<sp/>the<sp/>only<sp/>expression<sp/>a<sp/>user<sp/>can<sp/>write<sp/>that<sp/>has<sp/>type<sp/>Secret*<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>null<sp/>pointer<sp/>literal.<sp/><sp/>Therefore,<sp/>we<sp/>know<sp/>that<sp/>x<sp/>is<sp/>a<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pointer<sp/>literal<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>first<sp/>version<sp/>is<sp/>picked<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="d0/da7/namespacetesting_1_1internal_1afb0731ba39ffef1fa1730ac0699c9025" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1afb0731ba39ffef1fa1730ac0699c9025" kindref="member">IsNullLiteralHelper</ref>(Secret*<sp/>p);</highlight></codeline>
<codeline lineno="122" refid="d0/da7/namespacetesting_1_1internal_1ab53ecfa1632a871ce7c692d722a75a57" refkind="member"><highlight class="normal">char<sp/>(&amp;<ref refid="d0/da7/namespacetesting_1_1internal_1afb0731ba39ffef1fa1730ac0699c9025" kindref="member">IsNullLiteralHelper</ref>(...))[2];<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>compile-time<sp/>bool<sp/>constant<sp/>that<sp/>is<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>x<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>null<sp/>pointer<sp/>literal<sp/>(i.e.<sp/>NULL<sp/>or<sp/>any<sp/>0-valued<sp/>compile-time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>integral<sp/>constant).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_ELLIPSIS_NEEDS_POD_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>lose<sp/>support<sp/>for<sp/>NULL<sp/>detection<sp/>where<sp/>the<sp/>compiler<sp/>doesn&apos;t<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>passing<sp/>non-POD<sp/>classes<sp/>through<sp/>ellipsis<sp/>(...).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_IS_NULL_LITERAL_(x)<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="d5/da1/gtest-internal_8h_1ae5dd8e23090e08856613878fa1ff6fca" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_IS_NULL_LITERAL_(x)<sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(sizeof(::testing::internal::IsNullLiteralHelper(x))<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_ELLIPSIS_NEEDS_POD_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>the<sp/>user-supplied<sp/>message<sp/>to<sp/>the<sp/>Google-Test-generated<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a03976378124361dddf218c46dc500e5d" kindref="member">AppendUserMessage</ref>(</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>gtest_msg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Message&amp;<sp/>user_msg);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>exception<sp/>is<sp/>thrown<sp/>by<sp/>(and<sp/>only<sp/>by)<sp/>a<sp/>failed<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assertion<sp/>when<sp/>GTEST_FLAG(throw_on_failure)<sp/>is<sp/>true<sp/>(if<sp/>exceptions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>enabled).<sp/><sp/>We<sp/>derive<sp/>it<sp/>from<sp/>std::runtime_error,<sp/>which<sp/>is<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>errors<sp/>presumably<sp/>detectable<sp/>only<sp/>at<sp/>run<sp/>time.<sp/><sp/>Since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::runtime_error<sp/>inherits<sp/>from<sp/>std::exception,<sp/>many<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>frameworks<sp/>know<sp/>how<sp/>to<sp/>extract<sp/>and<sp/>print<sp/>the<sp/>message<sp/>inside<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/>GoogleTestFailureException<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="cpp/error/runtime_error" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::runtime_error</ref><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>GoogleTestFailureException(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>failure);</highlight></codeline>
<codeline lineno="151"><highlight class="normal">};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>class<sp/>for<sp/>creating<sp/>scoped<sp/>traces<sp/>in<sp/>user<sp/>programs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="d9/d53/classtesting_1_1internal_1_1_scoped_trace" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d9/d53/classtesting_1_1internal_1_1_scoped_trace" kindref="compound">ScopedTrace</ref><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>c&apos;tor<sp/>pushes<sp/>the<sp/>given<sp/>source<sp/>file<sp/>location<sp/>and<sp/>message<sp/>onto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>trace<sp/>stack<sp/>maintained<sp/>by<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><ref refid="d9/d53/classtesting_1_1internal_1_1_scoped_trace" kindref="compound">ScopedTrace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/>message);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>d&apos;tor<sp/>pops<sp/>the<sp/>info<sp/>pushed<sp/>by<sp/>the<sp/>c&apos;tor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>d&apos;tor<sp/>is<sp/>not<sp/>virtual<sp/>in<sp/>order<sp/>to<sp/>be<sp/>efficient.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>inherit<sp/>from<sp/>ScopedTrace!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>~<ref refid="d9/d53/classtesting_1_1internal_1_1_scoped_trace" kindref="compound">ScopedTrace</ref>();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="169" refid="d9/d53/classtesting_1_1internal_1_1_scoped_trace_1a184415dcd7d5e3cc336e6eda3d650732" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d9/d53/classtesting_1_1internal_1_1_scoped_trace_1a184415dcd7d5e3cc336e6eda3d650732" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="d9/d53/classtesting_1_1internal_1_1_scoped_trace" kindref="compound">ScopedTrace</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1acbdb2d49171234efd8a80e1bef0a860e" kindref="member">GTEST_ATTRIBUTE_UNUSED_</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>ScopedTrace<sp/>object<sp/>does<sp/>its<sp/>job<sp/>in<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c&apos;tor<sp/>and<sp/>d&apos;tor.<sp/><sp/>Therefore<sp/>it<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>be<sp/>used<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">edit_distance<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>optimal<sp/>edits<sp/>to<sp/>go<sp/>from<sp/>&apos;left&apos;<sp/>to<sp/>&apos;right&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>edits<sp/>cost<sp/>the<sp/>same,<sp/>with<sp/>replace<sp/>having<sp/>lower<sp/>priority<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>add/remove.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Simple<sp/>implementation<sp/>of<sp/>the<sp/>Wagner–Fischer<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>http://en.wikipedia.org/wiki/Wagner-Fischer_algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feb" kindref="member">EditType</ref><sp/>{<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba01e3df29bad591c9c7e256a5090662b8" kindref="member">kMatch</ref>,<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba8d20f6cca2d49a8732f535cfe28812c8" kindref="member">kAdd</ref>,<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba7b8140e312f42dd2073bae2374136137" kindref="member">kRemove</ref>,<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba9219852c065abae302e91604e5d3594d" kindref="member">kReplace</ref><sp/>};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;EditType&gt;</ref><sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a5b69c8f2b38f31e87dabf300d7e46903" kindref="member">CalculateOptimalEdits</ref>(</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;size_t&gt;</ref>&amp;<sp/>left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;size_t&gt;</ref>&amp;<sp/>right);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Same<sp/>as<sp/>above,<sp/>but<sp/>the<sp/>input<sp/>is<sp/>represented<sp/>as<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;EditType&gt;</ref><sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a5b69c8f2b38f31e87dabf300d7e46903" kindref="member">CalculateOptimalEdits</ref>(</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref>&amp;<sp/>left,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref>&amp;<sp/>right);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>diff<sp/>of<sp/>the<sp/>input<sp/>strings<sp/>in<sp/>Unified<sp/>diff<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1aef01558937d42283a238a7b55baddd11" kindref="member">CreateUnifiedDiff</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref>&amp;<sp/>left,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref>&amp;<sp/>right,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>context<sp/>=<sp/>2);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>edit_distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>diff<sp/>between<sp/>&apos;left&apos;<sp/>and<sp/>&apos;right&apos;<sp/>and<sp/>return<sp/>it<sp/>in<sp/>unified<sp/>diff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>not<sp/>null,<sp/>stores<sp/>in<sp/>&apos;total_line_count&apos;<sp/>the<sp/>total<sp/>number<sp/>of<sp/>lines<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>left<sp/>+<sp/>right.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="d0/da7/namespacetesting_1_1internal_1a513107ff8defa97d949937fc1350a56c" refkind="member"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a513107ff8defa97d949937fc1350a56c" kindref="member">DiffStrings</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>left,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>right,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>total_line_count);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructs<sp/>and<sp/>returns<sp/>the<sp/>message<sp/>for<sp/>an<sp/>equality<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(e.g.<sp/>ASSERT_EQ,<sp/>EXPECT_STREQ,<sp/>etc)<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>four<sp/>parameters<sp/>are<sp/>the<sp/>expressions<sp/>used<sp/>in<sp/>the<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>their<sp/>values,<sp/>as<sp/>strings.<sp/><sp/>For<sp/>example,<sp/>for<sp/>ASSERT_EQ(foo,<sp/>bar)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>foo<sp/>is<sp/>5<sp/>and<sp/>bar<sp/>is<sp/>6,<sp/>we<sp/>have:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>expected_expression:<sp/>&quot;foo&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>actual_expression:<sp/><sp/><sp/>&quot;bar&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>expected_value:<sp/><sp/><sp/><sp/><sp/><sp/>&quot;5&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>actual_value:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;6&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>ignoring_case<sp/>parameter<sp/>is<sp/>true<sp/>iff<sp/>the<sp/>assertion<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*_STRCASEEQ*.<sp/><sp/>When<sp/>it&apos;s<sp/>true,<sp/>the<sp/>string<sp/>&quot;<sp/>(ignoring<sp/>case)&quot;<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>inserted<sp/>into<sp/>the<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" kindref="member">EqFailure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>expected_value,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>actual_value,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignoring_case);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>failure<sp/>message<sp/>for<sp/>Boolean<sp/>assertions<sp/>such<sp/>as<sp/>EXPECT_TRUE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae1695f7d1559c009775af3911bd8370b" kindref="member">GetBoolAssertionFailureMessage</ref>(</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref>&amp;<sp/>assertion_result,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expression_text,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_predicate_value,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_predicate_value);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>template<sp/>class<sp/>represents<sp/>an<sp/>IEEE<sp/>floating-point<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(either<sp/>single-precision<sp/>or<sp/>double-precision,<sp/>depending<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>parameters).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>purpose<sp/>of<sp/>this<sp/>class<sp/>is<sp/>to<sp/>do<sp/>more<sp/>sophisticated<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>comparison.<sp/><sp/>(Due<sp/>to<sp/>round-off<sp/>error,<sp/>etc,<sp/>it&apos;s<sp/>very<sp/>unlikely<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>two<sp/>floating-points<sp/>will<sp/>be<sp/>equal<sp/>exactly.<sp/><sp/>Hence<sp/>a<sp/>naive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>comparison<sp/>by<sp/>the<sp/>==<sp/>operation<sp/>often<sp/>doesn&apos;t<sp/>work.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Format<sp/>of<sp/>IEEE<sp/>floating-point:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>The<sp/>most-significant<sp/>bit<sp/>being<sp/>the<sp/>leftmost,<sp/>an<sp/>IEEE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>floating-point<sp/>looks<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>sign_bit<sp/>exponent_bits<sp/>fraction_bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Here,<sp/>sign_bit<sp/>is<sp/>a<sp/>single<sp/>bit<sp/>that<sp/>designates<sp/>the<sp/>sign<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>For<sp/>float,<sp/>there<sp/>are<sp/>8<sp/>exponent<sp/>bits<sp/>and<sp/>23<sp/>fraction<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>For<sp/>double,<sp/>there<sp/>are<sp/>11<sp/>exponent<sp/>bits<sp/>and<sp/>52<sp/>fraction<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>More<sp/>details<sp/>can<sp/>be<sp/>found<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://en.wikipedia.org/wiki/IEEE_floating-point_standard.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Template<sp/>parameter:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>RawType:<sp/>the<sp/>raw<sp/>floating-point<sp/>type<sp/>(either<sp/>float<sp/>or<sp/>double)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RawType&gt;</highlight></codeline>
<codeline lineno="262" refid="d2/d56/classtesting_1_1internal_1_1_floating_point" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point" kindref="compound">FloatingPoint</ref><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Defines<sp/>the<sp/>unsigned<sp/>integer<sp/>type<sp/>that<sp/>has<sp/>the<sp/>same<sp/>size<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>floating<sp/>point<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/d5d/classtesting_1_1internal_1_1_type_with_size" kindref="compound">TypeWithSize</ref>&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(RawType)&gt;::UInt<sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref>;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constants.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>of<sp/>bits<sp/>in<sp/>a<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a0c3066a13646d93a18195a2f11142d23" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a0c3066a13646d93a18195a2f11142d23" kindref="member">kBitCount</ref><sp/>=<sp/>8*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(RawType);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>of<sp/>fraction<sp/>bits<sp/>in<sp/>a<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a939ac683296a7698aa81edd4eb20193c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a939ac683296a7698aa81edd4eb20193c" kindref="member">kFractionBitCount</ref><sp/>=</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/types/numeric_limits" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::numeric_limits&lt;RawType&gt;::digits</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>of<sp/>exponent<sp/>bits<sp/>in<sp/>a<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1af9d1b5b5e0e7b76dd283505dd8be17d4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1af9d1b5b5e0e7b76dd283505dd8be17d4" kindref="member">kExponentBitCount</ref><sp/>=<sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a0c3066a13646d93a18195a2f11142d23" kindref="member">kBitCount</ref><sp/>-<sp/>1<sp/>-<sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a939ac683296a7698aa81edd4eb20193c" kindref="member">kFractionBitCount</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>mask<sp/>for<sp/>the<sp/>sign<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a957385d8cb10e7a487fa31085513b920" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a957385d8cb10e7a487fa31085513b920" kindref="member">kSignBitMask</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>(<ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a0c3066a13646d93a18195a2f11142d23" kindref="member">kBitCount</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>mask<sp/>for<sp/>the<sp/>fraction<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a3c9dc4384c7dacae770cb44800f1efc0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a3c9dc4384c7dacae770cb44800f1efc0" kindref="member">kFractionBitMask</ref><sp/>=</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>~static_cast&lt;Bits&gt;(0)<sp/>&gt;&gt;<sp/>(<ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1af9d1b5b5e0e7b76dd283505dd8be17d4" kindref="member">kExponentBitCount</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>mask<sp/>for<sp/>the<sp/>exponent<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a6d12d7651b19ec0e2afc9e7f6d690f9b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a6d12d7651b19ec0e2afc9e7f6d690f9b" kindref="member">kExponentBitMask</ref><sp/>=<sp/>~(<ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a957385d8cb10e7a487fa31085513b920" kindref="member">kSignBitMask</ref><sp/>|<sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a3c9dc4384c7dacae770cb44800f1efc0" kindref="member">kFractionBitMask</ref>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>How<sp/>many<sp/>ULP&apos;s<sp/>(Units<sp/>in<sp/>the<sp/>Last<sp/>Place)<sp/>we<sp/>want<sp/>to<sp/>tolerate<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>comparing<sp/>two<sp/>numbers.<sp/><sp/>The<sp/>larger<sp/>the<sp/>value,<sp/>the<sp/>more<sp/>error<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allow.<sp/><sp/>A<sp/>0<sp/>value<sp/>means<sp/>that<sp/>two<sp/>numbers<sp/>must<sp/>be<sp/>exactly<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>considered<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>error<sp/>of<sp/>a<sp/>single<sp/>floating-point<sp/>operation<sp/>is<sp/>0.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>units<sp/>in<sp/>the<sp/>last<sp/>place.<sp/><sp/>On<sp/>Intel<sp/>CPU&apos;s,<sp/>all<sp/>floating-point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculations<sp/>are<sp/>done<sp/>with<sp/>80-bit<sp/>precision,<sp/>while<sp/>double<sp/>has<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bits.<sp/><sp/>Therefore,<sp/>4<sp/>should<sp/>be<sp/>enough<sp/>for<sp/>ordinary<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>following<sp/>article<sp/>for<sp/>more<sp/>details<sp/>on<sp/>ULP:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a4978544016c74b0db4bf220427766c8e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a4978544016c74b0db4bf220427766c8e" kindref="member">kMaxUlps</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>FloatingPoint<sp/>from<sp/>a<sp/>raw<sp/>floating-point<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>an<sp/>Intel<sp/>CPU,<sp/>passing<sp/>a<sp/>non-normalized<sp/>NAN<sp/>(Not<sp/>a<sp/>Number)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>around<sp/>may<sp/>change<sp/>its<sp/>bits,<sp/>although<sp/>the<sp/>new<sp/>value<sp/>is<sp/>guaranteed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>also<sp/>a<sp/>NAN.<sp/><sp/>Therefore,<sp/>don&apos;t<sp/>expect<sp/>this<sp/>constructor<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>preserve<sp/>the<sp/>bits<sp/>in<sp/>x<sp/>when<sp/>x<sp/>is<sp/>a<sp/>NAN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1ae571da332db90c7d19af0158780d9a1b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1ae571da332db90c7d19af0158780d9a1b" kindref="member">FloatingPoint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType&amp;<sp/>x)<sp/>{<sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a7ba7d6be838cfc2c8bbdc327f5016d83" kindref="member">u_</ref>.<ref refid="d3/d6f/uniontesting_1_1internal_1_1_floating_point_1_1_floating_point_union_1a4c63184d103d6c4952511640f80e90a3" kindref="member">value_</ref><sp/>=<sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reinterprets<sp/>a<sp/>bit<sp/>pattern<sp/>as<sp/>a<sp/>floating-point<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>needed<sp/>to<sp/>test<sp/>the<sp/>AlmostEquals()<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1af602b4c0ce9bfe8413df5b0af2735b74" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>RawType<sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1af602b4c0ce9bfe8413df5b0af2735b74" kindref="member">ReinterpretBits</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a6bad54827e1a7675ec9a4806660ccf3c" kindref="member">bits</ref>)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point" kindref="compound">FloatingPoint</ref><sp/>fp(0);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>fp.<ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a7ba7d6be838cfc2c8bbdc327f5016d83" kindref="member">u_</ref>.<ref refid="d3/d6f/uniontesting_1_1internal_1_1_floating_point_1_1_floating_point_union_1af47349c770ec7adda84198491ccc7f4d" kindref="member">bits_</ref><sp/>=<sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a6bad54827e1a7675ec9a4806660ccf3c" kindref="member">bits</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fp.<ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a7ba7d6be838cfc2c8bbdc327f5016d83" kindref="member">u_</ref>.<ref refid="d3/d6f/uniontesting_1_1internal_1_1_floating_point_1_1_floating_point_union_1a4c63184d103d6c4952511640f80e90a3" kindref="member">value_</ref>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>floating-point<sp/>number<sp/>that<sp/>represent<sp/>positive<sp/>infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a59b4813c94bba67c6204d478f544cfc9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>RawType<sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a59b4813c94bba67c6204d478f544cfc9" kindref="member">Infinity</ref>()<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1af602b4c0ce9bfe8413df5b0af2735b74" kindref="member">ReinterpretBits</ref>(<ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a6d12d7651b19ec0e2afc9e7f6d690f9b" kindref="member">kExponentBitMask</ref>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>maximum<sp/>representable<sp/>finite<sp/>floating-point<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a81132d589a96e5b8441cc20e202a70bd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>RawType<sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a81132d589a96e5b8441cc20e202a70bd" kindref="member">Max</ref>();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-static<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>bits<sp/>that<sp/>represents<sp/>this<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a6bad54827e1a7675ec9a4806660ccf3c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref><sp/>&amp;<ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a6bad54827e1a7675ec9a4806660ccf3c" kindref="member">bits</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a7ba7d6be838cfc2c8bbdc327f5016d83" kindref="member">u_</ref>.<ref refid="d3/d6f/uniontesting_1_1internal_1_1_floating_point_1_1_floating_point_union_1af47349c770ec7adda84198491ccc7f4d" kindref="member">bits_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>exponent<sp/>bits<sp/>of<sp/>this<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a0e650d73a252c02dfe2299b75b33eab7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a0e650d73a252c02dfe2299b75b33eab7" kindref="member">exponent_bits</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a6d12d7651b19ec0e2afc9e7f6d690f9b" kindref="member">kExponentBitMask</ref><sp/>&amp;<sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a7ba7d6be838cfc2c8bbdc327f5016d83" kindref="member">u_</ref>.<ref refid="d3/d6f/uniontesting_1_1internal_1_1_floating_point_1_1_floating_point_union_1af47349c770ec7adda84198491ccc7f4d" kindref="member">bits_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>fraction<sp/>bits<sp/>of<sp/>this<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a7cba617444a7a130a5b77b6a6f2e2a31" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a7cba617444a7a130a5b77b6a6f2e2a31" kindref="member">fraction_bits</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a3c9dc4384c7dacae770cb44800f1efc0" kindref="member">kFractionBitMask</ref><sp/>&amp;<sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a7ba7d6be838cfc2c8bbdc327f5016d83" kindref="member">u_</ref>.<ref refid="d3/d6f/uniontesting_1_1internal_1_1_floating_point_1_1_floating_point_union_1af47349c770ec7adda84198491ccc7f4d" kindref="member">bits_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>sign<sp/>bit<sp/>of<sp/>this<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a5a412e32067c322035aa84c08b45e308" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a5a412e32067c322035aa84c08b45e308" kindref="member">sign_bit</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a957385d8cb10e7a487fa31085513b920" kindref="member">kSignBitMask</ref><sp/>&amp;<sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a7ba7d6be838cfc2c8bbdc327f5016d83" kindref="member">u_</ref>.<ref refid="d3/d6f/uniontesting_1_1internal_1_1_floating_point_1_1_floating_point_union_1af47349c770ec7adda84198491ccc7f4d" kindref="member">bits_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>is<sp/>NAN<sp/>(not<sp/>a<sp/>number).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1af523e4a38d5ab952d38f5dff16c1ed34" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1af523e4a38d5ab952d38f5dff16c1ed34" kindref="member">is_nan</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>a<sp/>NAN<sp/>if<sp/>the<sp/>exponent<sp/>bits<sp/>are<sp/>all<sp/>ones<sp/>and<sp/>the<sp/>fraction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bits<sp/>are<sp/>not<sp/>entirely<sp/>zeros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a0e650d73a252c02dfe2299b75b33eab7" kindref="member">exponent_bits</ref>()<sp/>==<sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a6d12d7651b19ec0e2afc9e7f6d690f9b" kindref="member">kExponentBitMask</ref>)<sp/>&amp;&amp;<sp/>(<ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a7cba617444a7a130a5b77b6a6f2e2a31" kindref="member">fraction_bits</ref>()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>number<sp/>is<sp/>at<sp/>most<sp/>kMaxUlps<sp/>ULP&apos;s<sp/>away<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rhs.<sp/><sp/>In<sp/>particular,<sp/>this<sp/>function:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>returns<sp/>false<sp/>if<sp/>either<sp/>number<sp/>is<sp/>(or<sp/>both<sp/>are)<sp/>NAN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>treats<sp/>really<sp/>large<sp/>numbers<sp/>as<sp/>almost<sp/>equal<sp/>to<sp/>infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>thinks<sp/>+0.0<sp/>and<sp/>-0.0<sp/>are<sp/>0<sp/>DLP&apos;s<sp/>apart.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a9adc63455203e300944eb2e9dc48420c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a9adc63455203e300944eb2e9dc48420c" kindref="member">AlmostEquals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point" kindref="compound">FloatingPoint</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>IEEE<sp/>standard<sp/>says<sp/>that<sp/>any<sp/>comparison<sp/>operation<sp/>involving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>NAN<sp/>must<sp/>return<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1af523e4a38d5ab952d38f5dff16c1ed34" kindref="member">is_nan</ref>()<sp/>||<sp/>rhs.<ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1af523e4a38d5ab952d38f5dff16c1ed34" kindref="member">is_nan</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a8a0a5fc8888097d7f464dc12d11ca60e" kindref="member">DistanceBetweenSignAndMagnitudeNumbers</ref>(<ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a7ba7d6be838cfc2c8bbdc327f5016d83" kindref="member">u_</ref>.<ref refid="d3/d6f/uniontesting_1_1internal_1_1_floating_point_1_1_floating_point_union_1af47349c770ec7adda84198491ccc7f4d" kindref="member">bits_</ref>,<sp/>rhs.<ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a7ba7d6be838cfc2c8bbdc327f5016d83" kindref="member">u_</ref>.<ref refid="d3/d6f/uniontesting_1_1internal_1_1_floating_point_1_1_floating_point_union_1af47349c770ec7adda84198491ccc7f4d" kindref="member">bits_</ref>)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;=<sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a4978544016c74b0db4bf220427766c8e" kindref="member">kMaxUlps</ref>;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>data<sp/>type<sp/>used<sp/>to<sp/>store<sp/>the<sp/>actual<sp/>floating-point<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369" refid="d3/d6f/uniontesting_1_1internal_1_1_floating_point_1_1_floating_point_union" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="d3/d6f/uniontesting_1_1internal_1_1_floating_point_1_1_floating_point_union" kindref="compound">FloatingPointUnion</ref><sp/>{</highlight></codeline>
<codeline lineno="370" refid="d3/d6f/uniontesting_1_1internal_1_1_floating_point_1_1_floating_point_union_1a4c63184d103d6c4952511640f80e90a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RawType<sp/><ref refid="d3/d6f/uniontesting_1_1internal_1_1_floating_point_1_1_floating_point_union_1a4c63184d103d6c4952511640f80e90a3" kindref="member">value_</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>raw<sp/>floating-point<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="d3/d6f/uniontesting_1_1internal_1_1_floating_point_1_1_floating_point_union_1af47349c770ec7adda84198491ccc7f4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref><sp/><ref refid="d3/d6f/uniontesting_1_1internal_1_1_floating_point_1_1_floating_point_union_1af47349c770ec7adda84198491ccc7f4d" kindref="member">bits_</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bits<sp/>that<sp/>represent<sp/>the<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Converts<sp/>an<sp/>integer<sp/>from<sp/>the<sp/>sign-and-magnitude<sp/>representation<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>biased<sp/>representation.<sp/><sp/>More<sp/>precisely,<sp/>let<sp/>N<sp/>be<sp/>2<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>power<sp/>of<sp/>(kBitCount<sp/>-<sp/>1),<sp/>an<sp/>integer<sp/>x<sp/>is<sp/>represented<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unsigned<sp/>number<sp/>x<sp/>+<sp/>N.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>instance,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-N<sp/>+<sp/>1<sp/>(the<sp/>most<sp/>negative<sp/>number<sp/>representable<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign-and-magnitude)<sp/>is<sp/>represented<sp/>by<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>represented<sp/>by<sp/>N;<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>N<sp/>-<sp/>1<sp/><sp/>(the<sp/>biggest<sp/>number<sp/>representable<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign-and-magnitude)<sp/>is<sp/>represented<sp/>by<sp/>2N<sp/>-<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>http://en.wikipedia.org/wiki/Signed_number_representations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>more<sp/>details<sp/>on<sp/>signed<sp/>number<sp/>representations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a872f90beea428c4e8d21a5677dd9d4e6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a872f90beea428c4e8d21a5677dd9d4e6" kindref="member">SignAndMagnitudeToBiased</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref><sp/>&amp;sam)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a957385d8cb10e7a487fa31085513b920" kindref="member">kSignBitMask</ref><sp/>&amp;<sp/>sam)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sam<sp/>represents<sp/>a<sp/>negative<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>~sam<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sam<sp/>represents<sp/>a<sp/>positive<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a957385d8cb10e7a487fa31085513b920" kindref="member">kSignBitMask</ref><sp/>|<sp/>sam;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Given<sp/>two<sp/>numbers<sp/>in<sp/>the<sp/>sign-and-magnitude<sp/>representation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>the<sp/>distance<sp/>between<sp/>them<sp/>as<sp/>an<sp/>unsigned<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a8a0a5fc8888097d7f464dc12d11ca60e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a8a0a5fc8888097d7f464dc12d11ca60e" kindref="member">DistanceBetweenSignAndMagnitudeNumbers</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref><sp/>&amp;sam1,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref><sp/>&amp;sam2)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref><sp/>biased1<sp/>=<sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a872f90beea428c4e8d21a5677dd9d4e6" kindref="member">SignAndMagnitudeToBiased</ref>(sam1);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1adb12c064e30491d4976393880f9dca27" kindref="member">Bits</ref><sp/>biased2<sp/>=<sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a872f90beea428c4e8d21a5677dd9d4e6" kindref="member">SignAndMagnitudeToBiased</ref>(sam2);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(biased1<sp/>&gt;=<sp/>biased2)<sp/>?<sp/>(biased1<sp/>-<sp/>biased2)<sp/>:<sp/>(biased2<sp/>-<sp/>biased1);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a7ba7d6be838cfc2c8bbdc327f5016d83" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d3/d6f/uniontesting_1_1internal_1_1_floating_point_1_1_floating_point_union" kindref="compound">FloatingPointUnion</ref><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a7ba7d6be838cfc2c8bbdc327f5016d83" kindref="member">u_</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal">};</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>use<sp/>std::numeric_limits&lt;T&gt;::max()<sp/>as<sp/>it<sp/>clashes<sp/>with<sp/>the<sp/>max()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>macro<sp/>defined<sp/>by<sp/>&lt;windows.h&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="414" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1ac55057c54fd38d2341f883941e9ac23a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a81132d589a96e5b8441cc20e202a70bd" kindref="member">FloatingPoint&lt;float&gt;::Max</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FLT_MAX;<sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="416" refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a5ce77a1e1d90d5d3cf8d1bd4d12f0f87" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point_1a81132d589a96e5b8441cc20e202a70bd" kindref="member">FloatingPoint&lt;double&gt;::Max</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DBL_MAX;<sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Typedefs<sp/>the<sp/>instances<sp/>of<sp/>the<sp/>FloatingPoint<sp/>template<sp/>class<sp/>that<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>care<sp/>to<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="d0/da7/namespacetesting_1_1internal_1ac3d3419bbcf73bcb7dc93989970048cf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point" kindref="compound">FloatingPoint&lt;float&gt;</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac3d3419bbcf73bcb7dc93989970048cf" kindref="member">Float</ref>;</highlight></codeline>
<codeline lineno="421" refid="d0/da7/namespacetesting_1_1internal_1af563307a75d69c5d5bf473780f4ca336" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point" kindref="compound">FloatingPoint&lt;double&gt;</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af563307a75d69c5d5bf473780f4ca336" kindref="member">Double</ref>;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>catch<sp/>the<sp/>mistake<sp/>of<sp/>putting<sp/>tests<sp/>that<sp/>use<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>fixture<sp/>classes<sp/>in<sp/>the<sp/>same<sp/>test<sp/>case,<sp/>we<sp/>need<sp/>to<sp/>assign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unique<sp/>IDs<sp/>to<sp/>fixture<sp/>classes<sp/>and<sp/>compare<sp/>them.<sp/><sp/>The<sp/>TypeId<sp/>type<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>used<sp/>to<sp/>hold<sp/>such<sp/>IDs.<sp/><sp/>The<sp/>user<sp/>should<sp/>treat<sp/>TypeId<sp/>as<sp/>an<sp/>opaque</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type:<sp/>the<sp/>only<sp/>operation<sp/>allowed<sp/>on<sp/>TypeId<sp/>values<sp/>is<sp/>to<sp/>compare</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>them<sp/>for<sp/>equality<sp/>using<sp/>the<sp/>==<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="d0/da7/namespacetesting_1_1internal_1ac535957ba2fde769ce297f9b23db057d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac535957ba2fde769ce297f9b23db057d" kindref="member">TypeId</ref>;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="432" refid="d5/d93/classtesting_1_1internal_1_1_type_id_helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d5/d93/classtesting_1_1internal_1_1_type_id_helper" kindref="compound">TypeIdHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dummy_<sp/>must<sp/>not<sp/>have<sp/>a<sp/>const<sp/>type.<sp/><sp/>Otherwise<sp/>an<sp/>overly<sp/>eager</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compiler<sp/>(e.g.<sp/>MSVC<sp/>7.1<sp/>&amp;<sp/>8.0)<sp/>may<sp/>try<sp/>to<sp/>merge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TypeIdHelper&lt;T&gt;::dummy_<sp/>for<sp/>different<sp/>Ts<sp/>as<sp/>an<sp/>&quot;optimization&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437" refid="d5/d93/classtesting_1_1internal_1_1_type_id_helper_1a870ada1c63895a920259b24a83260232" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/d93/classtesting_1_1internal_1_1_type_id_helper_1a870ada1c63895a920259b24a83260232" kindref="member">dummy_</ref>;</highlight></codeline>
<codeline lineno="438"><highlight class="normal">};</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/d93/classtesting_1_1internal_1_1_type_id_helper" kindref="compound">TypeIdHelper&lt;T&gt;::dummy_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GetTypeId&lt;T&gt;()<sp/>returns<sp/>the<sp/>ID<sp/>of<sp/>type<sp/>T.<sp/><sp/>Different<sp/>values<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returned<sp/>for<sp/>different<sp/>types.<sp/><sp/>Calling<sp/>the<sp/>function<sp/>twice<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>same<sp/>type<sp/>argument<sp/>is<sp/>guaranteed<sp/>to<sp/>return<sp/>the<sp/>same<sp/>ID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="447" refid="d0/da7/namespacetesting_1_1internal_1a6b108e56fdc68ea937ffb3759fb55ab0" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1ac535957ba2fde769ce297f9b23db057d" kindref="member">TypeId</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a6b108e56fdc68ea937ffb3759fb55ab0" kindref="member">GetTypeId</ref>()<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>compiler<sp/>is<sp/>required<sp/>to<sp/>allocate<sp/>a<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TypeIdHelper&lt;T&gt;::dummy_<sp/>variable<sp/>for<sp/>each<sp/>T<sp/>used<sp/>to<sp/>instantiate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>template.<sp/><sp/>Therefore,<sp/>the<sp/>address<sp/>of<sp/>dummy_<sp/>is<sp/>guaranteed<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>unique.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(<ref refid="d5/d93/classtesting_1_1internal_1_1_type_id_helper" kindref="compound">TypeIdHelper&lt;T&gt;::dummy_</ref>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>type<sp/>ID<sp/>of<sp/>::testing::Test.<sp/><sp/>Always<sp/>call<sp/>this<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>GetTypeId&lt;<sp/>::testing::Test&gt;()<sp/>to<sp/>get<sp/>the<sp/>type<sp/>ID<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::testing::Test,<sp/>as<sp/>the<sp/>latter<sp/>may<sp/>give<sp/>the<sp/>wrong<sp/>result<sp/>due<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>suspected<sp/>linker<sp/>bug<sp/>when<sp/>compiling<sp/>Google<sp/>Test<sp/>as<sp/>a<sp/>Mac<sp/>OS<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">//<sp/>framework.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac535957ba2fde769ce297f9b23db057d" kindref="member">TypeId</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af4406515630591b54fcdf093991b14e3" kindref="member">GetTestTypeId</ref>();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>the<sp/>abstract<sp/>factory<sp/>interface<sp/>that<sp/>creates<sp/>instances</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>a<sp/>Test<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base" kindref="compound">TestFactoryBase</ref><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="466" refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base_1ad1caa56f70c11f47320e43cd0b1885dc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base_1ad1caa56f70c11f47320e43cd0b1885dc" kindref="member">~TestFactoryBase</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>test<sp/>instance<sp/>to<sp/>run.<sp/>The<sp/>instance<sp/>is<sp/>both<sp/>created<sp/>and<sp/>destroyed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>within<sp/>TestInfoImpl::Run()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470" refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base_1a54ad95f17b20927fd00c337710813519" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="df/d69/classtesting_1_1_test" kindref="compound">Test</ref>*<sp/><ref refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base_1a54ad95f17b20927fd00c337710813519" kindref="member">CreateTest</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="473" refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base_1a29dc02b271a58548a72a9440595d58f9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base_1a29dc02b271a58548a72a9440595d58f9" kindref="member">TestFactoryBase</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="476" refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base_1abd93f87cde0d8a775ee544c7337ef453" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base_1abd93f87cde0d8a775ee544c7337ef453" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base" kindref="compound">TestFactoryBase</ref>);</highlight></codeline>
<codeline lineno="477"><highlight class="normal">};</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>provides<sp/>implementation<sp/>of<sp/>TeastFactoryBase<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>used<sp/>in<sp/>TEST<sp/>and<sp/>TEST_F<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TestClass&gt;</highlight></codeline>
<codeline lineno="482" refid="df/d14/classtesting_1_1internal_1_1_test_factory_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="df/d14/classtesting_1_1internal_1_1_test_factory_impl" kindref="compound">TestFactoryImpl</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base" kindref="compound">TestFactoryBase</ref><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="484" refid="df/d14/classtesting_1_1internal_1_1_test_factory_impl_1a0c8d3cb7d986c562f4b2913a2650e3e0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="df/d69/classtesting_1_1_test" kindref="compound">Test</ref>*<sp/><ref refid="df/d14/classtesting_1_1internal_1_1_test_factory_impl_1a0c8d3cb7d986c562f4b2913a2650e3e0" kindref="member">CreateTest</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TestClass;<sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal">};</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Predicate-formatters<sp/>for<sp/>implementing<sp/>the<sp/>HRESULT<sp/>checking<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{ASSERT|EXPECT}_HRESULT_{SUCCEEDED|FAILED}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>pass<sp/>a<sp/>long<sp/>instead<sp/>of<sp/>HRESULT<sp/>to<sp/>avoid<sp/>causing<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>include<sp/>dependency<sp/>for<sp/>the<sp/>HRESULT<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/>IsHRESULTSuccess(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hr);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/>IsHRESULTFailure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hr);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Types<sp/>of<sp/>SetUpTestCase()<sp/>and<sp/>TearDownTestCase()<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501" refid="d0/da7/namespacetesting_1_1internal_1aa56a971a29fe8459940b46db38d3000f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="d0/da7/namespacetesting_1_1internal_1aa56a971a29fe8459940b46db38d3000f" kindref="member">SetUpTestCaseFunc</ref>)();</highlight></codeline>
<codeline lineno="502" refid="d0/da7/namespacetesting_1_1internal_1a7b4a46c5927d126f2df2d955d98e3b8a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="d0/da7/namespacetesting_1_1internal_1a7b4a46c5927d126f2df2d955d98e3b8a" kindref="member">TearDownTestCaseFunc</ref>)();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504" refid="d7/d69/structtesting_1_1internal_1_1_code_location" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d7/d69/structtesting_1_1internal_1_1_code_location" kindref="compound">CodeLocation</ref><sp/>{</highlight></codeline>
<codeline lineno="505" refid="d7/d69/structtesting_1_1internal_1_1_code_location_1a24400a87e8b673621ea49bbf9b45d164" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d7/d69/structtesting_1_1internal_1_1_code_location_1a24400a87e8b673621ea49bbf9b45d164" kindref="member">CodeLocation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>a_file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_line)<sp/>:<sp/><ref refid="d7/d69/structtesting_1_1internal_1_1_code_location_1ab2c5ab3c7a17f0969cdd40146339903a" kindref="member">file</ref>(a_file),<sp/><ref refid="d7/d69/structtesting_1_1internal_1_1_code_location_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>(a_line)<sp/>{}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="d7/d69/structtesting_1_1internal_1_1_code_location_1ab2c5ab3c7a17f0969cdd40146339903a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="d7/d69/structtesting_1_1internal_1_1_code_location_1ab2c5ab3c7a17f0969cdd40146339903a" kindref="member">file</ref>;</highlight></codeline>
<codeline lineno="508" refid="d7/d69/structtesting_1_1internal_1_1_code_location_1a41ebd28ef1d7c6ade45642cb6acc1039" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/d69/structtesting_1_1internal_1_1_code_location_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>;</highlight></codeline>
<codeline lineno="509"><highlight class="normal">};</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>new<sp/>TestInfo<sp/>object<sp/>and<sp/>registers<sp/>it<sp/>with<sp/>Google<sp/>Test;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>the<sp/>created<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>test_case_name:<sp/><sp/><sp/>name<sp/>of<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>of<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>type_param<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>the<sp/>test&apos;s<sp/>type<sp/>parameter,<sp/>or<sp/>NULL<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>is<sp/>not<sp/>a<sp/>typed<sp/>or<sp/>a<sp/>type-parameterized<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>value_param<sp/><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>representation<sp/>of<sp/>the<sp/>test&apos;s<sp/>value<sp/>parameter,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>NULL<sp/>if<sp/>this<sp/>is<sp/>not<sp/>a<sp/>type-parameterized<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>code_location:<sp/><sp/><sp/><sp/>code<sp/>location<sp/>where<sp/>the<sp/>test<sp/>is<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>fixture_class_id:<sp/>ID<sp/>of<sp/>the<sp/>test<sp/>fixture<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>set_up_tc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>sets<sp/>up<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>tear_down_tc:<sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>tears<sp/>down<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>factory:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>factory<sp/>that<sp/>creates<sp/>a<sp/>test<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>newly<sp/>created<sp/>TestInfo<sp/>instance<sp/>will<sp/>assume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ownership<sp/>of<sp/>the<sp/>factory<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a616199437436015fde76f09d80c6d5e7" kindref="member">MakeAndRegisterTestInfo</ref>(</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_name,</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>type_param,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value_param,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/d69/structtesting_1_1internal_1_1_code_location" kindref="compound">CodeLocation</ref><sp/>code_location,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac535957ba2fde769ce297f9b23db057d" kindref="member">TypeId</ref><sp/>fixture_class_id,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa56a971a29fe8459940b46db38d3000f" kindref="member">SetUpTestCaseFunc</ref><sp/>set_up_tc,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a7b4a46c5927d126f2df2d955d98e3b8a" kindref="member">TearDownTestCaseFunc</ref><sp/>tear_down_tc,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base" kindref="compound">TestFactoryBase</ref>*<sp/>factory);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>*pstr<sp/>starts<sp/>with<sp/>the<sp/>given<sp/>prefix,<sp/>modifies<sp/>*pstr<sp/>to<sp/>be<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>past<sp/>the<sp/>prefix<sp/>and<sp/>returns<sp/>true;<sp/>otherwise<sp/>leaves<sp/>*pstr<sp/>unchanged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>returns<sp/>false.<sp/><sp/>None<sp/>of<sp/>pstr,<sp/>*pstr,<sp/>and<sp/>prefix<sp/>can<sp/>be<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1abcf66fcfdb8c336eba8636bc8b49b4aa" kindref="member">SkipPrefix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>pstr);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_TYPED_TEST<sp/>||<sp/>GTEST_HAS_TYPED_TEST_P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment">//<sp/>State<sp/>of<sp/>the<sp/>definition<sp/>of<sp/>a<sp/>type-parameterized<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/>TypedTestCasePState<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>TypedTestCasePState()<sp/>:<sp/>registered_(false)<sp/>{}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>the<sp/>given<sp/>test<sp/>name<sp/>to<sp/>defined_test_names_<sp/>and<sp/>return<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>test<sp/>case<sp/>hasn&apos;t<sp/>been<sp/>registered;<sp/>otherwise<sp/>aborts<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AddTestName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>case_name,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_name)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(registered_)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Test<sp/>%s<sp/>must<sp/>be<sp/>defined<sp/>before<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;REGISTER_TYPED_TEST_CASE_P(%s,<sp/>...).\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a6264f0605b7d7d0609eae663c58662c0" kindref="member">FormatFileLocation</ref>(file,<sp/>line).c_str(),<sp/>test_name,<sp/>case_name);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>posix::Abort();</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>registered_tests_.insert(</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::<ref refid="cpp/utility/pair/make_pair" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::make_pair</ref>(test_name,<sp/>CodeLocation(file,<sp/>line)));</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestExists(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>test_name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>registered_tests_.count(test_name)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CodeLocation&amp;<sp/>GetCodeLocation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>test_name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>RegisteredTestsMap::const_iterator<sp/>it<sp/>=<sp/>registered_tests_.find(test_name);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1ab54343f0a36dc4cb0ce8a478dd7847b8" kindref="member">GTEST_CHECK_</ref>(it<sp/>!=<sp/>registered_tests_.end());</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>registered_tests<sp/>match<sp/>the<sp/>test<sp/>names<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>defined_test_names_;<sp/>returns<sp/>registered_tests<sp/>if<sp/>successful,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>aborts<sp/>the<sp/>program<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>VerifyRegisteredTestNames(</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>registered_tests);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::map&lt;std::string,<sp/>CodeLocation&gt;<sp/>RegisteredTestsMap;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>registered_;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>RegisteredTestsMap<sp/>registered_tests_;</highlight></codeline>
<codeline lineno="590"><highlight class="normal">};</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Skips<sp/>to<sp/>the<sp/>first<sp/>non-space<sp/>char<sp/>after<sp/>the<sp/>first<sp/>comma<sp/>in<sp/>&apos;str&apos;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>NULL<sp/>if<sp/>no<sp/>comma<sp/>is<sp/>found<sp/>in<sp/>&apos;str&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>SkipComma(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comma<sp/>=<sp/><ref refid="cpp/string/byte/strchr" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">strchr</ref>(str,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comma<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="d0/da7/namespacetesting_1_1internal_1af429e04f70f9c10f6aa76a5d1ccd389f" kindref="member">IsSpace</ref>(*(++comma)))<sp/>{}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comma;</highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>prefix<sp/>of<sp/>&apos;str&apos;<sp/>before<sp/>the<sp/>first<sp/>comma<sp/>in<sp/>it;<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>entire<sp/>string<sp/>if<sp/>it<sp/>contains<sp/>no<sp/>comma.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>GetPrefixUntilComma(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comma<sp/>=<sp/><ref refid="cpp/string/byte/strchr" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">strchr</ref>(str,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comma<sp/>==<sp/>NULL<sp/>?<sp/>str<sp/>:<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">std::string</ref>(str,<sp/>comma);</highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Splits<sp/>a<sp/>given<sp/>string<sp/>on<sp/>a<sp/>given<sp/>delimiter,<sp/>populating<sp/>a<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//<sp/>vector<sp/>with<sp/>the<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8eb8eddf760375a490e007b20777ec56" kindref="member">SplitString</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">const ::std::string</ref>&amp;<sp/>str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delimiter,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::<ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt; ::std::string&gt;</ref>*<sp/>dest);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TypeParameterizedTest&lt;Fixture,<sp/>TestSel,<sp/>Types&gt;::Register()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>registers<sp/>a<sp/>list<sp/>of<sp/>type-parameterized<sp/>tests<sp/>with<sp/>Google<sp/>Test.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>is<sp/>insignificant<sp/>-<sp/>we<sp/>just<sp/>need<sp/>to<sp/>return<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//<sp/>such<sp/>that<sp/>we<sp/>can<sp/>call<sp/>this<sp/>function<sp/>in<sp/>a<sp/>namespace<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementation<sp/>note:<sp/>The<sp/>GTEST_TEMPLATE_<sp/>macro<sp/>declares<sp/>a<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>parameter.<sp/><sp/>It&apos;s<sp/>defined<sp/>in<sp/>gtest-type-util.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;GTEST_TEMPLATE_<sp/>Fixture,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TestSel,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Types&gt;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TypeParameterizedTest<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;index&apos;<sp/>is<sp/>the<sp/>index<sp/>of<sp/>the<sp/>test<sp/>in<sp/>the<sp/>type<sp/>list<sp/>&apos;Types&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>specified<sp/>in<sp/>INSTANTIATE_TYPED_TEST_CASE_P(Prefix,<sp/>TestCase,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Types).<sp/><sp/>Valid<sp/>values<sp/>for<sp/>&apos;index&apos;<sp/>are<sp/>[0,<sp/>N<sp/>-<sp/>1]<sp/>where<sp/>N<sp/>is<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>length<sp/>of<sp/>Types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Register(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prefix,</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CodeLocation<sp/>code_location,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>case_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_names,</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Types::Head<sp/>Type;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Fixture&lt;Type&gt;<sp/>FixtureClass;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>GTEST_BIND_(TestSel,<sp/>Type)<sp/>TestClass;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>registers<sp/>the<sp/>first<sp/>type-parameterized<sp/>test<sp/>in<sp/>the<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a616199437436015fde76f09d80c6d5e7" kindref="member">MakeAndRegisterTestInfo</ref>(</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>(prefix)<sp/>+<sp/>(prefix[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">)<sp/>+<sp/>case_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(index)).c_str(),</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa6afda12e567c353e2e9b9c2e8cae14f" kindref="member">StripTrailingSpaces</ref>(GetPrefixUntilComma(test_names)).c_str(),</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetTypeName&lt;Type&gt;().c_str(),</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>value<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code_location,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetTypeId&lt;FixtureClass&gt;(),</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestClass::SetUpTestCase,</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestClass::TearDownTestCase,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TestFactoryImpl&lt;TestClass&gt;);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next,<sp/>recurses<sp/>(at<sp/>compile<sp/>time)<sp/>with<sp/>the<sp/>tail<sp/>of<sp/>the<sp/>type<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TypeParameterizedTest&lt;Fixture,<sp/>TestSel,<sp/>typename<sp/>Types::Tail&gt;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Register(prefix,<sp/>code_location,<sp/>case_name,<sp/>test_names,<sp/>index<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal">};</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>base<sp/>case<sp/>for<sp/>the<sp/>compile<sp/>time<sp/>recursion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;GTEST_TEMPLATE_<sp/>Fixture,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TestSel&gt;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TypeParameterizedTest&lt;Fixture,<sp/>TestSel,<sp/>Types0&gt;<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Register(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*prefix*/</highlight><highlight class="normal">,<sp/>CodeLocation,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*case_name*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*test_names*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*index*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal">};</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TypeParameterizedTestCase&lt;Fixture,<sp/>Tests,<sp/>Types&gt;::Register()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="comment">//<sp/>registers<sp/>*all<sp/>combinations*<sp/>of<sp/>&apos;Tests&apos;<sp/>and<sp/>&apos;Types&apos;<sp/>with<sp/>Google</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test.<sp/><sp/>The<sp/>return<sp/>value<sp/>is<sp/>insignificant<sp/>-<sp/>we<sp/>just<sp/>need<sp/>to<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>something<sp/>such<sp/>that<sp/>we<sp/>can<sp/>call<sp/>this<sp/>function<sp/>in<sp/>a<sp/>namespace<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;GTEST_TEMPLATE_<sp/>Fixture,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tests,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Types&gt;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TypeParameterizedTestCase<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Register(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prefix,<sp/>CodeLocation<sp/>code_location,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TypedTestCasePState*<sp/>state,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>case_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_names)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>test_name<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa6afda12e567c353e2e9b9c2e8cae14f" kindref="member">StripTrailingSpaces</ref>(</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetPrefixUntilComma(test_names));</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state-&gt;TestExists(test_name))<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">fprintf</ref>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>code<sp/>location<sp/>for<sp/>test<sp/>%s.%s<sp/>at<sp/>%s.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case_name,<sp/>test_name.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>(),</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a6264f0605b7d7d0609eae663c58662c0" kindref="member">FormatFileLocation</ref>(code_location.file.c_str(),</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code_location.line).<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cpp/io/c/fflush" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">fflush</ref>(stderr);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>posix::Abort();</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CodeLocation&amp;<sp/>test_location<sp/>=<sp/>state-&gt;GetCodeLocation(test_name);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tests::Head<sp/>Head;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>register<sp/>the<sp/>first<sp/>test<sp/>in<sp/>&apos;Test&apos;<sp/>for<sp/>each<sp/>type<sp/>in<sp/>&apos;Types&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>TypeParameterizedTest&lt;Fixture,<sp/>Head,<sp/>Types&gt;::Register(</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix,<sp/>test_location,<sp/>case_name,<sp/>test_names,<sp/>0);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next,<sp/>recurses<sp/>(at<sp/>compile<sp/>time)<sp/>with<sp/>the<sp/>tail<sp/>of<sp/>the<sp/>test<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TypeParameterizedTestCase&lt;Fixture,<sp/>typename<sp/>Tests::Tail,<sp/>Types&gt;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Register(prefix,<sp/>code_location,<sp/>state,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case_name,<sp/>SkipComma(test_names));</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal">};</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>base<sp/>case<sp/>for<sp/>the<sp/>compile<sp/>time<sp/>recursion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;GTEST_TEMPLATE_<sp/>Fixture,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Types&gt;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TypeParameterizedTestCase&lt;Fixture,<sp/>Templates0,<sp/>Types&gt;<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Register(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*prefix*/</highlight><highlight class="normal">,<sp/>CodeLocation,</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TypedTestCasePState*<sp/></highlight><highlight class="comment">/*state*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*case_name*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*test_names*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal">};</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_TYPED_TEST<sp/>||<sp/>GTEST_HAS_TYPED_TEST_P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>OS<sp/>stack<sp/>trace<sp/>as<sp/>an<sp/>std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>stack<sp/>frames<sp/>to<sp/>be<sp/>included<sp/>is<sp/>specified<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>gtest_stack_trace_depth<sp/>flag.<sp/><sp/>The<sp/>skip_count<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specifies<sp/>the<sp/>number<sp/>of<sp/>top<sp/>frames<sp/>to<sp/>be<sp/>skipped,<sp/>which<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">//<sp/>count<sp/>against<sp/>the<sp/>number<sp/>of<sp/>frames<sp/>to<sp/>be<sp/>included.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>if<sp/>Foo()<sp/>calls<sp/>Bar(),<sp/>which<sp/>in<sp/>turn<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GetCurrentOsStackTraceExceptTop(...,<sp/>1),<sp/>Foo()<sp/>will<sp/>be<sp/>included<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>trace<sp/>but<sp/>Bar()<sp/>and<sp/>GetCurrentOsStackTraceExceptTop()<sp/>won&apos;t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1ffce3a1491bc0de802157425b30f3a1" kindref="member">GetCurrentOsStackTraceExceptTop</ref>(</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>UnitTest*<sp/>unit_test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip_count);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helpers<sp/>for<sp/>suppressing<sp/>warnings<sp/>on<sp/>unreachable<sp/>code<sp/>or<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="comment">//<sp/>condition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Always<sp/>returns<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af72a7a7eee6997f4ed9e18d9620a7b87" kindref="member">AlwaysTrue</ref>();</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Always<sp/>returns<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736" refid="d0/da7/namespacetesting_1_1internal_1a4b24c851ab13569b1b15b3d259b60d2e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4b24c851ab13569b1b15b3d259b60d2e" kindref="member">AlwaysFalse</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="d0/da7/namespacetesting_1_1internal_1af72a7a7eee6997f4ed9e18d9620a7b87" kindref="member">AlwaysTrue</ref>();<sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>for<sp/>suppressing<sp/>false<sp/>warning<sp/>from<sp/>Clang<sp/>on<sp/>a<sp/>const<sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variable<sp/>declared<sp/>in<sp/>a<sp/>conditional<sp/>expression<sp/>always<sp/>being<sp/>NULL<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>else<sp/>branch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741" refid="d6/dbb/structtesting_1_1internal_1_1_const_char_ptr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d6/dbb/structtesting_1_1internal_1_1_const_char_ptr" kindref="compound">ConstCharPtr</ref><sp/>{</highlight></codeline>
<codeline lineno="742" refid="d6/dbb/structtesting_1_1internal_1_1_const_char_ptr_1a57848b2c718f16a659ff8e241541dc5c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d6/dbb/structtesting_1_1internal_1_1_const_char_ptr_1a57848b2c718f16a659ff8e241541dc5c" kindref="member">ConstCharPtr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>:<sp/>value(str)<sp/>{}</highlight></codeline>
<codeline lineno="743" refid="d6/dbb/structtesting_1_1internal_1_1_const_char_ptr_1a67b76affb3b5d35fa419ac234144038b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="744" refid="d6/dbb/structtesting_1_1internal_1_1_const_char_ptr_1a8556878012feffc9e0beb86cd78f424d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d6/dbb/structtesting_1_1internal_1_1_const_char_ptr_1a8556878012feffc9e0beb86cd78f424d" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="745"><highlight class="normal">};</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>simple<sp/>Linear<sp/>Congruential<sp/>Generator<sp/>for<sp/>generating<sp/>random</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="comment">//<sp/>numbers<sp/>with<sp/>a<sp/>uniform<sp/>distribution.<sp/><sp/>Unlike<sp/>rand()<sp/>and<sp/>srand(),<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>use<sp/>global<sp/>state<sp/>(and<sp/>therefore<sp/>can&apos;t<sp/>interfere<sp/>with<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code).<sp/><sp/>Unlike<sp/>rand_r(),<sp/>it&apos;s<sp/>portable.<sp/><sp/>An<sp/>LCG<sp/>isn&apos;t<sp/>very<sp/>random,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>it&apos;s<sp/>good<sp/>enough<sp/>for<sp/>our<sp/>purposes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752" refid="db/da2/classtesting_1_1internal_1_1_random" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="db/da2/classtesting_1_1internal_1_1_random" kindref="compound">Random</ref><sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="754" refid="db/da2/classtesting_1_1internal_1_1_random_1a2fed60247b0c94185cd61c88a5e44941" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/>kMaxRange<sp/>=<sp/>1u<sp/>&lt;&lt;<sp/>31;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="db/da2/classtesting_1_1internal_1_1_random_1a453a5749cc9fc152efc2a17483bddb84" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="db/da2/classtesting_1_1internal_1_1_random_1a453a5749cc9fc152efc2a17483bddb84" kindref="member">Random</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/>seed)<sp/>:<sp/>state_(seed)<sp/>{}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758" refid="db/da2/classtesting_1_1internal_1_1_random_1aaca1e9a7a7bc2a613347117db7ab28b1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/da2/classtesting_1_1internal_1_1_random_1aaca1e9a7a7bc2a613347117db7ab28b1" kindref="member">Reseed</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/>seed)<sp/>{<sp/>state_<sp/>=<sp/>seed;<sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>random<sp/>number<sp/>from<sp/>[0,<sp/>range).<sp/><sp/>Crashes<sp/>if<sp/>&apos;range&apos;<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>or<sp/>greater<sp/>than<sp/>kMaxRange.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/>Generate(<ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/>range);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="765" refid="db/da2/classtesting_1_1internal_1_1_random_1a4cb6bfa4b3d348765b3b6f2038b6393b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/><ref refid="db/da2/classtesting_1_1internal_1_1_random_1a4cb6bfa4b3d348765b3b6f2038b6393b" kindref="member">state_</ref>;</highlight></codeline>
<codeline lineno="766" refid="db/da2/classtesting_1_1internal_1_1_random_1ad076668cae461e3008515f11ca980c77" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="db/da2/classtesting_1_1internal_1_1_random_1ad076668cae461e3008515f11ca980c77" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="db/da2/classtesting_1_1internal_1_1_random" kindref="compound">Random</ref>);</highlight></codeline>
<codeline lineno="767"><highlight class="normal">};</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defining<sp/>a<sp/>variable<sp/>of<sp/>type<sp/>CompileAssertTypesEqual&lt;T1,<sp/>T2&gt;<sp/>will<sp/>cause<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiler<sp/>error<sp/>iff<sp/>T1<sp/>and<sp/>T2<sp/>are<sp/>different<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="772" refid="db/dbe/structtesting_1_1internal_1_1_compile_assert_types_equal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/dbe/structtesting_1_1internal_1_1_compile_assert_types_equal" kindref="compound">CompileAssertTypesEqual</ref>;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="775" refid="d5/df1/structtesting_1_1internal_1_1_compile_assert_types_equal_3_01_t_00_01_t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/dbe/structtesting_1_1internal_1_1_compile_assert_types_equal" kindref="compound">CompileAssertTypesEqual</ref>&lt;T,<sp/>T&gt;<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal">};</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Removes<sp/>the<sp/>reference<sp/>from<sp/>a<sp/>type<sp/>if<sp/>it<sp/>is<sp/>a<sp/>reference<sp/>type,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise<sp/>leaves<sp/>it<sp/>unchanged.<sp/><sp/>This<sp/>is<sp/>the<sp/>same<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tr1::remove_reference,<sp/>which<sp/>is<sp/>not<sp/>widely<sp/>available<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="782" refid="db/d62/structtesting_1_1internal_1_1_remove_reference_1a565429e62c1d4fd084335146ba778e17" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/d62/structtesting_1_1internal_1_1_remove_reference" kindref="compound">RemoveReference</ref><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="db/d62/structtesting_1_1internal_1_1_remove_reference_1a565429e62c1d4fd084335146ba778e17" kindref="member">type</ref>;<sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="784" refid="d2/de2/structtesting_1_1internal_1_1_remove_reference_3_01_t_01_6_01_4_1a565429e62c1d4fd084335146ba778e17" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/d62/structtesting_1_1internal_1_1_remove_reference" kindref="compound">RemoveReference</ref>&lt;T&amp;&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="d2/de2/structtesting_1_1internal_1_1_remove_reference_3_01_t_01_6_01_4_1a565429e62c1d4fd084335146ba778e17" kindref="member">type</ref>;<sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>handy<sp/>wrapper<sp/>around<sp/>RemoveReference<sp/>that<sp/>works<sp/>when<sp/>the<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T<sp/>depends<sp/>on<sp/>template<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788" refid="d5/da1/gtest-internal_8h_1a84c72f25a6a6600e3ff8381ca6982ae9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_REMOVE_REFERENCE_(T)<sp/>\</highlight></codeline>
<codeline lineno="789"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typename<sp/>::testing::internal::RemoveReference&lt;T&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Removes<sp/>const<sp/>from<sp/>a<sp/>type<sp/>if<sp/>it<sp/>is<sp/>a<sp/>const<sp/>type,<sp/>otherwise<sp/>leaves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>unchanged.<sp/><sp/>This<sp/>is<sp/>the<sp/>same<sp/>as<sp/>tr1::remove_const,<sp/>which<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>widely<sp/>available<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="795" refid="d1/d31/structtesting_1_1internal_1_1_remove_const_1a565429e62c1d4fd084335146ba778e17" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d1/d31/structtesting_1_1internal_1_1_remove_const" kindref="compound">RemoveConst</ref><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="d1/d31/structtesting_1_1internal_1_1_remove_const_1a565429e62c1d4fd084335146ba778e17" kindref="member">type</ref>;<sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="797" refid="d4/d62/structtesting_1_1internal_1_1_remove_const_3_01const_01_t_01_4_1a565429e62c1d4fd084335146ba778e17" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d1/d31/structtesting_1_1internal_1_1_remove_const" kindref="compound">RemoveConst</ref>&lt;const<sp/>T&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="d4/d62/structtesting_1_1internal_1_1_remove_const_3_01const_01_t_01_4_1a565429e62c1d4fd084335146ba778e17" kindref="member">type</ref>;<sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>8.0,<sp/>Sun<sp/>C++,<sp/>and<sp/>IBM<sp/>XL<sp/>C++<sp/>have<sp/>a<sp/>bug<sp/>which<sp/>causes<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment">//<sp/>definition<sp/>to<sp/>fail<sp/>to<sp/>remove<sp/>the<sp/>const<sp/>in<sp/>&apos;const<sp/>int[3]&apos;<sp/>and<sp/>&apos;const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char[3][4]&apos;.<sp/><sp/>The<sp/>following<sp/>specialization<sp/>works<sp/>around<sp/>the<sp/>bug.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="803" refid="d8/df8/structtesting_1_1internal_1_1_remove_const_3_01const_01_t_0f_n_0e_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d1/d31/structtesting_1_1internal_1_1_remove_const" kindref="compound">RemoveConst</ref>&lt;const<sp/>T[N]&gt;<sp/>{</highlight></codeline>
<codeline lineno="804" refid="d8/df8/structtesting_1_1internal_1_1_remove_const_3_01const_01_t_0f_n_0e_4_1abca147e4d0abbcfdb90a895286db2b95" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/d31/structtesting_1_1internal_1_1_remove_const_1a565429e62c1d4fd084335146ba778e17" kindref="member">RemoveConst&lt;T&gt;::type</ref><sp/><ref refid="d1/d31/structtesting_1_1internal_1_1_remove_const_1a565429e62c1d4fd084335146ba778e17" kindref="member">type</ref>[N];</highlight></codeline>
<codeline lineno="805"><highlight class="normal">};</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&lt;<sp/>1400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>only<sp/>specialization<sp/>that<sp/>allows<sp/>VC++<sp/>7.1<sp/>to<sp/>remove<sp/>const<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;const<sp/>int[3]<sp/>and<sp/>&apos;const<sp/>int[3][4]&apos;.<sp/><sp/>However,<sp/>it<sp/>causes<sp/>trouble<sp/>with<sp/>GCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>thus<sp/>needs<sp/>to<sp/>be<sp/>conditionally<sp/>compiled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d1/d31/structtesting_1_1internal_1_1_remove_const" kindref="compound">RemoveConst</ref>&lt;T[N]&gt;<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/d31/structtesting_1_1internal_1_1_remove_const_1a565429e62c1d4fd084335146ba778e17" kindref="member">RemoveConst&lt;T&gt;::type</ref><sp/><ref refid="d1/d31/structtesting_1_1internal_1_1_remove_const_1a565429e62c1d4fd084335146ba778e17" kindref="member">type</ref>[N];</highlight></codeline>
<codeline lineno="814"><highlight class="normal">};</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>handy<sp/>wrapper<sp/>around<sp/>RemoveConst<sp/>that<sp/>works<sp/>when<sp/>the<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T<sp/>depends<sp/>on<sp/>template<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819" refid="d5/da1/gtest-internal_8h_1a2ffec8c60510eb130af387f5ce9a756a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_REMOVE_CONST_(T)<sp/>\</highlight></codeline>
<codeline lineno="820"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typename<sp/>::testing::internal::RemoveConst&lt;T&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Turns<sp/>const<sp/>U&amp;,<sp/>U&amp;,<sp/>const<sp/>U,<sp/>and<sp/>U<sp/>all<sp/>into<sp/>U.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823" refid="d5/da1/gtest-internal_8h_1a874567b176266188fabfffb8393267ce" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_REMOVE_REFERENCE_AND_CONST_(T)<sp/>\</highlight></codeline>
<codeline lineno="824"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_REMOVE_CONST_(GTEST_REMOVE_REFERENCE_(T))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>reference<sp/>to<sp/>a<sp/>type<sp/>if<sp/>it<sp/>is<sp/>not<sp/>a<sp/>reference<sp/>type,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise<sp/>leaves<sp/>it<sp/>unchanged.<sp/><sp/>This<sp/>is<sp/>the<sp/>same<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tr1::add_reference,<sp/>which<sp/>is<sp/>not<sp/>widely<sp/>available<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="830" refid="d4/dde/structtesting_1_1internal_1_1_add_reference_1a08e05528fbb401bd8299a21d67d13ee3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d4/dde/structtesting_1_1internal_1_1_add_reference" kindref="compound">AddReference</ref><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="d4/dde/structtesting_1_1internal_1_1_add_reference_1a08e05528fbb401bd8299a21d67d13ee3" kindref="member">type</ref>;<sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="832" refid="d3/dde/structtesting_1_1internal_1_1_add_reference_3_01_t_01_6_01_4_1a08e05528fbb401bd8299a21d67d13ee3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d4/dde/structtesting_1_1internal_1_1_add_reference" kindref="compound">AddReference</ref>&lt;T&amp;&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="d3/dde/structtesting_1_1internal_1_1_add_reference_3_01_t_01_6_01_4_1a08e05528fbb401bd8299a21d67d13ee3" kindref="member">type</ref>;<sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>handy<sp/>wrapper<sp/>around<sp/>AddReference<sp/>that<sp/>works<sp/>when<sp/>the<sp/>argument<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment">//<sp/>depends<sp/>on<sp/>template<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836" refid="d5/da1/gtest-internal_8h_1ab389953fc1f7e4efae30d182a0e0a13b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ADD_REFERENCE_(T)<sp/>\</highlight></codeline>
<codeline lineno="837"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typename<sp/>::testing::internal::AddReference&lt;T&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>reference<sp/>to<sp/>const<sp/>on<sp/>top<sp/>of<sp/>T<sp/>as<sp/>necessary.<sp/><sp/>For<sp/>example,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>transforms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>char<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==&gt;<sp/>const<sp/>char&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>char<sp/><sp/><sp/>==&gt;<sp/>const<sp/>char&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>char&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==&gt;<sp/>const<sp/>char&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>char&amp;<sp/><sp/>==&gt;<sp/>const<sp/>char&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>argument<sp/>T<sp/>must<sp/>depend<sp/>on<sp/>some<sp/>template<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848" refid="d5/da1/gtest-internal_8h_1a9f91fcd24cae0b48fdaeb19102dac525" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_REFERENCE_TO_CONST_(T)<sp/>\</highlight></codeline>
<codeline lineno="849"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_ADD_REFERENCE_(const<sp/>GTEST_REMOVE_REFERENCE_(T))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ImplicitlyConvertible&lt;From,<sp/>To&gt;::value<sp/>is<sp/>a<sp/>compile-time<sp/>bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constant<sp/>that&apos;s<sp/>true<sp/>iff<sp/>type<sp/>From<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>To.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>From,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="855" refid="db/d23/classtesting_1_1internal_1_1_implicitly_convertible" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="db/d23/classtesting_1_1internal_1_1_implicitly_convertible" kindref="compound">ImplicitlyConvertible</ref><sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>the<sp/>following<sp/>helper<sp/>functions<sp/>only<sp/>for<sp/>their<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>They<sp/>have<sp/>no<sp/>implementations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MakeFrom()<sp/>is<sp/>an<sp/>expression<sp/>whose<sp/>type<sp/>is<sp/>From.<sp/><sp/>We<sp/>cannot<sp/>simply</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>From(),<sp/>as<sp/>the<sp/>type<sp/>From<sp/>may<sp/>not<sp/>have<sp/>a<sp/>public<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863" refid="db/d23/classtesting_1_1internal_1_1_implicitly_convertible_1a41e59f70517ea8e5b880f27f37907f00" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d4/dde/structtesting_1_1internal_1_1_add_reference_1a08e05528fbb401bd8299a21d67d13ee3" kindref="member">AddReference&lt;From&gt;::type</ref><sp/><ref refid="db/d23/classtesting_1_1internal_1_1_implicitly_convertible_1a41e59f70517ea8e5b880f27f37907f00" kindref="member">MakeFrom</ref>();</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>two<sp/>functions<sp/>are<sp/>overloaded.<sp/><sp/>Given<sp/>an<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper(x),<sp/>the<sp/>compiler<sp/>will<sp/>pick<sp/>the<sp/>first<sp/>version<sp/>if<sp/>x<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implicitly<sp/>converted<sp/>to<sp/>type<sp/>To;<sp/>otherwise<sp/>it<sp/>will<sp/>pick<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>second<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>version<sp/>returns<sp/>a<sp/>value<sp/>of<sp/>size<sp/>1,<sp/>and<sp/>the<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>version<sp/>returns<sp/>a<sp/>value<sp/>of<sp/>size<sp/>2.<sp/><sp/>Therefore,<sp/>by<sp/>checking<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>size<sp/>of<sp/>Helper(x),<sp/>which<sp/>can<sp/>be<sp/>done<sp/>at<sp/>compile<sp/>time,<sp/>we<sp/>can<sp/>tell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>version<sp/>of<sp/>Helper()<sp/>is<sp/>used,<sp/>and<sp/>hence<sp/>whether<sp/>x<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implicitly<sp/>converted<sp/>to<sp/>type<sp/>To.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875" refid="db/d23/classtesting_1_1internal_1_1_implicitly_convertible_1aa7f6464439603a4d73da0e75bc280e2f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="db/d23/classtesting_1_1internal_1_1_implicitly_convertible_1aa7f6464439603a4d73da0e75bc280e2f" kindref="member">Helper</ref>(To);</highlight></codeline>
<codeline lineno="876" refid="db/d23/classtesting_1_1internal_1_1_implicitly_convertible_1a9044039e84654d2d043aa732bf8609b6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>char<sp/>(&amp;<ref refid="db/d23/classtesting_1_1internal_1_1_implicitly_convertible_1a9044039e84654d2d043aa732bf8609b6" kindref="member">Helper</ref>(...))[2];<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>put<sp/>the<sp/>&apos;public&apos;<sp/>section<sp/>after<sp/>the<sp/>&apos;private&apos;<sp/>section,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>MSVC<sp/>refuses<sp/>to<sp/>compile<sp/>the<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__BORLANDC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>C++Builder<sp/>cannot<sp/>use<sp/>member<sp/>overload<sp/>resolution<sp/>during<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>instantiation.<sp/><sp/>The<sp/>simplest<sp/>workaround<sp/>is<sp/>to<sp/>use<sp/>its<sp/>C++0x<sp/>type<sp/>traits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>functions<sp/>(C++Builder<sp/>2009<sp/>and<sp/>above<sp/>only).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>__is_convertible(From,<sp/>To);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MSVC<sp/>warns<sp/>about<sp/>implicitly<sp/>converting<sp/>from<sp/>double<sp/>to<sp/>int<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>possible<sp/>loss<sp/>of<sp/>data,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>temporarily<sp/>disable<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a76a726de98cf61e65af03fd6f10a9bc0" kindref="member">GTEST_DISABLE_MSC_WARNINGS_PUSH_</ref>(4244)</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>static<sp/>const<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(<ref refid="db/d23/classtesting_1_1internal_1_1_implicitly_convertible_1aa7f6464439603a4d73da0e75bc280e2f" kindref="member">Helper</ref>(<ref refid="db/d23/classtesting_1_1internal_1_1_implicitly_convertible" kindref="compound">ImplicitlyConvertible</ref>::<ref refid="db/d23/classtesting_1_1internal_1_1_implicitly_convertible_1a41e59f70517ea8e5b880f27f37907f00" kindref="member">MakeFrom</ref>()))<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1ab4c44546d6d9aced68993b87b608fc06" kindref="member">GTEST_DISABLE_MSC_WARNINGS_POP_</ref>()</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal">};</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>From,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/d23/classtesting_1_1internal_1_1_implicitly_convertible" kindref="compound">ImplicitlyConvertible&lt;From, To&gt;::value</ref>;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsAProtocolMessage&lt;T&gt;::value<sp/>is<sp/>a<sp/>compile-time<sp/>bool<sp/>constant<sp/>that&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="comment">//<sp/>true<sp/>iff<sp/>T<sp/>is<sp/>type<sp/>ProtocolMessage,<sp/>proto2::Message,<sp/>or<sp/>a<sp/>subclass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>those.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="903" refid="d9/de1/structtesting_1_1internal_1_1_is_a_protocol_message" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d9/de1/structtesting_1_1internal_1_1_is_a_protocol_message" kindref="compound">IsAProtocolMessage</ref></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d3/d75/structtesting_1_1internal_1_1bool__constant" kindref="compound">bool_constant</ref>&lt;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>ImplicitlyConvertible&lt;const<sp/>T*,<sp/>const<sp/>::ProtocolMessage*&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>ImplicitlyConvertible&lt;const<sp/>T*,<sp/>const<sp/>::proto2::Message*&gt;::value&gt;<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal">};</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>the<sp/>compiler<sp/>sees<sp/>expression<sp/>IsContainerTest&lt;C&gt;(0),<sp/>if<sp/>C<sp/>is<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STL-style<sp/>container<sp/>class,<sp/>the<sp/>first<sp/>overload<sp/>of<sp/>IsContainerTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>viable<sp/>(since<sp/>both<sp/>C::iterator*<sp/>and<sp/>C::const_iterator*<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">//<sp/>valid<sp/>types<sp/>and<sp/>NULL<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>them).<sp/><sp/>It<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>picked<sp/>over<sp/>the<sp/>second<sp/>overload<sp/>as<sp/>&apos;int&apos;<sp/>is<sp/>a<sp/>perfect<sp/>match<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>type<sp/>of<sp/>argument<sp/>0.<sp/><sp/>If<sp/>C::iterator<sp/>or<sp/>C::const_iterator<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>valid<sp/>type,<sp/>the<sp/>first<sp/>overload<sp/>is<sp/>not<sp/>viable,<sp/>and<sp/>the<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">//<sp/>overload<sp/>will<sp/>be<sp/>picked.<sp/><sp/>Therefore,<sp/>we<sp/>can<sp/>determine<sp/>whether<sp/>C<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>container<sp/>class<sp/>by<sp/>checking<sp/>the<sp/>type<sp/>of<sp/>IsContainerTest&lt;C&gt;(0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>of<sp/>the<sp/>expression<sp/>is<sp/>insignificant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>we<sp/>look<sp/>for<sp/>both<sp/>C::iterator<sp/>and<sp/>C::const_iterator.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reason<sp/>is<sp/>that<sp/>C++<sp/>injects<sp/>the<sp/>name<sp/>of<sp/>a<sp/>class<sp/>as<sp/>a<sp/>member<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>itself<sp/>(e.g.<sp/>you<sp/>can<sp/>refer<sp/>to<sp/>class<sp/>iterator<sp/>as<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;iterator&apos;<sp/>or<sp/>&apos;iterator::iterator&apos;).<sp/><sp/>If<sp/>we<sp/>look<sp/>for<sp/>C::iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only,<sp/>for<sp/>example,<sp/>we<sp/>would<sp/>mistakenly<sp/>think<sp/>that<sp/>a<sp/>class<sp/>named</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment">//<sp/>iterator<sp/>is<sp/>an<sp/>STL<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also<sp/>note<sp/>that<sp/>the<sp/>simpler<sp/>approach<sp/>of<sp/>overloading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsContainerTest(typename<sp/>C::const_iterator*)<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsContainerTest(...)<sp/>doesn&apos;t<sp/>work<sp/>with<sp/>Visual<sp/>Age<sp/>C++<sp/>and<sp/>Sun<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930" refid="d0/da7/namespacetesting_1_1internal_1a352c9f642298e3ae8c7eb84e3278ba65" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a352c9f642298e3ae8c7eb84e3278ba65" kindref="member">IsContainer</ref>;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="932" refid="d0/da7/namespacetesting_1_1internal_1acb6ea1086293c1d6636e3c67941351fb" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a352c9f642298e3ae8c7eb84e3278ba65" kindref="member">IsContainer</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1acb6ea1086293c1d6636e3c67941351fb" kindref="member">IsContainerTest</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>dummy<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C::iterator*<sp/></highlight><highlight class="comment">/*<sp/>it<sp/>*/</highlight><highlight class="normal"><sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C::const_iterator*<sp/></highlight><highlight class="comment">/*<sp/>const_it<sp/>*/</highlight><highlight class="normal"><sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="936"><highlight class="normal">}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938" refid="d0/da7/namespacetesting_1_1internal_1a7702df52e064b640254945414578e90c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a7702df52e064b640254945414578e90c" kindref="member">IsNotContainer</ref>;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="940" refid="d0/da7/namespacetesting_1_1internal_1af545a2ae928b8a9e7581978234464275" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a7702df52e064b640254945414578e90c" kindref="member">IsNotContainer</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1acb6ea1086293c1d6636e3c67941351fb" kindref="member">IsContainerTest</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>dummy<sp/>*/</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EnableIf&lt;condition&gt;::type<sp/>is<sp/>void<sp/>when<sp/>&apos;Cond&apos;<sp/>is<sp/>true,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="comment">//<sp/>undefined<sp/>when<sp/>&apos;Cond&apos;<sp/>is<sp/>false.<sp/><sp/>To<sp/>use<sp/>SFINAE<sp/>to<sp/>make<sp/>a<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="comment">//<sp/>overload<sp/>only<sp/>apply<sp/>when<sp/>a<sp/>particular<sp/>expression<sp/>is<sp/>true,<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;typename<sp/>EnableIf&lt;expression&gt;::type*<sp/>=<sp/>0&quot;<sp/>as<sp/>the<sp/>last<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946" refid="d6/d3b/structtesting_1_1internal_1_1_enable_if" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d6/d3b/structtesting_1_1internal_1_1_enable_if" kindref="compound">EnableIf</ref>;</highlight></codeline>
<codeline lineno="947" refid="d6/d20/structtesting_1_1internal_1_1_enable_if_3_01true_01_4_1ab1552f8e45b26f82fdca0e71da39d755" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d6/d3b/structtesting_1_1internal_1_1_enable_if" kindref="compound">EnableIf</ref>&lt;true&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d20/structtesting_1_1internal_1_1_enable_if_3_01true_01_4_1ab1552f8e45b26f82fdca0e71da39d755" kindref="member">type</ref>;<sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utilities<sp/>for<sp/>native<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ArrayEq()<sp/>compares<sp/>two<sp/>k-dimensional<sp/>native<sp/>arrays<sp/>using<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="comment">//<sp/>elements&apos;<sp/>operator==,<sp/>where<sp/>k<sp/>can<sp/>be<sp/>any<sp/>integer<sp/>&gt;=<sp/>0.<sp/><sp/>When<sp/>k<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>0,<sp/>ArrayEq()<sp/>degenerates<sp/>into<sp/>comparing<sp/>a<sp/>single<sp/>pair<sp/>of<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4290fdb0c0d7ce6f09d11d80ebe064e3" kindref="member">ArrayEq</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>lhs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U*<sp/>rhs);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>generic<sp/>version<sp/>is<sp/>used<sp/>when<sp/>k<sp/>is<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="960" refid="d0/da7/namespacetesting_1_1internal_1a49b4d0ee49c0f8c93bab29ebd20630cc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4290fdb0c0d7ce6f09d11d80ebe064e3" kindref="member">ArrayEq</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>==<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>overload<sp/>is<sp/>used<sp/>when<sp/>k<sp/>&gt;=<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="964" refid="d0/da7/namespacetesting_1_1internal_1a5cb6f81ee827130024261121c742b26c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4290fdb0c0d7ce6f09d11d80ebe064e3" kindref="member">ArrayEq</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T(&amp;lhs)[N],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U(&amp;rhs)[N])<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4290fdb0c0d7ce6f09d11d80ebe064e3" kindref="member">internal::ArrayEq</ref>(lhs,<sp/>N,<sp/>rhs);</highlight></codeline>
<codeline lineno="966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>helper<sp/>reduces<sp/>code<sp/>bloat.<sp/><sp/>If<sp/>we<sp/>instead<sp/>put<sp/>its<sp/>logic<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>previous<sp/>ArrayEq()<sp/>function,<sp/>arrays<sp/>with<sp/>different<sp/>sizes<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lead<sp/>to<sp/>different<sp/>copies<sp/>of<sp/>the<sp/>template<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="972" refid="d0/da7/namespacetesting_1_1internal_1a4290fdb0c0d7ce6f09d11d80ebe064e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4290fdb0c0d7ce6f09d11d80ebe064e3" kindref="member">ArrayEq</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>lhs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d0/da7/namespacetesting_1_1internal_1a4290fdb0c0d7ce6f09d11d80ebe064e3" kindref="member">internal::ArrayEq</ref>(lhs[i],<sp/>rhs[i]))</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Finds<sp/>the<sp/>first<sp/>element<sp/>in<sp/>the<sp/>iterator<sp/>range<sp/>[begin,<sp/>end)<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>equals<sp/>elem.<sp/><sp/>Element<sp/>may<sp/>be<sp/>a<sp/>native<sp/>array<sp/>type<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="983" refid="d0/da7/namespacetesting_1_1internal_1a94a857fe6ff32cf4fdc4769a4071f239" refkind="member"><highlight class="normal">Iter<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a94a857fe6ff32cf4fdc4769a4071f239" kindref="member">ArrayAwareFind</ref>(Iter<sp/>begin,<sp/>Iter<sp/>end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Element&amp;<sp/>elem)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Iter<sp/>it<sp/>=<sp/>begin;<sp/>it<sp/>!=<sp/>end;<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/da7/namespacetesting_1_1internal_1a4290fdb0c0d7ce6f09d11d80ebe064e3" kindref="member">internal::ArrayEq</ref>(*it,<sp/>elem))</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CopyArray()<sp/>copies<sp/>a<sp/>k-dimensional<sp/>native<sp/>array<sp/>using<sp/>the<sp/>elements&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator=,<sp/>where<sp/>k<sp/>can<sp/>be<sp/>any<sp/>integer<sp/>&gt;=<sp/>0.<sp/><sp/>When<sp/>k<sp/>is<sp/>0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CopyArray()<sp/>degenerates<sp/>into<sp/>copying<sp/>a<sp/>single<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac1dbf4f4a6f74c5943c1d4903bd48b72" kindref="member">CopyArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>from,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>U*<sp/>to);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>generic<sp/>version<sp/>is<sp/>used<sp/>when<sp/>k<sp/>is<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="1000" refid="d0/da7/namespacetesting_1_1internal_1a84d0e746ba0827cc52b53d22000de0e8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac1dbf4f4a6f74c5943c1d4903bd48b72" kindref="member">CopyArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>from,<sp/>U*<sp/>to)<sp/>{<sp/>*to<sp/>=<sp/>from;<sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>overload<sp/>is<sp/>used<sp/>when<sp/>k<sp/>&gt;=<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1004" refid="d0/da7/namespacetesting_1_1internal_1a1e7ae855686720615dcd5754c8181c62" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac1dbf4f4a6f74c5943c1d4903bd48b72" kindref="member">CopyArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T(&amp;from)[N],<sp/>U(*to)[N])<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac1dbf4f4a6f74c5943c1d4903bd48b72" kindref="member">internal::CopyArray</ref>(from,<sp/>N,<sp/>*to);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>helper<sp/>reduces<sp/>code<sp/>bloat.<sp/><sp/>If<sp/>we<sp/>instead<sp/>put<sp/>its<sp/>logic<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>previous<sp/>CopyArray()<sp/>function,<sp/>arrays<sp/>with<sp/>different<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="comment">//<sp/>would<sp/>lead<sp/>to<sp/>different<sp/>copies<sp/>of<sp/>the<sp/>template<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="1012" refid="d0/da7/namespacetesting_1_1internal_1ac1dbf4f4a6f74c5943c1d4903bd48b72" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac1dbf4f4a6f74c5943c1d4903bd48b72" kindref="member">CopyArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>from,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>U*<sp/>to)<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac1dbf4f4a6f74c5943c1d4903bd48b72" kindref="member">internal::CopyArray</ref>(from[i],<sp/>to<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>relation<sp/>between<sp/>an<sp/>NativeArray<sp/>object<sp/>(see<sp/>below)<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">//<sp/>native<sp/>array<sp/>it<sp/>represents.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>2<sp/>different<sp/>structs<sp/>to<sp/>allow<sp/>non-copyable<sp/>types<sp/>to<sp/>be<sp/>used,<sp/>as<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>RelationToSourceReference()<sp/>is<sp/>passed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022" refid="df/d1f/structtesting_1_1internal_1_1_relation_to_source_reference" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="df/d1f/structtesting_1_1internal_1_1_relation_to_source_reference" kindref="compound">RelationToSourceReference</ref><sp/>{};</highlight></codeline>
<codeline lineno="1023" refid="dc/d60/structtesting_1_1internal_1_1_relation_to_source_copy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="dc/d60/structtesting_1_1internal_1_1_relation_to_source_copy" kindref="compound">RelationToSourceCopy</ref><sp/>{};</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adapts<sp/>a<sp/>native<sp/>array<sp/>to<sp/>a<sp/>read-only<sp/>STL-style<sp/>container.<sp/><sp/>Instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>complete<sp/>STL<sp/>container<sp/>concept,<sp/>this<sp/>adaptor<sp/>only<sp/>implements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="comment">//<sp/>members<sp/>useful<sp/>for<sp/>Google<sp/>Mock&apos;s<sp/>container<sp/>matchers.<sp/><sp/>New<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>added<sp/>as<sp/>needed.<sp/><sp/>To<sp/>simplify<sp/>the<sp/>implementation,<sp/>we<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="comment">//<sp/>support<sp/>Element<sp/>being<sp/>a<sp/>raw<sp/>type<sp/>(i.e.<sp/>having<sp/>no<sp/>top-level<sp/>const<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference<sp/>modifier).<sp/><sp/>It&apos;s<sp/>the<sp/>client&apos;s<sp/>responsibility<sp/>to<sp/>satisfy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>requirement.<sp/><sp/>Element<sp/>can<sp/>be<sp/>an<sp/>array<sp/>type<sp/>itself<sp/>(hence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="comment">//<sp/>multi-dimensional<sp/>arrays<sp/>are<sp/>supported).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="1034" refid="d3/d87/classtesting_1_1internal_1_1_native_array" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array" kindref="compound">NativeArray</ref><sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>STL-style<sp/>container<sp/>typedefs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a02bfdb9fd305b46f492e4d7d2ef4e0b0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Element<sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a02bfdb9fd305b46f492e4d7d2ef4e0b0" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="1038" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a2869d20ba91b6a6578464123e825fc9f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Element*<sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a2869d20ba91b6a6578464123e825fc9f" kindref="member">iterator</ref>;</highlight></codeline>
<codeline lineno="1039" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a673a2c2010a7e9bdcc7b6b75d54121f5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Element*<sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a673a2c2010a7e9bdcc7b6b75d54121f5" kindref="member">const_iterator</ref>;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>from<sp/>a<sp/>native<sp/>array.<sp/>References<sp/>the<sp/>source.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a63393aacb767c8f032e02d370e26cdd1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a63393aacb767c8f032e02d370e26cdd1" kindref="member">NativeArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Element*<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/><ref refid="df/d1f/structtesting_1_1internal_1_1_relation_to_source_reference" kindref="compound">RelationToSourceReference</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1ac528ebf6a12d01b27fbc754fa91de70b" kindref="member">InitRef</ref>(array,<sp/>count);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>from<sp/>a<sp/>native<sp/>array.<sp/>Copies<sp/>the<sp/>source.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a92b910b8c68d9e46b9511df3f8242c33" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a92b910b8c68d9e46b9511df3f8242c33" kindref="member">NativeArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Element*<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/><ref refid="dc/d60/structtesting_1_1internal_1_1_relation_to_source_copy" kindref="compound">RelationToSourceCopy</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a10aeecb1d09db4017ea1a41de5f0cd42" kindref="member">InitCopy</ref>(array,<sp/>count);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a66f5b6b724d55af9a8a5b5d61d44c368" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a66f5b6b724d55af9a8a5b5d61d44c368" kindref="member">NativeArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array" kindref="compound">NativeArray</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>(this-&gt;*rhs.<ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a41046a9ee64904ed845b09b5bebb8ad1" kindref="member">clone_</ref>)(rhs.<ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a8c115ee733c7212df09d86d847d770b8" kindref="member">array_</ref>,<sp/>rhs.<ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a5f31775800bbb46b35b5791def1f3acc" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1adcd158e2ef75d0d5ab8b279c7693d920" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1adcd158e2ef75d0d5ab8b279c7693d920" kindref="member">~NativeArray</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a41046a9ee64904ed845b09b5bebb8ad1" kindref="member">clone_</ref><sp/>!=<sp/>&amp;<ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1ac528ebf6a12d01b27fbc754fa91de70b" kindref="member">NativeArray::InitRef</ref>)</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a8c115ee733c7212df09d86d847d770b8" kindref="member">array_</ref>;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>STL-style<sp/>container<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a259cb5a711406a8c3e5d937eb9350cca" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a259cb5a711406a8c3e5d937eb9350cca" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a5f31775800bbb46b35b5791def1f3acc" kindref="member">size_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1063" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a29305669b60ca1680752e2fc3592ba99" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a673a2c2010a7e9bdcc7b6b75d54121f5" kindref="member">const_iterator</ref><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a29305669b60ca1680752e2fc3592ba99" kindref="member">begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a8c115ee733c7212df09d86d847d770b8" kindref="member">array_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1064" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1accf9a4bd0c34d4a5f6a7dab66ea10cdc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a673a2c2010a7e9bdcc7b6b75d54121f5" kindref="member">const_iterator</ref><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1accf9a4bd0c34d4a5f6a7dab66ea10cdc" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a8c115ee733c7212df09d86d847d770b8" kindref="member">array_</ref><sp/>+<sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a5f31775800bbb46b35b5791def1f3acc" kindref="member">size_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1065" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1aaad419ed3b939da1279ad0b951649059" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1aaad419ed3b939da1279ad0b951649059" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array" kindref="compound">NativeArray</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a259cb5a711406a8c3e5d937eb9350cca" kindref="member">size</ref>()<sp/>==<sp/>rhs.<ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a259cb5a711406a8c3e5d937eb9350cca" kindref="member">size</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4290fdb0c0d7ce6f09d11d80ebe064e3" kindref="member">ArrayEq</ref>(<ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a29305669b60ca1680752e2fc3592ba99" kindref="member">begin</ref>(),<sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a259cb5a711406a8c3e5d937eb9350cca" kindref="member">size</ref>(),<sp/>rhs.<ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a29305669b60ca1680752e2fc3592ba99" kindref="member">begin</ref>());</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a06fc87d81c62e9abb8790b6e5713c55ba68174b128875b524c8e61197700e04dc" kindref="member">kCheckTypeIsNotConstOrAReference</ref><sp/>=<sp/><ref refid="da/d22/structtesting_1_1internal_1_1_static_assert_type_eq_helper" kindref="compound">StaticAssertTypeEqHelper</ref>&lt;</highlight></codeline>
<codeline lineno="1073" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a06fc87d81c62e9abb8790b6e5713c55ba68174b128875b524c8e61197700e04dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Element,<sp/><ref refid="d5/da1/gtest-internal_8h_1a874567b176266188fabfffb8393267ce" kindref="member">GTEST_REMOVE_REFERENCE_AND_CONST_</ref>(Element)&gt;::value,</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initializes<sp/>this<sp/>object<sp/>with<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a10aeecb1d09db4017ea1a41de5f0cd42" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a10aeecb1d09db4017ea1a41de5f0cd42" kindref="member">InitCopy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Element*<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a_size)<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>Element*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>copy<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Element[a_size];</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac1dbf4f4a6f74c5943c1d4903bd48b72" kindref="member">CopyArray</ref>(array,<sp/>a_size,<sp/>copy);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a8c115ee733c7212df09d86d847d770b8" kindref="member">array_</ref><sp/>=<sp/>copy;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a5f31775800bbb46b35b5791def1f3acc" kindref="member">size_</ref><sp/>=<sp/>a_size;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a41046a9ee64904ed845b09b5bebb8ad1" kindref="member">clone_</ref><sp/>=<sp/>&amp;<ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a10aeecb1d09db4017ea1a41de5f0cd42" kindref="member">NativeArray::InitCopy</ref>;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initializes<sp/>this<sp/>object<sp/>with<sp/>a<sp/>reference<sp/>of<sp/>the<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1ac528ebf6a12d01b27fbc754fa91de70b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1ac528ebf6a12d01b27fbc754fa91de70b" kindref="member">InitRef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Element*<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a_size)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a8c115ee733c7212df09d86d847d770b8" kindref="member">array_</ref><sp/>=<sp/>array;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a5f31775800bbb46b35b5791def1f3acc" kindref="member">size_</ref><sp/>=<sp/>a_size;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a41046a9ee64904ed845b09b5bebb8ad1" kindref="member">clone_</ref><sp/>=<sp/>&amp;<ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1ac528ebf6a12d01b27fbc754fa91de70b" kindref="member">NativeArray::InitRef</ref>;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a8c115ee733c7212df09d86d847d770b8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Element*<sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a8c115ee733c7212df09d86d847d770b8" kindref="member">array_</ref>;</highlight></codeline>
<codeline lineno="1093" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a5f31775800bbb46b35b5791def1f3acc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a5f31775800bbb46b35b5791def1f3acc" kindref="member">size_</ref>;</highlight></codeline>
<codeline lineno="1094" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a41046a9ee64904ed845b09b5bebb8ad1" refkind="member"><highlight class="normal"><sp/><sp/>void<sp/>(<ref refid="d3/d87/classtesting_1_1internal_1_1_native_array" kindref="compound">NativeArray</ref>::*<ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1a41046a9ee64904ed845b09b5bebb8ad1" kindref="member">clone_</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Element*,<sp/>size_t);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096" refid="d3/d87/classtesting_1_1internal_1_1_native_array_1ae09809b0ab011ef8f32f6bee8559038d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d3/d87/classtesting_1_1internal_1_1_native_array_1ae09809b0ab011ef8f32f6bee8559038d" kindref="member">GTEST_DISALLOW_ASSIGN_</ref>(<ref refid="d3/d87/classtesting_1_1internal_1_1_native_array" kindref="compound">NativeArray</ref>);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102" refid="d5/da1/gtest-internal_8h_1a8d70025c45a47a493780746dfd66d565" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_MESSAGE_AT_(file,<sp/>line,<sp/>message,<sp/>result_type)<sp/>\</highlight></codeline>
<codeline lineno="1103"><highlight class="preprocessor"><sp/><sp/>::testing::internal::AssertHelper(result_type,<sp/>file,<sp/>line,<sp/>message)<sp/>\</highlight></codeline>
<codeline lineno="1104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>=<sp/>::testing::Message()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106" refid="d5/da1/gtest-internal_8h_1a94c73d5368ec946bc354d0992ad00810" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_MESSAGE_(message,<sp/>result_type)<sp/>\</highlight></codeline>
<codeline lineno="1107"><highlight class="preprocessor"><sp/><sp/>GTEST_MESSAGE_AT_(__FILE__,<sp/>__LINE__,<sp/>message,<sp/>result_type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109" refid="d5/da1/gtest-internal_8h_1a0f9a4c3ea82cc7bf4478eaffdc168358" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FATAL_FAILURE_(message)<sp/>\</highlight></codeline>
<codeline lineno="1110"><highlight class="preprocessor"><sp/><sp/>return<sp/>GTEST_MESSAGE_(message,<sp/>::testing::TestPartResult::kFatalFailure)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112" refid="d5/da1/gtest-internal_8h_1a6cb7482cfa03661a91c698eb5895f642" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_NONFATAL_FAILURE_(message)<sp/>\</highlight></codeline>
<codeline lineno="1113"><highlight class="preprocessor"><sp/><sp/>GTEST_MESSAGE_(message,<sp/>::testing::TestPartResult::kNonFatalFailure)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115" refid="d5/da1/gtest-internal_8h_1abe012b550eb3807e8c49f7e161bd1567" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_SUCCESS_(message)<sp/>\</highlight></codeline>
<codeline lineno="1116"><highlight class="preprocessor"><sp/><sp/>GTEST_MESSAGE_(message,<sp/>::testing::TestPartResult::kSuccess)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Suppresses<sp/>MSVC<sp/>warnings<sp/>4072<sp/>(unreachable<sp/>code)<sp/>for<sp/>the<sp/>code<sp/>following</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>statement<sp/>if<sp/>it<sp/>returns<sp/>or<sp/>throws<sp/>(or<sp/>doesn&apos;t<sp/>return<sp/>or<sp/>throw<sp/>in<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>situations).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121" refid="d5/da1/gtest-internal_8h_1a2e66f7dfc5cb87e0fa0289f653173c69" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement)<sp/>\</highlight></codeline>
<codeline lineno="1122"><highlight class="preprocessor"><sp/><sp/>if<sp/>(::testing::internal::AlwaysTrue())<sp/>{<sp/>statement;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124" refid="d5/da1/gtest-internal_8h_1a3f71db93eaf30b0cfca9612b9ac32106" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_TEST_THROW_(statement,<sp/>expected_exception,<sp/>fail)<sp/>\</highlight></codeline>
<codeline lineno="1125"><highlight class="preprocessor"><sp/><sp/>GTEST_AMBIGUOUS_ELSE_BLOCKER_<sp/>\</highlight></codeline>
<codeline lineno="1126"><highlight class="preprocessor"><sp/><sp/>if<sp/>(::testing::internal::ConstCharPtr<sp/>gtest_msg<sp/>=<sp/>&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>gtest_caught_expected<sp/>=<sp/>false;<sp/>\</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>try<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement);<sp/>\</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>catch<sp/>(expected_exception<sp/>const&amp;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gtest_caught_expected<sp/>=<sp/>true;<sp/>\</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>catch<sp/>(...)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gtest_msg.value<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Expected:<sp/>&quot;<sp/>#statement<sp/>&quot;<sp/>throws<sp/>an<sp/>exception<sp/>of<sp/>type<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#expected_exception<sp/>&quot;.\n<sp/><sp/>Actual:<sp/>it<sp/>throws<sp/>a<sp/>different<sp/>type.&quot;;<sp/>\</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>GTEST_CONCAT_TOKEN_(gtest_label_testthrow_,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!gtest_caught_expected)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gtest_msg.value<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Expected:<sp/>&quot;<sp/>#statement<sp/>&quot;<sp/>throws<sp/>an<sp/>exception<sp/>of<sp/>type<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#expected_exception<sp/>&quot;.\n<sp/><sp/>Actual:<sp/>it<sp/>throws<sp/>nothing.&quot;;<sp/>\</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>GTEST_CONCAT_TOKEN_(gtest_label_testthrow_,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>\</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_CONCAT_TOKEN_(gtest_label_testthrow_,<sp/>__LINE__):<sp/>\</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fail(gtest_msg.value)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150" refid="d5/da1/gtest-internal_8h_1a9a109d026b5a904646437d7570e13581" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_TEST_NO_THROW_(statement,<sp/>fail)<sp/>\</highlight></codeline>
<codeline lineno="1151"><highlight class="preprocessor"><sp/><sp/>GTEST_AMBIGUOUS_ELSE_BLOCKER_<sp/>\</highlight></codeline>
<codeline lineno="1152"><highlight class="preprocessor"><sp/><sp/>if<sp/>(::testing::internal::AlwaysTrue())<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>try<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement);<sp/>\</highlight></codeline>
<codeline lineno="1155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>catch<sp/>(...)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>GTEST_CONCAT_TOKEN_(gtest_label_testnothrow_,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="1158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1159"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>\</highlight></codeline>
<codeline lineno="1160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_CONCAT_TOKEN_(gtest_label_testnothrow_,<sp/>__LINE__):<sp/>\</highlight></codeline>
<codeline lineno="1161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>fail(&quot;Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>#statement<sp/>&quot;<sp/>doesn&apos;t<sp/>throw<sp/>an<sp/>exception.\n&quot;<sp/>\</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/><sp/>Actual:<sp/>it<sp/>throws.&quot;)</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164" refid="d5/da1/gtest-internal_8h_1af48bbd26d54d4afc5e4cef39b1c76ba3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_TEST_ANY_THROW_(statement,<sp/>fail)<sp/>\</highlight></codeline>
<codeline lineno="1165"><highlight class="preprocessor"><sp/><sp/>GTEST_AMBIGUOUS_ELSE_BLOCKER_<sp/>\</highlight></codeline>
<codeline lineno="1166"><highlight class="preprocessor"><sp/><sp/>if<sp/>(::testing::internal::AlwaysTrue())<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>bool<sp/>gtest_caught_any<sp/>=<sp/>false;<sp/>\</highlight></codeline>
<codeline lineno="1168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>try<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement);<sp/>\</highlight></codeline>
<codeline lineno="1170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>catch<sp/>(...)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>gtest_caught_any<sp/>=<sp/>true;<sp/>\</highlight></codeline>
<codeline lineno="1173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!gtest_caught_any)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>GTEST_CONCAT_TOKEN_(gtest_label_testanythrow_,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="1176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1177"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>\</highlight></codeline>
<codeline lineno="1178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_CONCAT_TOKEN_(gtest_label_testanythrow_,<sp/>__LINE__):<sp/>\</highlight></codeline>
<codeline lineno="1179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>fail(&quot;Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>#statement<sp/>&quot;<sp/>throws<sp/>an<sp/>exception.\n&quot;<sp/>\</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/><sp/>Actual:<sp/>it<sp/>doesn&apos;t.&quot;)</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>Boolean<sp/>test<sp/>assertions<sp/>such<sp/>as<sp/>EXPECT_TRUE.<sp/>expression<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>either<sp/>a<sp/>boolean<sp/>expression<sp/>or<sp/>an<sp/>AssertionResult.<sp/>text<sp/>is<sp/>a<sp/>textual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>represenation<sp/>of<sp/>expression<sp/>as<sp/>it<sp/>was<sp/>passed<sp/>into<sp/>the<sp/>EXPECT_TRUE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186" refid="d5/da1/gtest-internal_8h_1ae8912365e1d00a7a2bd248268c64aa1a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_TEST_BOOLEAN_(expression,<sp/>text,<sp/>actual,<sp/>expected,<sp/>fail)<sp/>\</highlight></codeline>
<codeline lineno="1187"><highlight class="preprocessor"><sp/><sp/>GTEST_AMBIGUOUS_ELSE_BLOCKER_<sp/>\</highlight></codeline>
<codeline lineno="1188"><highlight class="preprocessor"><sp/><sp/>if<sp/>(const<sp/>::testing::AssertionResult<sp/>gtest_ar_<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="1189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::AssertionResult(expression))<sp/>\</highlight></codeline>
<codeline lineno="1190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>;<sp/>\</highlight></codeline>
<codeline lineno="1191"><highlight class="preprocessor"><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="1192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>fail(::testing::internal::GetBoolAssertionFailureMessage(\</highlight></codeline>
<codeline lineno="1193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtest_ar_,<sp/>text,<sp/>#actual,<sp/>#expected).c_str())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195" refid="d5/da1/gtest-internal_8h_1a1b37a3c446836d33040f3266a6236081" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_TEST_NO_FATAL_FAILURE_(statement,<sp/>fail)<sp/>\</highlight></codeline>
<codeline lineno="1196"><highlight class="preprocessor"><sp/><sp/>GTEST_AMBIGUOUS_ELSE_BLOCKER_<sp/>\</highlight></codeline>
<codeline lineno="1197"><highlight class="preprocessor"><sp/><sp/>if<sp/>(::testing::internal::AlwaysTrue())<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::testing::internal::HasNewFatalFailureHelper<sp/>gtest_fatal_failure_checker;<sp/>\</highlight></codeline>
<codeline lineno="1199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement);<sp/>\</highlight></codeline>
<codeline lineno="1200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(gtest_fatal_failure_checker.has_new_fatal_failure())<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>GTEST_CONCAT_TOKEN_(gtest_label_testnofatal_,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="1202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1203"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>\</highlight></codeline>
<codeline lineno="1204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_CONCAT_TOKEN_(gtest_label_testnofatal_,<sp/>__LINE__):<sp/>\</highlight></codeline>
<codeline lineno="1205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>fail(&quot;Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>#statement<sp/>&quot;<sp/>doesn&apos;t<sp/>generate<sp/>new<sp/>fatal<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;failures<sp/>in<sp/>the<sp/>current<sp/>thread.\n&quot;<sp/>\</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/><sp/>Actual:<sp/>it<sp/>does.&quot;)</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Expands<sp/>to<sp/>the<sp/>name<sp/>of<sp/>the<sp/>class<sp/>that<sp/>implements<sp/>the<sp/>given<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210" refid="d5/da1/gtest-internal_8h_1a87a1ee3a3b9b798195236d053f2e5dcc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_TEST_CLASS_NAME_(test_case_name,<sp/>test_name)<sp/>\</highlight></codeline>
<codeline lineno="1211"><highlight class="preprocessor"><sp/><sp/>test_case_name##_##test_name##_Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>macro<sp/>for<sp/>defining<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214" refid="d5/da1/gtest-internal_8h_1ae2d26f0f92fbaf62bf4c1eca45bb2f1f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_TEST_(test_case_name,<sp/>test_name,<sp/>parent_class,<sp/>parent_id)\</highlight></codeline>
<codeline lineno="1215"><highlight class="preprocessor">class<sp/>GTEST_TEST_CLASS_NAME_(test_case_name,<sp/>test_name)<sp/>:<sp/>public<sp/>parent_class<sp/>{\</highlight></codeline>
<codeline lineno="1216"><highlight class="preprocessor"><sp/>public:\</highlight></codeline>
<codeline lineno="1217"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_CLASS_NAME_(test_case_name,<sp/>test_name)()<sp/>{}\</highlight></codeline>
<codeline lineno="1218"><highlight class="preprocessor"><sp/>private:\</highlight></codeline>
<codeline lineno="1219"><highlight class="preprocessor"><sp/><sp/>virtual<sp/>void<sp/>TestBody();\</highlight></codeline>
<codeline lineno="1220"><highlight class="preprocessor"><sp/><sp/>static<sp/>::testing::TestInfo*<sp/>const<sp/>test_info_<sp/>GTEST_ATTRIBUTE_UNUSED_;\</highlight></codeline>
<codeline lineno="1221"><highlight class="preprocessor"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(\</highlight></codeline>
<codeline lineno="1222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_TEST_CLASS_NAME_(test_case_name,<sp/>test_name));\</highlight></codeline>
<codeline lineno="1223"><highlight class="preprocessor">};\</highlight></codeline>
<codeline lineno="1224"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="1225"><highlight class="preprocessor">::testing::TestInfo*<sp/>const<sp/>GTEST_TEST_CLASS_NAME_(test_case_name,<sp/>test_name)\</highlight></codeline>
<codeline lineno="1226"><highlight class="preprocessor"><sp/><sp/>::test_info_<sp/>=\</highlight></codeline>
<codeline lineno="1227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::testing::internal::MakeAndRegisterTestInfo(\</highlight></codeline>
<codeline lineno="1228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#test_case_name,<sp/>#test_name,<sp/>NULL,<sp/>NULL,<sp/>\</highlight></codeline>
<codeline lineno="1229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::internal::CodeLocation(__FILE__,<sp/>__LINE__),<sp/>\</highlight></codeline>
<codeline lineno="1230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(parent_id),<sp/>\</highlight></codeline>
<codeline lineno="1231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_class::SetUpTestCase,<sp/>\</highlight></codeline>
<codeline lineno="1232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_class::TearDownTestCase,<sp/>\</highlight></codeline>
<codeline lineno="1233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>::testing::internal::TestFactoryImpl&lt;\</highlight></codeline>
<codeline lineno="1234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_TEST_CLASS_NAME_(test_case_name,<sp/>test_name)&gt;);\</highlight></codeline>
<codeline lineno="1235"><highlight class="preprocessor">void<sp/>GTEST_TEST_CLASS_NAME_(test_case_name,<sp/>test_name)::TestBody()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/googletest/include/gtest/internal/gtest-internal.h"/>
  </compounddef>
</doxygen>
