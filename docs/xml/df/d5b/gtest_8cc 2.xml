<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="df/d5b/gtest_8cc" kind="file" language="C++">
    <compoundname>gtest.cc</compoundname>
    <includes refid="d8/d73/gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes refid="d2/d0e/internal_2custom_2gtest_8h" local="yes">gtest/internal/custom/gtest.h</includes>
    <includes refid="dc/dbe/gtest-spi_8h" local="yes">gtest/gtest-spi.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">wchar.h</includes>
    <includes local="no">wctype.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">limits</includes>
    <includes local="no">list</includes>
    <includes local="no">map</includes>
    <includes local="no">ostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">vector</includes>
    <includes local="no">sys/time.h</includes>
    <includes local="no">unistd.h</includes>
    <includes refid="d0/da1/gtest-internal-inl_8h" local="yes">src/gtest-internal-inl.h</includes>
    <includedby refid="d1/d8c/gtest-all_8cc" local="yes">lib/googletest/src/gtest-all.cc</includedby>
    <incdepgraph>
      <node id="14">
        <label>sys/stat.h</label>
      </node>
      <node id="53">
        <label>stdarg.h</label>
      </node>
      <node id="38">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="dc/df2/gtest-param-util_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
        <link refid="d8/d73/gtest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>typeinfo</label>
        <link refid="cpp/header/typeinfo" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="59">
        <label>src/gtest-internal-inl.h</label>
        <link refid="d0/da1/gtest-internal-inl_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>assert.h</label>
      </node>
      <node id="27">
        <label>float.h</label>
      </node>
      <node id="56">
        <label>wctype.h</label>
      </node>
      <node id="45">
        <label>gtest/gtest_prod.h</label>
        <link refid="d4/db1/gtest__prod_8h"/>
      </node>
      <node id="20">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="d6/d76/gtest-port-arch_8h"/>
      </node>
      <node id="4">
        <label>ostream</label>
        <link refid="cpp/header/ostream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="33">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="dc/d79/gtest-filepath_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>stdlib.h</label>
      </node>
      <node id="44">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="dc/db7/gtest-param-util-generated_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>errno.h</label>
      </node>
      <node id="28">
        <label>iomanip</label>
        <link refid="cpp/header/iomanip" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="30">
        <label>set</label>
        <link refid="cpp/header/set" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="32">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="d0/d45/gtest-string_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="d5/da1/gtest-internal_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>gtest/gtest-death-test.h</label>
        <link refid="d4/d59/gtest-death-test_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>algorithm</label>
        <link refid="cpp/header/algorithm" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="26">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="d1/d63/gtest-tuple_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stddef.h</label>
      </node>
      <node id="47">
        <label>iosfwd</label>
        <link refid="cpp/header/iosfwd" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="34">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="d9/d97/gtest-type-util_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>vector</label>
        <link refid="cpp/header/vector" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="55">
        <label>wchar.h</label>
      </node>
      <node id="13">
        <label>sys/types.h</label>
      </node>
      <node id="12">
        <label>string.h</label>
      </node>
      <node id="1">
        <label>lib/googletest/src/gtest.cc</label>
        <link refid="df/d5b/gtest_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="d3/dc9/gtest-port_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="de/dce/gtest-typed-test_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="da/db0/internal_2custom_2gtest-printers_8h"/>
      </node>
      <node id="22">
        <label>unistd.h</label>
      </node>
      <node id="3">
        <label>limits</label>
        <link refid="cpp/header/limits" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="19">
        <label>utility</label>
        <link refid="cpp/header/utility" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="36">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="d0/d1a/gtest-death-test-internal_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>time.h</label>
      </node>
      <node id="52">
        <label>math.h</label>
      </node>
      <node id="18">
        <label>string</label>
        <link refid="cpp/header/string" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="58">
        <label>sys/time.h</label>
      </node>
      <node id="31">
        <label>gtest/gtest-message.h</label>
        <link refid="d6/da4/gtest-message_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>strings.h</label>
      </node>
      <node id="39">
        <label>iterator</label>
        <link refid="cpp/header/iterator" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="8">
        <label>ctype.h</label>
      </node>
      <node id="57">
        <label>list</label>
        <link refid="cpp/header/list" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="51">
        <label>gtest/gtest-spi.h</label>
        <link refid="dc/dbe/gtest-spi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>iostream</label>
        <link refid="cpp/header/iostream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="49">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="db/d6e/gtest__pred__impl_8h"/>
      </node>
      <node id="50">
        <label>gtest/internal/custom/gtest.h</label>
        <link refid="d2/d0e/internal_2custom_2gtest_8h"/>
      </node>
      <node id="46">
        <label>gtest/gtest-test-part.h</label>
        <link refid="d1/d01/gtest-test-part_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>gtest/gtest-param-test.h</label>
        <link refid="d0/d31/gtest-param-test_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>sstream</label>
        <link refid="cpp/header/sstream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="40">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="d0/d03/gtest-linked__ptr_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>regex.h</label>
      </node>
      <node id="21">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="d5/d66/custom_2gtest-port_8h"/>
      </node>
      <node id="11">
        <label>stdio.h</label>
      </node>
      <node id="42">
        <label>gtest/gtest-printers.h</label>
        <link refid="d0/d6d/gtest-printers_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>map</label>
        <link refid="cpp/header/map" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>lib/googletest/src/gtest-all.cc</label>
        <link refid="d1/d8c/gtest-all_8cc"/>
      </node>
      <node id="1">
        <label>lib/googletest/src/gtest.cc</label>
        <link refid="df/d5b/gtest_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="de/d42/classtesting_1_1anonymous__namespace_02gtest_8cc_03_1_1_test_name_is" prot="public">testing::anonymous_namespace{gtest.cc}::TestNameIs</innerclass>
    <innerclass refid="d1/da8/classtesting_1_1internal_1_1anonymous__namespace_02gtest_8cc_03_1_1_class_unique_to_always_true" prot="public">testing::internal::anonymous_namespace{gtest.cc}::ClassUniqueToAlwaysTrue</innerclass>
    <innerclass refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk" prot="public">testing::internal::edit_distance::anonymous_namespace{gtest.cc}::Hunk</innerclass>
    <innerclass refid="d3/d40/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_internal_strings" prot="public">testing::internal::edit_distance::anonymous_namespace{gtest.cc}::InternalStrings</innerclass>
    <innerclass refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer" prot="public">testing::internal::PrettyUnitTestResultPrinter</innerclass>
    <innerclass refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file" prot="public">testing::internal::ScopedPrematureExitFile</innerclass>
    <innerclass refid="de/d6c/classtesting_1_1internal_1_1_test_case_name_is" prot="public">testing::internal::TestCaseNameIs</innerclass>
    <innerclass refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater" prot="public">testing::internal::TestEventRepeater</innerclass>
    <innerclass refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer" prot="public">testing::internal::XmlUnitTestResultPrinter</innerclass>
    <innernamespace refid="d0/d75/namespacetesting">testing</innernamespace>
    <innernamespace refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03">testing::anonymous_namespace{gtest.cc}</innernamespace>
    <innernamespace refid="d0/da7/namespacetesting_1_1internal">testing::internal</innernamespace>
    <innernamespace refid="de/daf/namespacetesting_1_1internal_1_1anonymous__namespace_02gtest_8cc_03">testing::internal::anonymous_namespace{gtest.cc}</innernamespace>
    <innernamespace refid="de/dce/namespacetesting_1_1internal_1_1edit__distance">testing::internal::edit_distance</innernamespace>
    <innernamespace refid="dd/dca/namespacetesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03">testing::internal::edit_distance::anonymous_namespace{gtest.cc}</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="df/d5b/gtest_8cc_1a7c139c1711de5a69cbc934e8a082e4f9" prot="public" static="no">
        <name>GTEST_HAS_GETTIMEOFDAY_</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="116" column="10" bodyfile="lib/googletest/src/gtest.cc" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d5b/gtest_8cc_1a4a5b6fbde5dd05e05dd6846ac5e5c18e" prot="public" static="no">
        <name>GTEST_IMPL_CMP_HELPER_</name>
        <param><defname>op_name</defname></param>
        <param><defname>op</defname></param>
        <initializer>AssertionResult CmpHelper##op_name(const char* expr1, const char* expr2, \
                                   BiggestInt val1, BiggestInt val2) {\
  if (val1 op val2) {\
    return AssertionSuccess();\
  } else {\
    return AssertionFailure() \
        &lt;&lt; &quot;Expected: (&quot; &lt;&lt; expr1 &lt;&lt; &quot;) &quot; #op &quot; (&quot; &lt;&lt; expr2\
        &lt;&lt; &quot;), actual: &quot; &lt;&lt; FormatForComparisonFailureMessage(val1, val2)\
        &lt;&lt; &quot; vs &quot; &lt;&lt; FormatForComparisonFailureMessage(val2, val1);\
  }\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1455" column="9" bodyfile="lib/googletest/src/gtest.cc" bodystart="1455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d5b/gtest_8cc_1a83bd232fd1077579fada92c31bb7469f" prot="public" static="no">
        <name>GTEST_IMPLEMENTATION_</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="141" column="9" bodyfile="lib/googletest/src/gtest.cc" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d5b/gtest_8cc_1a87a475ab9e81de8b49525787665b9229" prot="public" static="no">
        <name>GTEST_REPEATER_METHOD_</name>
        <param><defname>Name</defname></param>
        <param><defname>Type</defname></param>
        <initializer>void TestEventRepeater::Name(const Type&amp; parameter) { \
  if (forwarding_enabled_) { \
    for (size_t i = 0; i &lt; listeners_.size(); i++) { \
      listeners_[i]-&gt;Name(parameter); \
    } \
  } \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="3294" column="9" bodyfile="lib/googletest/src/gtest.cc" bodystart="3294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d5b/gtest_8cc_1aa7da32fd7da6a8cceeed6b448cb7b5f2" prot="public" static="no">
        <name>GTEST_REVERSE_REPEATER_METHOD_</name>
        <param><defname>Name</defname></param>
        <param><defname>Type</defname></param>
        <initializer>void TestEventRepeater::Name(const Type&amp; parameter) { \
  if (forwarding_enabled_) { \
    for (int i = static_cast&lt;int&gt;(listeners_.size()) - 1; i &gt;= 0; i--) { \
      listeners_[i]-&gt;Name(parameter); \
    } \
  } \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="3304" column="9" bodyfile="lib/googletest/src/gtest.cc" bodystart="3304" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965" prot="public" static="no" strong="no">
        <type></type>
        <name>GTestColor</name>
        <enumvalue id="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a0b8d8b18037efc3cdb5dd0313e7c67dc" prot="public">
          <name>COLOR_DEFAULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" prot="public">
          <name>COLOR_RED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" prot="public">
          <name>COLOR_GREEN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965ab03862907066c68204ee9df1ee04aa29" prot="public">
          <name>COLOR_YELLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2880" column="1" bodyfile="lib/googletest/src/gtest.cc" bodystart="2880" bodyend="2885"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d0/da7/namespacetesting_1_1internal_1aaef5a3e9dd2e630d870d98a6d8145d09" prot="public" static="no" mutable="no">
        <type>::<ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">testing::internal::string</ref> &gt;</type>
        <definition>::std::vector&lt;testing::internal::string&gt; g_argvs</definition>
        <argsstring></argsstring>
        <name>g_argvs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="387" column="15" bodyfile="lib/googletest/src/gtest.cc" bodystart="387" bodyend="-1"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a72bae19a0033260a6266052ec0126551" compoundref="df/d5b/gtest_8cc" startline="389" endline="395">testing::internal::GetArgvs</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ac3c6fa93391768aa91c6238b31aaeeb5" compoundref="df/d5b/gtest_8cc" startline="5344" endline="5357">testing::internal::InitGoogleTestImpl</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/da7/namespacetesting_1_1internal_1a454d13f6ba62cea7cfa4798257bf3910" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char kColorEncodedHelpMessage[]</definition>
        <argsstring>[]</argsstring>
        <name>kColorEncodedHelpMessage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5159" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="5159" bodyend="-1"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ae4c46ce8c3d016848fff52cc5133f2ac" compoundref="df/d5b/gtest_8cc" startline="5279" endline="5328">testing::internal::ParseGoogleTestFlagsOnlyImpl</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a815040dbde1aafa2b5c0628f7b97b3c0" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char kDeathTestCaseFilter[]</definition>
        <argsstring>[]</argsstring>
        <name>kDeathTestCaseFilter</name>
        <initializer>= &quot;*DeathTest:*DeathTest/*&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="165" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="165" bodyend="-1"/>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a6438a25b62877163bec864df1369909b" compoundref="df/d5b/gtest_8cc" startline="4502" endline="4535">UnitTestImpl::GetTestCase</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1ac5dc0c0255997f89dc268e114ff6f59e" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char kDefaultOutputFile[]</definition>
        <argsstring>[]</argsstring>
        <name>kDefaultOutputFile</name>
        <initializer>= &quot;test_detail.xml&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="171" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="171" bodyend="-1"/>
        <referencedby refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a8cd6d2ad634d8f29bd2345d5b2ec5673" compoundref="df/d5b/gtest_8cc" startline="426" endline="455">UnitTestOptions::GetAbsolutePathToOutputFile</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a1b6299d8c2a3b3dc522db40e1858527b" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char kDisableTestFilter[]</definition>
        <argsstring>[]</argsstring>
        <name>kDisableTestFilter</name>
        <initializer>= &quot;DISABLED_*:*/DISABLED_*&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="160" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="160" bodyend="-1"/>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1af8cfcffb71cba69a55105ddac96786aa" compoundref="df/d5b/gtest_8cc" startline="4789" endline="4840">UnitTestImpl::FilterTests</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/da7/namespacetesting_1_1internal_1a842ee44b2d352fa626e9c0cc37486e34" prot="public" static="no" mutable="no">
        <type>const UInt32</type>
        <definition>const UInt32 kMaxCodePoint1</definition>
        <argsstring></argsstring>
        <name>kMaxCodePoint1</name>
        <initializer>= (static_cast&lt;UInt32&gt;(1) &lt;&lt;  7) - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1733" column="14" bodyfile="lib/googletest/src/gtest.cc" bodystart="1733" bodyend="-1"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a1259ed57f92a8d860f7fdd6d3c6ead26" compoundref="df/d5b/gtest_8cc" startline="1759" endline="1785">testing::internal::CodePointToUtf8</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/da7/namespacetesting_1_1internal_1af814f29030620a69d0c9e71c5d942990" prot="public" static="no" mutable="no">
        <type>const UInt32</type>
        <definition>const UInt32 kMaxCodePoint2</definition>
        <argsstring></argsstring>
        <name>kMaxCodePoint2</name>
        <initializer>= (static_cast&lt;UInt32&gt;(1) &lt;&lt; (5 + 6)) - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1736" column="14" bodyfile="lib/googletest/src/gtest.cc" bodystart="1736" bodyend="-1"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a1259ed57f92a8d860f7fdd6d3c6ead26" compoundref="df/d5b/gtest_8cc" startline="1759" endline="1785">testing::internal::CodePointToUtf8</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/da7/namespacetesting_1_1internal_1a47b4e6ab732c706ac60eb6be97424da9" prot="public" static="no" mutable="no">
        <type>const UInt32</type>
        <definition>const UInt32 kMaxCodePoint3</definition>
        <argsstring></argsstring>
        <name>kMaxCodePoint3</name>
        <initializer>= (static_cast&lt;UInt32&gt;(1) &lt;&lt; (4 + 2*6)) - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1739" column="14" bodyfile="lib/googletest/src/gtest.cc" bodystart="1739" bodyend="-1"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a1259ed57f92a8d860f7fdd6d3c6ead26" compoundref="df/d5b/gtest_8cc" startline="1759" endline="1785">testing::internal::CodePointToUtf8</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/da7/namespacetesting_1_1internal_1acea916a3388da016d05faccd72e51f18" prot="public" static="no" mutable="no">
        <type>const UInt32</type>
        <definition>const UInt32 kMaxCodePoint4</definition>
        <argsstring></argsstring>
        <name>kMaxCodePoint4</name>
        <initializer>= (static_cast&lt;UInt32&gt;(1) &lt;&lt; (3 + 3*6)) - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1742" column="14" bodyfile="lib/googletest/src/gtest.cc" bodystart="1742" bodyend="-1"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a1259ed57f92a8d860f7fdd6d3c6ead26" compoundref="df/d5b/gtest_8cc" startline="1759" endline="1785">testing::internal::CodePointToUtf8</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a19e6745e1137a363b563e09db9035c74" prot="public" static="yes" mutable="no">
        <type>const char *const</type>
        <definition>const char* const kReservedTestCaseAttributes[]</definition>
        <argsstring>[]</argsstring>
        <name>kReservedTestCaseAttributes</name>
        <initializer>= {
  &quot;classname&quot;,
  &quot;name&quot;,
  &quot;status&quot;,
  &quot;time&quot;,
  &quot;type_param&quot;,
  &quot;value_param&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2098" column="25" bodyfile="lib/googletest/src/gtest.cc" bodystart="2098" bodyend="-1"/>
        <referencedby refid="d0/d75/namespacetesting_1acb3fdfadf475a3c2f5e22a3dae73532a" compoundref="df/d5b/gtest_8cc" startline="2112" endline="2125">testing::GetReservedAttributesForElement</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1ae92e65fc9642c6992b46eba713317aa8" prot="public" static="yes" mutable="no">
        <type>const char *const</type>
        <definition>const char* const kReservedTestSuiteAttributes[]</definition>
        <argsstring>[]</argsstring>
        <name>kReservedTestSuiteAttributes</name>
        <initializer>= {
  &quot;disabled&quot;,
  &quot;errors&quot;,
  &quot;failures&quot;,
  &quot;name&quot;,
  &quot;tests&quot;,
  &quot;time&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2088" column="25" bodyfile="lib/googletest/src/gtest.cc" bodystart="2088" bodyend="-1"/>
        <referencedby refid="d0/d75/namespacetesting_1acb3fdfadf475a3c2f5e22a3dae73532a" compoundref="df/d5b/gtest_8cc" startline="2112" endline="2125">testing::GetReservedAttributesForElement</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1ab637e267cd7ea48bd2f428cd47701d30" prot="public" static="yes" mutable="no">
        <type>const char *const</type>
        <definition>const char* const kReservedTestSuitesAttributes[]</definition>
        <argsstring>[]</argsstring>
        <name>kReservedTestSuitesAttributes</name>
        <initializer>= {
  &quot;disabled&quot;,
  &quot;errors&quot;,
  &quot;failures&quot;,
  &quot;name&quot;,
  &quot;random_seed&quot;,
  &quot;tests&quot;,
  &quot;time&quot;,
  &quot;timestamp&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2075" column="25" bodyfile="lib/googletest/src/gtest.cc" bodystart="2075" bodyend="-1"/>
        <referencedby refid="d0/d75/namespacetesting_1acb3fdfadf475a3c2f5e22a3dae73532a" compoundref="df/d5b/gtest_8cc" startline="2112" endline="2125">testing::GetReservedAttributesForElement</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/da7/namespacetesting_1_1internal_1a728a6aad655cf4704dad1a048212c570" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>GTEST_API_ const char kStackTraceMarker</definition>
        <argsstring>[]</argsstring>
        <name>kStackTraceMarker</name>
        <initializer>= &quot;\nStack trace:\n&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="184" column="12" bodyfile="lib/googletest/src/gtest.cc" bodystart="184" bodyend="-1" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="105" declcolumn="30"/>
        <referencedby refid="d7/d47/classtesting_1_1_unit_test_1ac9d74c9edbbc9f363be7633138e7ab7f" compoundref="df/d5b/gtest_8cc" startline="4108" endline="4168">UnitTest::AddTestPartResult</referencedby>
        <referencedby refid="d0/d4b/classtesting_1_1_test_part_result_1a67f08a152a2a3c8d46aab05937e10ba4" compoundref="d3/dc2/gtest-test-part_8cc" startline="51" endline="55">TestPartResult::ExtractSummary</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1aab047cced200c1809bef2340dabe904f" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char kTestShardIndex[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestShardIndex</name>
        <initializer>= &quot;GTEST_SHARD_INDEX&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="174" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="174" bodyend="-1"/>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1af8cfcffb71cba69a55105ddac96786aa" compoundref="df/d5b/gtest_8cc" startline="4789" endline="4840">UnitTestImpl::FilterTests</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aab7032bcb450f58f2ce48c00ad6401e8" compoundref="df/d5b/gtest_8cc" startline="3056" endline="3089">PrettyUnitTestResultPrinter::OnTestIterationStart</referencedby>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4d5d6a2e8fa3b918a284252602a98279" compoundref="df/d5b/gtest_8cc" startline="4551" endline="4687">UnitTestImpl::RunAllTests</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a57e2697262a419061fc4cd3377a9271e" compoundref="df/d5b/gtest_8cc" startline="4715" endline="4755">testing::internal::ShouldShard</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a7f337be0b85c12d2ed9bcaedbba7af99" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char kTestShardStatusFile[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestShardStatusFile</name>
        <initializer>= &quot;GTEST_SHARD_STATUS_FILE&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="178" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="178" bodyend="-1"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a656c8ec8f2ee82fa90b9ba61b6145538" compoundref="df/d5b/gtest_8cc" startline="4693" endline="4707">testing::internal::WriteToShardStatusFileIfNeeded</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a19fe5fab1b6f6ecbfc6357a56f17aa03" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char kTestTotalShards[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestTotalShards</name>
        <initializer>= &quot;GTEST_TOTAL_SHARDS&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="176" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="176" bodyend="-1"/>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1af8cfcffb71cba69a55105ddac96786aa" compoundref="df/d5b/gtest_8cc" startline="4789" endline="4840">UnitTestImpl::FilterTests</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aab7032bcb450f58f2ce48c00ad6401e8" compoundref="df/d5b/gtest_8cc" startline="3056" endline="3089">PrettyUnitTestResultPrinter::OnTestIterationStart</referencedby>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4d5d6a2e8fa3b918a284252602a98279" compoundref="df/d5b/gtest_8cc" startline="4551" endline="4687">UnitTestImpl::RunAllTests</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a57e2697262a419061fc4cd3377a9271e" compoundref="df/d5b/gtest_8cc" startline="4715" endline="4755">testing::internal::ShouldShard</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/da7/namespacetesting_1_1internal_1adc4b22274985eb08dc161b351e9012b9" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char kTypeParamLabel[]</definition>
        <argsstring>[]</argsstring>
        <name>kTypeParamLabel</name>
        <initializer>= &quot;TypeParam&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="3006" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="3006" bodyend="-1"/>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1abc77b71cd244096a75b13b8a2d9f7d14" compoundref="df/d5b/gtest_8cc" startline="4865" endline="4900">UnitTestImpl::ListTestsMatchingFilter</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1ac6bcd29fa938fde58ea70012e7ea420a" compoundref="df/d5b/gtest_8cc" startline="3098" endline="3109">PrettyUnitTestResultPrinter::OnTestCaseStart</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a7a85ebe3b4de93a1edb091f92f1fb393" compoundref="df/d5b/gtest_8cc" startline="3009" endline="3024">testing::internal::PrintFullTestCommentIfPresent</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a1e85b0754dce94c87f067d7b0379c171" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char kUniversalFilter[]</definition>
        <argsstring>[]</argsstring>
        <name>kUniversalFilter</name>
        <initializer>= &quot;*&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="168" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="168" bodyend="-1"/>
        <referencedby refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1ae2c97834ce45d56f46d39df7cc310109" compoundref="df/d5b/gtest_8cc" startline="502" endline="528">UnitTestOptions::FilterMatchesTest</referencedby>
        <referencedby refid="d0/d75/namespacetesting_1a56fbc164c7dc53596c23e519d8f1ca3c" compoundref="df/d5b/gtest_8cc" startline="192" endline="200">testing::GetDefaultFilter</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aab7032bcb450f58f2ce48c00ad6401e8" compoundref="df/d5b/gtest_8cc" startline="3056" endline="3089">PrettyUnitTestResultPrinter::OnTestIterationStart</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/da7/namespacetesting_1_1internal_1a30b2827871fa3535353e63cb259ff90f" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char kValueParamLabel[]</definition>
        <argsstring>[]</argsstring>
        <name>kValueParamLabel</name>
        <initializer>= &quot;GetParam()&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="3007" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="3007" bodyend="-1"/>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1abc77b71cd244096a75b13b8a2d9f7d14" compoundref="df/d5b/gtest_8cc" startline="4865" endline="4900">UnitTestImpl::ListTestsMatchingFilter</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a7a85ebe3b4de93a1edb091f92f1fb393" compoundref="df/d5b/gtest_8cc" startline="3009" endline="3024">testing::internal::PrintFullTestCommentIfPresent</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1af72a7a7eee6997f4ed9e18d9620a7b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>GTEST_API_ bool AlwaysTrue</definition>
        <argsstring>()</argsstring>
        <name>AlwaysTrue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="4988" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="4988" bodyend="4996" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="733" declcolumn="17"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a8ca2411dd35c0816107b93cf9ec7ebf0" compoundref="df/d5b/gtest_8cc" startline="4986" endline="4986">testing::internal::IsTrue</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a4b24c851ab13569b1b15b3d259b60d2e" compoundref="d5/da1/gtest-internal_8h" startline="736" endline="736">testing::internal::AlwaysFalse</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a8eb8eddf760375a490e007b20777ec56" compoundref="df/d5b/gtest_8cc" startline="922" endline="937">testing::internal::SplitString</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a03976378124361dddf218c46dc500e5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>GTEST_API_ std::string AppendUserMessage</definition>
        <argsstring>(const std::string &amp;gtest_msg, const Message &amp;user_msg)</argsstring>
        <name>AppendUserMessage</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>gtest_msg</declname>
        </param>
        <param>
          <type>const Message &amp;</type>
          <declname>user_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2001" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="2001" bodyend="2010" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="137" declcolumn="24"/>
        <references refid="cpp/string/basic_string/empty_1">string::empty</references>
        <references refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" compoundref="df/d5b/gtest_8cc" startline="981" endline="983">Message::GetString</references>
        <referencedby refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1aae0e935df830718fd78f39850521d967" compoundref="df/d5b/gtest_8cc" startline="373" endline="381">AssertHelper::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a956d4c522454fa6dfd75b5bbbefe8f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>kSize</declname>
            <defname>kSize</defname>
          </param>
        </templateparamlist>
        <type><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt;</type>
        <definition>std::vector&lt;std::string&gt; testing::ArrayAsVector</definition>
        <argsstring>(const char *const (&amp;array)[kSize])</argsstring>
        <name>ArrayAsVector</name>
        <param>
          <type>const char *const (&amp;)</type>
          <declname>array</declname>
          <array>[kSize]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2108" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="2108" bodyend="2110"/>
        <referencedby refid="d0/d75/namespacetesting_1acb3fdfadf475a3c2f5e22a3dae73532a" compoundref="df/d5b/gtest_8cc" startline="2112" endline="2125">testing::GetReservedAttributesForElement</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult AssertionFailure</definition>
        <argsstring>()</argsstring>
        <name>AssertionFailure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1015" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1015" bodyend="1017" declfile="lib/googletest/include/gtest/gtest.h" declline="342" declcolumn="28"/>
        <referencedby refid="d0/d75/namespacetesting_1a72c97910499dac9ec752ad77dccdda3c" compoundref="df/d5b/gtest_8cc" startline="1021" endline="1023">testing::AssertionFailure</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a41d32b74fac585ac04cc9ba037c9fed4" compoundref="db/d6e/gtest__pred__impl_8h" startline="87" endline="96">AssertPred1Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1aa21b5175030ef2d76837bde68459effe" compoundref="db/d6e/gtest__pred__impl_8h" startline="129" endline="142">AssertPred2Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1ae48a4ec033f85849b47bcbd2aa94baab" compoundref="db/d6e/gtest__pred__impl_8h" startline="178" endline="195">AssertPred3Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a22f4e27e6b18091281c45d4395c98517" compoundref="db/d6e/gtest__pred__impl_8h" startline="234" endline="255">AssertPred4Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a1012d0b317e600d13b1a74712f0d8a48" compoundref="db/d6e/gtest__pred__impl_8h" startline="297" endline="322">AssertPred5Helper</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a894ffccd936d78fd555f490020c27f0a" compoundref="d8/d73/gtest_8h" startline="1486" endline="1493">testing::internal::CmpHelperOpFailure</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a675759a40d2867bc51981f7594f6beca" compoundref="df/d5b/gtest_8cc" startline="1885" endline="1897">testing::internal::CmpHelperSTRNE</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a5059777ec92cd98da4c4159dee8201c2" compoundref="df/d5b/gtest_8cc" startline="1362" endline="1379">testing::internal::DoubleNearPredFormat</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" compoundref="df/d5b/gtest_8cc" startline="1312" endline="1343">testing::internal::EqFailure</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a17b52b6b1f81f6dcad5cc4d12e5173a6" compoundref="df/d5b/gtest_8cc" startline="1384" endline="1415">testing::internal::FloatingPointLE</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a14ff02e6d151f45e998657674e9af88a" compoundref="df/d5b/gtest_8cc" startline="631" endline="665">testing::internal::HasOneFailure</referencedby>
        <referencedby refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a72c97910499dac9ec752ad77dccdda3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult AssertionFailure</definition>
        <argsstring>(const Message &amp;message)</argsstring>
        <name>AssertionFailure</name>
        <param>
          <type>const Message &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1021" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1021" bodyend="1023" declfile="lib/googletest/include/gtest/gtest.h" declline="346" declcolumn="28"/>
        <references refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" compoundref="df/d5b/gtest_8cc" startline="1015" endline="1017">testing::AssertionFailure</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult AssertionSuccess</definition>
        <argsstring>()</argsstring>
        <name>AssertionSuccess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1010" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1010" bodyend="1012" declfile="lib/googletest/include/gtest/gtest.h" declline="339" declcolumn="28"/>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a41d32b74fac585ac04cc9ba037c9fed4" compoundref="db/d6e/gtest__pred__impl_8h" startline="87" endline="96">AssertPred1Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1aa21b5175030ef2d76837bde68459effe" compoundref="db/d6e/gtest__pred__impl_8h" startline="129" endline="142">AssertPred2Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1ae48a4ec033f85849b47bcbd2aa94baab" compoundref="db/d6e/gtest__pred__impl_8h" startline="178" endline="195">AssertPred3Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a22f4e27e6b18091281c45d4395c98517" compoundref="db/d6e/gtest__pred__impl_8h" startline="234" endline="255">AssertPred4Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a1012d0b317e600d13b1a74712f0d8a48" compoundref="db/d6e/gtest__pred__impl_8h" startline="297" endline="322">AssertPred5Helper</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a4638c74d9b32e971f9b321af6fafc2f1" compoundref="d8/d73/gtest_8h" startline="1387" endline="1398">testing::internal::CmpHelperEQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a98ce463e5dbe0c6120fa817e1f8f2944" compoundref="d8/d73/gtest_8h" startline="1631" endline="1654">testing::internal::CmpHelperFloatingPointEQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a72d1706a1f8e03ef759f9c80712b0072" compoundref="df/d5b/gtest_8cc" startline="1869" endline="1882">testing::internal::CmpHelperSTREQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a675759a40d2867bc51981f7594f6beca" compoundref="df/d5b/gtest_8cc" startline="1885" endline="1897">testing::internal::CmpHelperSTRNE</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a5059777ec92cd98da4c4159dee8201c2" compoundref="df/d5b/gtest_8cc" startline="1362" endline="1379">testing::internal::DoubleNearPredFormat</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a17b52b6b1f81f6dcad5cc4d12e5173a6" compoundref="df/d5b/gtest_8cc" startline="1384" endline="1415">testing::internal::FloatingPointLE</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1aace9bb29e075d3cc3c4e689de03f0e71">testing::internal::GTEST_IMPL_CMP_HELPER_</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a14ff02e6d151f45e998657674e9af88a" compoundref="df/d5b/gtest_8cc" startline="631" endline="665">testing::internal::HasOneFailure</referencedby>
        <referencedby refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a5b69c8f2b38f31e87dabf300d7e46903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; EditType &gt;</type>
        <definition>GTEST_API_ std::vector&lt; EditType &gt; CalculateOptimalEdits</definition>
        <argsstring>(const std::vector&lt; size_t &gt; &amp;left, const std::vector&lt; size_t &gt; &amp;right)</argsstring>
        <name>CalculateOptimalEdits</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; size_t &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; size_t &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1028" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="1028" bodyend="1083" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="181" declcolumn="24"/>
        <references refid="cpp/container/vector/begin_1">vector&lt; T &gt;::begin</references>
        <references refid="cpp/container/vector/end_1">vector&lt; T &gt;::end</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba8d20f6cca2d49a8732f535cfe28812c8" compoundref="d5/da1/gtest-internal_8h" startline="180">testing::internal::edit_distance::kAdd</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba01e3df29bad591c9c7e256a5090662b8" compoundref="d5/da1/gtest-internal_8h" startline="180">testing::internal::edit_distance::kMatch</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba7b8140e312f42dd2073bae2374136137" compoundref="d5/da1/gtest-internal_8h" startline="180">testing::internal::edit_distance::kRemove</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba9219852c065abae302e91604e5d3594d" compoundref="d5/da1/gtest-internal_8h" startline="180">testing::internal::edit_distance::kReplace</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a0f6d06bf8c3093b9c22bb08723db201e" compoundref="d3/dc9/gtest-port_8h" startline="1317" endline="1319">testing::internal::move</references>
        <references refid="cpp/container/vector/push_back_1">vector&lt; T &gt;::push_back</references>
        <references refid="cpp/algorithm/reverse_1">std::reverse</references>
        <references refid="cpp/container/vector/size_1">vector&lt; T &gt;::size</references>
        <referencedby refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a96065c74c4a4787a51ad9e58f13a4068" compoundref="df/d5b/gtest_8cc" startline="1104" endline="1118">testing::internal::edit_distance::CalculateOptimalEdits</referencedby>
        <referencedby refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1aef01558937d42283a238a7b55baddd11" compoundref="df/d5b/gtest_8cc" startline="1203" endline="1263">testing::internal::edit_distance::CreateUnifiedDiff</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a96065c74c4a4787a51ad9e58f13a4068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; EditType &gt;</type>
        <definition>GTEST_API_ std::vector&lt; EditType &gt; CalculateOptimalEdits</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;left, const std::vector&lt; std::string &gt; &amp;right)</argsstring>
        <name>CalculateOptimalEdits</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1104" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="1104" bodyend="1118" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="185" declcolumn="24"/>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a5b69c8f2b38f31e87dabf300d7e46903" compoundref="df/d5b/gtest_8cc" startline="1028" endline="1083">testing::internal::edit_distance::CalculateOptimalEdits</references>
        <references refid="cpp/container/vector/push_back_1">vector&lt; T &gt;::push_back</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a2c54b453387aa8a18f2f3e09f10b5a7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>UInt32</type>
        <definition>UInt32 testing::internal::ChopLowBits</definition>
        <argsstring>(UInt32 *bits, int n)</argsstring>
        <name>ChopLowBits</name>
        <param>
          <type>UInt32 *</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1747" column="15" bodyfile="lib/googletest/src/gtest.cc" bodystart="1747" bodyend="1751"/>
        <references refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a555cf768a531e2ff2acacfbf76d28a77" compoundref="d3/dc9/gtest-port_8h" startline="2356">testing::internal::posix::n</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a1259ed57f92a8d860f7fdd6d3c6ead26" compoundref="df/d5b/gtest_8cc" startline="1759" endline="1785">testing::internal::CodePointToUtf8</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a3c265df9280510bd1d78bfd155113393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult CmpHelperEQ</definition>
        <argsstring>(const char *lhs_expression, const char *rhs_expression, BiggestInt lhs, BiggestInt rhs)</argsstring>
        <name>CmpHelperEQ</name>
        <param>
          <type>const char *</type>
          <declname>lhs_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs_expression</declname>
        </param>
        <param>
          <type>BiggestInt</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>BiggestInt</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1437" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1437" bodyend="1450" declfile="lib/googletest/include/gtest/gtest.h" declline="1403" declcolumn="28"/>
        <references refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" compoundref="df/d5b/gtest_8cc" startline="1010" endline="1012">testing::AssertionSuccess</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" compoundref="df/d5b/gtest_8cc" startline="1312" endline="1343">testing::internal::EqFailure</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a91ab078f10adc669f09b7f604975c518" compoundref="d0/d6d/gtest-printers_8h" startline="349" endline="352">testing::internal::FormatForComparisonFailureMessage</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a72d1706a1f8e03ef759f9c80712b0072" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult CmpHelperSTREQ</definition>
        <argsstring>(const char *lhs_expression, const char *rhs_expression, const wchar_t *lhs, const wchar_t *rhs)</argsstring>
        <name>CmpHelperSTREQ</name>
        <param>
          <type>const char *</type>
          <declname>lhs_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs_expression</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1869" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1869" bodyend="1882" declfile="lib/googletest/include/gtest/gtest.h" declline="1570" declcolumn="28"/>
        <references refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" compoundref="df/d5b/gtest_8cc" startline="1010" endline="1012">testing::AssertionSuccess</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" compoundref="df/d5b/gtest_8cc" startline="1312" endline="1343">testing::internal::EqFailure</references>
        <references refid="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" compoundref="d0/d6d/gtest-printers_8h" startline="980" endline="984">testing::PrintToString</references>
        <references refid="d0/dde/classtesting_1_1internal_1_1_string_1a911db0cff27e6663b2ff74014c05de35" compoundref="df/d5b/gtest_8cc" startline="1860" endline="1866">String::WideCStringEquals</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a675759a40d2867bc51981f7594f6beca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult CmpHelperSTRNE</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const wchar_t *s1, const wchar_t *s2)</argsstring>
        <name>CmpHelperSTRNE</name>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1885" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1885" bodyend="1897" declfile="lib/googletest/include/gtest/gtest.h" declline="1578" declcolumn="28"/>
        <references refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" compoundref="df/d5b/gtest_8cc" startline="1015" endline="1017">testing::AssertionFailure</references>
        <references refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" compoundref="df/d5b/gtest_8cc" startline="1010" endline="1012">testing::AssertionSuccess</references>
        <references refid="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" compoundref="d0/d6d/gtest-printers_8h" startline="980" endline="984">testing::PrintToString</references>
        <references refid="d0/dde/classtesting_1_1internal_1_1_string_1a911db0cff27e6663b2ff74014c05de35" compoundref="df/d5b/gtest_8cc" startline="1860" endline="1866">String::WideCStringEquals</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a1259ed57f92a8d860f7fdd6d3c6ead26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string CodePointToUtf8</definition>
        <argsstring>(UInt32 code_point)</argsstring>
        <name>CodePointToUtf8</name>
        <param>
          <type>UInt32</type>
          <declname>code_point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1759" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="1759" bodyend="1785" declfile="lib/googletest/src/gtest-internal-inl.h" declline="233" declcolumn="24"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a2c54b453387aa8a18f2f3e09f10b5a7d" compoundref="df/d5b/gtest_8cc" startline="1747" endline="1751">testing::internal::ChopLowBits</references>
        <references refid="d0/dde/classtesting_1_1internal_1_1_string_1adf8a689d29be62ae924078e2bfe3447a" compoundref="df/d5b/gtest_8cc" startline="1966" endline="1970">String::FormatHexInt</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a842ee44b2d352fa626e9c0cc37486e34" compoundref="df/d5b/gtest_8cc" startline="1733">testing::internal::kMaxCodePoint1</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1af814f29030620a69d0c9e71c5d942990" compoundref="df/d5b/gtest_8cc" startline="1736">testing::internal::kMaxCodePoint2</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a47b4e6ab732c706ac60eb6be97424da9" compoundref="df/d5b/gtest_8cc" startline="1739">testing::internal::kMaxCodePoint3</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1acea916a3388da016d05faccd72e51f18" compoundref="df/d5b/gtest_8cc" startline="1742">testing::internal::kMaxCodePoint4</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a34ba5cda1864f3228954b3a5c8f6b07d" compoundref="df/d5b/gtest_8cc" startline="1823" endline="1844">testing::internal::WideStringToUtf8</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::ColoredPrintf</definition>
        <argsstring>(GTestColor color, const char *fmt,...)</argsstring>
        <name>ColoredPrintf</name>
        <param>
          <type>GTestColor</type>
          <declname>color</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2956" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="2956" bodyend="3002"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a4b24c851ab13569b1b15b3d259b60d2e" compoundref="d5/da1/gtest-internal_8h" startline="736" endline="736">testing::internal::AlwaysFalse</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a0b8d8b18037efc3cdb5dd0313e7c67dc" compoundref="df/d5b/gtest_8cc" startline="2881">testing::internal::COLOR_DEFAULT</references>
        <references refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a3117b067e1f942a2031e666953120ccc" compoundref="d3/dc9/gtest-port_8h" startline="2340" endline="2340">testing::internal::posix::FileNo</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a0aefb9deb60e90f19c236559837303d8" compoundref="df/d5b/gtest_8cc" startline="2904" endline="2911">testing::internal::GetAnsiColorCode</references>
        <references refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a16ebe936b3a8ea462a94191635aedc27" compoundref="d3/dc9/gtest-port_8h" startline="2341" endline="2341">testing::internal::posix::IsATTY</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ab0f928e61ab8ec92e75ddfcae9324c1e" compoundref="df/d5b/gtest_8cc" startline="2916" endline="2950">testing::internal::ShouldUseColor</references>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a47648ecaae8cb68691d2104531d0ece0" compoundref="df/d5b/gtest_8cc" startline="3091" endline="3096">PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a7f429e4591b590d3429263c7c5ab0ceb" compoundref="df/d5b/gtest_8cc" startline="3161" endline="3166">PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1adecad7fba2c2b8083a93a152046f06dd" compoundref="df/d5b/gtest_8cc" startline="3149" endline="3159">PrettyUnitTestResultPrinter::OnTestCaseEnd</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1ac6bcd29fa938fde58ea70012e7ea420a" compoundref="df/d5b/gtest_8cc" startline="3098" endline="3109">PrettyUnitTestResultPrinter::OnTestCaseStart</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a41824a58ecc1d0bf99a2b691cd865701" compoundref="df/d5b/gtest_8cc" startline="3130" endline="3147">PrettyUnitTestResultPrinter::OnTestEnd</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aa21b349a51378e47877ee6d153c37116" compoundref="df/d5b/gtest_8cc" startline="3193" endline="3229">PrettyUnitTestResultPrinter::OnTestIterationEnd</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aab7032bcb450f58f2ce48c00ad6401e8" compoundref="df/d5b/gtest_8cc" startline="3056" endline="3089">PrettyUnitTestResultPrinter::OnTestIterationStart</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1abc248085e6dcbfc41789bd620e5bdbae" compoundref="df/d5b/gtest_8cc" startline="3111" endline="3116">PrettyUnitTestResultPrinter::OnTestStart</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a7d8c446a29c7e22d7d4dde8f530bb57e" compoundref="df/d5b/gtest_8cc" startline="5125" endline="5157">testing::internal::PrintColorEncoded</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a7af737d93a96c26c3af9501b4cc78d93" compoundref="df/d5b/gtest_8cc" startline="3169" endline="3191">PrettyUnitTestResultPrinter::PrintFailedTests</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a57e2697262a419061fc4cd3377a9271e" compoundref="df/d5b/gtest_8cc" startline="4715" endline="4755">testing::internal::ShouldShard</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a656c8ec8f2ee82fa90b9ba61b6145538" compoundref="df/d5b/gtest_8cc" startline="4693" endline="4707">testing::internal::WriteToShardStatusFileIfNeeded</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ac8ef1bb10cd9e69de939789b759e6bc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>UInt32</type>
        <definition>UInt32 testing::internal::CreateCodePointFromUtf16SurrogatePair</definition>
        <argsstring>(wchar_t first, wchar_t second)</argsstring>
        <name>CreateCodePointFromUtf16SurrogatePair</name>
        <param>
          <type>wchar_t</type>
          <declname>first</declname>
        </param>
        <param>
          <type>wchar_t</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1800" column="15" bodyfile="lib/googletest/src/gtest.cc" bodystart="1800" bodyend="1808"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a34ba5cda1864f3228954b3a5c8f6b07d" compoundref="df/d5b/gtest_8cc" startline="1823" endline="1844">testing::internal::WideStringToUtf8</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/dce/namespacetesting_1_1internal_1_1edit__distance_1aef01558937d42283a238a7b55baddd11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>GTEST_API_ std::string CreateUnifiedDiff</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;left, const std::vector&lt; std::string &gt; &amp;right, size_t context)</argsstring>
        <name>CreateUnifiedDiff</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1203" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="1203" bodyend="1263" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="190" declcolumn="24"/>
        <references refid="cpp/container/vector/begin_1">vector&lt; T &gt;::begin</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a5b69c8f2b38f31e87dabf300d7e46903" compoundref="df/d5b/gtest_8cc" startline="1028" endline="1083">testing::internal::edit_distance::CalculateOptimalEdits</references>
        <references refid="cpp/container/vector/end_1">vector&lt; T &gt;::end</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba8d20f6cca2d49a8732f535cfe28812c8" compoundref="d5/da1/gtest-internal_8h" startline="180">testing::internal::edit_distance::kAdd</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba01e3df29bad591c9c7e256a5090662b8" compoundref="d5/da1/gtest-internal_8h" startline="180">testing::internal::edit_distance::kMatch</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba7b8140e312f42dd2073bae2374136137" compoundref="d5/da1/gtest-internal_8h" startline="180">testing::internal::edit_distance::kRemove</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba9219852c065abae302e91604e5d3594d" compoundref="d5/da1/gtest-internal_8h" startline="180">testing::internal::edit_distance::kReplace</references>
        <references refid="cpp/algorithm/min_1">std::min</references>
        <references refid="cpp/container/vector/size_1">vector&lt; T &gt;::size</references>
        <references refid="cpp/io/basic_stringstream/str_1">stringstream::str</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" compoundref="df/d5b/gtest_8cc" startline="1312" endline="1343">testing::internal::EqFailure</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1afc633c2faafd31f51fe686389a5a2de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult DoubleLE</definition>
        <argsstring>(const char *expr1, const char *expr2, double val1, double val2)</argsstring>
        <name>DoubleLE</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1428" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1428" bodyend="1431" declfile="lib/googletest/include/gtest/gtest.h" declline="2060" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a5059777ec92cd98da4c4159dee8201c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult DoubleNearPredFormat</definition>
        <argsstring>(const char *expr1, const char *expr2, const char *abs_error_expr, double val1, double val2, double abs_error)</argsstring>
        <name>DoubleNearPredFormat</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>abs_error_expr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>abs_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1362" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1362" bodyend="1379" declfile="lib/googletest/include/gtest/gtest.h" declline="1659" declcolumn="28"/>
        <references refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" compoundref="df/d5b/gtest_8cc" startline="1015" endline="1017">testing::AssertionFailure</references>
        <references refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" compoundref="df/d5b/gtest_8cc" startline="1010" endline="1012">testing::AssertionSuccess</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult EqFailure</definition>
        <argsstring>(const char *lhs_expression, const char *rhs_expression, const std::string &amp;lhs_value, const std::string &amp;rhs_value, bool ignoring_case)</argsstring>
        <name>EqFailure</name>
        <param>
          <type>const char *</type>
          <declname>lhs_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs_expression</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>lhs_value</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>rhs_value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignoring_case</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1312" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1312" bodyend="1343" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="219" declcolumn="28"/>
        <references refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" compoundref="df/d5b/gtest_8cc" startline="1015" endline="1017">testing::AssertionFailure</references>
        <references refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1aef01558937d42283a238a7b55baddd11" compoundref="df/d5b/gtest_8cc" startline="1203" endline="1263">testing::internal::edit_distance::CreateUnifiedDiff</references>
        <references refid="cpp/string/basic_string/empty_1">string::empty</references>
        <references refid="cpp/container/vector/size_1">vector&lt; T &gt;::size</references>
        <references refid="de/daf/namespacetesting_1_1internal_1_1anonymous__namespace_02gtest_8cc_03_1a87e3d38ad422ce7018c6fcd4d1f3a938" compoundref="df/d5b/gtest_8cc" startline="1272" endline="1293">testing::internal::anonymous_namespace{gtest.cc}::SplitEscapedString</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a3c265df9280510bd1d78bfd155113393" compoundref="df/d5b/gtest_8cc" startline="1437" endline="1450">testing::internal::CmpHelperEQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a1def8ec9393360a1b34a20528703e7f7" compoundref="d8/d73/gtest_8h" startline="1375" endline="1383">testing::internal::CmpHelperEQFailure</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a98ce463e5dbe0c6120fa817e1f8f2944" compoundref="d8/d73/gtest_8h" startline="1631" endline="1654">testing::internal::CmpHelperFloatingPointEQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a72d1706a1f8e03ef759f9c80712b0072" compoundref="df/d5b/gtest_8cc" startline="1869" endline="1882">testing::internal::CmpHelperSTREQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1aace9bb29e075d3cc3c4e689de03f0e71">testing::internal::GTEST_IMPL_CMP_HELPER_</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a17b52b6b1f81f6dcad5cc4d12e5173a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RawType</type>
          </param>
        </templateparamlist>
        <type>AssertionResult</type>
        <definition>AssertionResult testing::internal::FloatingPointLE</definition>
        <argsstring>(const char *expr1, const char *expr2, RawType val1, RawType val2)</argsstring>
        <name>FloatingPointLE</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>RawType</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>RawType</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1384" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1384" bodyend="1415"/>
        <references refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" compoundref="df/d5b/gtest_8cc" startline="1015" endline="1017">testing::AssertionFailure</references>
        <references refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" compoundref="df/d5b/gtest_8cc" startline="1010" endline="1012">testing::AssertionSuccess</references>
        <references refid="cpp/io/manip/setprecision_1">std::setprecision</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a9743f1da2e8f7a4a8178ec9595a56112" compoundref="df/d5b/gtest_8cc" startline="1982" endline="1998">testing::internal::StringStreamToString</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aef005b3a2875c4878ba5891db34f7734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult FloatLE</definition>
        <argsstring>(const char *expr1, const char *expr2, float val1, float val2)</argsstring>
        <name>FloatLE</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1421" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1421" bodyend="1424" declfile="lib/googletest/include/gtest/gtest.h" declline="2058" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a33e070c3e994cb75f9017fa2a044d536" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>static std::string testing::FormatCountableNoun</definition>
        <argsstring>(int count, const char *singular_form, const char *plural_form)</argsstring>
        <name>FormatCountableNoun</name>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>singular_form</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>plural_form</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2809" column="20" bodyfile="lib/googletest/src/gtest.cc" bodystart="2809" bodyend="2814"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" compoundref="d6/da4/gtest-message_8h" startline="243" endline="245">testing::internal::StreamableToString</references>
        <referencedby refid="d0/d75/namespacetesting_1ab8cabb45f3d8c52d336372c1b62d75c5" compoundref="df/d5b/gtest_8cc" startline="2822" endline="2824">testing::FormatTestCaseCount</referencedby>
        <referencedby refid="d0/d75/namespacetesting_1a7420a0eb48a02ba210e265afb75febdf" compoundref="df/d5b/gtest_8cc" startline="2817" endline="2819">testing::FormatTestCount</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1adecad7fba2c2b8083a93a152046f06dd" compoundref="df/d5b/gtest_8cc" startline="3149" endline="3159">PrettyUnitTestResultPrinter::OnTestCaseEnd</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1ac6bcd29fa938fde58ea70012e7ea420a" compoundref="df/d5b/gtest_8cc" startline="3098" endline="3109">PrettyUnitTestResultPrinter::OnTestCaseStart</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a779873280d17edf78c0a569a419432db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string FormatEpochTimeInMillisAsIso8601</definition>
        <argsstring>(TimeInMillis ms)</argsstring>
        <name>FormatEpochTimeInMillisAsIso8601</name>
        <param>
          <type>TimeInMillis</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="3574" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="3574" bodyend="3585" declfile="lib/googletest/src/gtest-internal-inl.h" declline="125" declcolumn="24"/>
        <references refid="d0/dde/classtesting_1_1internal_1_1_string_1a1c674bb56e2cc7dc32d026056d131bd2" compoundref="df/d5b/gtest_8cc" startline="1959" endline="1963">String::FormatIntWidth2</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a60af94307ed4f00a57b5c6d9617c046d" compoundref="df/d5b/gtest_8cc" startline="3556" endline="3570">testing::internal::PortableLocaltime</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" compoundref="d6/da4/gtest-message_8h" startline="243" endline="245">testing::internal::StreamableToString</references>
        <referencedby refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1af053fc729d29be4c3de9c1e5e7585cdc" compoundref="df/d5b/gtest_8cc" startline="3701" endline="3737">XmlUnitTestResultPrinter::PrintXmlUnitTest</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ab8cabb45f3d8c52d336372c1b62d75c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>static std::string testing::FormatTestCaseCount</definition>
        <argsstring>(int test_case_count)</argsstring>
        <name>FormatTestCaseCount</name>
        <param>
          <type>int</type>
          <declname>test_case_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2822" column="20" bodyfile="lib/googletest/src/gtest.cc" bodystart="2822" bodyend="2824"/>
        <references refid="d0/d75/namespacetesting_1a33e070c3e994cb75f9017fa2a044d536" compoundref="df/d5b/gtest_8cc" startline="2809" endline="2814">testing::FormatCountableNoun</references>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aa21b349a51378e47877ee6d153c37116" compoundref="df/d5b/gtest_8cc" startline="3193" endline="3229">PrettyUnitTestResultPrinter::OnTestIterationEnd</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aab7032bcb450f58f2ce48c00ad6401e8" compoundref="df/d5b/gtest_8cc" startline="3056" endline="3089">PrettyUnitTestResultPrinter::OnTestIterationStart</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7420a0eb48a02ba210e265afb75febdf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>static std::string testing::FormatTestCount</definition>
        <argsstring>(int test_count)</argsstring>
        <name>FormatTestCount</name>
        <param>
          <type>int</type>
          <declname>test_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2817" column="20" bodyfile="lib/googletest/src/gtest.cc" bodystart="2817" bodyend="2819"/>
        <references refid="d0/d75/namespacetesting_1a33e070c3e994cb75f9017fa2a044d536" compoundref="df/d5b/gtest_8cc" startline="2809" endline="2814">testing::FormatCountableNoun</references>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aa21b349a51378e47877ee6d153c37116" compoundref="df/d5b/gtest_8cc" startline="3193" endline="3229">PrettyUnitTestResultPrinter::OnTestIterationEnd</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aab7032bcb450f58f2ce48c00ad6401e8" compoundref="df/d5b/gtest_8cc" startline="3056" endline="3089">PrettyUnitTestResultPrinter::OnTestIterationStart</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a5802d68a85d566a0c82a0df5fd2aa58b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string FormatTimeInMillisAsSeconds</definition>
        <argsstring>(TimeInMillis ms)</argsstring>
        <name>FormatTimeInMillisAsSeconds</name>
        <param>
          <type>TimeInMillis</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="3550" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="3550" bodyend="3554" declfile="lib/googletest/src/gtest-internal-inl.h" declline="119" declcolumn="24"/>
        <references refid="cpp/io/basic_stringstream/str_1">stringstream::str</references>
        <referencedby refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a1385d3994e1daf7d80693bc6936e9853" compoundref="df/d5b/gtest_8cc" startline="3625" endline="3672">XmlUnitTestResultPrinter::OutputXmlTestInfo</referencedby>
        <referencedby refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1addf25742548aa0376bf180ed28187460" compoundref="df/d5b/gtest_8cc" startline="3675" endline="3698">XmlUnitTestResultPrinter::PrintXmlTestCase</referencedby>
        <referencedby refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1af053fc729d29be4c3de9c1e5e7585cdc" compoundref="df/d5b/gtest_8cc" startline="3701" endline="3737">XmlUnitTestResultPrinter::PrintXmlUnitTest</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4354761948a5cf56fdf905418a0f78f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>static std::string testing::FormatWordList</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;words)</argsstring>
        <name>FormatWordList</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt; &amp;</type>
          <declname>words</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2127" column="20" bodyfile="lib/googletest/src/gtest.cc" bodystart="2127" bodyend="2139"/>
        <references refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" compoundref="df/d5b/gtest_8cc" startline="981" endline="983">Message::GetString</references>
        <references refid="cpp/container/vector/size_1">vector&lt; T &gt;::size</references>
        <referencedby refid="d0/d75/namespacetesting_1a4c9bd414747bf0563bfdb32a2307dcdf" compoundref="df/d5b/gtest_8cc" startline="2141" endline="2151">testing::ValidateTestPropertyName</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a0aefb9deb60e90f19c236559837303d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* testing::internal::GetAnsiColorCode</definition>
        <argsstring>(GTestColor color)</argsstring>
        <name>GetAnsiColorCode</name>
        <param>
          <type>GTestColor</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2904" column="12" bodyfile="lib/googletest/src/gtest.cc" bodystart="2904" bodyend="2911"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" compoundref="df/d5b/gtest_8cc" startline="2883">testing::internal::COLOR_GREEN</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" compoundref="df/d5b/gtest_8cc" startline="2882">testing::internal::COLOR_RED</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965ab03862907066c68204ee9df1ee04aa29" compoundref="df/d5b/gtest_8cc" startline="2884">testing::internal::COLOR_YELLOW</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" compoundref="df/d5b/gtest_8cc" startline="2956" endline="3002">testing::internal::ColoredPrintf</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a72bae19a0033260a6266052ec0126551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const ::<ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">testing::internal::string</ref> &gt; &amp;</type>
        <definition>GTEST_API_ const ::std::vector&lt; testing::internal::string &gt; &amp; GetArgvs</definition>
        <argsstring>()</argsstring>
        <name>GetArgvs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="389" column="21" bodyfile="lib/googletest/src/gtest.cc" bodystart="389" bodyend="395" declfile="lib/googletest/include/gtest/internal/gtest-port.h" declline="1431" declcolumn="32"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1aaef5a3e9dd2e630d870d98a6d8145d09" compoundref="df/d5b/gtest_8cc" startline="387">testing::internal::g_argvs</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a4fc348184f2bc16ec2270cffb38de5dc" compoundref="df/d5b/gtest_8cc" startline="399" endline="409">testing::internal::GetCurrentExecutableName</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a91e707e0d371fae0224ffd37f0d042af" compoundref="df/d5b/gtest_8cc" startline="330" endline="330">testing::internal::GTestIsInitialized</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ae1695f7d1559c009775af3911bd8370b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>GTEST_API_ std::string GetBoolAssertionFailureMessage</definition>
        <argsstring>(const AssertionResult &amp;assertion_result, const char *expression_text, const char *actual_predicate_value, const char *expected_predicate_value)</argsstring>
        <name>GetBoolAssertionFailureMessage</name>
        <param>
          <type>const AssertionResult &amp;</type>
          <declname>assertion_result</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expression_text</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>actual_predicate_value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expected_predicate_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1346" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="1346" bodyend="1359" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="226" declcolumn="24"/>
        <references refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" compoundref="df/d5b/gtest_8cc" startline="981" endline="983">Message::GetString</references>
        <references refid="d5/dec/classtesting_1_1_assertion_result_1af8f4390dff5acafd3c7e50f76c55687a" compoundref="d8/d73/gtest_8h" startline="297" endline="299">AssertionResult::message</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a4fc348184f2bc16ec2270cffb38de5dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> FilePath</type>
        <definition>FilePath GetCurrentExecutableName</definition>
        <argsstring>()</argsstring>
        <name>GetCurrentExecutableName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="399" column="10" bodyfile="lib/googletest/src/gtest.cc" bodystart="399" bodyend="409" declfile="lib/googletest/src/gtest-internal-inl.h" declline="415" declcolumn="21"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a72bae19a0033260a6266052ec0126551" compoundref="df/d5b/gtest_8cc" startline="389" endline="395">testing::internal::GetArgvs</references>
        <references refid="de/d14/classtesting_1_1internal_1_1_file_path_1a9fe846b92cc3a819b1bca34059999369" compoundref="dc/d20/gtest-filepath_8cc" startline="155" endline="158">FilePath::RemoveDirectoryName</references>
        <references refid="de/d14/classtesting_1_1internal_1_1_file_path_1a42b263db98b0796b43578baca9ba991d" compoundref="dc/d79/gtest-filepath_8h" startline="73" endline="75">FilePath::Set</references>
        <referencedby refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a8cd6d2ad634d8f29bd2345d5b2ec5673" compoundref="df/d5b/gtest_8cc" startline="426" endline="455">UnitTestOptions::GetAbsolutePathToOutputFile</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a1ffce3a1491bc0de802157425b30f3a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>GTEST_API_ std::string GetCurrentOsStackTraceExceptTop</definition>
        <argsstring>(UnitTest *, int skip_count)</argsstring>
        <name>GetCurrentOsStackTraceExceptTop</name>
        <param>
          <type>UnitTest *</type>
          <defname>unit_test</defname>
        </param>
        <param>
          <type>int</type>
          <declname>skip_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="4973" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="4973" bodyend="4978" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="726" declcolumn="24"/>
        <references refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a243591ed1070d5a856b4243810d85f94" compoundref="df/d5b/gtest_8cc" startline="796" endline="803">UnitTestImpl::CurrentOsStackTraceExceptTop</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" compoundref="d0/da1/gtest-internal-inl_8h" startline="927" endline="929">testing::internal::GetUnitTestImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a56fbc164c7dc53596c23e519d8f1ca3c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* testing::GetDefaultFilter</definition>
        <argsstring>()</argsstring>
        <name>GetDefaultFilter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="192" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="192" bodyend="200"/>
        <references refid="d0/d75/namespacetesting_1a1e85b0754dce94c87f067d7b0379c171" compoundref="df/d5b/gtest_8cc" startline="168">testing::kUniversalFilter</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1acb3fdfadf475a3c2f5e22a3dae73532a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt;</type>
        <definition>static std::vector&lt;std::string&gt; testing::GetReservedAttributesForElement</definition>
        <argsstring>(const std::string &amp;xml_element)</argsstring>
        <name>GetReservedAttributesForElement</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>xml_element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2112" column="20" bodyfile="lib/googletest/src/gtest.cc" bodystart="2112" bodyend="2125"/>
        <references refid="d0/d75/namespacetesting_1a956d4c522454fa6dfd75b5bbbefe8f9e" compoundref="df/d5b/gtest_8cc" startline="2108" endline="2110">testing::ArrayAsVector</references>
        <references refid="d3/dc9/gtest-port_8h_1ab54343f0a36dc4cb0ce8a478dd7847b8" compoundref="d3/dc9/gtest-port_8h" startline="1295">GTEST_CHECK_</references>
        <references refid="d0/d75/namespacetesting_1a19e6745e1137a363b563e09db9035c74" compoundref="df/d5b/gtest_8cc" startline="2098">testing::kReservedTestCaseAttributes</references>
        <references refid="d0/d75/namespacetesting_1ae92e65fc9642c6992b46eba713317aa8" compoundref="df/d5b/gtest_8cc" startline="2088">testing::kReservedTestSuiteAttributes</references>
        <references refid="d0/d75/namespacetesting_1ab637e267cd7ea48bd2f428cd47701d30" compoundref="df/d5b/gtest_8cc" startline="2075">testing::kReservedTestSuitesAttributes</references>
        <referencedby refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" compoundref="df/d5b/gtest_8cc" startline="3607" endline="3621">XmlUnitTestResultPrinter::OutputXmlAttribute</referencedby>
        <referencedby refid="d1/d69/classtesting_1_1_test_result_1a2443df28261cf11c12cb7f53e968261e" compoundref="df/d5b/gtest_8cc" startline="2155" endline="2159">TestResult::ValidateTestProperty</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1af4406515630591b54fcdf093991b14e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TypeId</type>
        <definition>GTEST_API_ TypeId GetTestTypeId</definition>
        <argsstring>()</argsstring>
        <name>GetTestTypeId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="620" column="8" bodyfile="lib/googletest/src/gtest.cc" bodystart="620" bodyend="622" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="460" declcolumn="19"/>
        <referencedby refid="df/d69/classtesting_1_1_test_1a33853de09fa3a19530ef4db93e81d4a9" compoundref="df/d5b/gtest_8cc" startline="2269" endline="2328">Test::HasSameFixtureClass</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ae0c6fd4543c65945515c42d6f43cc138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> TimeInMillis</type>
        <definition>TimeInMillis GetTimeInMillis</definition>
        <argsstring>()</argsstring>
        <name>GetTimeInMillis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="806" column="14" bodyfile="lib/googletest/src/gtest.cc" bodystart="806" bodyend="847" declfile="lib/googletest/src/gtest-internal-inl.h" declline="113" declcolumn="25"/>
        <references refid="d3/dc9/gtest-port_8h_1ab4c44546d6d9aced68993b87b608fc06" compoundref="d3/dc9/gtest-port_8h" startline="318">GTEST_DISABLE_MSC_WARNINGS_POP_</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a76a726de98cf61e65af03fd6f10a9bc0" compoundref="df/d09/gtest-port_8cc" startline="928" endline="1074">testing::internal::GTEST_DISABLE_MSC_WARNINGS_PUSH_</references>
        <references refid="df/d5b/gtest_8cc_1a7c139c1711de5a69cbc934e8a082e4f9" compoundref="df/d5b/gtest_8cc" startline="116">GTEST_HAS_GETTIMEOFDAY_</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ae74fedbdaebaac8d1202192266243b9e" compoundref="d0/da1/gtest-internal-inl_8h" startline="136" endline="147">testing::internal::GetRandomSeedFromFlag</referencedby>
        <referencedby refid="d1/d79/classtesting_1_1_test_info_1aa3eca255b6be227d7d901cc2a72017a5" compoundref="df/d5b/gtest_8cc" startline="2630" endline="2672">TestInfo::Run</referencedby>
        <referencedby refid="d0/dfa/classtesting_1_1_test_case_1aa3eca255b6be227d7d901cc2a72017a5" compoundref="df/d5b/gtest_8cc" startline="2759" endline="2784">TestCase::Run</referencedby>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4d5d6a2e8fa3b918a284252602a98279" compoundref="df/d5b/gtest_8cc" startline="4551" endline="4687">UnitTestImpl::RunAllTests</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ad72f215c805a46fba44cb09d717b01ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(also_run_disabled_tests, internal::BoolFromGTestEnv(&quot;also_run_disabled_tests&quot;, false), &quot;Run disabled tests too, in addition to the tests normally being run.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>also_run_disabled_tests</type>
        </param>
        <param>
          <type>internal::BoolFromGTestEnv(&quot;also_run_disabled_tests&quot;, false)</type>
        </param>
        <param>
          <type>&quot;Run disabled tests</type>
          <declname>too</declname>
        </param>
        <param>
          <type>in addition to the tests normally being run.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="202" column="1" declfile="lib/googletest/src/gtest.cc" declline="202" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a5ab9e9cc2ee1addddfb2f4b43dd4e402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(break_on_failure, internal::BoolFromGTestEnv(&quot;break_on_failure&quot;, false), &quot;True iff a failed assertion should be a debugger break-point.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>break_on_failure</type>
        </param>
        <param>
          <type>internal::BoolFromGTestEnv(&quot;break_on_failure&quot;, false)</type>
        </param>
        <param>
          <type>&quot;True iff a failed assertion should be a debugger break-point.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="207" column="1" declfile="lib/googletest/src/gtest.cc" declline="207" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a96c82869676822ec883043aefb6dd042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(catch_exceptions, internal::BoolFromGTestEnv(&quot;catch_exceptions&quot;, true), &quot;True iff &quot; GTEST_NAME_ &quot; should catch exceptions and treat them as test failures.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>catch_exceptions</type>
        </param>
        <param>
          <type>internal::BoolFromGTestEnv(&quot;catch_exceptions&quot;, true)</type>
        </param>
        <param>
          <type>&quot;True iff &quot; GTEST_NAME_ &quot; should catch exceptions and treat them as test failures.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="212" column="1" declfile="lib/googletest/src/gtest.cc" declline="212" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a0fa31ecbf33c5e5970cca1d91c050153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(list_tests, false, &quot;List all tests without running them.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>list_tests</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <param>
          <type>&quot;List all tests without running them.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="235" column="1" declfile="lib/googletest/src/gtest.cc" declline="235" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a766fcba2ec951940e528276919a5d22f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(print_time, internal::BoolFromGTestEnv(&quot;print_time&quot;, true), &quot;True iff &quot; GTEST_NAME_ &quot; should display elapsed time in text output.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>print_time</type>
        </param>
        <param>
          <type>internal::BoolFromGTestEnv(&quot;print_time&quot;, true)</type>
        </param>
        <param>
          <type>&quot;True iff &quot; GTEST_NAME_ &quot; should display elapsed time in text output.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="250" column="1" declfile="lib/googletest/src/gtest.cc" declline="250" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a60ef38aa9d1437f0d7818181897af8ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(show_internal_stack_frames, false, &quot;True iff &quot; GTEST_NAME_ &quot; should include internal stack frames when &quot; &quot;printing test failure stack traces.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>show_internal_stack_frames</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <param>
          <type>&quot;True iff &quot; GTEST_NAME_ &quot; should include internal stack frames when &quot; &quot;printing test failure stack traces.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="268" column="1" declfile="lib/googletest/src/gtest.cc" declline="268" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af95276e3deb9d243d729f3043eabd272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(shuffle, internal::BoolFromGTestEnv(&quot;shuffle&quot;, false), &quot;True iff &quot; GTEST_NAME_ &quot; should randomize tests&apos; order on every run.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>shuffle</type>
        </param>
        <param>
          <type>internal::BoolFromGTestEnv(&quot;shuffle&quot;, false)</type>
        </param>
        <param>
          <type>&quot;True iff &quot; GTEST_NAME_ &quot; should randomize tests&apos; order on every run.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="273" column="1" declfile="lib/googletest/src/gtest.cc" declline="273" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7598962574c3fff25237b78f0de81aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(throw_on_failure, internal::BoolFromGTestEnv(&quot;throw_on_failure&quot;, false), &quot;When this flag is specified, a failed assertion will throw an exception &quot; &quot;if exceptions are enabled or exit the program with a non-zero code &quot; &quot;otherwise.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>throw_on_failure</type>
        </param>
        <param>
          <type>internal::BoolFromGTestEnv(&quot;throw_on_failure&quot;, false)</type>
        </param>
        <param>
          <type>&quot;When this flag is</type>
          <declname>specified</declname>
        </param>
        <param>
          <type>a failed assertion will throw an exception &quot; &quot;if exceptions are enabled or exit the program with a non-zero code &quot; &quot;otherwise.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="292" column="1" declfile="lib/googletest/src/gtest.cc" declline="292" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a9900d8db2670a26999fbc2a9130f7185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_int32_</definition>
        <argsstring>(random_seed, internal::Int32FromGTestEnv(&quot;random_seed&quot;, 0), &quot;Random number seed to use when shuffling test orders.  Must be in range &quot; &quot;[1, 99999], or 0 to use a seed based on the current time.&quot;)</argsstring>
        <name>GTEST_DEFINE_int32_</name>
        <param>
          <type>random_seed</type>
        </param>
        <param>
          <type>internal::Int32FromGTestEnv(&quot;random_seed&quot;, 0)</type>
        </param>
        <param>
          <type>&quot;Random number seed to use when shuffling test orders. Must be in range &quot; &quot;</type>
          <array>[1, 99999]</array>
        </param>
        <param>
          <type>or 0 to use a seed based on the current time.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="256" column="1" declfile="lib/googletest/src/gtest.cc" declline="256" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aae6f1140f03d7bf24067df0f6628e9ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_int32_</definition>
        <argsstring>(repeat, internal::Int32FromGTestEnv(&quot;repeat&quot;, 1), &quot;How many times to repeat each test.  Specify a negative number &quot; &quot;for repeating forever.  Useful for shaking out flaky tests.&quot;)</argsstring>
        <name>GTEST_DEFINE_int32_</name>
        <param>
          <type>repeat</type>
        </param>
        <param>
          <type>internal::Int32FromGTestEnv(&quot;repeat&quot;, 1)</type>
        </param>
        <param>
          <type>&quot;How many times to repeat each test. Specify a negative number &quot; &quot;for repeating forever. Useful for shaking out flaky tests.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="262" column="1" declfile="lib/googletest/src/gtest.cc" declline="262" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a84af642630c9181f00fcf0a4a63e795e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_int32_</definition>
        <argsstring>(stack_trace_depth, internal::Int32FromGTestEnv(&quot;stack_trace_depth&quot;, kMaxStackTraceDepth), &quot;The maximum number of stack frames to print when an &quot; &quot;assertion fails.  The valid range is 0 through 100, inclusive.&quot;)</argsstring>
        <name>GTEST_DEFINE_int32_</name>
        <param>
          <type>stack_trace_depth</type>
        </param>
        <param>
          <type>internal::Int32FromGTestEnv(&quot;stack_trace_depth&quot;, kMaxStackTraceDepth)</type>
        </param>
        <param>
          <type>&quot;The maximum number of stack frames to print when an &quot; &quot;assertion fails. The valid range is 0 through</type>
          <declname>100</declname>
        </param>
        <param>
          <type>inclusive.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="279" column="1" declfile="lib/googletest/src/gtest.cc" declline="279" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1aff419d76acc3727be48d195f927189c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref></type>
        <definition>GTEST_API_ testing::internal::GTEST_DEFINE_STATIC_MUTEX_</definition>
        <argsstring>(g_linked_ptr_mutex)</argsstring>
        <name>GTEST_DEFINE_STATIC_MUTEX_</name>
        <param>
          <type>g_linked_ptr_mutex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="384" column="12" declfile="lib/googletest/src/gtest.cc" declline="384" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a32f0280e95e7718835b0e3d2f7277269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(color, internal::StringFromGTestEnv(&quot;color&quot;, &quot;auto&quot;), &quot;Whether to use colors in the output.  Valid values: yes, no, &quot; &quot;and auto.  &apos;auto&apos; means to use colors if the output is &quot; &quot;being sent to a terminal and the TERM environment variable &quot; &quot;is set to a terminal type that supports colors.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>color</type>
        </param>
        <param>
          <type>internal::StringFromGTestEnv(&quot;color&quot;, &quot;auto&quot;)</type>
        </param>
        <param>
          <type>&quot;Whether to use colors in the output. Valid values:</type>
          <declname>yes</declname>
        </param>
        <param>
          <type>no</type>
        </param>
        <param>
          <type>&quot; &quot;and auto. &apos;auto&apos; means to use colors if the output is &quot; &quot;being sent to a terminal and the TERM environment variable &quot; &quot;is set to a terminal type that supports colors.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="218" column="1" declfile="lib/googletest/src/gtest.cc" declline="218" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a2830ee1f2237233fa44aa580c5a919ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(filter, internal::StringFromGTestEnv(&quot;filter&quot;, GetDefaultFilter()), &quot;A colon-separated list of glob (not regex) patterns &quot; &quot;for filtering the tests to run, optionally followed by a &quot; &quot;&apos;-&apos; and a : separated list of negative patterns (tests to &quot; &quot;exclude).  A test is run if it matches one of the positive &quot; &quot;patterns and does not match any of the negative patterns.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>filter</type>
        </param>
        <param>
          <type>internal::StringFromGTestEnv(&quot;filter&quot;, GetDefaultFilter())</type>
        </param>
        <param>
          <type>&quot;A colon-separated list of glob (not regex) patterns &quot; &quot;for filtering the tests to</type>
          <declname>run</declname>
        </param>
        <param>
          <type>optionally followed by a &quot; &quot;&apos;-&apos; and a :separated list of negative patterns(tests to &quot; &quot;exclude). A test is run if it matches one of the positive &quot; &quot;patterns and does not match any of the negative patterns.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="226" column="1" declfile="lib/googletest/src/gtest.cc" declline="226" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1afbe98005fe5c00ddbc23701a784d44db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(output, internal::StringFromGTestEnv(&quot;output&quot;, &quot;&quot;), &quot;A format (currently must be \&quot;xml\&quot;), optionally followed &quot; &quot;by a colon and an output file name or directory. A directory &quot; &quot;is indicated by a trailing pathname separator. &quot; &quot;Examples: \&quot;xml:filename.xml\&quot;, \&quot;xml::directoryname/\&quot;. &quot; &quot;If a directory is specified, output files will be created &quot; &quot;within that directory, with file-names based on the test &quot; &quot;executable&apos;s name and, if necessary, made unique by adding &quot; &quot;digits.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>output</type>
        </param>
        <param>
          <type>internal::StringFromGTestEnv(&quot;output&quot;, &quot;&quot;)</type>
        </param>
        <param>
          <type>&quot;A format </type>
          <array>currently must be \&quot;xml\&quot;</array>
        </param>
        <param>
          <type>optionally followed &quot; &quot;by a colon and an output file name or directory. A directory &quot; &quot;is indicated by a trailing pathname separator. &quot; &quot;Examples:\&quot;xml:filename.xml\&quot;</type>
        </param>
        <param>
          <type>\&quot;xml::directoryname/\&quot;. &quot; &quot;If a directory is</type>
          <declname>specified</declname>
        </param>
        <param>
          <type>output files will be created &quot; &quot;within that</type>
          <declname>directory</declname>
        </param>
        <param>
          <type>with file-names based on the test &quot; &quot;executable &apos;s name</type>
          <declname>and</declname>
        </param>
        <param>
          <type>if</type>
          <declname>necessary</declname>
        </param>
        <param>
          <type>made unique by adding &quot; &quot;digits.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="238" column="1" declfile="lib/googletest/src/gtest.cc" declline="238" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a5cfe9778e1cc8b5cf04bfe9e764ddff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(stream_result_to, internal::StringFromGTestEnv(&quot;stream_result_to&quot;, &quot;&quot;), &quot;This flag specifies the host name and the port number on which to stream &quot; &quot;test results. Example: \&quot;localhost:555\&quot;. The flag is effective only on &quot; &quot;Linux.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>stream_result_to</type>
        </param>
        <param>
          <type>internal::StringFromGTestEnv(&quot;stream_result_to&quot;, &quot;&quot;)</type>
        </param>
        <param>
          <type>&quot;This flag specifies the host name and the port number on which to stream &quot; &quot;test results. Example: \&quot;localhost:555\&quot;. The flag is effective only on &quot; &quot;Linux.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="285" column="1" declfile="lib/googletest/src/gtest.cc" declline="285" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1aace9bb29e075d3cc3c4e689de03f0e71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GTEST_IMPL_CMP_HELPER_</definition>
        <argsstring>(NE, !=) GTEST_IMPL_CMP_HELPER_(LE</argsstring>
        <name>GTEST_IMPL_CMP_HELPER_</name>
        <param>
          <type>NE</type>
        </param>
        <param>
          <type>!</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1470" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="1522" declcolumn="1"/>
        <references refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" compoundref="df/d5b/gtest_8cc" startline="1010" endline="1012">testing::AssertionSuccess</references>
        <references refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" compoundref="df/d5b/gtest_8cc" startline="894" endline="900">String::CStringEquals</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" compoundref="df/d5b/gtest_8cc" startline="1312" endline="1343">testing::internal::EqFailure</references>
        <references refid="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" compoundref="d0/d6d/gtest-printers_8h" startline="980" endline="984">testing::PrintToString</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a7129b6f50c9bf93c1a47bf2edd5c6acf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UnitTest</type>
        <definition>UnitTest testing::internal::GTEST_REPEATER_METHOD_</definition>
        <argsstring>(OnTestCaseStart, TestCase) GTEST_REPEATER_METHOD_(OnTestStart</argsstring>
        <name>GTEST_REPEATER_METHOD_</name>
        <param>
          <type>OnTestCaseStart</type>
        </param>
        <param>
          <type>TestCase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="3315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1aa602ef304f88b3b7c0619b95a477d50f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UnitTest TestInfo</type>
        <definition>UnitTest TestInfo testing::internal::GTEST_REPEATER_METHOD_</definition>
        <argsstring>(OnTestPartResult, TestPartResult) GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart</argsstring>
        <name>GTEST_REPEATER_METHOD_</name>
        <param>
          <type>OnTestPartResult</type>
        </param>
        <param>
          <type>TestPartResult</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="3317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ac9931727dc0f845cddff1f228db37668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_REPEATER_METHOD_</definition>
        <argsstring>(OnTestProgramStart, UnitTest) GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart</argsstring>
        <name>GTEST_REPEATER_METHOD_</name>
        <param>
          <type>OnTestProgramStart</type>
        </param>
        <param>
          <type>UnitTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="3313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1adfd61e7c715137b3bf55604f43e78e9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UnitTest TestInfo UnitTest</type>
        <definition>UnitTest TestInfo UnitTest testing::internal::GTEST_REVERSE_REPEATER_METHOD_</definition>
        <argsstring>(OnEnvironmentsSetUpEnd, UnitTest) GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd</argsstring>
        <name>GTEST_REVERSE_REPEATER_METHOD_</name>
        <param>
          <type>OnEnvironmentsSetUpEnd</type>
        </param>
        <param>
          <type>UnitTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="3319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ad00b72c4abd63ed2c00c207cd4270bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UnitTest TestInfo UnitTest UnitTest</type>
        <definition>UnitTest TestInfo UnitTest UnitTest testing::internal::GTEST_REVERSE_REPEATER_METHOD_</definition>
        <argsstring>(OnTestEnd, TestInfo) GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd</argsstring>
        <name>GTEST_REVERSE_REPEATER_METHOD_</name>
        <param>
          <type>OnTestEnd</type>
        </param>
        <param>
          <type>TestInfo</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="3321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a6def6030b2054b4ed24b9ef66c98d320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UnitTest TestInfo UnitTest UnitTest TestCase</type>
        <definition>UnitTest TestInfo UnitTest UnitTest TestCase testing::internal::GTEST_REVERSE_REPEATER_METHOD_</definition>
        <argsstring>(OnTestProgramEnd, UnitTest) void TestEventRepeater</argsstring>
        <name>GTEST_REVERSE_REPEATER_METHOD_</name>
        <param>
          <type>OnTestProgramEnd</type>
        </param>
        <param>
          <type>UnitTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="3323" column="1" bodyfile="lib/googletest/src/gtest.cc" bodystart="3323" bodyend="3335"/>
        <references refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a61be6f7c2025bac9b4fc5cd7f8aaa7df" compoundref="df/d5b/gtest_8cc" startline="3265">TestEventRepeater::forwarding_enabled_</references>
        <references refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a2f78cc6db68f1306b075d561225437d2" compoundref="df/d5b/gtest_8cc" startline="3267">TestEventRepeater::listeners_</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a91e707e0d371fae0224ffd37f0d042af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::GTestIsInitialized</definition>
        <argsstring>()</argsstring>
        <name>GTestIsInitialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="330" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="330" bodyend="330"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a72bae19a0033260a6266052ec0126551" compoundref="df/d5b/gtest_8cc" startline="389" endline="395">testing::internal::GetArgvs</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ac3c6fa93391768aa91c6238b31aaeeb5" compoundref="df/d5b/gtest_8cc" startline="5344" endline="5357">testing::internal::InitGoogleTestImpl</referencedby>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4d5d6a2e8fa3b918a284252602a98279" compoundref="df/d5b/gtest_8cc" startline="4551" endline="4687">UnitTestImpl::RunAllTests</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1addb2ed165b92b74e25fe9ebe9e46b9f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename Result</type>
          </param>
        </templateparamlist>
        <type>Result</type>
        <definition>Result testing::internal::HandleExceptionsInMethodIfSupported</definition>
        <argsstring>(T *object, Result(T::*method)(), const char *location)</argsstring>
        <name>HandleExceptionsInMethodIfSupported</name>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>Result(T::*)()</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2410" column="8" bodyfile="lib/googletest/src/gtest.cc" bodystart="2410" bodyend="2460"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" compoundref="d0/da1/gtest-internal-inl_8h" startline="927" endline="929">testing::internal::GetUnitTestImpl</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ac5293b438139ef7ed05cb7fcaaf63545" compoundref="df/d5b/gtest_8cc" startline="2383" endline="2404">testing::internal::HandleSehExceptionsInMethodIfSupported</references>
        <references refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7afff22986360310b0356db600c8c2187d" compoundref="d1/d01/gtest-test-part_8h" startline="54">TestPartResult::kFatalFailure</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a4fdfe94b1ad045e6e66e6227dd0d130d" compoundref="df/d5b/gtest_8cc" startline="2250" endline="2260">testing::internal::ReportFailureInUnknownLocation</references>
        <references refid="cpp/error/exception/what_1">exception::what</references>
        <referencedby refid="df/d69/classtesting_1_1_test_1aa3eca255b6be227d7d901cc2a72017a5" compoundref="df/d5b/gtest_8cc" startline="2465" endline="2484">Test::Run</referencedby>
        <referencedby refid="d1/d79/classtesting_1_1_test_info_1aa3eca255b6be227d7d901cc2a72017a5" compoundref="df/d5b/gtest_8cc" startline="2630" endline="2672">TestInfo::Run</referencedby>
        <referencedby refid="d0/dfa/classtesting_1_1_test_case_1aa3eca255b6be227d7d901cc2a72017a5" compoundref="df/d5b/gtest_8cc" startline="2759" endline="2784">TestCase::Run</referencedby>
        <referencedby refid="d7/d47/classtesting_1_1_unit_test_1a22f3e90081aaad35b4eccfa93a28042c" compoundref="df/d5b/gtest_8cc" startline="4185" endline="4261">UnitTest::Run</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ac5293b438139ef7ed05cb7fcaaf63545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename Result</type>
          </param>
        </templateparamlist>
        <type>Result</type>
        <definition>Result testing::internal::HandleSehExceptionsInMethodIfSupported</definition>
        <argsstring>(T *object, Result(T::*method)(), const char *location)</argsstring>
        <name>HandleSehExceptionsInMethodIfSupported</name>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>Result(T::*)()</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2383" column="8" bodyfile="lib/googletest/src/gtest.cc" bodystart="2383" bodyend="2404"/>
        <references refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7afff22986360310b0356db600c8c2187d" compoundref="d1/d01/gtest-test-part_8h" startline="54">TestPartResult::kFatalFailure</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a4fdfe94b1ad045e6e66e6227dd0d130d" compoundref="df/d5b/gtest_8cc" startline="2250" endline="2260">testing::internal::ReportFailureInUnknownLocation</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1addb2ed165b92b74e25fe9ebe9e46b9f9" compoundref="df/d5b/gtest_8cc" startline="2410" endline="2460">testing::internal::HandleExceptionsInMethodIfSupported</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a6fff795269f50673e358438721710d6f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::HasGoogleTestFlagPrefix</definition>
        <argsstring>(const char *str)</argsstring>
        <name>HasGoogleTestFlagPrefix</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5105" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="5105" bodyend="5112"/>
        <references refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" compoundref="d3/dc9/gtest-port_8h" startline="286">GTEST_FLAG_PREFIX_</references>
        <references refid="d3/dc9/gtest-port_8h_1a4251ff898f9f94ec6b8b9402c3436759" compoundref="d3/dc9/gtest-port_8h" startline="287">GTEST_FLAG_PREFIX_DASH_</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1abcf66fcfdb8c336eba8636bc8b49b4aa" compoundref="df/d5b/gtest_8cc" startline="5001" endline="5008">testing::internal::SkipPrefix</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ae4c46ce8c3d016848fff52cc5133f2ac" compoundref="df/d5b/gtest_8cc" startline="5279" endline="5328">testing::internal::ParseGoogleTestFlagsOnlyImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a14ff02e6d151f45e998657674e9af88a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>AssertionResult testing::internal::HasOneFailure</definition>
        <argsstring>(const char *, const char *, const char *, const TestPartResultArray &amp;results, TestPartResult::Type type, const string &amp;substr)</argsstring>
        <name>HasOneFailure</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>const TestPartResultArray &amp;</type>
          <declname>results</declname>
        </param>
        <param>
          <type>TestPartResult::Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>substr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="631" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="631" bodyend="665"/>
        <references refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" compoundref="df/d5b/gtest_8cc" startline="1015" endline="1017">testing::AssertionFailure</references>
        <references refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" compoundref="df/d5b/gtest_8cc" startline="1010" endline="1012">testing::AssertionSuccess</references>
        <references refid="cpp/string/basic_string/c_str_1">string::c_str</references>
        <references refid="d4/d5d/classtesting_1_1_test_part_result_array_1ab619c316b3350fd64fee6f9aa4c6506f" compoundref="d3/dc2/gtest-test-part_8cc" startline="73" endline="80">TestPartResultArray::GetTestPartResult</references>
        <references refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7afff22986360310b0356db600c8c2187d" compoundref="d1/d01/gtest-test-part_8h" startline="54">TestPartResult::kFatalFailure</references>
        <references refid="d0/d4b/classtesting_1_1_test_part_result_1aea6220e002a8039b97dc6fbd9ff79f46" compoundref="d1/d01/gtest-test-part_8h" startline="88" endline="88">TestPartResult::message</references>
        <references refid="d4/d5d/classtesting_1_1_test_part_result_array_1af9593d4a5ff4274efaf429cb4f9e57cc" compoundref="d3/dc2/gtest-test-part_8cc" startline="83" endline="85">TestPartResultArray::size</references>
        <references refid="d0/d4b/classtesting_1_1_test_part_result_1adf4a6727c689e0038cf2cdd158d5ed2c" compoundref="d1/d01/gtest-test-part_8h" startline="72" endline="72">TestPartResult::type</references>
        <referencedby refid="d8/d9a/classtesting_1_1internal_1_1_single_failure_checker_1a800e9d220e8d92357360adbe84be2736" compoundref="df/d5b/gtest_8cc" startline="682" endline="684">SingleFailureChecker::~SingleFailureChecker</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aefed8296a2dd394336ae59e0737ba4c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>GTEST_API_ void InitGoogleTest</definition>
        <argsstring>(int *argc, char **argv)</argsstring>
        <name>InitGoogleTest</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5370" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="5370" bodyend="5376" declfile="lib/googletest/include/gtest/gtest.h" declline="1363" declcolumn="17"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1ac3c6fa93391768aa91c6238b31aaeeb5" compoundref="df/d5b/gtest_8cc" startline="5344" endline="5357">testing::internal::InitGoogleTestImpl</references>
        <referencedby refid="d3/d3a/gtest__main_8cc_1a7f83bdc516d2cb86e20235d94ddf055a" compoundref="d3/d3a/gtest__main_8cc" startline="34" endline="38">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a1e9668bd7ea1c9158eca20c9864866f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>GTEST_API_ void InitGoogleTest</definition>
        <argsstring>(int *argc, wchar_t **argv)</argsstring>
        <name>InitGoogleTest</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>wchar_t **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5380" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="5380" bodyend="5386" declfile="lib/googletest/include/gtest/gtest.h" declline="1367" declcolumn="17"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1ac3c6fa93391768aa91c6238b31aaeeb5" compoundref="df/d5b/gtest_8cc" startline="5344" endline="5357">testing::internal::InitGoogleTestImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ac3c6fa93391768aa91c6238b31aaeeb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::InitGoogleTestImpl</definition>
        <argsstring>(int *argc, CharType **argv)</argsstring>
        <name>InitGoogleTestImpl</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>CharType **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5344" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="5344" bodyend="5357"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1aaef5a3e9dd2e630d870d98a6d8145d09" compoundref="df/d5b/gtest_8cc" startline="387">testing::internal::g_argvs</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" compoundref="d0/da1/gtest-internal-inl_8h" startline="927" endline="929">testing::internal::GetUnitTestImpl</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a91e707e0d371fae0224ffd37f0d042af" compoundref="df/d5b/gtest_8cc" startline="330" endline="330">testing::internal::GTestIsInitialized</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a5655276556ac09c8d184920553da3e90" compoundref="df/d5b/gtest_8cc" startline="5332" endline="5334">testing::internal::ParseGoogleTestFlagsOnly</references>
        <references refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a3d68c6d1fdec822210f96171a3b57b47" compoundref="df/d5b/gtest_8cc" startline="4436" endline="4465">UnitTestImpl::PostFlagParsingInit</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" compoundref="d6/da4/gtest-message_8h" startline="243" endline="245">testing::internal::StreamableToString</references>
        <referencedby refid="d0/d75/namespacetesting_1aefed8296a2dd394336ae59e0737ba4c1" compoundref="df/d5b/gtest_8cc" startline="5370" endline="5376">testing::InitGoogleTest</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1afec7cf2eb159fa969f88d192ee507d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> Int32</type>
        <definition>Int32 Int32FromEnvOrDie</definition>
        <argsstring>(const char *env_var, Int32 default_val)</argsstring>
        <name>Int32FromEnvOrDie</name>
        <param>
          <type>const char *</type>
          <declname>env_var</declname>
        </param>
        <param>
          <type>Int32</type>
          <declname>default_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="4760" column="7" bodyfile="lib/googletest/src/gtest.cc" bodystart="4760" bodyend="4772" declfile="lib/googletest/src/gtest-internal-inl.h" declline="269" declcolumn="18"/>
        <references refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a1d5e3da5a27eed25986859fa83cafe95" compoundref="d3/dc9/gtest-port_8h" startline="2387" endline="2400">testing::internal::posix::GetEnv</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a3bd151d0274b216f9c2e6275ccc4a9a3" compoundref="df/d09/gtest-port_8cc" startline="1149" endline="1185">testing::internal::ParseInt32</references>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1af8cfcffb71cba69a55105ddac96786aa" compoundref="df/d5b/gtest_8cc" startline="4789" endline="4840">UnitTestImpl::FilterTests</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aab7032bcb450f58f2ce48c00ad6401e8" compoundref="df/d5b/gtest_8cc" startline="3056" endline="3089">PrettyUnitTestResultPrinter::OnTestIterationStart</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a57e2697262a419061fc4cd3377a9271e" compoundref="df/d5b/gtest_8cc" startline="4715" endline="4755">testing::internal::ShouldShard</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a44cfeea3cff1ac9e2082efd5ab7b9f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const ::std::string &amp;needle, const ::std::string &amp;haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1636" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1636" bodyend="1640" declfile="lib/googletest/include/gtest/gtest.h" declline="1608" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4c722362b584ab9565021fd68f2d0003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const char *needle, const char *haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1618" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1618" bodyend="1622" declfile="lib/googletest/include/gtest/gtest.h" declline="1599" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a5aa234189c2ad81a9536db01de639003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const wchar_t *needle, const wchar_t *haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1624" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1624" bodyend="1628" declfile="lib/googletest/include/gtest/gtest.h" declline="1602" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a3963e5134ee631c3e0da79c4f168ae3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const ::std::string &amp;needle, const ::std::string &amp;haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1630" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1630" bodyend="1634" declfile="lib/googletest/include/gtest/gtest.h" declline="1605" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af769ba85b7dc1c49d49594f195b442cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const char *needle, const char *haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1606" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1606" bodyend="1610" declfile="lib/googletest/include/gtest/gtest.h" declline="1593" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8e18e316d8175f0f5928fca6afe122e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const wchar_t *needle, const wchar_t *haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1612" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1612" bodyend="1616" declfile="lib/googletest/include/gtest/gtest.h" declline="1596" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
        </templateparamlist>
        <type>AssertionResult</type>
        <definition>AssertionResult testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</definition>
        <argsstring>(bool expected_to_be_substring, const char *needle_expr, const char *haystack_expr, const StringType &amp;needle, const StringType &amp;haystack)</argsstring>
        <name>IsSubstringImpl</name>
        <param>
          <type>bool</type>
          <declname>expected_to_be_substring</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const StringType &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const StringType &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1583" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1583" bodyend="1598"/>
        <references refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" compoundref="df/d5b/gtest_8cc" startline="1015" endline="1017">testing::AssertionFailure</references>
        <references refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" compoundref="df/d5b/gtest_8cc" startline="1010" endline="1012">testing::AssertionSuccess</references>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a529b2b4b07a1d3085fc3ee11f65e6b0c" compoundref="df/d5b/gtest_8cc" startline="1573" endline="1576">testing::anonymous_namespace{gtest.cc}::IsSubstringPred</references>
        <referencedby refid="d0/d75/namespacetesting_1a4c722362b584ab9565021fd68f2d0003" compoundref="df/d5b/gtest_8cc" startline="1618" endline="1622">testing::IsNotSubstring</referencedby>
        <referencedby refid="d0/d75/namespacetesting_1af769ba85b7dc1c49d49594f195b442cf" compoundref="df/d5b/gtest_8cc" startline="1606" endline="1610">testing::IsSubstring</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1aa8f2626915e70ad4d628f8fb247e0b6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::anonymous_namespace{gtest.cc}::IsSubstringPred</definition>
        <argsstring>(const char *needle, const char *haystack)</argsstring>
        <name>IsSubstringPred</name>
        <param>
          <type>const char *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1557" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="1557" bodyend="1562"/>
      </memberdef>
      <memberdef kind="function" id="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a529b2b4b07a1d3085fc3ee11f65e6b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::anonymous_namespace{gtest.cc}::IsSubstringPred</definition>
        <argsstring>(const StringType &amp;needle, const StringType &amp;haystack)</argsstring>
        <name>IsSubstringPred</name>
        <param>
          <type>const StringType &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const StringType &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1573" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="1573" bodyend="1576"/>
        <referencedby refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1ab0b38787cae43f83ad170e8d3260f425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::anonymous_namespace{gtest.cc}::IsSubstringPred</definition>
        <argsstring>(const wchar_t *needle, const wchar_t *haystack)</argsstring>
        <name>IsSubstringPred</name>
        <param>
          <type>const wchar_t *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1564" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="1564" bodyend="1569"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a8ca2411dd35c0816107b93cf9ec7ebf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>GTEST_API_ bool IsTrue</definition>
        <argsstring>(bool condition)</argsstring>
        <name>IsTrue</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="4986" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="4986" bodyend="4986" declfile="lib/googletest/include/gtest/internal/gtest-port.h" declline="1108" declcolumn="17"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1af72a7a7eee6997f4ed9e18d9620a7b87" compoundref="df/d5b/gtest_8cc" startline="4988" endline="4996">testing::internal::AlwaysTrue</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1affa1f94e3ba8db8b964553c2871bf339" compoundref="d0/d6d/gtest-printers_8h" startline="404" endline="431">testing::internal::DefaultPrintTo</referencedby>
        <referencedby refid="de/d6a/classtesting_1_1internal_1_1scoped__ptr_1a6f757964907a3225b09ce2c9c4e014c8" compoundref="d3/dc9/gtest-port_8h" startline="1132" endline="1139">scoped_ptr&lt; T &gt;::reset</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a681895f8cc32286211be9889da107394" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsUtf16SurrogatePair</definition>
        <argsstring>(wchar_t first, wchar_t second)</argsstring>
        <name>IsUtf16SurrogatePair</name>
        <param>
          <type>wchar_t</type>
          <declname>first</declname>
        </param>
        <param>
          <type>wchar_t</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1794" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="1794" bodyend="1797"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a34ba5cda1864f3228954b3a5c8f6b07d" compoundref="df/d5b/gtest_8cc" startline="1823" endline="1844">testing::internal::WideStringToUtf8</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a616199437436015fde76f09d80c6d5e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TestInfo *</type>
        <definition>GTEST_API_ TestInfo * MakeAndRegisterTestInfo</definition>
        <argsstring>(const char *test_case_name, const char *name, const char *type_param, const char *value_param, CodeLocation code_location, TypeId fixture_class_id, SetUpTestCaseFunc set_up_tc, TearDownTestCaseFunc tear_down_tc, TestFactoryBase *factory)</argsstring>
        <name>MakeAndRegisterTestInfo</name>
        <param>
          <type>const char *</type>
          <declname>test_case_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type_param</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value_param</declname>
        </param>
        <param>
          <type>CodeLocation</type>
          <declname>code_location</declname>
        </param>
        <param>
          <type>TypeId</type>
          <declname>fixture_class_id</declname>
        </param>
        <param>
          <type>SetUpTestCaseFunc</type>
          <declname>set_up_tc</declname>
        </param>
        <param>
          <type>TearDownTestCaseFunc</type>
          <declname>tear_down_tc</declname>
        </param>
        <param>
          <type>TestFactoryBase *</type>
          <declname>factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2543" column="10" bodyfile="lib/googletest/src/gtest.cc" bodystart="2543" bodyend="2558" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="529" declcolumn="21"/>
        <references refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a0f73735489a968e6f6d57f791a246615" compoundref="d0/da1/gtest-internal-inl_8h" startline="645" endline="665">UnitTestImpl::AddTestInfo</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" compoundref="d0/da1/gtest-internal-inl_8h" startline="927" endline="929">testing::internal::GetUnitTestImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ada3b98e7cfe93f4ba2053c470d9e3e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::ParseBoolFlag</definition>
        <argsstring>(const char *str, const char *flag, bool *value)</argsstring>
        <name>ParseBoolFlag</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5053" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="5053" bodyend="5063"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a8bfd56af5e4a89bfb76f7e1723e41b03" compoundref="df/d5b/gtest_8cc" startline="5015" endline="5041">testing::internal::ParseFlagValue</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1afccff08aa2b1ede0dd32c1364a5dee42" compoundref="df/d5b/gtest_8cc" startline="5223" endline="5250">testing::internal::ParseGoogleTestFlag</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ae4c46ce8c3d016848fff52cc5133f2ac" compoundref="df/d5b/gtest_8cc" startline="5279" endline="5328">testing::internal::ParseGoogleTestFlagsOnlyImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a8bfd56af5e4a89bfb76f7e1723e41b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* testing::internal::ParseFlagValue</definition>
        <argsstring>(const char *str, const char *flag, bool def_optional)</argsstring>
        <name>ParseFlagValue</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>def_optional</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5015" column="12" bodyfile="lib/googletest/src/gtest.cc" bodystart="5015" bodyend="5041"/>
        <references refid="cpp/string/basic_string/c_str_1">string::c_str</references>
        <references refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" compoundref="d3/dc9/gtest-port_8h" startline="286">GTEST_FLAG_PREFIX_</references>
        <references refid="cpp/string/basic_string/size_1">string::length</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ada3b98e7cfe93f4ba2053c470d9e3e51" compoundref="df/d5b/gtest_8cc" startline="5053" endline="5063">testing::internal::ParseBoolFlag</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a082f2d6b59adc025b035b2c51b0fc47e" compoundref="df/d5b/gtest_8cc" startline="5070" endline="5080">testing::internal::ParseInt32Flag</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1aa4ce312efaaf7a97aac2303173afe021" compoundref="df/d5b/gtest_8cc" startline="5087" endline="5097">testing::internal::ParseStringFlag</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1afccff08aa2b1ede0dd32c1364a5dee42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::ParseGoogleTestFlag</definition>
        <argsstring>(const char *const arg)</argsstring>
        <name>ParseGoogleTestFlag</name>
        <param>
          <type>const char *const</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5223" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="5223" bodyend="5250"/>
        <references refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" compoundref="d3/dc9/gtest-port_8h" startline="2504">GTEST_FLAG</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a40f1e51c777d9472a0fda6afdf18878b" compoundref="d0/da1/gtest-internal-inl_8h" startline="89">testing::internal::kAlsoRunDisabledTestsFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1aaf2d732a6c2ca2a3cb47b6e81998b043" compoundref="d0/da1/gtest-internal-inl_8h" startline="90">testing::internal::kBreakOnFailureFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ada1f05af2a2d934b26f96866fa79f9f4" compoundref="d0/da1/gtest-internal-inl_8h" startline="91">testing::internal::kCatchExceptionsFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a839337d3f8323c348142c6d1224e7c1a" compoundref="d0/da1/gtest-internal-inl_8h" startline="92">testing::internal::kColorFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ac2118ecf66313a8f09dbb4a3f87f9d82" compoundref="d0/d1a/gtest-death-test-internal_8h" startline="50">testing::internal::kDeathTestStyleFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a31cad6bbb8ac973c61b58a0d53d5f9eb" compoundref="d0/d1a/gtest-death-test-internal_8h" startline="51">testing::internal::kDeathTestUseFork</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ab871c4f63c409bba1b284db0284375f4" compoundref="d0/da1/gtest-internal-inl_8h" startline="93">testing::internal::kFilterFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a88b858ed510625c9bb0aa41fbbf31308" compoundref="d0/d1a/gtest-death-test-internal_8h" startline="52">testing::internal::kInternalRunDeathTestFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a484a75f903c2eb081e377d2eae1aabe0" compoundref="d0/da1/gtest-internal-inl_8h" startline="94">testing::internal::kListTestsFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a3356de7ab27f52e081b5b2cd89915454" compoundref="d0/da1/gtest-internal-inl_8h" startline="95">testing::internal::kOutputFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1aac057c0b9e05e37742f23f063ebb8d79" compoundref="d0/da1/gtest-internal-inl_8h" startline="96">testing::internal::kPrintTimeFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a9159056bc011a8e575c2324056941d13" compoundref="d0/da1/gtest-internal-inl_8h" startline="97">testing::internal::kRandomSeedFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ac28af745e517b8e2ac57e9365f1697d4" compoundref="d0/da1/gtest-internal-inl_8h" startline="98">testing::internal::kRepeatFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a7e3065f820ccc6fed72c3b8461c58b64" compoundref="d0/da1/gtest-internal-inl_8h" startline="99">testing::internal::kShuffleFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ad7dc206d070dfc3d5e07954cd30e42de" compoundref="d0/da1/gtest-internal-inl_8h" startline="100">testing::internal::kStackTraceDepthFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1aea94ce12391e08c95c99f053f453af8c" compoundref="d0/da1/gtest-internal-inl_8h" startline="101">testing::internal::kStreamResultToFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a71a67b159db4a554b87416e815ddbdf1" compoundref="d0/da1/gtest-internal-inl_8h" startline="102">testing::internal::kThrowOnFailureFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ada3b98e7cfe93f4ba2053c470d9e3e51" compoundref="df/d5b/gtest_8cc" startline="5053" endline="5063">testing::internal::ParseBoolFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a082f2d6b59adc025b035b2c51b0fc47e" compoundref="df/d5b/gtest_8cc" startline="5070" endline="5080">testing::internal::ParseInt32Flag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1aa4ce312efaaf7a97aac2303173afe021" compoundref="df/d5b/gtest_8cc" startline="5087" endline="5097">testing::internal::ParseStringFlag</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ae4c46ce8c3d016848fff52cc5133f2ac" compoundref="df/d5b/gtest_8cc" startline="5279" endline="5328">testing::internal::ParseGoogleTestFlagsOnlyImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a5655276556ac09c8d184920553da3e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> void</type>
        <definition>void ParseGoogleTestFlagsOnly</definition>
        <argsstring>(int *argc, char **argv)</argsstring>
        <name>ParseGoogleTestFlagsOnly</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5332" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="5332" bodyend="5334" declfile="lib/googletest/src/gtest-internal-inl.h" declline="953" declcolumn="17"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae4c46ce8c3d016848fff52cc5133f2ac" compoundref="df/d5b/gtest_8cc" startline="5279" endline="5328">testing::internal::ParseGoogleTestFlagsOnlyImpl</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ac3c6fa93391768aa91c6238b31aaeeb5" compoundref="df/d5b/gtest_8cc" startline="5344" endline="5357">testing::internal::InitGoogleTestImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ae231639ccb18f92df31567b3eca47ac9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> void</type>
        <definition>void ParseGoogleTestFlagsOnly</definition>
        <argsstring>(int *argc, wchar_t **argv)</argsstring>
        <name>ParseGoogleTestFlagsOnly</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>wchar_t **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5335" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="5335" bodyend="5337" declfile="lib/googletest/src/gtest-internal-inl.h" declline="954" declcolumn="17"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae4c46ce8c3d016848fff52cc5133f2ac" compoundref="df/d5b/gtest_8cc" startline="5279" endline="5328">testing::internal::ParseGoogleTestFlagsOnlyImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ae4c46ce8c3d016848fff52cc5133f2ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::ParseGoogleTestFlagsOnlyImpl</definition>
        <argsstring>(int *argc, CharType **argv)</argsstring>
        <name>ParseGoogleTestFlagsOnlyImpl</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>CharType **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5279" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="5279" bodyend="5328"/>
        <references refid="cpp/string/basic_string/c_str_1">string::c_str</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a05b77c93e2ac596346466a00277288ca" compoundref="df/d5b/gtest_8cc" startline="188">testing::internal::g_help_flag</references>
        <references refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" compoundref="d3/dc9/gtest-port_8h" startline="2504">GTEST_FLAG</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a6fff795269f50673e358438721710d6f" compoundref="df/d5b/gtest_8cc" startline="5105" endline="5112">testing::internal::HasGoogleTestFlagPrefix</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a454d13f6ba62cea7cfa4798257bf3910" compoundref="df/d5b/gtest_8cc" startline="5159">testing::internal::kColorEncodedHelpMessage</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae9b474f0121788ef889e9187455fcf78" compoundref="d0/da1/gtest-internal-inl_8h" startline="103">testing::internal::kFlagfileFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ada3b98e7cfe93f4ba2053c470d9e3e51" compoundref="df/d5b/gtest_8cc" startline="5053" endline="5063">testing::internal::ParseBoolFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1afccff08aa2b1ede0dd32c1364a5dee42" compoundref="df/d5b/gtest_8cc" startline="5223" endline="5250">testing::internal::ParseGoogleTestFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a082f2d6b59adc025b035b2c51b0fc47e" compoundref="df/d5b/gtest_8cc" startline="5070" endline="5080">testing::internal::ParseInt32Flag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1aa4ce312efaaf7a97aac2303173afe021" compoundref="df/d5b/gtest_8cc" startline="5087" endline="5097">testing::internal::ParseStringFlag</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a7d8c446a29c7e22d7d4dde8f530bb57e" compoundref="df/d5b/gtest_8cc" startline="5125" endline="5157">testing::internal::PrintColorEncoded</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" compoundref="d6/da4/gtest-message_8h" startline="243" endline="245">testing::internal::StreamableToString</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a5655276556ac09c8d184920553da3e90" compoundref="df/d5b/gtest_8cc" startline="5332" endline="5334">testing::internal::ParseGoogleTestFlagsOnly</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a082f2d6b59adc025b035b2c51b0fc47e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> bool</type>
        <definition>bool ParseInt32Flag</definition>
        <argsstring>(const char *str, const char *flag, Int32 *value)</argsstring>
        <name>ParseInt32Flag</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>Int32 *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5070" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="5070" bodyend="5080" declfile="lib/googletest/src/gtest-internal-inl.h" declline="131" declcolumn="17"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a8bfd56af5e4a89bfb76f7e1723e41b03" compoundref="df/d5b/gtest_8cc" startline="5015" endline="5041">testing::internal::ParseFlagValue</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a3bd151d0274b216f9c2e6275ccc4a9a3" compoundref="df/d09/gtest-port_8cc" startline="1149" endline="1185">testing::internal::ParseInt32</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1afccff08aa2b1ede0dd32c1364a5dee42" compoundref="df/d5b/gtest_8cc" startline="5223" endline="5250">testing::internal::ParseGoogleTestFlag</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ae4c46ce8c3d016848fff52cc5133f2ac" compoundref="df/d5b/gtest_8cc" startline="5279" endline="5328">testing::internal::ParseGoogleTestFlagsOnlyImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1aa4ce312efaaf7a97aac2303173afe021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::ParseStringFlag</definition>
        <argsstring>(const char *str, const char *flag, std::string *value)</argsstring>
        <name>ParseStringFlag</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5087" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="5087" bodyend="5097"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a8bfd56af5e4a89bfb76f7e1723e41b03" compoundref="df/d5b/gtest_8cc" startline="5015" endline="5041">testing::internal::ParseFlagValue</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1afccff08aa2b1ede0dd32c1364a5dee42" compoundref="df/d5b/gtest_8cc" startline="5223" endline="5250">testing::internal::ParseGoogleTestFlag</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ae4c46ce8c3d016848fff52cc5133f2ac" compoundref="df/d5b/gtest_8cc" startline="5279" endline="5328">testing::internal::ParseGoogleTestFlagsOnlyImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a60af94307ed4f00a57b5c6d9617c046d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::PortableLocaltime</definition>
        <argsstring>(time_t seconds, struct tm *out)</argsstring>
        <name>PortableLocaltime</name>
        <param>
          <type>time_t</type>
          <declname>seconds</declname>
        </param>
        <param>
          <type>struct tm *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="3556" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="3556" bodyend="3570"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a779873280d17edf78c0a569a419432db" compoundref="df/d5b/gtest_8cc" startline="3574" endline="3585">testing::internal::FormatEpochTimeInMillisAsIso8601</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a7d8c446a29c7e22d7d4dde8f530bb57e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::PrintColorEncoded</definition>
        <argsstring>(const char *str)</argsstring>
        <name>PrintColorEncoded</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5125" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="5125" bodyend="5157"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a0b8d8b18037efc3cdb5dd0313e7c67dc" compoundref="df/d5b/gtest_8cc" startline="2881">testing::internal::COLOR_DEFAULT</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" compoundref="df/d5b/gtest_8cc" startline="2883">testing::internal::COLOR_GREEN</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" compoundref="df/d5b/gtest_8cc" startline="2882">testing::internal::COLOR_RED</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965ab03862907066c68204ee9df1ee04aa29" compoundref="df/d5b/gtest_8cc" startline="2884">testing::internal::COLOR_YELLOW</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" compoundref="df/d5b/gtest_8cc" startline="2956" endline="3002">testing::internal::ColoredPrintf</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ae4c46ce8c3d016848fff52cc5133f2ac" compoundref="df/d5b/gtest_8cc" startline="5279" endline="5328">testing::internal::ParseGoogleTestFlagsOnlyImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a7a85ebe3b4de93a1edb091f92f1fb393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintFullTestCommentIfPresent</definition>
        <argsstring>(const TestInfo &amp;test_info)</argsstring>
        <name>PrintFullTestCommentIfPresent</name>
        <param>
          <type>const TestInfo &amp;</type>
          <declname>test_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="3009" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="3009" bodyend="3024"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1adc4b22274985eb08dc161b351e9012b9" compoundref="df/d5b/gtest_8cc" startline="3006">testing::internal::kTypeParamLabel</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a30b2827871fa3535353e63cb259ff90f" compoundref="df/d5b/gtest_8cc" startline="3007">testing::internal::kValueParamLabel</references>
        <references refid="d1/d79/classtesting_1_1_test_info_1af7c235854a4f2716ffe707d712673772" compoundref="d8/d73/gtest_8h" startline="718">TestInfo::type_param</references>
        <references refid="d1/d79/classtesting_1_1_test_info_1af89b13e99f07353bc39ca99ce8086553" compoundref="d8/d73/gtest_8h" startline="719">TestInfo::value_param</references>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a41824a58ecc1d0bf99a2b691cd865701" compoundref="df/d5b/gtest_8cc" startline="3130" endline="3147">PrettyUnitTestResultPrinter::OnTestEnd</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a7af737d93a96c26c3af9501b4cc78d93" compoundref="df/d5b/gtest_8cc" startline="3169" endline="3191">PrettyUnitTestResultPrinter::PrintFailedTests</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a4a8708bfb808411f9d918c7356ae7362" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::PrintOnOneLine</definition>
        <argsstring>(const char *str, int max_length)</argsstring>
        <name>PrintOnOneLine</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="4846" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="4846" bodyend="4862"/>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1abc77b71cd244096a75b13b8a2d9f7d14" compoundref="df/d5b/gtest_8cc" startline="4865" endline="4900">UnitTestImpl::ListTestsMatchingFilter</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ac844b3d05dd6f665f72e2a1cec1872ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::PrintTestPartResult</definition>
        <argsstring>(const TestPartResult &amp;test_part_result)</argsstring>
        <name>PrintTestPartResult</name>
        <param>
          <type>const TestPartResult &amp;</type>
          <declname>test_part_result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2860" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="2860" bodyend="2876"/>
        <references refid="cpp/string/basic_string/c_str_1">string::c_str</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ada13cbf91139f0809a5a31ea2594c1ad" compoundref="df/d5b/gtest_8cc" startline="2850" endline="2857">testing::internal::PrintTestPartResultToString</references>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1ad655f93fa60c0aeb7be4f44edeb10e0f" compoundref="df/d5b/gtest_8cc" startline="3119" endline="3128">PrettyUnitTestResultPrinter::OnTestPartResult</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ada13cbf91139f0809a5a31ea2594c1ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>static std::string testing::internal::PrintTestPartResultToString</definition>
        <argsstring>(const TestPartResult &amp;test_part_result)</argsstring>
        <name>PrintTestPartResultToString</name>
        <param>
          <type>const TestPartResult &amp;</type>
          <declname>test_part_result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2850" column="20" bodyfile="lib/googletest/src/gtest.cc" bodystart="2850" bodyend="2857"/>
        <references refid="d0/d4b/classtesting_1_1_test_part_result_1ad5e655e4f5a697870e836f380a16797c" compoundref="d1/d01/gtest-test-part_8h" startline="76" endline="78">TestPartResult::file_name</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a6264f0605b7d7d0609eae663c58662c0" compoundref="df/d09/gtest-port_8cc" startline="880" endline="891">testing::internal::FormatFileLocation</references>
        <references refid="d0/d4b/classtesting_1_1_test_part_result_1a10a4f56de3322c42846ad149b1227d86" compoundref="d1/d01/gtest-test-part_8h" startline="82" endline="82">TestPartResult::line_number</references>
        <references refid="d0/d4b/classtesting_1_1_test_part_result_1aea6220e002a8039b97dc6fbd9ff79f46" compoundref="d1/d01/gtest-test-part_8h" startline="88" endline="88">TestPartResult::message</references>
        <references refid="d0/d75/namespacetesting_1a4e9fdeef31f7e49afccfde0532f76864" compoundref="df/d5b/gtest_8cc" startline="2830" endline="2845">testing::TestPartResultTypeToString</references>
        <references refid="d0/d4b/classtesting_1_1_test_part_result_1adf4a6727c689e0038cf2cdd158d5ed2c" compoundref="d1/d01/gtest-test-part_8h" startline="72" endline="72">TestPartResult::type</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ac844b3d05dd6f665f72e2a1cec1872ba" compoundref="df/d5b/gtest_8cc" startline="2860" endline="2876">testing::internal::PrintTestPartResult</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a4fdfe94b1ad045e6e66e6227dd0d130d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ReportFailureInUnknownLocation</definition>
        <argsstring>(TestPartResult::Type result_type, const std::string &amp;message)</argsstring>
        <name>ReportFailureInUnknownLocation</name>
        <param>
          <type>TestPartResult::Type</type>
          <declname>result_type</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2250" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="2250" bodyend="2260" declfile="lib/googletest/include/gtest/gtest.h" declline="164" declcolumn="6"/>
        <references refid="d7/d47/classtesting_1_1_unit_test_1ac9d74c9edbbc9f363be7633138e7ab7f" compoundref="df/d5b/gtest_8cc" startline="4108" endline="4168">UnitTest::AddTestPartResult</references>
        <references refid="d7/d47/classtesting_1_1_unit_test_1ad200090b11104aca39f25043701886cf" compoundref="df/d5b/gtest_8cc" startline="3972" endline="3991">UnitTest::GetInstance</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1addb2ed165b92b74e25fe9ebe9e46b9f9" compoundref="df/d5b/gtest_8cc" startline="2410" endline="2460">testing::internal::HandleExceptionsInMethodIfSupported</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ac5293b438139ef7ed05cb7fcaaf63545" compoundref="df/d5b/gtest_8cc" startline="2383" endline="2404">testing::internal::HandleSehExceptionsInMethodIfSupported</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a5f5535012d4548788a5d1a4e0f18e19e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::SetUpEnvironment</definition>
        <argsstring>(Environment *env)</argsstring>
        <name>SetUpEnvironment</name>
        <param>
          <type>Environment *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="4539" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="4539" bodyend="4539"/>
        <references refid="d6/d91/classtesting_1_1_environment_1a901706a587f9ae84df8b2395fbe759cb" compoundref="d8/d73/gtest_8h" startline="978" endline="978">Environment::SetUp</references>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4d5d6a2e8fa3b918a284252602a98279" compoundref="df/d5b/gtest_8cc" startline="4551" endline="4687">UnitTestImpl::RunAllTests</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a73e562dfef3eb7b30dfbb7b5e88e6df2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::ShouldRunTestCase</definition>
        <argsstring>(const TestCase *test_case)</argsstring>
        <name>ShouldRunTestCase</name>
        <param>
          <type>const TestCase *</type>
          <declname>test_case</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="356" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="356" bodyend="358"/>
        <references refid="d0/dfa/classtesting_1_1_test_case_1a80b7dba9dc7b6b640c8ba46897c8e181" compoundref="d8/d73/gtest_8h" startline="811" endline="811">TestCase::should_run</references>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a8ab1158b5875c26962e688932c442616" compoundref="df/d5b/gtest_8cc" startline="746" endline="748">UnitTestImpl::test_case_to_run_count</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ac05861de55e638fa73ea70a3f2f6f622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> bool</type>
        <definition>bool ShouldRunTestOnShard</definition>
        <argsstring>(int total_shards, int shard_index, int test_id)</argsstring>
        <name>ShouldRunTestOnShard</name>
        <param>
          <type>int</type>
          <declname>total_shards</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shard_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>test_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="4778" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="4778" bodyend="4780" declfile="lib/googletest/src/gtest-internal-inl.h" declline="275" declcolumn="17"/>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1af8cfcffb71cba69a55105ddac96786aa" compoundref="df/d5b/gtest_8cc" startline="4789" endline="4840">UnitTestImpl::FilterTests</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a57e2697262a419061fc4cd3377a9271e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> bool</type>
        <definition>bool ShouldShard</definition>
        <argsstring>(const char *total_shards_str, const char *shard_index_str, bool in_subprocess_for_death_test)</argsstring>
        <name>ShouldShard</name>
        <param>
          <type>const char *</type>
          <declname>total_shards_str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>shard_index_str</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>in_subprocess_for_death_test</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="4715" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="4715" bodyend="4755" declfile="lib/googletest/src/gtest-internal-inl.h" declline="262" declcolumn="17"/>
        <references refid="cpp/string/basic_string/c_str_1">string::c_str</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" compoundref="df/d5b/gtest_8cc" startline="2882">testing::internal::COLOR_RED</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" compoundref="df/d5b/gtest_8cc" startline="2956" endline="3002">testing::internal::ColoredPrintf</references>
        <references refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" compoundref="df/d5b/gtest_8cc" startline="981" endline="983">Message::GetString</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1afec7cf2eb159fa969f88d192ee507d23" compoundref="df/d5b/gtest_8cc" startline="4760" endline="4772">testing::internal::Int32FromEnvOrDie</references>
        <references refid="d0/d75/namespacetesting_1aab047cced200c1809bef2340dabe904f" compoundref="df/d5b/gtest_8cc" startline="174">testing::kTestShardIndex</references>
        <references refid="d0/d75/namespacetesting_1a19fe5fab1b6f6ecbfc6357a56f17aa03" compoundref="df/d5b/gtest_8cc" startline="176">testing::kTestTotalShards</references>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aab7032bcb450f58f2ce48c00ad6401e8" compoundref="df/d5b/gtest_8cc" startline="3056" endline="3089">PrettyUnitTestResultPrinter::OnTestIterationStart</referencedby>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4d5d6a2e8fa3b918a284252602a98279" compoundref="df/d5b/gtest_8cc" startline="4551" endline="4687">UnitTestImpl::RunAllTests</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ab0f928e61ab8ec92e75ddfcae9324c1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> bool</type>
        <definition>bool ShouldUseColor</definition>
        <argsstring>(bool stdout_is_tty)</argsstring>
        <name>ShouldUseColor</name>
        <param>
          <type>bool</type>
          <declname>stdout_is_tty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2916" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="2916" bodyend="2950" declfile="lib/googletest/src/gtest-internal-inl.h" declline="116" declcolumn="17"/>
        <references refid="d0/dde/classtesting_1_1internal_1_1_string_1a74c3f7f7cf90cc53c995dde20883d922" compoundref="df/d5b/gtest_8cc" startline="1905" endline="1911">String::CaseInsensitiveCStringEquals</references>
        <references refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" compoundref="df/d5b/gtest_8cc" startline="894" endline="900">String::CStringEquals</references>
        <references refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a1d5e3da5a27eed25986859fa83cafe95" compoundref="d3/dc9/gtest-port_8h" startline="2387" endline="2400">testing::internal::posix::GetEnv</references>
        <references refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" compoundref="d3/dc9/gtest-port_8h" startline="2504">GTEST_FLAG</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" compoundref="df/d5b/gtest_8cc" startline="2956" endline="3002">testing::internal::ColoredPrintf</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1abcf66fcfdb8c336eba8636bc8b49b4aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>GTEST_API_ bool SkipPrefix</definition>
        <argsstring>(const char *prefix, const char **pstr)</argsstring>
        <name>SkipPrefix</name>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>pstr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5001" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="5001" bodyend="5008" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="543" declcolumn="17"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a6fff795269f50673e358438721710d6f" compoundref="df/d5b/gtest_8cc" startline="5105" endline="5112">testing::internal::HasGoogleTestFlagPrefix</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/daf/namespacetesting_1_1internal_1_1anonymous__namespace_02gtest_8cc_03_1a87e3d38ad422ce7018c6fcd4d1f3a938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt;</type>
        <definition>std::vector&lt;std::string&gt; testing::internal::anonymous_namespace{gtest.cc}::SplitEscapedString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>SplitEscapedString</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1272" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="1272" bodyend="1293"/>
        <references refid="cpp/container/vector/push_back_1">vector&lt; T &gt;::push_back</references>
        <references refid="cpp/string/basic_string/size_1">string::size</references>
        <references refid="cpp/string/basic_string/substr_1">string::substr</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" compoundref="df/d5b/gtest_8cc" startline="1312" endline="1343">testing::internal::EqFailure</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a8eb8eddf760375a490e007b20777ec56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::SplitString</definition>
        <argsstring>(const ::std::string &amp;str, char delimiter, ::std::vector&lt; ::std::string &gt; *dest)</argsstring>
        <name>SplitString</name>
        <param>
          <type>const ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delimiter</declname>
        </param>
        <param>
          <type>::<ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt; *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="922" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="922" bodyend="937"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1af72a7a7eee6997f4ed9e18d9620a7b87" compoundref="df/d5b/gtest_8cc" startline="4988" endline="4996">testing::internal::AlwaysTrue</references>
        <references refid="cpp/container/vector/push_back_1">vector&lt; T &gt;::push_back</references>
        <references refid="cpp/container/vector/swap_1">vector&lt; T &gt;::swap</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a9743f1da2e8f7a4a8178ec9595a56112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>GTEST_API_ std::string StringStreamToString</definition>
        <argsstring>(::std::stringstream *ss)</argsstring>
        <name>StringStreamToString</name>
        <param>
          <type>::<ref refid="cpp/io/basic_stringstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::stringstream</ref> *</type>
          <declname>ss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1982" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="1982" bodyend="1998" declfile="lib/googletest/include/gtest/internal/gtest-string.h" declline="162" declcolumn="24"/>
        <references refid="cpp/string/basic_string/reserve_1">string::reserve</references>
        <references refid="cpp/io/basic_stringstream/str_1">stringstream::str</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a98ce463e5dbe0c6120fa817e1f8f2944" compoundref="d8/d73/gtest_8h" startline="1631" endline="1654">testing::internal::CmpHelperFloatingPointEQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a17b52b6b1f81f6dcad5cc4d12e5173a6" compoundref="df/d5b/gtest_8cc" startline="1384" endline="1415">testing::internal::FloatingPointLE</referencedby>
        <referencedby refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" compoundref="df/d5b/gtest_8cc" startline="981" endline="983">Message::GetString</referencedby>
        <referencedby refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1aa21b349a51378e47877ee6d153c37116" compoundref="df/d5b/gtest_8cc" startline="3432" endline="3462">XmlUnitTestResultPrinter::OnTestIterationEnd</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a34ba5cda1864f3228954b3a5c8f6b07d" compoundref="df/d5b/gtest_8cc" startline="1823" endline="1844">testing::internal::WideStringToUtf8</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ad1b758141e7e064d00a2bf0355c8ee43" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int testing::internal::SumOverTestCaseList</definition>
        <argsstring>(const std::vector&lt; TestCase * &gt; &amp;case_list, int(TestCase::*method)() const)</argsstring>
        <name>SumOverTestCaseList</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; TestCase * &gt; &amp;</type>
          <declname>case_list</declname>
        </param>
        <param>
          <type>int(TestCase::*)() const</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="335" column="12" bodyfile="lib/googletest/src/gtest.cc" bodystart="335" bodyend="342"/>
        <references refid="cpp/container/vector/size_1">vector&lt; T &gt;::size</references>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a306df17b97d7adb53a092db57dd2ed2b" compoundref="df/d5b/gtest_8cc" startline="767" endline="769">UnitTestImpl::disabled_test_count</referencedby>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a527d55a764fa3193cda01aaa95a75e8b" compoundref="df/d5b/gtest_8cc" startline="756" endline="758">UnitTestImpl::failed_test_count</referencedby>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ae79e09f147841ac66b6478137e2260c8" compoundref="df/d5b/gtest_8cc" startline="761" endline="764">UnitTestImpl::reportable_disabled_test_count</referencedby>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a5b3b073637db1a071ba2d749128e9f8c" compoundref="df/d5b/gtest_8cc" startline="772" endline="774">UnitTestImpl::reportable_test_count</referencedby>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1aadfe12d81153d7c5838a0eedad197d4e" compoundref="df/d5b/gtest_8cc" startline="751" endline="753">UnitTestImpl::successful_test_count</referencedby>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a9964c29b369696df155b3adac96cfe66" compoundref="df/d5b/gtest_8cc" startline="782" endline="784">UnitTestImpl::test_to_run_count</referencedby>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ac11f534b6c4990ddada85360a2371c4a" compoundref="df/d5b/gtest_8cc" startline="777" endline="779">UnitTestImpl::total_test_count</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ac467e871e4781da3f5ebed2a4465aec4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::TearDownEnvironment</definition>
        <argsstring>(Environment *env)</argsstring>
        <name>TearDownEnvironment</name>
        <param>
          <type>Environment *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="4540" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="4540" bodyend="4540"/>
        <references refid="d6/d91/classtesting_1_1_environment_1a870a092058305911f3d42df45dd657e5" compoundref="d8/d73/gtest_8h" startline="981" endline="981">Environment::TearDown</references>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4d5d6a2e8fa3b918a284252602a98279" compoundref="df/d5b/gtest_8cc" startline="4551" endline="4687">UnitTestImpl::RunAllTests</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a53454b6089c1c5b25319caa9de6c5c02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::TestCaseFailed</definition>
        <argsstring>(const TestCase *test_case)</argsstring>
        <name>TestCaseFailed</name>
        <param>
          <type>const TestCase *</type>
          <declname>test_case</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="350" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="350" bodyend="352"/>
        <references refid="d0/dfa/classtesting_1_1_test_case_1a365c0e4f912940e9cf7d844d06986445" compoundref="d8/d73/gtest_8h" startline="838" endline="838">TestCase::Failed</references>
        <references refid="d0/dfa/classtesting_1_1_test_case_1a80b7dba9dc7b6b640c8ba46897c8e181" compoundref="d8/d73/gtest_8h" startline="811" endline="811">TestCase::should_run</references>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1af0467dfbdb2874eb7efb3b80e81d063f" compoundref="df/d5b/gtest_8cc" startline="735" endline="737">UnitTestImpl::failed_test_case_count</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1aadc7afca7aab40f7f1d41bc17974459a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::TestCasePassed</definition>
        <argsstring>(const TestCase *test_case)</argsstring>
        <name>TestCasePassed</name>
        <param>
          <type>const TestCase *</type>
          <declname>test_case</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="345" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="345" bodyend="347"/>
        <references refid="d0/dfa/classtesting_1_1_test_case_1aad2f13a7fb077e9e26c761dea838c160" compoundref="d8/d73/gtest_8h" startline="835" endline="835">TestCase::Passed</references>
        <references refid="d0/dfa/classtesting_1_1_test_case_1a80b7dba9dc7b6b640c8ba46897c8e181" compoundref="d8/d73/gtest_8h" startline="811" endline="811">TestCase::should_run</references>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a843725bbe9bfa57ae5fa11a84e575272" compoundref="df/d5b/gtest_8cc" startline="730" endline="732">UnitTestImpl::successful_test_case_count</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a9f19442d566c7eaec0702b9fcf282b63" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::TestPartFatallyFailed</definition>
        <argsstring>(const TestPartResult &amp;result)</argsstring>
        <name>TestPartFatallyFailed</name>
        <param>
          <type>const TestPartResult &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2179" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="2179" bodyend="2181"/>
        <references refid="d0/d4b/classtesting_1_1_test_part_result_1ab380b978032e5896435ef73d1a4bef6d" compoundref="d1/d01/gtest-test-part_8h" startline="100" endline="100">TestPartResult::fatally_failed</references>
        <referencedby refid="d1/d69/classtesting_1_1_test_result_1a4831d649ecdd7cbd910d236b73122524" compoundref="df/d5b/gtest_8cc" startline="2184" endline="2186">TestResult::HasFatalFailure</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af256d104ca665115eb291f762bb659e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::TestPartNonfatallyFailed</definition>
        <argsstring>(const TestPartResult &amp;result)</argsstring>
        <name>TestPartNonfatallyFailed</name>
        <param>
          <type>const TestPartResult &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2189" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="2189" bodyend="2191"/>
        <references refid="d0/d4b/classtesting_1_1_test_part_result_1a8c3112659a6430e10b97546d18d6b5c5" compoundref="d1/d01/gtest-test-part_8h" startline="97" endline="97">TestPartResult::nonfatally_failed</references>
        <referencedby refid="d1/d69/classtesting_1_1_test_result_1ad0c4dfe3e8f81f7cd6e7e6ccdd1cb687" compoundref="df/d5b/gtest_8cc" startline="2194" endline="2196">TestResult::HasNonfatalFailure</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4e9fdeef31f7e49afccfde0532f76864" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* testing::TestPartResultTypeToString</definition>
        <argsstring>(TestPartResult::Type type)</argsstring>
        <name>TestPartResultTypeToString</name>
        <param>
          <type>TestPartResult::Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2830" column="20" bodyfile="lib/googletest/src/gtest.cc" bodystart="2830" bodyend="2845"/>
        <references refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7afff22986360310b0356db600c8c2187d" compoundref="d1/d01/gtest-test-part_8h" startline="54">TestPartResult::kFatalFailure</references>
        <references refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7ae354b0d94856044d54b2066ebb74635c" compoundref="d1/d01/gtest-test-part_8h" startline="53">TestPartResult::kNonFatalFailure</references>
        <references refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7af0536797208144380691e2b376ffc1d1" compoundref="d1/d01/gtest-test-part_8h" startline="52">TestPartResult::kSuccess</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ada13cbf91139f0809a5a31ea2594c1ad" compoundref="df/d5b/gtest_8cc" startline="2850" endline="2857">testing::internal::PrintTestPartResultToString</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4c9bd414747bf0563bfdb32a2307dcdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::ValidateTestPropertyName</definition>
        <argsstring>(const std::string &amp;property_name, const std::vector&lt; std::string &gt; &amp;reserved_names)</argsstring>
        <name>ValidateTestPropertyName</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>property_name</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt; &amp;</type>
          <declname>reserved_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2141" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="2141" bodyend="2151"/>
        <references refid="d8/d73/gtest_8h_1adc16b5b0a740c39084ea5c9e960e3063" compoundref="d8/d73/gtest_8h" startline="1808">ADD_FAILURE</references>
        <references refid="cpp/container/vector/begin_1">vector&lt; T &gt;::begin</references>
        <references refid="cpp/container/vector/end_1">vector&lt; T &gt;::end</references>
        <references refid="cpp/algorithm/find_1">std::find</references>
        <references refid="d0/d75/namespacetesting_1a4354761948a5cf56fdf905418a0f78f1" compoundref="df/d5b/gtest_8cc" startline="2127" endline="2139">testing::FormatWordList</references>
        <references refid="d3/dc9/gtest-port_8h_1a13d98c217176bd8722c395b9225fc19d" compoundref="d3/dc9/gtest-port_8h" startline="289">GTEST_NAME_</references>
        <referencedby refid="d1/d69/classtesting_1_1_test_result_1a2443df28261cf11c12cb7f53e968261e" compoundref="df/d5b/gtest_8cc" startline="2155" endline="2159">TestResult::ValidateTestProperty</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a34ba5cda1864f3228954b3a5c8f6b07d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string WideStringToUtf8</definition>
        <argsstring>(const wchar_t *str, int num_chars)</argsstring>
        <name>WideStringToUtf8</name>
        <param>
          <type>const wchar_t *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_chars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1823" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="1823" bodyend="1844" declfile="lib/googletest/src/gtest-internal-inl.h" declline="248" declcolumn="24"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a1259ed57f92a8d860f7fdd6d3c6ead26" compoundref="df/d5b/gtest_8cc" startline="1759" endline="1785">testing::internal::CodePointToUtf8</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ac8ef1bb10cd9e69de939789b759e6bc9" compoundref="df/d5b/gtest_8cc" startline="1800" endline="1808">testing::internal::CreateCodePointFromUtf16SurrogatePair</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a681895f8cc32286211be9889da107394" compoundref="df/d5b/gtest_8cc" startline="1794" endline="1797">testing::internal::IsUtf16SurrogatePair</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a9743f1da2e8f7a4a8178ec9595a56112" compoundref="df/d5b/gtest_8cc" startline="1982" endline="1998">testing::internal::StringStreamToString</references>
        <referencedby refid="d0/dde/classtesting_1_1internal_1_1_string_1ad3067374c710673e1466b61fc8a368e0" compoundref="df/d5b/gtest_8cc" startline="1848" endline="1852">String::ShowWideCString</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a656c8ec8f2ee82fa90b9ba61b6145538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WriteToShardStatusFileIfNeeded</definition>
        <argsstring>()</argsstring>
        <name>WriteToShardStatusFileIfNeeded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="4693" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="4693" bodyend="4707" declfile="lib/googletest/src/gtest-internal-inl.h" declline="254" declcolumn="6"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" compoundref="df/d5b/gtest_8cc" startline="2882">testing::internal::COLOR_RED</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" compoundref="df/d5b/gtest_8cc" startline="2956" endline="3002">testing::internal::ColoredPrintf</references>
        <references refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a4042201dcc4932641d484e7ddf94de7d" compoundref="d3/dc9/gtest-port_8h" startline="2367" endline="2369">testing::internal::posix::FOpen</references>
        <references refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a1d5e3da5a27eed25986859fa83cafe95" compoundref="d3/dc9/gtest-port_8h" startline="2387" endline="2400">testing::internal::posix::GetEnv</references>
        <references refid="d0/d75/namespacetesting_1a7f337be0b85c12d2ed9bcaedbba7af99" compoundref="df/d5b/gtest_8cc" startline="178">testing::kTestShardStatusFile</references>
        <referencedby refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4d5d6a2e8fa3b918a284252602a98279" compoundref="df/d5b/gtest_8cc" startline="4551" endline="4687">UnitTestImpl::RunAllTests</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2005,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Google<sp/>C++<sp/>Testing<sp/>Framework<sp/>(Google<sp/>Test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d8/d73/gtest_8h" kindref="compound">gtest/gtest.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d2/d0e/internal_2custom_2gtest_8h" kindref="compound">gtest/internal/custom/gtest.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dc/dbe/gtest-spi_8h" kindref="compound">gtest/gtest-spi.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wchar.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/algorithm" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">algorithm</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/iomanip" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">iomanip</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/limits" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">limits</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/list" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">list</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/map" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">map</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">ostream</ref>&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/sstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">sstream</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">vector</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(kenton@google.com):<sp/>Use<sp/>autoconf<sp/>to<sp/>detect<sp/>availability<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gettimeofday().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_HAS_GETTIMEOFDAY_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sched.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Declares<sp/>vsnprintf().<sp/><sp/>This<sp/>header<sp/>is<sp/>not<sp/>available<sp/>on<sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;strings.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;<ref refid="cpp/header/string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">string</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_SYMBIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_HAS_GETTIMEOFDAY_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_ZOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_HAS_GETTIMEOFDAY_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>z/OS<sp/>we<sp/>additionally<sp/>need<sp/>strings.h<sp/>for<sp/>strcasecmp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;strings.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_WINDOWS_MOBILE<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>on<sp/>Windows<sp/>CE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>undef<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_WINDOWS<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>on<sp/>Windows<sp/>proper.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/timeb.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS_MINGW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MinGW<sp/>has<sp/>gettimeofday()<sp/>but<sp/>not<sp/>_ftime64().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(kenton@google.com):<sp/>Use<sp/>autoconf<sp/>to<sp/>detect<sp/>availability<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>gettimeofday().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(kenton@google.com):<sp/>There<sp/>are<sp/>other<sp/>ways<sp/>to<sp/>get<sp/>the<sp/>time<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Windows,<sp/>like<sp/>GetTickCount()<sp/>or<sp/>GetSystemTimeAsFileTime().<sp/><sp/>MinGW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>supports<sp/>these.<sp/><sp/>consider<sp/>using<sp/>them<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>GTEST_HAS_GETTIMEOFDAY_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MINGW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cpplint<sp/>thinks<sp/>that<sp/>the<sp/>header<sp/>is<sp/>already<sp/>included,<sp/>so<sp/>we<sp/>want<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>silence<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>undef<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assume<sp/>other<sp/>platforms<sp/>have<sp/>gettimeofday().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(kenton@google.com):<sp/>Use<sp/>autoconf<sp/>to<sp/>detect<sp/>availability<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>gettimeofday().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="df/d5b/gtest_8cc_1a7c139c1711de5a69cbc934e8a082e4f9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_HAS_GETTIMEOFDAY_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cpplint<sp/>thinks<sp/>that<sp/>the<sp/>header<sp/>is<sp/>already<sp/>included,<sp/>so<sp/>we<sp/>want<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>silence<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;<ref refid="cpp/header/stdexcept" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">stdexcept</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;arpa/inet.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;netdb.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Indicates<sp/>that<sp/>this<sp/>translation<sp/>unit<sp/>is<sp/>part<sp/>of<sp/>Google<sp/>Test&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation.<sp/><sp/>It<sp/>must<sp/>come<sp/>before<sp/>gtest-internal-inl.h<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>included,<sp/>or<sp/>there<sp/>will<sp/>be<sp/>a<sp/>compiler<sp/>error.<sp/><sp/>This<sp/>trick<sp/>is<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>prevent<sp/>a<sp/>user<sp/>from<sp/>accidentally<sp/>including<sp/>gtest-internal-inl.h<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>his<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="df/d5b/gtest_8cc_1a83bd232fd1077579fada92c31bb7469f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_IMPLEMENTATION_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d0/da1/gtest-internal-inl_8h" kindref="compound">src/gtest-internal-inl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_IMPLEMENTATION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>vsnprintf<sp/>_vsnprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d0/d75/namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1e77a774d910346eff11a86d8df783a5" kindref="member">internal::CountIf</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a52f5504ed65d116201ccb8f99a44fd7e" kindref="member">internal::ForEach</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a71fdd20a0686bea3dc0cdcd95e0bca1c" kindref="member">internal::GetElementOr</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a90d9e6ffe8522a7eb1b2ce9b1a0c4673" kindref="member">internal::Shuffle</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constants.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>whose<sp/>test<sp/>case<sp/>name<sp/>or<sp/>test<sp/>name<sp/>matches<sp/>this<sp/>filter<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>disabled<sp/>and<sp/>not<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="d0/d75/namespacetesting_1a1b6299d8c2a3b3dc522db40e1858527b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a1b6299d8c2a3b3dc522db40e1858527b" kindref="member">kDisableTestFilter</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DISABLED_*:*/DISABLED_*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>case<sp/>whose<sp/>name<sp/>matches<sp/>this<sp/>filter<sp/>is<sp/>considered<sp/>a<sp/>death</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>case<sp/>and<sp/>will<sp/>be<sp/>run<sp/>before<sp/>test<sp/>cases<sp/>whose<sp/>name<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>match<sp/>this<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="d0/d75/namespacetesting_1a815040dbde1aafa2b5c0628f7b97b3c0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a815040dbde1aafa2b5c0628f7b97b3c0" kindref="member">kDeathTestCaseFilter</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;*DeathTest:*DeathTest/*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>filter<sp/>that<sp/>matches<sp/>everything.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="d0/d75/namespacetesting_1a1e85b0754dce94c87f067d7b0379c171" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a1e85b0754dce94c87f067d7b0379c171" kindref="member">kUniversalFilter</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>output<sp/>file<sp/>for<sp/>XML<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="d0/d75/namespacetesting_1ac5dc0c0255997f89dc268e114ff6f59e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1ac5dc0c0255997f89dc268e114ff6f59e" kindref="member">kDefaultOutputFile</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test_detail.xml&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>environment<sp/>variable<sp/>name<sp/>for<sp/>the<sp/>test<sp/>shard<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="d0/d75/namespacetesting_1aab047cced200c1809bef2340dabe904f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1aab047cced200c1809bef2340dabe904f" kindref="member">kTestShardIndex</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;GTEST_SHARD_INDEX&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>environment<sp/>variable<sp/>name<sp/>for<sp/>the<sp/>total<sp/>number<sp/>of<sp/>test<sp/>shards.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="d0/d75/namespacetesting_1a19fe5fab1b6f6ecbfc6357a56f17aa03" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a19fe5fab1b6f6ecbfc6357a56f17aa03" kindref="member">kTestTotalShards</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;GTEST_TOTAL_SHARDS&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>environment<sp/>variable<sp/>name<sp/>for<sp/>the<sp/>test<sp/>shard<sp/>status<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="d0/d75/namespacetesting_1a7f337be0b85c12d2ed9bcaedbba7af99" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a7f337be0b85c12d2ed9bcaedbba7af99" kindref="member">kTestShardStatusFile</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;GTEST_SHARD_STATUS_FILE&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>text<sp/>used<sp/>in<sp/>failure<sp/>messages<sp/>to<sp/>indicate<sp/>the<sp/>start<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stack<sp/>trace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="d0/da7/namespacetesting_1_1internal_1a728a6aad655cf4704dad1a048212c570" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a728a6aad655cf4704dad1a048212c570" kindref="member">kStackTraceMarker</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\nStack<sp/>trace:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>g_help_flag<sp/>is<sp/>true<sp/>iff<sp/>the<sp/>--help<sp/>flag<sp/>or<sp/>an<sp/>equivalent<sp/>form<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specified<sp/>on<sp/>the<sp/>command<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="d0/da7/namespacetesting_1_1internal_1a05b77c93e2ac596346466a00277288ca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a05b77c93e2ac596346466a00277288ca" kindref="member">g_help_flag</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="d0/d75/namespacetesting_1a56fbc164c7dc53596c23e519d8f1ca3c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d0/d75/namespacetesting_1a56fbc164c7dc53596c23e519d8f1ca3c" kindref="member">GetDefaultFilter</ref>()<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_TEST_FILTER_ENV_VAR_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>testbridge_test_only<sp/>=<sp/>getenv(GTEST_TEST_FILTER_ENV_VAR_);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testbridge_test_only<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testbridge_test_only;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_TEST_FILTER_ENV_VAR_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a1e85b0754dce94c87f067d7b0379c171" kindref="member">kUniversalFilter</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="d0/d75/namespacetesting_1ad72f215c805a46fba44cb09d717b01ef" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a428e5944490e497df683cb8324ce4489" kindref="member">GTEST_DEFINE_bool_</ref>(</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>also_run_disabled_tests,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af17bf74326e1076c47455ef2618c1a1a" kindref="member">internal::BoolFromGTestEnv</ref>(</highlight><highlight class="stringliteral">&quot;also_run_disabled_tests&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Run<sp/>disabled<sp/>tests<sp/>too,<sp/>in<sp/>addition<sp/>to<sp/>the<sp/>tests<sp/>normally<sp/>being<sp/>run.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="d0/d75/namespacetesting_1a5ab9e9cc2ee1addddfb2f4b43dd4e402" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a428e5944490e497df683cb8324ce4489" kindref="member">GTEST_DEFINE_bool_</ref>(</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>break_on_failure,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af17bf74326e1076c47455ef2618c1a1a" kindref="member">internal::BoolFromGTestEnv</ref>(</highlight><highlight class="stringliteral">&quot;break_on_failure&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;True<sp/>iff<sp/>a<sp/>failed<sp/>assertion<sp/>should<sp/>be<sp/>a<sp/>debugger<sp/>break-point.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="d0/d75/namespacetesting_1a96c82869676822ec883043aefb6dd042" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a428e5944490e497df683cb8324ce4489" kindref="member">GTEST_DEFINE_bool_</ref>(</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>catch_exceptions,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af17bf74326e1076c47455ef2618c1a1a" kindref="member">internal::BoolFromGTestEnv</ref>(</highlight><highlight class="stringliteral">&quot;catch_exceptions&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;True<sp/>iff<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a13d98c217176bd8722c395b9225fc19d" kindref="member">GTEST_NAME_</ref></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>should<sp/>catch<sp/>exceptions<sp/>and<sp/>treat<sp/>them<sp/>as<sp/>test<sp/>failures.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="d0/d75/namespacetesting_1a32f0280e95e7718835b0e3d2f7277269" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a62d8ec1eb3e20f20ed52604b0dfa3425" kindref="member">GTEST_DEFINE_string_</ref>(</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>color,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a521e624413f88ad92ebfc23ea89c3f1b" kindref="member">internal::StringFromGTestEnv</ref>(</highlight><highlight class="stringliteral">&quot;color&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;auto&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Whether<sp/>to<sp/>use<sp/>colors<sp/>in<sp/>the<sp/>output.<sp/><sp/>Valid<sp/>values:<sp/>yes,<sp/>no,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>auto.<sp/><sp/>&apos;auto&apos;<sp/>means<sp/>to<sp/>use<sp/>colors<sp/>if<sp/>the<sp/>output<sp/>is<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;being<sp/>sent<sp/>to<sp/>a<sp/>terminal<sp/>and<sp/>the<sp/>TERM<sp/>environment<sp/>variable<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>set<sp/>to<sp/>a<sp/>terminal<sp/>type<sp/>that<sp/>supports<sp/>colors.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="d0/d75/namespacetesting_1a2830ee1f2237233fa44aa580c5a919ce" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a62d8ec1eb3e20f20ed52604b0dfa3425" kindref="member">GTEST_DEFINE_string_</ref>(</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>filter,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a521e624413f88ad92ebfc23ea89c3f1b" kindref="member">internal::StringFromGTestEnv</ref>(</highlight><highlight class="stringliteral">&quot;filter&quot;</highlight><highlight class="normal">,<sp/><ref refid="d0/d75/namespacetesting_1a56fbc164c7dc53596c23e519d8f1ca3c" kindref="member">GetDefaultFilter</ref>()),</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;A<sp/>colon-separated<sp/>list<sp/>of<sp/>glob<sp/>(not<sp/>regex)<sp/>patterns<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;for<sp/>filtering<sp/>the<sp/>tests<sp/>to<sp/>run,<sp/>optionally<sp/>followed<sp/>by<sp/>a<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;-&apos;<sp/>and<sp/>a<sp/>:<sp/>separated<sp/>list<sp/>of<sp/>negative<sp/>patterns<sp/>(tests<sp/>to<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exclude).<sp/><sp/>A<sp/>test<sp/>is<sp/>run<sp/>if<sp/>it<sp/>matches<sp/>one<sp/>of<sp/>the<sp/>positive<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;patterns<sp/>and<sp/>does<sp/>not<sp/>match<sp/>any<sp/>of<sp/>the<sp/>negative<sp/>patterns.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="d0/d75/namespacetesting_1a0fa31ecbf33c5e5970cca1d91c050153" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a428e5944490e497df683cb8324ce4489" kindref="member">GTEST_DEFINE_bool_</ref>(list_tests,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;List<sp/>all<sp/>tests<sp/>without<sp/>running<sp/>them.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="d0/d75/namespacetesting_1afbe98005fe5c00ddbc23701a784d44db" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a62d8ec1eb3e20f20ed52604b0dfa3425" kindref="member">GTEST_DEFINE_string_</ref>(</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>output,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a521e624413f88ad92ebfc23ea89c3f1b" kindref="member">internal::StringFromGTestEnv</ref>(</highlight><highlight class="stringliteral">&quot;output&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;A<sp/>format<sp/>(currently<sp/>must<sp/>be<sp/>\&quot;xml\&quot;),<sp/>optionally<sp/>followed<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;by<sp/>a<sp/>colon<sp/>and<sp/>an<sp/>output<sp/>file<sp/>name<sp/>or<sp/>directory.<sp/>A<sp/>directory<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>indicated<sp/>by<sp/>a<sp/>trailing<sp/>pathname<sp/>separator.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Examples:<sp/>\&quot;xml:filename.xml\&quot;,<sp/>\&quot;xml::directoryname/\&quot;.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;If<sp/>a<sp/>directory<sp/>is<sp/>specified,<sp/>output<sp/>files<sp/>will<sp/>be<sp/>created<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;within<sp/>that<sp/>directory,<sp/>with<sp/>file-names<sp/>based<sp/>on<sp/>the<sp/>test<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;executable&apos;s<sp/>name<sp/>and,<sp/>if<sp/>necessary,<sp/>made<sp/>unique<sp/>by<sp/>adding<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;digits.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="d0/d75/namespacetesting_1a766fcba2ec951940e528276919a5d22f" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a428e5944490e497df683cb8324ce4489" kindref="member">GTEST_DEFINE_bool_</ref>(</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>print_time,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af17bf74326e1076c47455ef2618c1a1a" kindref="member">internal::BoolFromGTestEnv</ref>(</highlight><highlight class="stringliteral">&quot;print_time&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;True<sp/>iff<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a13d98c217176bd8722c395b9225fc19d" kindref="member">GTEST_NAME_</ref></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>should<sp/>display<sp/>elapsed<sp/>time<sp/>in<sp/>text<sp/>output.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="d0/d75/namespacetesting_1a9900d8db2670a26999fbc2a9130f7185" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a9900d8db2670a26999fbc2a9130f7185" kindref="member">GTEST_DEFINE_int32_</ref>(</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>random_seed,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2d19821e0bf27e57b2eafe843401e69" kindref="member">internal::Int32FromGTestEnv</ref>(</highlight><highlight class="stringliteral">&quot;random_seed&quot;</highlight><highlight class="normal">,<sp/>0),</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Random<sp/>number<sp/>seed<sp/>to<sp/>use<sp/>when<sp/>shuffling<sp/>test<sp/>orders.<sp/><sp/>Must<sp/>be<sp/>in<sp/>range<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[1,<sp/>99999],<sp/>or<sp/>0<sp/>to<sp/>use<sp/>a<sp/>seed<sp/>based<sp/>on<sp/>the<sp/>current<sp/>time.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="d0/d75/namespacetesting_1aae6f1140f03d7bf24067df0f6628e9ea" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a9900d8db2670a26999fbc2a9130f7185" kindref="member">GTEST_DEFINE_int32_</ref>(</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>repeat,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2d19821e0bf27e57b2eafe843401e69" kindref="member">internal::Int32FromGTestEnv</ref>(</highlight><highlight class="stringliteral">&quot;repeat&quot;</highlight><highlight class="normal">,<sp/>1),</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;How<sp/>many<sp/>times<sp/>to<sp/>repeat<sp/>each<sp/>test.<sp/><sp/>Specify<sp/>a<sp/>negative<sp/>number<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;for<sp/>repeating<sp/>forever.<sp/><sp/>Useful<sp/>for<sp/>shaking<sp/>out<sp/>flaky<sp/>tests.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="d0/d75/namespacetesting_1a60ef38aa9d1437f0d7818181897af8ef" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a428e5944490e497df683cb8324ce4489" kindref="member">GTEST_DEFINE_bool_</ref>(</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>show_internal_stack_frames,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;True<sp/>iff<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a13d98c217176bd8722c395b9225fc19d" kindref="member">GTEST_NAME_</ref><sp/></highlight><highlight class="stringliteral">&quot;<sp/>should<sp/>include<sp/>internal<sp/>stack<sp/>frames<sp/>when<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;printing<sp/>test<sp/>failure<sp/>stack<sp/>traces.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="d0/d75/namespacetesting_1af95276e3deb9d243d729f3043eabd272" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a428e5944490e497df683cb8324ce4489" kindref="member">GTEST_DEFINE_bool_</ref>(</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>shuffle,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af17bf74326e1076c47455ef2618c1a1a" kindref="member">internal::BoolFromGTestEnv</ref>(</highlight><highlight class="stringliteral">&quot;shuffle&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;True<sp/>iff<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a13d98c217176bd8722c395b9225fc19d" kindref="member">GTEST_NAME_</ref></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>should<sp/>randomize<sp/>tests&apos;<sp/>order<sp/>on<sp/>every<sp/>run.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="d0/d75/namespacetesting_1a84af642630c9181f00fcf0a4a63e795e" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a9900d8db2670a26999fbc2a9130f7185" kindref="member">GTEST_DEFINE_int32_</ref>(</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>stack_trace_depth,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2d19821e0bf27e57b2eafe843401e69" kindref="member">internal::Int32FromGTestEnv</ref>(</highlight><highlight class="stringliteral">&quot;stack_trace_depth&quot;</highlight><highlight class="normal">,<sp/><ref refid="d0/d75/namespacetesting_1af923b7f5ce597d321ccd3f7e62afb270" kindref="member">kMaxStackTraceDepth</ref>),</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>maximum<sp/>number<sp/>of<sp/>stack<sp/>frames<sp/>to<sp/>print<sp/>when<sp/>an<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;assertion<sp/>fails.<sp/><sp/>The<sp/>valid<sp/>range<sp/>is<sp/>0<sp/>through<sp/>100,<sp/>inclusive.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="d0/d75/namespacetesting_1a5cfe9778e1cc8b5cf04bfe9e764ddff6" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a62d8ec1eb3e20f20ed52604b0dfa3425" kindref="member">GTEST_DEFINE_string_</ref>(</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>stream_result_to,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a521e624413f88ad92ebfc23ea89c3f1b" kindref="member">internal::StringFromGTestEnv</ref>(</highlight><highlight class="stringliteral">&quot;stream_result_to&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>flag<sp/>specifies<sp/>the<sp/>host<sp/>name<sp/>and<sp/>the<sp/>port<sp/>number<sp/>on<sp/>which<sp/>to<sp/>stream<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;test<sp/>results.<sp/>Example:<sp/>\&quot;localhost:555\&quot;.<sp/>The<sp/>flag<sp/>is<sp/>effective<sp/>only<sp/>on<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Linux.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="d0/d75/namespacetesting_1a7598962574c3fff25237b78f0de81aa7" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a428e5944490e497df683cb8324ce4489" kindref="member">GTEST_DEFINE_bool_</ref>(</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>throw_on_failure,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af17bf74326e1076c47455ef2618c1a1a" kindref="member">internal::BoolFromGTestEnv</ref>(</highlight><highlight class="stringliteral">&quot;throw_on_failure&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;When<sp/>this<sp/>flag<sp/>is<sp/>specified,<sp/>a<sp/>failed<sp/>assertion<sp/>will<sp/>throw<sp/>an<sp/>exception<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;if<sp/>exceptions<sp/>are<sp/>enabled<sp/>or<sp/>exit<sp/>the<sp/>program<sp/>with<sp/>a<sp/>non-zero<sp/>code<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;otherwise.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_USE_OWN_FLAGFILE_FLAG_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a62d8ec1eb3e20f20ed52604b0dfa3425" kindref="member">GTEST_DEFINE_string_</ref>(</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>flagfile,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a521e624413f88ad92ebfc23ea89c3f1b" kindref="member">internal::StringFromGTestEnv</ref>(</highlight><highlight class="stringliteral">&quot;flagfile&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>flag<sp/>specifies<sp/>the<sp/>flagfile<sp/>to<sp/>read<sp/>command-line<sp/>flags<sp/>from.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_USE_OWN_FLAGFILE_FLAG_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>random<sp/>number<sp/>from<sp/>[0,<sp/>range),<sp/>using<sp/>a<sp/>Linear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Congruential<sp/>Generator<sp/>(LCG).<sp/><sp/>Crashes<sp/>if<sp/>&apos;range&apos;<sp/>is<sp/>0<sp/>or<sp/>greater</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>than<sp/>kMaxRange.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="db/da2/classtesting_1_1internal_1_1_random_1aeee93742520cd3aec74fc709afea415e" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/><ref refid="db/da2/classtesting_1_1internal_1_1_random_1aeee93742520cd3aec74fc709afea415e" kindref="member">Random::Generate</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/>range)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>constants<sp/>are<sp/>the<sp/>same<sp/>as<sp/>are<sp/>used<sp/>in<sp/>glibc&apos;s<sp/>rand(3).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><ref refid="db/da2/classtesting_1_1internal_1_1_random_1a4cb6bfa4b3d348765b3b6f2038b6393b" kindref="member">state_</ref><sp/>=<sp/>(1103515245U*<ref refid="db/da2/classtesting_1_1internal_1_1_random_1a4cb6bfa4b3d348765b3b6f2038b6393b" kindref="member">state_</ref><sp/>+<sp/>12345U)<sp/>%<sp/><ref refid="db/da2/classtesting_1_1internal_1_1_random_1a2fed60247b0c94185cd61c88a5e44941" kindref="member">kMaxRange</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1ab54343f0a36dc4cb0ce8a478dd7847b8" kindref="member">GTEST_CHECK_</ref>(range<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>generate<sp/>a<sp/>number<sp/>in<sp/>the<sp/>range<sp/>[0,<sp/>0).&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1ab54343f0a36dc4cb0ce8a478dd7847b8" kindref="member">GTEST_CHECK_</ref>(range<sp/>&lt;=<sp/><ref refid="db/da2/classtesting_1_1internal_1_1_random_1a2fed60247b0c94185cd61c88a5e44941" kindref="member">kMaxRange</ref>)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Generation<sp/>of<sp/>a<sp/>number<sp/>in<sp/>[0,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>range<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>was<sp/>requested,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;but<sp/>this<sp/>can<sp/>only<sp/>generate<sp/>numbers<sp/>in<sp/>[0,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="db/da2/classtesting_1_1internal_1_1_random_1a2fed60247b0c94185cd61c88a5e44941" kindref="member">kMaxRange</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;).&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Converting<sp/>via<sp/>modulus<sp/>introduces<sp/>a<sp/>bit<sp/>of<sp/>downward<sp/>bias,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>simple,<sp/>and<sp/>a<sp/>linear<sp/>congruential<sp/>generator<sp/>isn&apos;t<sp/>too<sp/>good</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>begin<sp/>with.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/da2/classtesting_1_1internal_1_1_random_1a4cb6bfa4b3d348765b3b6f2038b6393b" kindref="member">state_</ref><sp/>%<sp/>range;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTestIsInitialized()<sp/>returns<sp/>true<sp/>iff<sp/>the<sp/>user<sp/>has<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test.<sp/><sp/>Useful<sp/>for<sp/>catching<sp/>the<sp/>user<sp/>mistake<sp/>of<sp/>not<sp/>initializing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>before<sp/>calling<sp/>RUN_ALL_TESTS().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="d0/da7/namespacetesting_1_1internal_1a91e707e0d371fae0224ffd37f0d042af" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a91e707e0d371fae0224ffd37f0d042af" kindref="member">GTestIsInitialized</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a72bae19a0033260a6266052ec0126551" kindref="member">GetArgvs</ref>().size()<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterates<sp/>over<sp/>a<sp/>vector<sp/>of<sp/>TestCases,<sp/>keeping<sp/>a<sp/>running<sp/>sum<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>results<sp/>of<sp/>calling<sp/>a<sp/>given<sp/>int-returning<sp/>method<sp/>on<sp/>each.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>sum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="d0/da7/namespacetesting_1_1internal_1ad1b758141e7e064d00a2bf0355c8ee43" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad1b758141e7e064d00a2bf0355c8ee43" kindref="member">SumOverTestCaseList</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;TestCase*&gt;</ref>&amp;<sp/>case_list,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(<ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>::*method)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>case_list.<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(case_list[i]-&gt;*method)();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>case<sp/>passed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="d0/da7/namespacetesting_1_1internal_1aadc7afca7aab40f7f1d41bc17974459a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aadc7afca7aab40f7f1d41bc17974459a" kindref="member">TestCasePassed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/>test_case)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1a80b7dba9dc7b6b640c8ba46897c8e181" kindref="member">should_run</ref>()<sp/>&amp;&amp;<sp/>test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1aad2f13a7fb077e9e26c761dea838c160" kindref="member">Passed</ref>();</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>case<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="d0/da7/namespacetesting_1_1internal_1a53454b6089c1c5b25319caa9de6c5c02" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a53454b6089c1c5b25319caa9de6c5c02" kindref="member">TestCaseFailed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/>test_case)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1a80b7dba9dc7b6b640c8ba46897c8e181" kindref="member">should_run</ref>()<sp/>&amp;&amp;<sp/>test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1a365c0e4f912940e9cf7d844d06986445" kindref="member">Failed</ref>();</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>test_case<sp/>contains<sp/>at<sp/>least<sp/>one<sp/>test<sp/>that<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="d0/da7/namespacetesting_1_1internal_1a73e562dfef3eb7b30dfbb7b5e88e6df2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a73e562dfef3eb7b30dfbb7b5e88e6df2" kindref="member">ShouldRunTestCase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/>test_case)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1a80b7dba9dc7b6b640c8ba46897c8e181" kindref="member">should_run</ref>();</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AssertHelper<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1ad2f02ef373bd4828ea059b997adf2ded" refkind="member"><highlight class="normal"><ref refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1ad2f02ef373bd4828ea059b997adf2ded" kindref="member">AssertHelper::AssertHelper</ref>(<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">TestPartResult::Type</ref><sp/>type,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>data_(new<sp/><ref refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data" kindref="compound">AssertHelperData</ref>(type,<sp/>file,<sp/>line,<sp/>message))<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1a8b4957313ec967080674296be5b6e1bc" refkind="member"><highlight class="normal"><ref refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1a8b4957313ec967080674296be5b6e1bc" kindref="member">AssertHelper::~AssertHelper</ref>()<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1af026cd80a199acc5b637eedf92f18221" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Message<sp/>assignment,<sp/>for<sp/>assertion<sp/>streaming<sp/>support.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1aae0e935df830718fd78f39850521d967" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1aae0e935df830718fd78f39850521d967" kindref="member">AssertHelper::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/>message)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ad200090b11104aca39f25043701886cf" kindref="member">UnitTest::GetInstance</ref>()-&gt;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>AddTestPartResult(<ref refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1af026cd80a199acc5b637eedf92f18221" kindref="member">data_</ref>-&gt;<ref refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data_1a411db9f4276ebb3fa7c47dd0ed5488ec" kindref="member">type</ref>,<sp/><ref refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1af026cd80a199acc5b637eedf92f18221" kindref="member">data_</ref>-&gt;<ref refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data_1a2c690122f2da04a6559da85203823a34" kindref="member">file</ref>,<sp/><ref refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1af026cd80a199acc5b637eedf92f18221" kindref="member">data_</ref>-&gt;<ref refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data_1ad42b220b1bf90b42fe461c4201c064a5" kindref="member">line</ref>,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a03976378124361dddf218c46dc500e5d" kindref="member">AppendUserMessage</ref>(<ref refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1af026cd80a199acc5b637eedf92f18221" kindref="member">data_</ref>-&gt;<ref refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data_1a20ce7dc55ec7fade6ef81f7de11ce52d" kindref="member">message</ref>,<sp/>message),</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ad200090b11104aca39f25043701886cf" kindref="member">UnitTest::GetInstance</ref>()-&gt;<ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a243591ed1070d5a856b4243810d85f94" kindref="member">CurrentOsStackTraceExceptTop</ref>(1)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skips<sp/>the<sp/>stack<sp/>frame<sp/>for<sp/>this<sp/>function<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mutex<sp/>for<sp/>linked<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="d0/da7/namespacetesting_1_1internal_1aff419d76acc3727be48d195f927189c9" refkind="member"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aff419d76acc3727be48d195f927189c9" kindref="member">GTEST_DEFINE_STATIC_MUTEX_</ref>(g_linked_ptr_mutex);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>copy<sp/>of<sp/>all<sp/>command<sp/>line<sp/>arguments.<sp/><sp/>Set<sp/>by<sp/>InitGoogleTest().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387" refid="d0/da7/namespacetesting_1_1internal_1aaef5a3e9dd2e630d870d98a6d8145d09" refkind="member"><highlight class="normal"><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::vector&lt;testing::internal::string&gt;</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aaef5a3e9dd2e630d870d98a6d8145d09" kindref="member">g_argvs</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="d0/da7/namespacetesting_1_1internal_1a72bae19a0033260a6266052ec0126551" refkind="member"><highlight class="normal">const<sp/>::std::vector&lt;testing::internal::string&gt;&amp;<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a72bae19a0033260a6266052ec0126551" kindref="member">GetArgvs</ref>()<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_CUSTOM_GET_ARGVS_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GTEST_CUSTOM_GET_ARGVS_();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>defined(GTEST_CUSTOM_GET_ARGVS_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aaef5a3e9dd2e630d870d98a6d8145d09" kindref="member">g_argvs</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>defined(GTEST_CUSTOM_GET_ARGVS_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>application&apos;s<sp/>name,<sp/>removing<sp/>directory<sp/>path<sp/>if<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>present.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="d0/da7/namespacetesting_1_1internal_1a4fc348184f2bc16ec2270cffb38de5dc" refkind="member"><highlight class="normal"><ref refid="de/d14/classtesting_1_1internal_1_1_file_path" kindref="compound">FilePath</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4fc348184f2bc16ec2270cffb38de5dc" kindref="member">GetCurrentExecutableName</ref>()<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><ref refid="de/d14/classtesting_1_1internal_1_1_file_path" kindref="compound">FilePath</ref><sp/>result;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>result.<ref refid="de/d14/classtesting_1_1internal_1_1_file_path_1a42b263db98b0796b43578baca9ba991d" kindref="member">Set</ref>(<ref refid="de/d14/classtesting_1_1internal_1_1_file_path" kindref="compound">FilePath</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a72bae19a0033260a6266052ec0126551" kindref="member">GetArgvs</ref>()[0]).RemoveExtension(</highlight><highlight class="stringliteral">&quot;exe&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>result.<ref refid="de/d14/classtesting_1_1internal_1_1_file_path_1a42b263db98b0796b43578baca9ba991d" kindref="member">Set</ref>(<ref refid="de/d14/classtesting_1_1internal_1_1_file_path" kindref="compound">FilePath</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a72bae19a0033260a6266052ec0126551" kindref="member">GetArgvs</ref>()[0]));</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.<ref refid="de/d14/classtesting_1_1internal_1_1_file_path_1a9fe846b92cc3a819b1bca34059999369" kindref="member">RemoveDirectoryName</ref>();</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functions<sp/>for<sp/>processing<sp/>the<sp/>gtest_output<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>output<sp/>format,<sp/>or<sp/>&quot;&quot;<sp/>for<sp/>normal<sp/>printed<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414" refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a4283d9e9321fb7a93d733899bece00af" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a4283d9e9321fb7a93d733899bece00af" kindref="member">UnitTestOptions::GetOutputFormat</ref>()<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gtest_output_flag<sp/>=<sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(output).c_str();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gtest_output_flag<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">std::string</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colon<sp/>=<sp/>strchr(gtest_output_flag,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(colon<sp/>==<sp/>NULL)<sp/>?</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">std::string</ref>(gtest_output_flag)<sp/>:</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">std::string</ref>(gtest_output_flag,<sp/>colon<sp/>-<sp/>gtest_output_flag);</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>name<sp/>of<sp/>the<sp/>requested<sp/>output<sp/>file,<sp/>or<sp/>the<sp/>default<sp/>if<sp/>none</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>was<sp/>explicitly<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426" refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a8cd6d2ad634d8f29bd2345d5b2ec5673" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a8cd6d2ad634d8f29bd2345d5b2ec5673" kindref="member">UnitTestOptions::GetAbsolutePathToOutputFile</ref>()<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gtest_output_flag<sp/>=<sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(output).c_str();</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gtest_output_flag<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colon<sp/>=<sp/>strchr(gtest_output_flag,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colon<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d14/classtesting_1_1internal_1_1_file_path_1ae8c11e9d5d51f4266c6507aeb34ba55b" kindref="member">internal::FilePath::ConcatPaths</ref>(</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/d14/classtesting_1_1internal_1_1_file_path" kindref="compound">internal::FilePath</ref>(</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ad200090b11104aca39f25043701886cf" kindref="member">UnitTest::GetInstance</ref>()-&gt;original_working_dir()),</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/d14/classtesting_1_1internal_1_1_file_path" kindref="compound">internal::FilePath</ref>(<ref refid="d0/d75/namespacetesting_1ac5dc0c0255997f89dc268e114ff6f59e" kindref="member">kDefaultOutputFile</ref>)).<ref refid="de/d14/classtesting_1_1internal_1_1_file_path_1a7314f49a51859d46439cfeddb9ea06ec" kindref="member">string</ref>();</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><ref refid="de/d14/classtesting_1_1internal_1_1_file_path" kindref="compound">internal::FilePath</ref><sp/>output_name(colon<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!output_name.<ref refid="de/d14/classtesting_1_1internal_1_1_file_path_1a3a0a77b979cea003921d8324ef96bde1" kindref="member">IsAbsolutePath</ref>())</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(wan@google.com):<sp/>on<sp/>Windows<sp/>\some\path<sp/>is<sp/>not<sp/>an<sp/>absolute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>path<sp/>(as<sp/>its<sp/>meaning<sp/>depends<sp/>on<sp/>the<sp/>current<sp/>drive),<sp/>yet<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>following<sp/>logic<sp/>for<sp/>turning<sp/>it<sp/>into<sp/>an<sp/>absolute<sp/>path<sp/>is<sp/>wrong.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fix<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>output_name<sp/>=<sp/><ref refid="de/d14/classtesting_1_1internal_1_1_file_path_1ae8c11e9d5d51f4266c6507aeb34ba55b" kindref="member">internal::FilePath::ConcatPaths</ref>(</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/d14/classtesting_1_1internal_1_1_file_path" kindref="compound">internal::FilePath</ref>(<ref refid="d7/d47/classtesting_1_1_unit_test_1ad200090b11104aca39f25043701886cf" kindref="member">UnitTest::GetInstance</ref>()-&gt;original_working_dir()),</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/d14/classtesting_1_1internal_1_1_file_path" kindref="compound">internal::FilePath</ref>(colon<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!output_name.<ref refid="de/d14/classtesting_1_1internal_1_1_file_path_1aa14e121a7a4f6e743c9e10b3a0818eea" kindref="member">IsDirectory</ref>())</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output_name.<ref refid="de/d14/classtesting_1_1internal_1_1_file_path_1a7314f49a51859d46439cfeddb9ea06ec" kindref="member">string</ref>();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><ref refid="de/d14/classtesting_1_1internal_1_1_file_path" kindref="compound">internal::FilePath</ref><sp/>result(<ref refid="de/d14/classtesting_1_1internal_1_1_file_path_1a01f72e14ad442c88e941571cb65228f4" kindref="member">internal::FilePath::GenerateUniqueFileName</ref>(</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_name,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4fc348184f2bc16ec2270cffb38de5dc" kindref="member">internal::GetCurrentExecutableName</ref>(),</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a4283d9e9321fb7a93d733899bece00af" kindref="member">GetOutputFormat</ref>().c_str()));</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.<ref refid="de/d14/classtesting_1_1internal_1_1_file_path_1a7314f49a51859d46439cfeddb9ea06ec" kindref="member">string</ref>();</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>wildcard<sp/>pattern<sp/>matches<sp/>the<sp/>string.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>first<sp/>&apos;:&apos;<sp/>or<sp/>&apos;\0&apos;<sp/>character<sp/>in<sp/>pattern<sp/>marks<sp/>the<sp/>end<sp/>of<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>recursive<sp/>algorithm<sp/>isn&apos;t<sp/>very<sp/>efficient,<sp/>but<sp/>is<sp/>clear<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">//<sp/>works<sp/>well<sp/>enough<sp/>for<sp/>matching<sp/>test<sp/>names,<sp/>which<sp/>are<sp/>short.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462" refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a6ee16a491a18920bed2d8e1c5a6be381" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a6ee16a491a18920bed2d8e1c5a6be381" kindref="member">UnitTestOptions::PatternMatchesString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pattern,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*pattern)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="comment">//<sp/>Either<sp/>&apos;:&apos;<sp/>or<sp/>&apos;\0&apos;<sp/>marks<sp/>the<sp/>end<sp/>of<sp/>the<sp/>pattern.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*str<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="comment">//<sp/>Matches<sp/>any<sp/>single<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*str<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a6ee16a491a18920bed2d8e1c5a6be381" kindref="member">PatternMatchesString</ref>(pattern<sp/>+<sp/>1,<sp/>str<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="comment">//<sp/>Matches<sp/>any<sp/>string<sp/>(possibly<sp/>empty)<sp/>of<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*str<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a6ee16a491a18920bed2d8e1c5a6be381" kindref="member">PatternMatchesString</ref>(pattern,<sp/>str<sp/>+<sp/>1))<sp/>||</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a6ee16a491a18920bed2d8e1c5a6be381" kindref="member">PatternMatchesString</ref>(pattern<sp/>+<sp/>1,<sp/>str);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="comment">//<sp/>Non-special<sp/>character.<sp/><sp/>Matches<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*pattern<sp/>==<sp/>*str<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a6ee16a491a18920bed2d8e1c5a6be381" kindref="member">PatternMatchesString</ref>(pattern<sp/>+<sp/>1,<sp/>str<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479" refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a51c4969c39bbb6a3f0d596e7f47f3530" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a51c4969c39bbb6a3f0d596e7f47f3530" kindref="member">UnitTestOptions::MatchesFilter</ref>(</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filter)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cur_pattern<sp/>=<sp/>filter;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a6ee16a491a18920bed2d8e1c5a6be381" kindref="member">PatternMatchesString</ref>(cur_pattern,<sp/>name.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finds<sp/>the<sp/>next<sp/>pattern<sp/>in<sp/>the<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>cur_pattern<sp/>=<sp/>strchr(cur_pattern,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>if<sp/>no<sp/>more<sp/>pattern<sp/>can<sp/>be<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur_pattern<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skips<sp/>the<sp/>pattern<sp/>separater<sp/>(the<sp/>&apos;:&apos;<sp/>character).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>cur_pattern++;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>user-specified<sp/>filter<sp/>matches<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>name<sp/>and<sp/>the<sp/>test<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1ae2c97834ce45d56f46d39df7cc310109" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1ae2c97834ce45d56f46d39df7cc310109" kindref="member">UnitTestOptions::FilterMatchesTest</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>&amp;test_case_name,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>&amp;test_name)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>full_name<sp/>=<sp/>test_case_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>test_name.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Split<sp/>--gtest_filter<sp/>at<sp/>&apos;-&apos;,<sp/>if<sp/>there<sp/>is<sp/>one,<sp/>to<sp/>separate<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>positive<sp/>filter<sp/>and<sp/>negative<sp/>filter<sp/>portions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p<sp/>=<sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(filter).c_str();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dash<sp/>=<sp/>strchr(p,<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>positive;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>negative;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dash<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>positive<sp/>=<sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(filter).c_str();<sp/><sp/></highlight><highlight class="comment">//<sp/>Whole<sp/>string<sp/>is<sp/>a<sp/>positive<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>negative<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>positive<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">std::string</ref>(p,<sp/>dash);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Everything<sp/>up<sp/>to<sp/>the<sp/>dash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>negative<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">std::string</ref>(dash<sp/>+<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Everything<sp/>after<sp/>the<sp/>dash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(positive.<ref refid="cpp/string/basic_string/empty" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">empty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>&apos;-test1&apos;<sp/>as<sp/>the<sp/>same<sp/>as<sp/>&apos;*-test1&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>positive<sp/>=<sp/><ref refid="d0/d75/namespacetesting_1a1e85b0754dce94c87f067d7b0379c171" kindref="member">kUniversalFilter</ref>;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>filter<sp/>is<sp/>a<sp/>colon-separated<sp/>list<sp/>of<sp/>patterns.<sp/><sp/>It<sp/>matches<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>if<sp/>any<sp/>pattern<sp/>in<sp/>it<sp/>matches<sp/>the<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a51c4969c39bbb6a3f0d596e7f47f3530" kindref="member">MatchesFilter</ref>(full_name,<sp/>positive.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a51c4969c39bbb6a3f0d596e7f47f3530" kindref="member">MatchesFilter</ref>(full_name,<sp/>negative.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>()));</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>EXCEPTION_EXECUTE_HANDLER<sp/>if<sp/>Google<sp/>Test<sp/>should<sp/>handle<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>given<sp/>SEH<sp/>exception,<sp/>or<sp/>EXCEPTION_CONTINUE_SEARCH<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>useful<sp/>as<sp/>an<sp/>__except<sp/>condition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTestOptions::GTestShouldProcessSEH(DWORD<sp/>exception_code)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>should<sp/>handle<sp/>a<sp/>SEH<sp/>exception<sp/>if:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>the<sp/>user<sp/>wants<sp/>it<sp/>to,<sp/>AND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>this<sp/>is<sp/>not<sp/>a<sp/>breakpoint<sp/>exception,<sp/>AND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>3.<sp/>this<sp/>is<sp/>not<sp/>a<sp/>C++<sp/>exception<sp/>(VC++<sp/>implements<sp/>them<sp/>via<sp/>SEH,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>apparently).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SEH<sp/>exception<sp/>code<sp/>for<sp/>C++<sp/>exceptions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(see<sp/>http://support.microsoft.com/kb/185294<sp/>for<sp/>more<sp/>information).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>kCxxExceptionCode<sp/>=<sp/>0xe06d7363;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_handle<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(catch_exceptions))</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>should_handle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exception_code<sp/>==<sp/>EXCEPTION_BREAKPOINT)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>should_handle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exception_code<sp/>==<sp/>kCxxExceptionCode)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>should_handle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>should_handle<sp/>?<sp/>EXCEPTION_EXECUTE_HANDLER<sp/>:<sp/>EXCEPTION_CONTINUE_SEARCH;</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>c&apos;tor<sp/>sets<sp/>this<sp/>object<sp/>as<sp/>the<sp/>test<sp/>part<sp/>result<sp/>reporter<sp/>used<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test.<sp/><sp/>The<sp/>&apos;result&apos;<sp/>parameter<sp/>specifies<sp/>where<sp/>to<sp/>report<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>results.<sp/>Intercepts<sp/>only<sp/>failures<sp/>from<sp/>the<sp/>current<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563" refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1af5c28bc39bc95da0223fc3f926419aa2" refkind="member"><highlight class="normal"><ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1af5c28bc39bc95da0223fc3f926419aa2" kindref="member">ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter</ref>(</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d5d/classtesting_1_1_test_part_result_array" kindref="compound">TestPartResultArray</ref>*<sp/>result)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD),</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result_(result)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1a1e3b6d38df0786ccf7f938d60e386aae" kindref="member">Init</ref>();</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>c&apos;tor<sp/>sets<sp/>this<sp/>object<sp/>as<sp/>the<sp/>test<sp/>part<sp/>result<sp/>reporter<sp/>used<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test.<sp/><sp/>The<sp/>&apos;result&apos;<sp/>parameter<sp/>specifies<sp/>where<sp/>to<sp/>report<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>results.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573" refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1a4a52e5646a88216e62c6c61874b06930" refkind="member"><highlight class="normal"><ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1af5c28bc39bc95da0223fc3f926419aa2" kindref="member">ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter</ref>(</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1a1d75549697022f869ab9d184916077d2" kindref="member">InterceptMode</ref><sp/>intercept_mode,<sp/><ref refid="d4/d5d/classtesting_1_1_test_part_result_array" kindref="compound">TestPartResultArray</ref>*<sp/>result)</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>intercept_mode_(intercept_mode),</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result_(result)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1a1e3b6d38df0786ccf7f938d60e386aae" kindref="member">Init</ref>();</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580" refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1a1e3b6d38df0786ccf7f938d60e386aae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1a1e3b6d38df0786ccf7f938d60e386aae" kindref="member">ScopedFakeTestPartResultReporter::Init</ref>()<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">internal::UnitTestImpl</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" kindref="member">internal::GetUnitTestImpl</ref>();</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1ac41a6872b1cb8a2d43546199dd59ae6e" kindref="member">intercept_mode_</ref><sp/>==<sp/><ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1a1d75549697022f869ab9d184916077d2a5398a4b510d73fe50e61864f5e805c65" kindref="member">INTERCEPT_ALL_THREADS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1a770408cbb038fabbbeab39b72e80403e" kindref="member">old_reporter_</ref><sp/>=<sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a95cd925236936aab4dd3604aaeae9b15" kindref="member">GetGlobalTestPartResultReporter</ref>();</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a5d379c4ca61275c92e23f8605a67c918" kindref="member">SetGlobalTestPartResultReporter</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1a770408cbb038fabbbeab39b72e80403e" kindref="member">old_reporter_</ref><sp/>=<sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a300e589a3266a50b3c75dc14cc9673ed" kindref="member">GetTestPartResultReporterForCurrentThread</ref>();</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ab71b8e31b6a6f77a3c80e76f1a17336c" kindref="member">SetTestPartResultReporterForCurrentThread</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>d&apos;tor<sp/>restores<sp/>the<sp/>test<sp/>part<sp/>result<sp/>reporter<sp/>used<sp/>by<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>before.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593" refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1ad424dbca5099cec78b6aa2ca4c3aac75" refkind="member"><highlight class="normal"><ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1ad424dbca5099cec78b6aa2ca4c3aac75" kindref="member">ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter</ref>()<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">internal::UnitTestImpl</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" kindref="member">internal::GetUnitTestImpl</ref>();</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1ac41a6872b1cb8a2d43546199dd59ae6e" kindref="member">intercept_mode_</ref><sp/>==<sp/><ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1a1d75549697022f869ab9d184916077d2a5398a4b510d73fe50e61864f5e805c65" kindref="member">INTERCEPT_ALL_THREADS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a5d379c4ca61275c92e23f8605a67c918" kindref="member">SetGlobalTestPartResultReporter</ref>(<ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1a770408cbb038fabbbeab39b72e80403e" kindref="member">old_reporter_</ref>);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ab71b8e31b6a6f77a3c80e76f1a17336c" kindref="member">SetTestPartResultReporterForCurrentThread</ref>(<ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1a770408cbb038fabbbeab39b72e80403e" kindref="member">old_reporter_</ref>);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increments<sp/>the<sp/>test<sp/>part<sp/>result<sp/>count<sp/>and<sp/>remembers<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>is<sp/>from<sp/>the<sp/>TestPartResultReporterInterface<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604" refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1acd54d55b39f168c91b6370be62cef448" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1acd54d55b39f168c91b6370be62cef448" kindref="member">ScopedFakeTestPartResultReporter::ReportTestPartResult</ref>(</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><ref refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1a3b5b59dfb566b902e20fa042ba17dad0" kindref="member">result_</ref>-&gt;<ref refid="d4/d5d/classtesting_1_1_test_part_result_array_1a3a9ecce0ea05e8ce5e1d3dbb2b8e1f97" kindref="member">Append</ref>(result);</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>type<sp/>ID<sp/>of<sp/>::testing::Test.<sp/><sp/>We<sp/>should<sp/>always<sp/>call<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instead<sp/>of<sp/>GetTypeId&lt;<sp/>::testing::Test&gt;()<sp/>to<sp/>get<sp/>the<sp/>type<sp/>ID<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="comment">//<sp/>testing::Test.<sp/><sp/>This<sp/>is<sp/>to<sp/>work<sp/>around<sp/>a<sp/>suspected<sp/>linker<sp/>bug<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>Google<sp/>Test<sp/>as<sp/>a<sp/>framework<sp/>on<sp/>Mac<sp/>OS<sp/>X.<sp/><sp/>The<sp/>bug<sp/>causes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GetTypeId&lt;<sp/>::testing::Test&gt;()<sp/>to<sp/>return<sp/>different<sp/>values<sp/>depending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>whether<sp/>the<sp/>call<sp/>is<sp/>from<sp/>the<sp/>Google<sp/>Test<sp/>framework<sp/>itself<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>user<sp/>test<sp/>code.<sp/><sp/>GetTestTypeId()<sp/>is<sp/>guaranteed<sp/>to<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>the<sp/>same<sp/>value,<sp/>as<sp/>it<sp/>always<sp/>calls<sp/>GetTypeId&lt;&gt;()<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gtest.cc,<sp/>which<sp/>is<sp/>within<sp/>the<sp/>Google<sp/>Test<sp/>framework.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620" refid="d0/da7/namespacetesting_1_1internal_1af4406515630591b54fcdf093991b14e3" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1ac535957ba2fde769ce297f9b23db057d" kindref="member">TypeId</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af4406515630591b54fcdf093991b14e3" kindref="member">GetTestTypeId</ref>()<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetTypeId&lt;Test&gt;();</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>of<sp/>GetTestTypeId()<sp/>as<sp/>seen<sp/>from<sp/>within<sp/>the<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>library.<sp/><sp/>This<sp/>is<sp/>solely<sp/>for<sp/>testing<sp/>GetTestTypeId().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626" refid="d0/da7/namespacetesting_1_1internal_1a3117ae1f8725f2828385dd7d9fb91ffc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac535957ba2fde769ce297f9b23db057d" kindref="member">TypeId</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3117ae1f8725f2828385dd7d9fb91ffc" kindref="member">kTestTypeIdInGoogleTest</ref><sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af4406515630591b54fcdf093991b14e3" kindref="member">GetTestTypeId</ref>();</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>predicate-formatter<sp/>checks<sp/>that<sp/>&apos;results&apos;<sp/>contains<sp/>a<sp/>test<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failure<sp/>of<sp/>the<sp/>given<sp/>type<sp/>and<sp/>that<sp/>the<sp/>failure<sp/>message<sp/>contains<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">//<sp/>given<sp/>substring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631" refid="d0/da7/namespacetesting_1_1internal_1a14ff02e6d151f45e998657674e9af88a" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a14ff02e6d151f45e998657674e9af88a" kindref="member">HasOneFailure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*<sp/>results_expr<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*<sp/>type_expr<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*<sp/>substr_expr<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d5d/classtesting_1_1_test_part_result_array" kindref="compound">TestPartResultArray</ref>&amp;<sp/>results,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">TestPartResult::Type</ref><sp/>type,</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>substr)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>expected(type<sp/>==<sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7afff22986360310b0356db600c8c2187d" kindref="member">TestPartResult::kFatalFailure</ref><sp/>?</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1<sp/>fatal<sp/>failure&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1<sp/>non-fatal<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref><sp/>msg;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(results.<ref refid="d4/d5d/classtesting_1_1_test_part_result_array_1af9593d4a5ff4274efaf429cb4f9e57cc" kindref="member">size</ref>()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expected<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>results.<ref refid="d4/d5d/classtesting_1_1_test_part_result_array_1af9593d4a5ff4274efaf429cb4f9e57cc" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>failures&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>results.<ref refid="d4/d5d/classtesting_1_1_test_part_result_array_1af9593d4a5ff4274efaf429cb4f9e57cc" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>results.<ref refid="d4/d5d/classtesting_1_1_test_part_result_array_1ab619c316b3350fd64fee6f9aa4c6506f" kindref="member">GetTestPartResult</ref>(i);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" kindref="member">AssertionFailure</ref>()<sp/>&lt;&lt;<sp/>msg;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>r<sp/>=<sp/>results.<ref refid="d4/d5d/classtesting_1_1_test_part_result_array_1ab619c316b3350fd64fee6f9aa4c6506f" kindref="member">GetTestPartResult</ref>(0);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r.<ref refid="d0/d4b/classtesting_1_1_test_part_result_1adf4a6727c689e0038cf2cdd158d5ed2c" kindref="member">type</ref>()<sp/>!=<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" kindref="member">AssertionFailure</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expected<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>r;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(r.<ref refid="d0/d4b/classtesting_1_1_test_part_result_1aea6220e002a8039b97dc6fbd9ff79f46" kindref="member">message</ref>(),<sp/>substr.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>())<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" kindref="member">AssertionFailure</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expected<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>containing<sp/>\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>substr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>r;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>constructor<sp/>of<sp/>SingleFailureChecker<sp/>remembers<sp/>where<sp/>to<sp/>look<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>part<sp/>results,<sp/>what<sp/>type<sp/>of<sp/>failure<sp/>we<sp/>expect,<sp/>and<sp/>what</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="comment">//<sp/>substring<sp/>the<sp/>failure<sp/>message<sp/>should<sp/>contain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670" refid="d8/d9a/classtesting_1_1internal_1_1_single_failure_checker_1a7bcb284c71b50648c3ca4c3e7b22d8fe" refkind="member"><highlight class="normal"><ref refid="d8/d9a/classtesting_1_1internal_1_1_single_failure_checker_1a7bcb284c71b50648c3ca4c3e7b22d8fe" kindref="member">SingleFailureChecker:: SingleFailureChecker</ref>(</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d5d/classtesting_1_1_test_part_result_array" kindref="compound">TestPartResultArray</ref>*<sp/>results,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">TestPartResult::Type</ref><sp/>type,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>substr)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>results_(results),</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_(type),</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>substr_(substr)<sp/>{}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>destructor<sp/>of<sp/>SingleFailureChecker<sp/>verifies<sp/>that<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TestPartResultArray<sp/>contains<sp/>exactly<sp/>one<sp/>failure<sp/>that<sp/>has<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>and<sp/>contains<sp/>the<sp/>given<sp/>substring.<sp/><sp/>If<sp/>that&apos;s<sp/>not<sp/>the<sp/>case,<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-fatal<sp/>failure<sp/>will<sp/>be<sp/>generated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682" refid="d8/d9a/classtesting_1_1internal_1_1_single_failure_checker_1a800e9d220e8d92357360adbe84be2736" refkind="member"><highlight class="normal"><ref refid="d8/d9a/classtesting_1_1internal_1_1_single_failure_checker_1a800e9d220e8d92357360adbe84be2736" kindref="member">SingleFailureChecker::~SingleFailureChecker</ref>()<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><ref refid="db/d6e/gtest__pred__impl_8h_1a7285708fa5d37d6d8ed5b5e59da08bae" kindref="member">EXPECT_PRED_FORMAT3</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a14ff02e6d151f45e998657674e9af88a" kindref="member">HasOneFailure</ref>,<sp/>*<ref refid="d8/d9a/classtesting_1_1internal_1_1_single_failure_checker_1ab15c799eb695a09b713ef21e869abfe0" kindref="member">results_</ref>,<sp/><ref refid="d8/d9a/classtesting_1_1internal_1_1_single_failure_checker_1a3155cc24deee3978aed78a25da6180da" kindref="member">type_</ref>,<sp/><ref refid="d8/d9a/classtesting_1_1internal_1_1_single_failure_checker_1a6d511a37e5638d646986452a9b195d23" kindref="member">substr_</ref>);</highlight></codeline>
<codeline lineno="684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686" refid="d5/d5b/classtesting_1_1internal_1_1_default_global_test_part_result_reporter_1af6608da1bb27c0d120ff1683800e1e82" refkind="member"><highlight class="normal"><ref refid="d5/d5b/classtesting_1_1internal_1_1_default_global_test_part_result_reporter_1af6608da1bb27c0d120ff1683800e1e82" kindref="member">DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter</ref>(</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">UnitTestImpl</ref>*<sp/>unit_test)<sp/>:<sp/>unit_test_(unit_test)<sp/>{}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689" refid="d5/d5b/classtesting_1_1internal_1_1_default_global_test_part_result_reporter_1acd54d55b39f168c91b6370be62cef448" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/d5b/classtesting_1_1internal_1_1_default_global_test_part_result_reporter_1acd54d55b39f168c91b6370be62cef448" kindref="member">DefaultGlobalTestPartResultReporter::ReportTestPartResult</ref>(</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><ref refid="d5/d5b/classtesting_1_1internal_1_1_default_global_test_part_result_reporter_1a169328a484b1326c60a37194df51ccc8" kindref="member">unit_test_</ref>-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a385bee93ae6043262a860574aa59ba1a" kindref="member">current_test_result</ref>()-&gt;<ref refid="d1/d69/classtesting_1_1_test_result_1a3fac5d4edaec29072c5e9d735434471a" kindref="member">AddTestPartResult</ref>(result);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><ref refid="d5/d5b/classtesting_1_1internal_1_1_default_global_test_part_result_reporter_1a169328a484b1326c60a37194df51ccc8" kindref="member">unit_test_</ref>-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a371c481b63deeb0ecd47f42b4720480b" kindref="member">listeners</ref>()-&gt;<ref refid="df/dab/classtesting_1_1_test_event_listeners_1af7cfacdf90b4ba59566c16d95ee5d6cc" kindref="member">repeater</ref>()-&gt;<ref refid="d1/d46/classtesting_1_1_test_event_listener_1a6897200761af7db2d3212d5d3c1571d9" kindref="member">OnTestPartResult</ref>(result);</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695" refid="d0/d60/classtesting_1_1internal_1_1_default_per_thread_test_part_result_reporter_1a49af24a9082840cd2f2880a83f51e540" refkind="member"><highlight class="normal"><ref refid="d0/d60/classtesting_1_1internal_1_1_default_per_thread_test_part_result_reporter_1a49af24a9082840cd2f2880a83f51e540" kindref="member">DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter</ref>(</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">UnitTestImpl</ref>*<sp/>unit_test)<sp/>:<sp/>unit_test_(unit_test)<sp/>{}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698" refid="d0/d60/classtesting_1_1internal_1_1_default_per_thread_test_part_result_reporter_1acd54d55b39f168c91b6370be62cef448" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/d60/classtesting_1_1internal_1_1_default_per_thread_test_part_result_reporter_1acd54d55b39f168c91b6370be62cef448" kindref="member">DefaultPerThreadTestPartResultReporter::ReportTestPartResult</ref>(</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><ref refid="d0/d60/classtesting_1_1internal_1_1_default_per_thread_test_part_result_reporter_1a169328a484b1326c60a37194df51ccc8" kindref="member">unit_test_</ref>-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a95cd925236936aab4dd3604aaeae9b15" kindref="member">GetGlobalTestPartResultReporter</ref>()-&gt;<ref refid="da/d6e/classtesting_1_1_test_part_result_reporter_interface_1a49d731c71005e51d8531193f29efb71f" kindref="member">ReportTestPartResult</ref>(result);</highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>global<sp/>test<sp/>part<sp/>result<sp/>reporter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><ref refid="da/d6e/classtesting_1_1_test_part_result_reporter_interface" kindref="compound">TestPartResultReporterInterface</ref>*</highlight></codeline>
<codeline lineno="705" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a95cd925236936aab4dd3604aaeae9b15" refkind="member"><highlight class="normal"><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a95cd925236936aab4dd3604aaeae9b15" kindref="member">UnitTestImpl::GetGlobalTestPartResultReporter</ref>()<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><ref refid="da/d2b/classtesting_1_1internal_1_1_g_test_mutex_lock" kindref="compound">internal::MutexLock</ref><sp/>lock(&amp;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a44a033b8d726114e3fb407ec77c9e409" kindref="member">global_test_part_result_reporter_mutex_</ref>);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a1de0e01c64c3d70fb569b38fafb4cc22" kindref="member">global_test_part_result_repoter_</ref>;</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>global<sp/>test<sp/>part<sp/>result<sp/>reporter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a5d379c4ca61275c92e23f8605a67c918" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a5d379c4ca61275c92e23f8605a67c918" kindref="member">UnitTestImpl::SetGlobalTestPartResultReporter</ref>(</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d6e/classtesting_1_1_test_part_result_reporter_interface" kindref="compound">TestPartResultReporterInterface</ref>*<sp/>reporter)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><ref refid="da/d2b/classtesting_1_1internal_1_1_g_test_mutex_lock" kindref="compound">internal::MutexLock</ref><sp/>lock(&amp;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a44a033b8d726114e3fb407ec77c9e409" kindref="member">global_test_part_result_reporter_mutex_</ref>);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a1de0e01c64c3d70fb569b38fafb4cc22" kindref="member">global_test_part_result_repoter_</ref><sp/>=<sp/>reporter;</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>test<sp/>part<sp/>result<sp/>reporter<sp/>for<sp/>the<sp/>current<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><ref refid="da/d6e/classtesting_1_1_test_part_result_reporter_interface" kindref="compound">TestPartResultReporterInterface</ref>*</highlight></codeline>
<codeline lineno="719" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a300e589a3266a50b3c75dc14cc9673ed" refkind="member"><highlight class="normal"><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a300e589a3266a50b3c75dc14cc9673ed" kindref="member">UnitTestImpl::GetTestPartResultReporterForCurrentThread</ref>()<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4ba0935a5c015013b3c1ad11e3087650" kindref="member">per_thread_test_part_result_reporter_</ref>.get();</highlight></codeline>
<codeline lineno="721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>test<sp/>part<sp/>result<sp/>reporter<sp/>for<sp/>the<sp/>current<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ab71b8e31b6a6f77a3c80e76f1a17336c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ab71b8e31b6a6f77a3c80e76f1a17336c" kindref="member">UnitTestImpl::SetTestPartResultReporterForCurrentThread</ref>(</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d6e/classtesting_1_1_test_part_result_reporter_interface" kindref="compound">TestPartResultReporterInterface</ref>*<sp/>reporter)<sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4ba0935a5c015013b3c1ad11e3087650" kindref="member">per_thread_test_part_result_reporter_</ref>.set(reporter);</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>successful<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a843725bbe9bfa57ae5fa11a84e575272" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a843725bbe9bfa57ae5fa11a84e575272" kindref="member">UnitTestImpl::successful_test_case_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1e77a774d910346eff11a86d8df783a5" kindref="member">CountIf</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aadc7afca7aab40f7f1d41bc17974459a" kindref="member">TestCasePassed</ref>);</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1af0467dfbdb2874eb7efb3b80e81d063f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1af0467dfbdb2874eb7efb3b80e81d063f" kindref="member">UnitTestImpl::failed_test_case_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1e77a774d910346eff11a86d8df783a5" kindref="member">CountIf</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a53454b6089c1c5b25319caa9de6c5c02" kindref="member">TestCaseFailed</ref>);</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ab06cec6b304d4b5d853e4047f98dba3b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ab06cec6b304d4b5d853e4047f98dba3b" kindref="member">UnitTestImpl::total_test_case_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>.size());</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>test<sp/>cases<sp/>that<sp/>contain<sp/>at<sp/>least<sp/>one<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a8ab1158b5875c26962e688932c442616" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a8ab1158b5875c26962e688932c442616" kindref="member">UnitTestImpl::test_case_to_run_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1e77a774d910346eff11a86d8df783a5" kindref="member">CountIf</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a73e562dfef3eb7b30dfbb7b5e88e6df2" kindref="member">ShouldRunTestCase</ref>);</highlight></codeline>
<codeline lineno="748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>successful<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1aadfe12d81153d7c5838a0eedad197d4e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1aadfe12d81153d7c5838a0eedad197d4e" kindref="member">UnitTestImpl::successful_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad1b758141e7e064d00a2bf0355c8ee43" kindref="member">SumOverTestCaseList</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>,<sp/>&amp;<ref refid="d0/dfa/classtesting_1_1_test_case_1aadfe12d81153d7c5838a0eedad197d4e" kindref="member">TestCase::successful_test_count</ref>);</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a527d55a764fa3193cda01aaa95a75e8b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a527d55a764fa3193cda01aaa95a75e8b" kindref="member">UnitTestImpl::failed_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad1b758141e7e064d00a2bf0355c8ee43" kindref="member">SumOverTestCaseList</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>,<sp/>&amp;<ref refid="d0/dfa/classtesting_1_1_test_case_1a527d55a764fa3193cda01aaa95a75e8b" kindref="member">TestCase::failed_test_count</ref>);</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests<sp/>that<sp/>will<sp/>be<sp/>reported<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ae79e09f147841ac66b6478137e2260c8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ae79e09f147841ac66b6478137e2260c8" kindref="member">UnitTestImpl::reportable_disabled_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad1b758141e7e064d00a2bf0355c8ee43" kindref="member">SumOverTestCaseList</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="d0/dfa/classtesting_1_1_test_case_1ae79e09f147841ac66b6478137e2260c8" kindref="member">TestCase::reportable_disabled_test_count</ref>);</highlight></codeline>
<codeline lineno="764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a306df17b97d7adb53a092db57dd2ed2b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a306df17b97d7adb53a092db57dd2ed2b" kindref="member">UnitTestImpl::disabled_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad1b758141e7e064d00a2bf0355c8ee43" kindref="member">SumOverTestCaseList</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>,<sp/>&amp;<ref refid="d0/dfa/classtesting_1_1_test_case_1a306df17b97d7adb53a092db57dd2ed2b" kindref="member">TestCase::disabled_test_count</ref>);</highlight></codeline>
<codeline lineno="769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>to<sp/>be<sp/>printed<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a5b3b073637db1a071ba2d749128e9f8c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a5b3b073637db1a071ba2d749128e9f8c" kindref="member">UnitTestImpl::reportable_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad1b758141e7e064d00a2bf0355c8ee43" kindref="member">SumOverTestCaseList</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>,<sp/>&amp;<ref refid="d0/dfa/classtesting_1_1_test_case_1a5b3b073637db1a071ba2d749128e9f8c" kindref="member">TestCase::reportable_test_count</ref>);</highlight></codeline>
<codeline lineno="774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ac11f534b6c4990ddada85360a2371c4a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ac11f534b6c4990ddada85360a2371c4a" kindref="member">UnitTestImpl::total_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad1b758141e7e064d00a2bf0355c8ee43" kindref="member">SumOverTestCaseList</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>,<sp/>&amp;<ref refid="d0/dfa/classtesting_1_1_test_case_1ac11f534b6c4990ddada85360a2371c4a" kindref="member">TestCase::total_test_count</ref>);</highlight></codeline>
<codeline lineno="779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a9964c29b369696df155b3adac96cfe66" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a9964c29b369696df155b3adac96cfe66" kindref="member">UnitTestImpl::test_to_run_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad1b758141e7e064d00a2bf0355c8ee43" kindref="member">SumOverTestCaseList</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>,<sp/>&amp;<ref refid="d0/dfa/classtesting_1_1_test_case_1a9964c29b369696df155b3adac96cfe66" kindref="member">TestCase::test_to_run_count</ref>);</highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>OS<sp/>stack<sp/>trace<sp/>as<sp/>an<sp/>std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>stack<sp/>frames<sp/>to<sp/>be<sp/>included<sp/>is<sp/>specified<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>gtest_stack_trace_depth<sp/>flag.<sp/><sp/>The<sp/>skip_count<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specifies<sp/>the<sp/>number<sp/>of<sp/>top<sp/>frames<sp/>to<sp/>be<sp/>skipped,<sp/>which<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="comment">//<sp/>count<sp/>against<sp/>the<sp/>number<sp/>of<sp/>frames<sp/>to<sp/>be<sp/>included.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>if<sp/>Foo()<sp/>calls<sp/>Bar(),<sp/>which<sp/>in<sp/>turn<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CurrentOsStackTraceExceptTop(1),<sp/>Foo()<sp/>will<sp/>be<sp/>included<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="comment">//<sp/>trace<sp/>but<sp/>Bar()<sp/>and<sp/>CurrentOsStackTraceExceptTop()<sp/>won&apos;t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a243591ed1070d5a856b4243810d85f94" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a243591ed1070d5a856b4243810d85f94" kindref="member">UnitTestImpl::CurrentOsStackTraceExceptTop</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip_count)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1accb552ad4af910904a9e48c49c5c79a2" kindref="member">os_stack_trace_getter</ref>()-&gt;<ref refid="d7/d10/classtesting_1_1internal_1_1_os_stack_trace_getter_interface_1a30712acd78d6c794c2ca1a7ad12f6792" kindref="member">CurrentStackTrace</ref>(</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(stack_trace_depth)),</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>skip_count<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skips<sp/>the<sp/>user-specified<sp/>number<sp/>of<sp/>frames<sp/>plus<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>time<sp/>in<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806" refid="d0/da7/namespacetesting_1_1internal_1ae0c6fd4543c65945515c42d6f43cc138" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae0c6fd4543c65945515c42d6f43cc138" kindref="member">GetTimeInMillis</ref>()<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS_MOBILE<sp/>||<sp/>defined(__BORLANDC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Difference<sp/>between<sp/>1970-01-01<sp/>and<sp/>1601-01-01<sp/>in<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>http://analogous.blogspot.com/2005/04/epoch.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref><sp/>kJavaEpochToWinFileTimeDelta<sp/>=</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(116444736UL)<sp/>*<sp/>100000UL;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>kTenthMicrosInMilliSecond<sp/>=<sp/>10000;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>SYSTEMTIME<sp/>now_systime;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>FILETIME<sp/>now_filetime;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>ULARGE_INTEGER<sp/>now_int64;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(kenton@google.com):<sp/>Shouldn&apos;t<sp/>this<sp/>just<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>GetSystemTimeAsFileTime()?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>GetSystemTime(&amp;now_systime);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SystemTimeToFileTime(&amp;now_systime,<sp/>&amp;now_filetime))<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>now_int64.LowPart<sp/>=<sp/>now_filetime.dwLowDateTime;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>now_int64.HighPart<sp/>=<sp/>now_filetime.dwHighDateTime;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>now_int64.QuadPart<sp/>=<sp/>(now_int64.QuadPart<sp/>/<sp/>kTenthMicrosInMilliSecond)<sp/>-</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kJavaEpochToWinFileTimeDelta;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>now_int64.QuadPart;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!GTEST_HAS_GETTIMEOFDAY_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>__timeb64<sp/>now;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MSVC<sp/>8<sp/>deprecates<sp/>_ftime64(),<sp/>so<sp/>we<sp/>want<sp/>to<sp/>suppress<sp/>warning<sp/>4996</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(deprecated<sp/>function)<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(kenton@google.com):<sp/>Use<sp/>GetTickCount()?<sp/><sp/>Or<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>SystemTimeToFileTime()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a76a726de98cf61e65af03fd6f10a9bc0" kindref="member">GTEST_DISABLE_MSC_WARNINGS_PUSH_</ref>(4996)</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>_ftime64(&amp;now);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1ab4c44546d6d9aced68993b87b608fc06" kindref="member">GTEST_DISABLE_MSC_WARNINGS_POP_</ref>()</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(now.time)<sp/>*<sp/>1000<sp/>+<sp/>now.millitm;</highlight></codeline>
<codeline lineno="840"><highlight class="normal">#elif<sp/><ref refid="df/d5b/gtest_8cc_1a7c139c1711de5a69cbc934e8a082e4f9" kindref="member">GTEST_HAS_GETTIMEOFDAY_</ref></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timeval<sp/>now;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>gettimeofday(&amp;now,<sp/>NULL);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(now.tv_sec)<sp/>*<sp/>1000<sp/>+<sp/>now.tv_usec<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="844"><highlight class="normal">#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal">#<sp/>error<sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>know<sp/>how<sp/>to<sp/>get<sp/>the<sp/>current<sp/>time<sp/>on<sp/>your<sp/>system.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utilities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>String.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>UTF-16<sp/>wide<sp/>string<sp/>from<sp/>the<sp/>given<sp/>ANSI<sp/>string,<sp/>allocating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>using<sp/>new.<sp/>The<sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>deleting<sp/>the<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>using<sp/>delete[].<sp/>Returns<sp/>the<sp/>wide<sp/>string,<sp/>or<sp/>NULL<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="comment">//<sp/>input<sp/>is<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal">LPCWSTR<sp/>String::AnsiToUtf16(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ansi)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ansi)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>strlen(ansi);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unicode_length<sp/>=</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MultiByteToWideChar(CP_ACP,<sp/>0,<sp/>ansi,<sp/>length,</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>WCHAR*<sp/>unicode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>WCHAR[unicode_length<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>MultiByteToWideChar(CP_ACP,<sp/>0,<sp/>ansi,<sp/>length,</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unicode,<sp/>unicode_length);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>unicode[unicode_length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unicode;</highlight></codeline>
<codeline lineno="869"><highlight class="normal">}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>ANSI<sp/>string<sp/>from<sp/>the<sp/>given<sp/>wide<sp/>string,<sp/>allocating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>using<sp/>new.<sp/>The<sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>deleting<sp/>the<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>using<sp/>delete[].<sp/>Returns<sp/>the<sp/>ANSI<sp/>string,<sp/>or<sp/>NULL<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="comment">//<sp/>input<sp/>is<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>String::Utf16ToAnsi(LPCWSTR<sp/>utf16_str)<sp/><sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf16_str)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ansi_length<sp/>=</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WideCharToMultiByte(CP_ACP,<sp/>0,<sp/>utf16_str,<sp/>-1,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>0,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ansi<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[ansi_length<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>WideCharToMultiByte(CP_ACP,<sp/>0,<sp/>utf16_str,<sp/>-1,</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ansi,<sp/>ansi_length,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>ansi[ansi_length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ansi;</highlight></codeline>
<codeline lineno="885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>C<sp/>strings.<sp/><sp/>Returns<sp/>true<sp/>iff<sp/>they<sp/>have<sp/>the<sp/>same<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>strcmp(),<sp/>this<sp/>function<sp/>can<sp/>handle<sp/>NULL<sp/>argument(s).<sp/><sp/>A<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>string<sp/>is<sp/>considered<sp/>different<sp/>to<sp/>any<sp/>non-NULL<sp/>C<sp/>string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="comment">//<sp/>including<sp/>the<sp/>empty<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894" refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" kindref="member">String::CStringEquals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lhs<sp/>==<sp/>NULL<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs<sp/>==<sp/>NULL;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rhs<sp/>==<sp/>NULL<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(lhs,<sp/>rhs)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING<sp/>||<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>an<sp/>array<sp/>of<sp/>wide<sp/>chars<sp/>to<sp/>a<sp/>narrow<sp/>string<sp/>using<sp/>the<sp/>UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="comment">//<sp/>encoding,<sp/>and<sp/>streams<sp/>the<sp/>result<sp/>to<sp/>the<sp/>given<sp/>Message<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StreamWideCharsToMessage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>wstr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>*<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wstr[i]<sp/>!=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*msg<sp/>&lt;&lt;<sp/>WideStringToUtf8(wstr<sp/>+<sp/>i,<sp/>static_cast&lt;int&gt;(length<sp/>-<sp/>i));</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>length<sp/>&amp;&amp;<sp/>wstr[i]<sp/>!=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*msg<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal">}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING<sp/>||<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922" refid="d0/da7/namespacetesting_1_1internal_1a8eb8eddf760375a490e007b20777ec56" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8eb8eddf760375a490e007b20777ec56" kindref="member">SplitString</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">const ::std::string</ref>&amp;<sp/>str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delimiter,</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::<ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt; ::std::string&gt;</ref>*<sp/>dest)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::vector&lt; ::std::string&gt;</ref><sp/>parsed;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>::std::string::size_type<sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(::<ref refid="d0/da7/namespacetesting_1_1internal_1af72a7a7eee6997f4ed9e18d9620a7b87" kindref="member">testing::internal::AlwaysTrue</ref>())<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>::std::string::size_type<sp/>colon<sp/>=<sp/>str.find(delimiter,<sp/>pos);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colon<sp/>==<sp/>::std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parsed.<ref refid="cpp/container/vector/push_back" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">push_back</ref>(str.substr(pos));</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parsed.<ref refid="cpp/container/vector/push_back" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">push_back</ref>(str.substr(pos,<sp/>colon<sp/>-<sp/>pos));</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>colon<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>dest-&gt;<ref refid="cpp/container/vector/swap" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">swap</ref>(parsed);</highlight></codeline>
<codeline lineno="937"><highlight class="normal">}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructs<sp/>an<sp/>empty<sp/>Message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>allocate<sp/>the<sp/>stringstream<sp/>separately<sp/>because<sp/>otherwise<sp/>each<sp/>use<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ASSERT/EXPECT<sp/>in<sp/>a<sp/>procedure<sp/>adds<sp/>over<sp/>200<sp/>bytes<sp/>to<sp/>the<sp/>procedure&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stack<sp/>frame<sp/>leading<sp/>to<sp/>huge<sp/>stack<sp/>frames<sp/>in<sp/>some<sp/>cases;<sp/>gcc<sp/>does<sp/>not<sp/>reuse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>stack<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946" refid="d2/da9/classtesting_1_1_message_1af1991e0448f9277f0939d142e4aa2c94" refkind="member"><highlight class="normal"><ref refid="d2/da9/classtesting_1_1_message_1af1991e0448f9277f0939d142e4aa2c94" kindref="member">Message::Message</ref>()<sp/>:<sp/>ss_(new<sp/>::<ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>::stringstream)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>we<sp/>want<sp/>there<sp/>to<sp/>be<sp/>enough<sp/>precision<sp/>when<sp/>printing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>double<sp/>to<sp/>a<sp/>Message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>*ss_<sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/setprecision" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::setprecision</ref>(<ref refid="cpp/types/numeric_limits" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::numeric_limits&lt;double&gt;::digits10</ref><sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>two<sp/>overloads<sp/>allow<sp/>streaming<sp/>a<sp/>wide<sp/>C<sp/>string<sp/>to<sp/>a<sp/>Message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>the<sp/>UTF-8<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954" refid="d2/da9/classtesting_1_1_message_1a95275647fadb494c90d9e93b502b6a47" refkind="member"><highlight class="normal"><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/><ref refid="d2/da9/classtesting_1_1_message_1a173f6d370f2730877bbf104ceb93f461" kindref="member">Message::operator &lt;&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>wide_c_str)<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ad3067374c710673e1466b61fc8a368e0" kindref="member">internal::String::ShowWideCString</ref>(wide_c_str);</highlight></codeline>
<codeline lineno="956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="957" refid="d2/da9/classtesting_1_1_message_1a10ed20261816a387ba7f080a973de8e2" refkind="member"><highlight class="normal"><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/><ref refid="d2/da9/classtesting_1_1_message_1a173f6d370f2730877bbf104ceb93f461" kindref="member">Message::operator &lt;&lt;</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>wide_c_str)<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ad3067374c710673e1466b61fc8a368e0" kindref="member">internal::String::ShowWideCString</ref>(wide_c_str);</highlight></codeline>
<codeline lineno="959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>given<sp/>wide<sp/>string<sp/>to<sp/>a<sp/>narrow<sp/>string<sp/>using<sp/>the<sp/>UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="comment">//<sp/>encoding,<sp/>and<sp/>streams<sp/>the<sp/>result<sp/>to<sp/>this<sp/>Message<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/><ref refid="d2/da9/classtesting_1_1_message_1a173f6d370f2730877bbf104ceb93f461" kindref="member">Message::operator &lt;&lt;</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1af3c58f657eee885281edda1923f192b0" kindref="member">const ::std::wstring</ref>&amp;<sp/>wstr)<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>internal::StreamWideCharsToMessage(wstr.c_str(),<sp/>wstr.length(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>given<sp/>wide<sp/>string<sp/>to<sp/>a<sp/>narrow<sp/>string<sp/>using<sp/>the<sp/>UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="comment">//<sp/>encoding,<sp/>and<sp/>streams<sp/>the<sp/>result<sp/>to<sp/>this<sp/>Message<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal">Message&amp;<sp/><ref refid="d2/da9/classtesting_1_1_message_1a173f6d370f2730877bbf104ceb93f461" kindref="member">Message::operator &lt;&lt;</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1af3c58f657eee885281edda1923f192b0" kindref="member">const ::wstring</ref>&amp;<sp/>wstr)<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>internal::StreamWideCharsToMessage(wstr.c_str(),<sp/>wstr.length(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>text<sp/>streamed<sp/>to<sp/>this<sp/>object<sp/>so<sp/>far<sp/>as<sp/>an<sp/>std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>&apos;\0&apos;<sp/>character<sp/>in<sp/>the<sp/>buffer<sp/>is<sp/>replaced<sp/>with<sp/>&quot;\\0&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981" refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" kindref="member">Message::GetString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a9743f1da2e8f7a4a8178ec9595a56112" kindref="member">internal::StringStreamToString</ref>(ss_.get());</highlight></codeline>
<codeline lineno="983"><highlight class="normal">}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AssertionResult<sp/>constructors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>in<sp/>EXPECT_TRUE/FALSE(assertion_result).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987" refid="d5/dec/classtesting_1_1_assertion_result_1adfc7c37883985778a3d3f4f8cf0fecf1" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result_1adfc7c37883985778a3d3f4f8cf0fecf1" kindref="member">AssertionResult::AssertionResult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>success_(other.success_),</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message_(other.message_.get()<sp/>!=<sp/>NULL<sp/>?</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>::<ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>::<ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">string</ref>(*other.message_)<sp/>:</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;<sp/>::<ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>::<ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">string</ref>*&gt;(NULL))<sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal">}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Swaps<sp/>two<sp/>AssertionResults.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995" refid="d5/dec/classtesting_1_1_assertion_result_1a0aafa5774976d7f082bb6f1d19da61cb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result_1a0aafa5774976d7f082bb6f1d19da61cb" kindref="member">AssertionResult::swap</ref>(<ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="cpp/algorithm/swap" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::swap</ref>;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result_1a0aafa5774976d7f082bb6f1d19da61cb" kindref="member">swap</ref>(<ref refid="d5/dec/classtesting_1_1_assertion_result_1af269425d62c74663296db74fb636833d" kindref="member">success_</ref>,<sp/>other.<ref refid="d5/dec/classtesting_1_1_assertion_result_1af269425d62c74663296db74fb636833d" kindref="member">success_</ref>);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result_1a0aafa5774976d7f082bb6f1d19da61cb" kindref="member">swap</ref>(<ref refid="d5/dec/classtesting_1_1_assertion_result_1ac17bccd2dad5bc487c676baa7c53d104" kindref="member">message_</ref>,<sp/>other.<ref refid="d5/dec/classtesting_1_1_assertion_result_1ac17bccd2dad5bc487c676baa7c53d104" kindref="member">message_</ref>);</highlight></codeline>
<codeline lineno="999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>assertion&apos;s<sp/>negation.<sp/>Used<sp/>with<sp/>EXPECT/ASSERT_FALSE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/>AssertionResult::operator!()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/>negation(!<ref refid="d5/dec/classtesting_1_1_assertion_result_1af269425d62c74663296db74fb636833d" kindref="member">success_</ref>);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/dec/classtesting_1_1_assertion_result_1ac17bccd2dad5bc487c676baa7c53d104" kindref="member">message_</ref>.get()<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>negation<sp/>&lt;&lt;<sp/>*<ref refid="d5/dec/classtesting_1_1_assertion_result_1ac17bccd2dad5bc487c676baa7c53d104" kindref="member">message_</ref>;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>negation;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>a<sp/>successful<sp/>assertion<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010" refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>a<sp/>failed<sp/>assertion<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015" refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" kindref="member">AssertionFailure</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>a<sp/>failed<sp/>assertion<sp/>result<sp/>with<sp/>the<sp/>given<sp/>failure<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deprecated;<sp/>use<sp/>AssertionFailure()<sp/>&lt;&lt;<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021" refid="d0/d75/namespacetesting_1a72c97910499dac9ec752ad77dccdda3c" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" kindref="member">AssertionFailure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" kindref="member">AssertionFailure</ref>()<sp/>&lt;&lt;<sp/>message;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027" refid="de/dce/namespacetesting_1_1internal_1_1edit__distance" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">edit_distance<sp/>{</highlight></codeline>
<codeline lineno="1028" refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a5b69c8f2b38f31e87dabf300d7e46903" refkind="member"><highlight class="normal"><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;EditType&gt;</ref><sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a5b69c8f2b38f31e87dabf300d7e46903" kindref="member">CalculateOptimalEdits</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;size_t&gt;</ref>&amp;<sp/>left,</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;size_t&gt;</ref>&amp;<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::vector&lt;double&gt;</ref><sp/>&gt;<sp/>costs(</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>left.size()<sp/>+<sp/>1,<sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;double&gt;</ref>(right.size()<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::vector&lt;EditType&gt;</ref><sp/>&gt;<sp/>best_move(</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>left.size()<sp/>+<sp/>1,<sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;EditType&gt;</ref>(right.size()<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Populate<sp/>for<sp/>empty<sp/>right.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l_i<sp/>=<sp/>0;<sp/>l_i<sp/>&lt;<sp/>costs.<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>();<sp/>++l_i)<sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>costs[l_i][0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(l_i);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>best_move[l_i][0]<sp/>=<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba7b8140e312f42dd2073bae2374136137" kindref="member">kRemove</ref>;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Populate<sp/>for<sp/>empty<sp/>left.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r_i<sp/>=<sp/>1;<sp/>r_i<sp/>&lt;<sp/>costs[0].<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>();<sp/>++r_i)<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>costs[0][r_i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(r_i);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>best_move[0][r_i]<sp/>=<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba8d20f6cca2d49a8732f535cfe28812c8" kindref="member">kAdd</ref>;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l_i<sp/>=<sp/>0;<sp/>l_i<sp/>&lt;<sp/>left.size();<sp/>++l_i)<sp/>{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r_i<sp/>=<sp/>0;<sp/>r_i<sp/>&lt;<sp/>right.size();<sp/>++r_i)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left[l_i]<sp/>==<sp/>right[r_i])<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Found<sp/>a<sp/>match.<sp/>Consume<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>costs[l_i<sp/>+<sp/>1][r_i<sp/>+<sp/>1]<sp/>=<sp/>costs[l_i][r_i];</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_move[l_i<sp/>+<sp/>1][r_i<sp/>+<sp/>1]<sp/>=<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba01e3df29bad591c9c7e256a5090662b8" kindref="member">kMatch</ref>;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>add<sp/>=<sp/>costs[l_i<sp/>+<sp/>1][r_i];</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>remove<sp/>=<sp/>costs[l_i][r_i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>replace<sp/>=<sp/>costs[l_i][r_i];</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(add<sp/>&lt;<sp/>remove<sp/>&amp;&amp;<sp/>add<sp/>&lt;<sp/>replace)<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>costs[l_i<sp/>+<sp/>1][r_i<sp/>+<sp/>1]<sp/>=<sp/>add<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_move[l_i<sp/>+<sp/>1][r_i<sp/>+<sp/>1]<sp/>=<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba8d20f6cca2d49a8732f535cfe28812c8" kindref="member">kAdd</ref>;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remove<sp/>&lt;<sp/>add<sp/>&amp;&amp;<sp/>remove<sp/>&lt;<sp/>replace)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>costs[l_i<sp/>+<sp/>1][r_i<sp/>+<sp/>1]<sp/>=<sp/>remove<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_move[l_i<sp/>+<sp/>1][r_i<sp/>+<sp/>1]<sp/>=<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba7b8140e312f42dd2073bae2374136137" kindref="member">kRemove</ref>;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>make<sp/>replace<sp/>a<sp/>little<sp/>more<sp/>expensive<sp/>than<sp/>add/remove<sp/>to<sp/>lower</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>their<sp/>priority.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>costs[l_i<sp/>+<sp/>1][r_i<sp/>+<sp/>1]<sp/>=<sp/>replace<sp/>+<sp/>1.00001;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_move[l_i<sp/>+<sp/>1][r_i<sp/>+<sp/>1]<sp/>=<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba9219852c065abae302e91604e5d3594d" kindref="member">kReplace</ref>;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reconstruct<sp/>the<sp/>best<sp/>path.<sp/>We<sp/>do<sp/>it<sp/>in<sp/>reverse<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;EditType&gt;</ref><sp/>best_path;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l_i<sp/>=<sp/>left.size(),<sp/>r_i<sp/>=<sp/>right.size();<sp/>l_i<sp/>&gt;<sp/>0<sp/>||<sp/>r_i<sp/>&gt;<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feb" kindref="member">EditType</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0f6d06bf8c3093b9c22bb08723db201e" kindref="member">move</ref><sp/>=<sp/>best_move[l_i][r_i];</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>best_path.<ref refid="cpp/container/vector/push_back" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">push_back</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a0f6d06bf8c3093b9c22bb08723db201e" kindref="member">move</ref>);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>l_i<sp/>-=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0f6d06bf8c3093b9c22bb08723db201e" kindref="member">move</ref><sp/>!=<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba8d20f6cca2d49a8732f535cfe28812c8" kindref="member">kAdd</ref>;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>r_i<sp/>-=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0f6d06bf8c3093b9c22bb08723db201e" kindref="member">move</ref><sp/>!=<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba7b8140e312f42dd2073bae2374136137" kindref="member">kRemove</ref>;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><ref refid="cpp/algorithm/reverse" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::reverse</ref>(best_path.<ref refid="cpp/container/vector/begin" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">begin</ref>(),<sp/>best_path.<ref refid="cpp/container/vector/end" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">end</ref>());</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>best_path;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085" refid="dd/dca/namespacetesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>class<sp/>to<sp/>convert<sp/>string<sp/>into<sp/>ids<sp/>with<sp/>deduplication.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088" refid="d3/d40/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_internal_strings" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/d40/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_internal_strings" kindref="compound">InternalStrings</ref><sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1090" refid="d3/d40/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_internal_strings_1a7fd8bd184315663dce4b7856a0fb8569" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d3/d40/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_internal_strings_1a7fd8bd184315663dce4b7856a0fb8569" kindref="member">GetId</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>IdMap::iterator<sp/>it<sp/>=<sp/>ids_.find(str);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>ids_.end())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>ids_.size();</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ids_[str]<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1098" refid="d3/d40/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_internal_strings_1a66141cfe965c318208c937c29802b7e3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="cpp/container/map" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::map&lt;std::string, size_t&gt;</ref><sp/><ref refid="d3/d40/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_internal_strings_1a66141cfe965c318208c937c29802b7e3" kindref="member">IdMap</ref>;</highlight></codeline>
<codeline lineno="1099" refid="d3/d40/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_internal_strings_1a5db7d2cddb2d6d97678e45916314318c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/map" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">IdMap</ref><sp/><ref refid="d3/d40/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_internal_strings_1a5db7d2cddb2d6d97678e45916314318c" kindref="member">ids_</ref>;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104" refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a96065c74c4a4787a51ad9e58f13a4068" refkind="member"><highlight class="normal"><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;EditType&gt;</ref><sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a5b69c8f2b38f31e87dabf300d7e46903" kindref="member">CalculateOptimalEdits</ref>(</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref>&amp;<sp/>left,</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref>&amp;<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;size_t&gt;</ref><sp/>left_ids,<sp/>right_ids;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>InternalStrings<sp/>intern_table;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>left.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>left_ids.<ref refid="cpp/container/vector/push_back" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">push_back</ref>(intern_table.GetId(left[i]));</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>right.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>right_ids.<ref refid="cpp/container/vector/push_back" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">push_back</ref>(intern_table.GetId(right[i]));</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a5b69c8f2b38f31e87dabf300d7e46903" kindref="member">CalculateOptimalEdits</ref>(left_ids,<sp/>right_ids);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>class<sp/>that<sp/>holds<sp/>the<sp/>state<sp/>for<sp/>one<sp/>hunk<sp/>and<sp/>prints<sp/>it<sp/>out<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>reorders<sp/>adds/removes<sp/>when<sp/>possible<sp/>to<sp/>group<sp/>all<sp/>removes<sp/>before<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>adds.<sp/>It<sp/>also<sp/>adds<sp/>the<sp/>hunk<sp/>header<sp/>before<sp/>printint<sp/>into<sp/>the<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126" refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk" kindref="compound">Hunk</ref><sp/>{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1128" refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1acfbdaa7dc1dbea93c98c12b95e4ab49b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1acfbdaa7dc1dbea93c98c12b95e4ab49b" kindref="member">Hunk</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>left_start,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>right_start)</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>left_start_(left_start),</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right_start_(right_start),</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adds_(),</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removes_(),</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common_()<sp/>{}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135" refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1aa9c8517b93ac94a1ba9f9a2469a70a38" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1aa9c8517b93ac94a1ba9f9a2469a70a38" kindref="member">PushLine</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>edit,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>line)<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(edit)<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++common_;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlushEdits();</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hunk_.push_back(<ref refid="cpp/utility/pair/make_pair" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::make_pair</ref>(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>line));</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++removes_;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hunk_removes_.push_back(<ref refid="cpp/utility/pair/make_pair" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::make_pair</ref>(</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">,<sp/>line));</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++adds_;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hunk_adds_.push_back(<ref refid="cpp/utility/pair/make_pair" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::make_pair</ref>(</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">,<sp/>line));</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153" refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1a30369fba8673b7c27403db64b874c9af" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1a30369fba8673b7c27403db64b874c9af" kindref="member">PrintTo</ref>(<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintHeader(os);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>FlushEdits();</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="cpp/container/list" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::list</ref>&lt;<ref refid="cpp/utility/pair" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::pair&lt;char, const char*&gt;</ref><sp/>&gt;::const_iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hunk_.begin();</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>hunk_.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>it-&gt;first<sp/>&lt;&lt;<sp/>it-&gt;second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163" refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1aef7a333b434b6bb6c1a443cb8aeba1e5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1aef7a333b434b6bb6c1a443cb8aeba1e5" kindref="member">has_edits</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>adds_<sp/>||<sp/>removes_;<sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1166" refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1ae66fbc4fc3f2f8ecf4a0374a53c55728" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1ae66fbc4fc3f2f8ecf4a0374a53c55728" kindref="member">FlushEdits</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>hunk_.splice(hunk_.end(),<sp/>hunk_removes_);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>hunk_.splice(hunk_.end(),<sp/>hunk_adds_);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>a<sp/>unified<sp/>diff<sp/>header<sp/>for<sp/>one<sp/>hunk.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>format<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>&quot;@@<sp/>-&lt;left_start&gt;,&lt;left_length&gt;<sp/>+&lt;right_start&gt;,&lt;right_length&gt;<sp/>@@&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>the<sp/>left/right<sp/>parts<sp/>are<sp/>ommitted<sp/>if<sp/>unnecessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175" refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1ad011361605fc1302201883676e2d6c91" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1ad011361605fc1302201883676e2d6c91" kindref="member">PrintHeader</ref>(<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>ss)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>*ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;@@<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(removes_)<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>left_start_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(removes_<sp/>+<sp/>common_);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(removes_<sp/>&amp;&amp;<sp/>adds_)<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adds_)<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>right_start_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(adds_<sp/>+<sp/>common_);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>*ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>@@\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189" refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1abe4bdaaa3c76256f548fc9f57c104785" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1abe4bdaaa3c76256f548fc9f57c104785" kindref="member">left_start_</ref>,<sp/>right_start_;</highlight></codeline>
<codeline lineno="1190" refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1af0e7bc81daf2ab6f18398612a935ffc3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1af0e7bc81daf2ab6f18398612a935ffc3" kindref="member">adds_</ref>,<sp/>removes_,<sp/>common_;</highlight></codeline>
<codeline lineno="1191" refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1a5fa71e931e3016120aa198110172d943" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/list" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::list&lt;std::pair&lt;char, const char*&gt;</ref><sp/>&gt;<sp/><ref refid="d1/d9e/classtesting_1_1internal_1_1edit__distance_1_1anonymous__namespace_02gtest_8cc_03_1_1_hunk_1a5fa71e931e3016120aa198110172d943" kindref="member">hunk_</ref>,<sp/>hunk_adds_,<sp/>hunk_removes_;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>list<sp/>of<sp/>diff<sp/>hunks<sp/>in<sp/>Unified<sp/>diff<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>hunk<sp/>has<sp/>a<sp/>header<sp/>generated<sp/>by<sp/>PrintHeader<sp/>above<sp/>plus<sp/>a<sp/>body<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lines<sp/>prefixed<sp/>with<sp/>&apos;<sp/>&apos;<sp/>for<sp/>no<sp/>change,<sp/>&apos;-&apos;<sp/>for<sp/>deletion<sp/>and<sp/>&apos;+&apos;<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>addition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;context&apos;<sp/>represents<sp/>the<sp/>desired<sp/>unchanged<sp/>prefix/suffix<sp/>around<sp/>the<sp/>diff.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>two<sp/>hunks<sp/>are<sp/>close<sp/>enough<sp/>that<sp/>their<sp/>contexts<sp/>overlap,<sp/>then<sp/>they<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>joined<sp/>into<sp/>one<sp/>hunk.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203" refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1aef01558937d42283a238a7b55baddd11" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1aef01558937d42283a238a7b55baddd11" kindref="member">CreateUnifiedDiff</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref>&amp;<sp/>left,</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref>&amp;<sp/>right,</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;EditType&gt;</ref><sp/>edits<sp/>=<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1a5b69c8f2b38f31e87dabf300d7e46903" kindref="member">CalculateOptimalEdits</ref>(left,<sp/>right);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l_i<sp/>=<sp/>0,<sp/>r_i<sp/>=<sp/>0,<sp/>edit_i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_stringstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::stringstream</ref><sp/>ss;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(edit_i<sp/>&lt;<sp/>edits.<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>first<sp/>edit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(edit_i<sp/>&lt;<sp/>edits.<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>()<sp/>&amp;&amp;<sp/>edits[edit_i]<sp/>==<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba01e3df29bad591c9c7e256a5090662b8" kindref="member">kMatch</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++l_i;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++r_i;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++edit_i;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>first<sp/>line<sp/>to<sp/>include<sp/>in<sp/>the<sp/>hunk.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>prefix_context<sp/>=<sp/><ref refid="cpp/algorithm/min" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::min</ref>(l_i,<sp/>context);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>Hunk<sp/>hunk(l_i<sp/>-<sp/>prefix_context<sp/>+<sp/>1,<sp/>r_i<sp/>-<sp/>prefix_context<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>prefix_context;<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hunk.PushLine(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>left[l_i<sp/>-<sp/>i].c_str());</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>the<sp/>edits<sp/>until<sp/>we<sp/>found<sp/>enough<sp/>suffix<sp/>for<sp/>the<sp/>hunk<sp/>or<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>over.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_suffix<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>edit_i<sp/>&lt;<sp/>edits.<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>();<sp/>++edit_i)<sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_suffix<sp/>&gt;=<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continue<sp/>only<sp/>if<sp/>the<sp/>next<sp/>hunk<sp/>is<sp/>very<sp/>close.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;EditType&gt;::const_iterator</ref><sp/>it<sp/>=<sp/>edits.<ref refid="cpp/container/vector/begin" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">begin</ref>()<sp/>+<sp/>edit_i;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>edits.<ref refid="cpp/container/vector/end" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">end</ref>()<sp/>&amp;&amp;<sp/>*it<sp/>==<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba01e3df29bad591c9c7e256a5090662b8" kindref="member">kMatch</ref>)<sp/>++it;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>edits.<ref refid="cpp/container/vector/end" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">end</ref>()<sp/>||<sp/>(it<sp/>-<sp/>edits.<ref refid="cpp/container/vector/begin" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">begin</ref>())<sp/>-<sp/>edit_i<sp/>&gt;=<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>no<sp/>next<sp/>edit<sp/>or<sp/>it<sp/>is<sp/>too<sp/>far<sp/>away.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feb" kindref="member">EditType</ref><sp/>edit<sp/>=<sp/>edits[edit_i];</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>count<sp/>when<sp/>a<sp/>non<sp/>match<sp/>is<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n_suffix<sp/>=<sp/>edit<sp/>==<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba01e3df29bad591c9c7e256a5090662b8" kindref="member">kMatch</ref><sp/>?<sp/>n_suffix<sp/>+<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edit<sp/>==<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba01e3df29bad591c9c7e256a5090662b8" kindref="member">kMatch</ref><sp/>||<sp/>edit<sp/>==<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba7b8140e312f42dd2073bae2374136137" kindref="member">kRemove</ref><sp/>||<sp/>edit<sp/>==<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba9219852c065abae302e91604e5d3594d" kindref="member">kReplace</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hunk.PushLine(edit<sp/>==<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba01e3df29bad591c9c7e256a5090662b8" kindref="member">kMatch</ref><sp/>?<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">,<sp/>left[l_i].c_str());</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edit<sp/>==<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba8d20f6cca2d49a8732f535cfe28812c8" kindref="member">kAdd</ref><sp/>||<sp/>edit<sp/>==<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba9219852c065abae302e91604e5d3594d" kindref="member">kReplace</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hunk.PushLine(</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">,<sp/>right[r_i].c_str());</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advance<sp/>indices,<sp/>depending<sp/>on<sp/>edit<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l_i<sp/>+=<sp/>edit<sp/>!=<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba8d20f6cca2d49a8732f535cfe28812c8" kindref="member">kAdd</ref>;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r_i<sp/>+=<sp/>edit<sp/>!=<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1ad67c869ce85bd645cacb0ba89b993feba7b8140e312f42dd2073bae2374136137" kindref="member">kRemove</ref>;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hunk.has_edits())<sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>done.<sp/>We<sp/>don&apos;t<sp/>want<sp/>this<sp/>hunk.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>hunk.PrintTo(&amp;ss);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.<ref refid="cpp/io/basic_stringstream/str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">str</ref>();</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>edit_distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267" refid="de/daf/namespacetesting_1_1internal_1_1anonymous__namespace_02gtest_8cc_03" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>values<sp/>received<sp/>in<sp/>EqFailure()<sp/>are<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>escaped.<sp/>Split<sp/>them<sp/>on<sp/>escaped<sp/>&apos;\n&apos;<sp/>boundaries.<sp/>Leave<sp/>all<sp/>other<sp/>escaped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>characters<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272" refid="de/daf/namespacetesting_1_1internal_1_1anonymous__namespace_02gtest_8cc_03_1a87e3d38ad422ce7018c6fcd4d1f3a938" refkind="member"><highlight class="normal"><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref><sp/><ref refid="de/daf/namespacetesting_1_1internal_1_1anonymous__namespace_02gtest_8cc_03_1a87e3d38ad422ce7018c6fcd4d1f3a938" kindref="member">SplitEscapedString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref><sp/>lines;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0,<sp/>end<sp/>=<sp/>str.<ref refid="cpp/string/basic_string/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>();</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>str[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>str[end<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>escaped<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>start;<sp/>i<sp/>+<sp/>1<sp/>&lt;<sp/>end;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(escaped)<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>escaped<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines.<ref refid="cpp/container/vector/push_back" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">push_back</ref>(str.<ref refid="cpp/string/basic_string/substr" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">substr</ref>(start,<sp/>i<sp/>-<sp/>start<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>escaped<sp/>=<sp/>str[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>lines.<ref refid="cpp/container/vector/push_back" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">push_back</ref>(str.<ref refid="cpp/string/basic_string/substr" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">substr</ref>(start,<sp/>end<sp/>-<sp/>start));</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lines;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructs<sp/>and<sp/>returns<sp/>the<sp/>message<sp/>for<sp/>an<sp/>equality<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(e.g.<sp/>ASSERT_EQ,<sp/>EXPECT_STREQ,<sp/>etc)<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>four<sp/>parameters<sp/>are<sp/>the<sp/>expressions<sp/>used<sp/>in<sp/>the<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>their<sp/>values,<sp/>as<sp/>strings.<sp/><sp/>For<sp/>example,<sp/>for<sp/>ASSERT_EQ(foo,<sp/>bar)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>foo<sp/>is<sp/>5<sp/>and<sp/>bar<sp/>is<sp/>6,<sp/>we<sp/>have:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>lhs_expression:<sp/>&quot;foo&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>rhs_expression:<sp/>&quot;bar&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>lhs_value:<sp/><sp/><sp/><sp/><sp/><sp/>&quot;5&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>rhs_value:<sp/><sp/><sp/><sp/><sp/><sp/>&quot;6&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>ignoring_case<sp/>parameter<sp/>is<sp/>true<sp/>iff<sp/>the<sp/>assertion<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*_STRCASEEQ*.<sp/><sp/>When<sp/>it&apos;s<sp/>true,<sp/>the<sp/>string<sp/>&quot;Ignoring<sp/>case&quot;<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>inserted<sp/>into<sp/>the<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312" refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" kindref="member">EqFailure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs_expression,</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>lhs_value,</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>rhs_value,</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignoring_case)<sp/>{</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref><sp/>msg;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>lhs_expression;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs_value<sp/>!=<sp/>lhs_expression)<sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>lhs_value;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nTo<sp/>be<sp/>equal<sp/>to:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rhs_expression;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rhs_value<sp/>!=<sp/>rhs_expression)<sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/>Which<sp/>is:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rhs_value;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ignoring_case)<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nIgnoring<sp/>case&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lhs_value.<ref refid="cpp/string/basic_string/empty" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">empty</ref>()<sp/>&amp;&amp;<sp/>!rhs_value.<ref refid="cpp/string/basic_string/empty" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">empty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref><sp/>lhs_lines<sp/>=</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/daf/namespacetesting_1_1internal_1_1anonymous__namespace_02gtest_8cc_03_1a87e3d38ad422ce7018c6fcd4d1f3a938" kindref="member">SplitEscapedString</ref>(lhs_value);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref><sp/>rhs_lines<sp/>=</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/daf/namespacetesting_1_1internal_1_1anonymous__namespace_02gtest_8cc_03_1a87e3d38ad422ce7018c6fcd4d1f3a938" kindref="member">SplitEscapedString</ref>(rhs_value);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs_lines.<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>()<sp/>&gt;<sp/>1<sp/>||<sp/>rhs_lines.<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nWith<sp/>diff:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="de/dce/namespacetesting_1_1internal_1_1edit__distance_1aef01558937d42283a238a7b55baddd11" kindref="member">edit_distance::CreateUnifiedDiff</ref>(lhs_lines,<sp/>rhs_lines);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" kindref="member">AssertionFailure</ref>()<sp/>&lt;&lt;<sp/>msg;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>failure<sp/>message<sp/>for<sp/>Boolean<sp/>assertions<sp/>such<sp/>as<sp/>EXPECT_TRUE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346" refid="d0/da7/namespacetesting_1_1internal_1ae1695f7d1559c009775af3911bd8370b" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae1695f7d1559c009775af3911bd8370b" kindref="member">GetBoolAssertionFailureMessage</ref>(</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref>&amp;<sp/>assertion_result,</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expression_text,</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_predicate_value,</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_predicate_value)<sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_message<sp/>=<sp/>assertion_result.<ref refid="d5/dec/classtesting_1_1_assertion_result_1af8f4390dff5acafd3c7e50f76c55687a" kindref="member">message</ref>();</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref><sp/>msg;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expression_text</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>Actual:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>actual_predicate_value;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_message[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>actual_message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nExpected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expected_predicate_value;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg.<ref refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" kindref="member">GetString</ref>();</highlight></codeline>
<codeline lineno="1359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>implementing<sp/>ASSERT_NEAR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362" refid="d0/da7/namespacetesting_1_1internal_1a5059777ec92cd98da4c4159dee8201c2" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a5059777ec92cd98da4c4159dee8201c2" kindref="member">DoubleNearPredFormat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr1,</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr2,</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>abs_error_expr,</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val1,</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val2,</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>abs_error)<sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diff<sp/>=<sp/>fabs(val1<sp/>-<sp/>val2);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff<sp/>&lt;=<sp/>abs_error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(wan):<sp/>do<sp/>not<sp/>print<sp/>the<sp/>value<sp/>of<sp/>an<sp/>expression<sp/>if<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>a<sp/>literal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" kindref="member">AssertionFailure</ref>()</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>difference<sp/>between<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expr1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expr2</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>diff<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>which<sp/>exceeds<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>abs_error_expr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>where\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>expr1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>evaluates<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>val1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>expr2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>evaluates<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>val2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>and\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>abs_error_expr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>evaluates<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>abs_error<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>template<sp/>for<sp/>implementing<sp/>FloatLE()<sp/>and<sp/>DoubleLE().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RawType&gt;</highlight></codeline>
<codeline lineno="1384" refid="d0/da7/namespacetesting_1_1internal_1a17b52b6b1f81f6dcad5cc4d12e5173a6" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a17b52b6b1f81f6dcad5cc4d12e5173a6" kindref="member">FloatingPointLE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr1,</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr2,</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RawType<sp/>val1,</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RawType<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>success<sp/>if<sp/>val1<sp/>is<sp/>less<sp/>than<sp/>val2,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val1<sp/>&lt;<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>if<sp/>val1<sp/>is<sp/>almost<sp/>equal<sp/>to<sp/>val2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point" kindref="compound">FloatingPoint&lt;RawType&gt;</ref><sp/>lhs(val1),<sp/>rhs(val2);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.AlmostEquals(rhs))<sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>above<sp/>two<sp/>checks<sp/>will<sp/>both<sp/>fail<sp/>if<sp/>either<sp/>val1<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>val2<sp/>is<sp/>NaN,<sp/>as<sp/>the<sp/>IEEE<sp/>floating-point<sp/>standard<sp/>requires<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>predicate<sp/>involving<sp/>a<sp/>NaN<sp/>must<sp/>return<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_stringstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::stringstream</ref><sp/>val1_ss;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/>val1_ss<sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/setprecision" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::setprecision</ref>(<ref refid="cpp/types/numeric_limits" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::numeric_limits&lt;RawType&gt;::digits10</ref><sp/>+<sp/>2)</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>val1;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_stringstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::stringstream</ref><sp/>val2_ss;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>val2_ss<sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/setprecision" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::setprecision</ref>(<ref refid="cpp/types/numeric_limits" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::numeric_limits&lt;RawType&gt;::digits10</ref><sp/>+<sp/>2)</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>val2;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" kindref="member">AssertionFailure</ref>()</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expr1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>&lt;=<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expr2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a9743f1da2e8f7a4a8178ec9595a56112" kindref="member">StringStreamToString</ref>(&amp;val1_ss)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>vs<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a9743f1da2e8f7a4a8178ec9595a56112" kindref="member">StringStreamToString</ref>(&amp;val2_ss);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Asserts<sp/>that<sp/>val1<sp/>is<sp/>less<sp/>than,<sp/>or<sp/>almost<sp/>equal<sp/>to,<sp/>val2.<sp/><sp/>Fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise.<sp/><sp/>In<sp/>particular,<sp/>it<sp/>fails<sp/>if<sp/>either<sp/>val1<sp/>or<sp/>val2<sp/>is<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421" refid="d0/d75/namespacetesting_1aef005b3a2875c4878ba5891db34f7734" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1aef005b3a2875c4878ba5891db34f7734" kindref="member">FloatLE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr2,</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingPointLE&lt;float&gt;(expr1,<sp/>expr2,<sp/>val1,<sp/>val2);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Asserts<sp/>that<sp/>val1<sp/>is<sp/>less<sp/>than,<sp/>or<sp/>almost<sp/>equal<sp/>to,<sp/>val2.<sp/><sp/>Fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise.<sp/><sp/>In<sp/>particular,<sp/>it<sp/>fails<sp/>if<sp/>either<sp/>val1<sp/>or<sp/>val2<sp/>is<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428" refid="d0/d75/namespacetesting_1afc633c2faafd31f51fe686389a5a2de7" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1afc633c2faafd31f51fe686389a5a2de7" kindref="member">DoubleLE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr2,</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::FloatingPointLE&lt;double&gt;(expr1,<sp/>expr2,<sp/>val1,<sp/>val2);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_EQ<sp/>with<sp/>int<sp/>or<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437" refid="d0/da7/namespacetesting_1_1internal_1a3c265df9280510bd1d78bfd155113393" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3c265df9280510bd1d78bfd155113393" kindref="member">CmpHelperEQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs_expression,</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae8f73370150f905887720532fa9f572e" kindref="member">BiggestInt</ref><sp/>lhs,</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae8f73370150f905887720532fa9f572e" kindref="member">BiggestInt</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs<sp/>==<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" kindref="member">EqFailure</ref>(lhs_expression,</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a91ab078f10adc669f09b7f604975c518" kindref="member">FormatForComparisonFailureMessage</ref>(lhs,<sp/>rhs),</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a91ab078f10adc669f09b7f604975c518" kindref="member">FormatForComparisonFailureMessage</ref>(rhs,<sp/>lhs),</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>macro<sp/>for<sp/>implementing<sp/>the<sp/>helper<sp/>functions<sp/>needed<sp/>to<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ASSERT_??<sp/>and<sp/>EXPECT_??<sp/>with<sp/>integer<sp/>or<sp/>enum<sp/>arguments.<sp/><sp/>It<sp/>is<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="comment">//<sp/>just<sp/>to<sp/>avoid<sp/>copy-and-paste<sp/>of<sp/>similar<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455" refid="df/d5b/gtest_8cc_1a4a5b6fbde5dd05e05dd6846ac5e5c18e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_IMPL_CMP_HELPER_(op_name,<sp/>op)\</highlight></codeline>
<codeline lineno="1456"><highlight class="preprocessor">AssertionResult<sp/>CmpHelper##op_name(const<sp/>char*<sp/>expr1,<sp/>const<sp/>char*<sp/>expr2,<sp/>\</highlight></codeline>
<codeline lineno="1457"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BiggestInt<sp/>val1,<sp/>BiggestInt<sp/>val2)<sp/>{\</highlight></codeline>
<codeline lineno="1458"><highlight class="preprocessor"><sp/><sp/>if<sp/>(val1<sp/>op<sp/>val2)<sp/>{\</highlight></codeline>
<codeline lineno="1459"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>AssertionSuccess();\</highlight></codeline>
<codeline lineno="1460"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="1461"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>AssertionFailure()<sp/>\</highlight></codeline>
<codeline lineno="1462"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;Expected:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expr1<sp/>&lt;&lt;<sp/>&quot;)<sp/>&quot;<sp/>#op<sp/>&quot;<sp/>(&quot;<sp/>&lt;&lt;<sp/>expr2\</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;),<sp/>actual:<sp/>&quot;<sp/>&lt;&lt;<sp/>FormatForComparisonFailureMessage(val1,<sp/>val2)\</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>vs<sp/>&quot;<sp/>&lt;&lt;<sp/>FormatForComparisonFailureMessage(val2,<sp/>val1);\</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_NE<sp/>with<sp/>int<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enum<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470" refid="d0/da7/namespacetesting_1_1internal_1aace9bb29e075d3cc3c4e689de03f0e71" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1aace9bb29e075d3cc3c4e689de03f0e71" kindref="member">GTEST_IMPL_CMP_HELPER_</ref>(NE,<sp/>!=)</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_LE<sp/>with<sp/>int<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enum<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1aace9bb29e075d3cc3c4e689de03f0e71" kindref="member">GTEST_IMPL_CMP_HELPER_</ref>(LE,<sp/>&lt;=)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_LT<sp/>with<sp/>int<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enum<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1aace9bb29e075d3cc3c4e689de03f0e71" kindref="member">GTEST_IMPL_CMP_HELPER_</ref>(LT,<sp/>&lt;<sp/>)</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_GE<sp/>with<sp/>int<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enum<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1aace9bb29e075d3cc3c4e689de03f0e71" kindref="member">GTEST_IMPL_CMP_HELPER_</ref>(GE,<sp/>&gt;=)</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_GT<sp/>with<sp/>int<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enum<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1aace9bb29e075d3cc3c4e689de03f0e71" kindref="member">GTEST_IMPL_CMP_HELPER_</ref>(GT,<sp/>&gt;<sp/>)</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_IMPL_CMP_HELPER_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_STREQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a72d1706a1f8e03ef759f9c80712b0072" kindref="member">CmpHelperSTREQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs_expression,</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" kindref="member">String::CStringEquals</ref>(lhs,<sp/>rhs))<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" kindref="member">EqFailure</ref>(lhs_expression,</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" kindref="member">PrintToString</ref>(lhs),</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" kindref="member">PrintToString</ref>(rhs),</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_STRCASEEQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a00c3d012df6173622ef558a131bfb95d" kindref="member">CmpHelperSTRCASEEQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs_expression,</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a74c3f7f7cf90cc53c995dde20883d922" kindref="member">String::CaseInsensitiveCStringEquals</ref>(lhs,<sp/>rhs))<sp/>{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" kindref="member">EqFailure</ref>(lhs_expression,</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" kindref="member">PrintToString</ref>(lhs),</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" kindref="member">PrintToString</ref>(rhs),</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_STRNE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal">AssertionResult<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a675759a40d2867bc51981f7594f6beca" kindref="member">CmpHelperSTRNE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1_expression,</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2_expression,</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" kindref="member">String::CStringEquals</ref>(s1,<sp/>s2))<sp/>{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" kindref="member">AssertionFailure</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s1_expression<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>!=<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>s2_expression<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>actual:<sp/>\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>s1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>vs<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_STRCASENE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal">AssertionResult<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a5f74b933606b0a742cd5a8ad2d7087e0" kindref="member">CmpHelperSTRCASENE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1_expression,</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2_expression,</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a74c3f7f7cf90cc53c995dde20883d922" kindref="member">String::CaseInsensitiveCStringEquals</ref>(s1,<sp/>s2))<sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" kindref="member">AssertionFailure</ref>()</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s1_expression<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>!=<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>s2_expression<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>(ignoring<sp/>case),<sp/>actual:<sp/>\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>s1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>vs<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549" refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>functions<sp/>for<sp/>implementing<sp/>IsSubString()<sp/>and<sp/>IsNotSubstring().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>group<sp/>of<sp/>overloaded<sp/>functions<sp/>return<sp/>true<sp/>iff<sp/>needle<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>substring<sp/>of<sp/>haystack.<sp/><sp/>NULL<sp/>is<sp/>considered<sp/>a<sp/>substring<sp/>of<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557" refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1aa8f2626915e70ad4d628f8fb247e0b6b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a529b2b4b07a1d3085fc3ee11f65e6b0c" kindref="member">IsSubstringPred</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needle<sp/>==<sp/>NULL<sp/>||<sp/>haystack<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>needle<sp/>==<sp/>haystack;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strstr(haystack,<sp/>needle)<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight></codeline>
<codeline lineno="1564" refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1ab0b38787cae43f83ad170e8d3260f425" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a529b2b4b07a1d3085fc3ee11f65e6b0c" kindref="member">IsSubstringPred</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needle<sp/>==<sp/>NULL<sp/>||<sp/>haystack<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>needle<sp/>==<sp/>haystack;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wcsstr(haystack,<sp/>needle)<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StringType<sp/>here<sp/>can<sp/>be<sp/>either<sp/>::std::string<sp/>or<sp/>::std::wstring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StringType&gt;</highlight></codeline>
<codeline lineno="1573" refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a529b2b4b07a1d3085fc3ee11f65e6b0c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a529b2b4b07a1d3085fc3ee11f65e6b0c" kindref="member">IsSubstringPred</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>needle,</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>haystack.find(needle)<sp/>!=<sp/>StringType::npos;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>implements<sp/>either<sp/>IsSubstring()<sp/>or<sp/>IsNotSubstring(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>depending<sp/>on<sp/>the<sp/>value<sp/>of<sp/>the<sp/>expected_to_be_substring<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StringType<sp/>here<sp/>can<sp/>be<sp/>const<sp/>char*,<sp/>const<sp/>wchar_t*,<sp/>::std::string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>::std::wstring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StringType&gt;</highlight></codeline>
<codeline lineno="1583" refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" kindref="member">IsSubstringImpl</ref>(</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expected_to_be_substring,</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringType&amp;<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a529b2b4b07a1d3085fc3ee11f65e6b0c" kindref="member">IsSubstringPred</ref>(needle,<sp/>haystack)<sp/>==<sp/>expected_to_be_substring)</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_wide_string<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(needle[0])<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>begin_string_quote<sp/>=<sp/>is_wide_string<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;L\&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" kindref="member">AssertionFailure</ref>()</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>needle_expr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>begin_string_quote<sp/>&lt;&lt;<sp/>needle<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(expected_to_be_substring<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;a<sp/>substring<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>haystack_expr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Which<sp/>is:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>begin_string_quote<sp/>&lt;&lt;<sp/>haystack<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSubstring()<sp/>and<sp/>IsNotSubstring()<sp/>check<sp/>whether<sp/>needle<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>substring<sp/>of<sp/>haystack<sp/>(NULL<sp/>is<sp/>considered<sp/>a<sp/>substring<sp/>of<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only),<sp/>and<sp/>return<sp/>an<sp/>appropriate<sp/>error<sp/>message<sp/>when<sp/>they<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606" refid="d0/d75/namespacetesting_1af769ba85b7dc1c49d49594f195b442cf" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1af769ba85b7dc1c49d49594f195b442cf" kindref="member">IsSubstring</ref>(</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" kindref="member">IsSubstringImpl</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>needle_expr,<sp/>haystack_expr,<sp/>needle,<sp/>haystack);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612" refid="d0/d75/namespacetesting_1a8e18e316d8175f0f5928fca6afe122e0" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1af769ba85b7dc1c49d49594f195b442cf" kindref="member">IsSubstring</ref>(</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" kindref="member">IsSubstringImpl</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>needle_expr,<sp/>haystack_expr,<sp/>needle,<sp/>haystack);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618" refid="d0/d75/namespacetesting_1a4c722362b584ab9565021fd68f2d0003" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1a4c722362b584ab9565021fd68f2d0003" kindref="member">IsNotSubstring</ref>(</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" kindref="member">IsSubstringImpl</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>needle_expr,<sp/>haystack_expr,<sp/>needle,<sp/>haystack);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624" refid="d0/d75/namespacetesting_1a5aa234189c2ad81a9536db01de639003" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1a4c722362b584ab9565021fd68f2d0003" kindref="member">IsNotSubstring</ref>(</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" kindref="member">IsSubstringImpl</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>needle_expr,<sp/>haystack_expr,<sp/>needle,<sp/>haystack);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight></codeline>
<codeline lineno="1630" refid="d0/d75/namespacetesting_1a3963e5134ee631c3e0da79c4f168ae3a" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1af769ba85b7dc1c49d49594f195b442cf" kindref="member">IsSubstring</ref>(</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">const ::std::string</ref>&amp;<sp/>needle,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">const ::std::string</ref>&amp;<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" kindref="member">IsSubstringImpl</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>needle_expr,<sp/>haystack_expr,<sp/>needle,<sp/>haystack);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636" refid="d0/d75/namespacetesting_1a44cfeea3cff1ac9e2082efd5ab7b9f06" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1a4c722362b584ab9565021fd68f2d0003" kindref="member">IsNotSubstring</ref>(</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">const ::std::string</ref>&amp;<sp/>needle,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">const ::std::string</ref>&amp;<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" kindref="member">IsSubstringImpl</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>needle_expr,<sp/>haystack_expr,<sp/>needle,<sp/>haystack);</highlight></codeline>
<codeline lineno="1640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal">AssertionResult<sp/><ref refid="d0/d75/namespacetesting_1af769ba85b7dc1c49d49594f195b442cf" kindref="member">IsSubstring</ref>(</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af3c58f657eee885281edda1923f192b0" kindref="member">const ::std::wstring</ref>&amp;<sp/>needle,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af3c58f657eee885281edda1923f192b0" kindref="member">const ::std::wstring</ref>&amp;<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" kindref="member">IsSubstringImpl</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>needle_expr,<sp/>haystack_expr,<sp/>needle,<sp/>haystack);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal">AssertionResult<sp/><ref refid="d0/d75/namespacetesting_1a4c722362b584ab9565021fd68f2d0003" kindref="member">IsNotSubstring</ref>(</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af3c58f657eee885281edda1923f192b0" kindref="member">const ::std::wstring</ref>&amp;<sp/>needle,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af3c58f657eee885281edda1923f192b0" kindref="member">const ::std::wstring</ref>&amp;<sp/>haystack)<sp/>{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" kindref="member">IsSubstringImpl</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>needle_expr,<sp/>haystack_expr,<sp/>needle,<sp/>haystack);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="cpp/io/manip/left" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">internal</ref><sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>IsHRESULT{SuccessFailure}<sp/>predicates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal">AssertionResult<sp/>HRESULTFailureHelper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected,</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hr)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>CE<sp/>doesn&apos;t<sp/>support<sp/>FormatMessage.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>error_text[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Looks<sp/>up<sp/>the<sp/>human-readable<sp/>system<sp/>message<sp/>for<sp/>the<sp/>HRESULT<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>since<sp/>we&apos;re<sp/>not<sp/>passing<sp/>any<sp/>params<sp/>to<sp/>FormatMessage,<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>want<sp/>inserts<sp/>expanded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>kFlags<sp/>=<sp/>FORMAT_MESSAGE_FROM_SYSTEM<sp/>|</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORMAT_MESSAGE_IGNORE_INSERTS;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>kBufSize<sp/>=<sp/>4096;</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>system&apos;s<sp/>human<sp/>readable<sp/>message<sp/>string<sp/>for<sp/>this<sp/>HRESULT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>error_text[kBufSize]<sp/>=<sp/>{<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/>DWORD<sp/>message_length<sp/>=<sp/>::FormatMessageA(kFlags,</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>source,<sp/>we&apos;re<sp/>asking<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hr,<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>line<sp/>width<sp/>restrictions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_text,<sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kBufSize,<sp/><sp/></highlight><highlight class="comment">//<sp/>buf<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>arguments<sp/>for<sp/>inserts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Trims<sp/>tailing<sp/>white<sp/>space<sp/>(FormatMessage<sp/>leaves<sp/>a<sp/>trailing<sp/>CR-LF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>message_length<sp/>&amp;&amp;<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af429e04f70f9c10f6aa76a5d1ccd389f" kindref="member">IsSpace</ref>(error_text[message_length<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--message_length)<sp/>{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>error_text[message_length<sp/>-<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>error_hex(</highlight><highlight class="stringliteral">&quot;0x&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1adf8a689d29be62ae924078e2bfe3447a" kindref="member">String::FormatHexInt</ref>(hr));</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><ref refid="d0/d75/namespacetesting_1a72c97910499dac9ec752ad77dccdda3c" kindref="member">return ::testing::AssertionFailure</ref>()</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expected<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error_hex<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error_text<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal">AssertionResult<sp/>IsHRESULTSuccess(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hr)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SUCCEEDED(hr))<sp/>{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HRESULTFailureHelper(expr,<sp/></highlight><highlight class="stringliteral">&quot;succeeds&quot;</highlight><highlight class="normal">,<sp/>hr);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal">AssertionResult<sp/>IsHRESULTFailure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hr)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FAILED(hr))<sp/>{</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HRESULTFailureHelper(expr,<sp/></highlight><highlight class="stringliteral">&quot;fails&quot;</highlight><highlight class="normal">,<sp/>hr);</highlight></codeline>
<codeline lineno="1716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utility<sp/>functions<sp/>for<sp/>encoding<sp/>Unicode<sp/>text<sp/>(wide<sp/>strings)<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UTF-8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>Unicode<sp/>code-point<sp/>can<sp/>have<sp/>upto<sp/>21<sp/>bits,<sp/>and<sp/>is<sp/>encoded<sp/>in<sp/>UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight><highlight class="comment">//<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Code-point<sp/>length<sp/><sp/><sp/>Encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>0<sp/>-<sp/><sp/>7<sp/>bits<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>8<sp/>-<sp/>11<sp/>bits<sp/><sp/><sp/><sp/><sp/><sp/><sp/>110xxxxx<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>12<sp/>-<sp/>16<sp/>bits<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1110xxxx<sp/>10xxxxxx<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>17<sp/>-<sp/>21<sp/>bits<sp/><sp/><sp/><sp/><sp/><sp/><sp/>11110xxx<sp/>10xxxxxx<sp/>10xxxxxx<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>code-point<sp/>a<sp/>one-byte<sp/>UTF-8<sp/>sequence<sp/>can<sp/>represent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733" refid="d0/da7/namespacetesting_1_1internal_1a842ee44b2d352fa626e9c0cc37486e34" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a842ee44b2d352fa626e9c0cc37486e34" kindref="member">kMaxCodePoint1</ref><sp/>=<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/><sp/>7)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>code-point<sp/>a<sp/>two-byte<sp/>UTF-8<sp/>sequence<sp/>can<sp/>represent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736" refid="d0/da7/namespacetesting_1_1internal_1af814f29030620a69d0c9e71c5d942990" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af814f29030620a69d0c9e71c5d942990" kindref="member">kMaxCodePoint2</ref><sp/>=<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>(5<sp/>+<sp/>6))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>code-point<sp/>a<sp/>three-byte<sp/>UTF-8<sp/>sequence<sp/>can<sp/>represent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739" refid="d0/da7/namespacetesting_1_1internal_1a47b4e6ab732c706ac60eb6be97424da9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a47b4e6ab732c706ac60eb6be97424da9" kindref="member">kMaxCodePoint3</ref><sp/>=<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>(4<sp/>+<sp/>2*6))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>code-point<sp/>a<sp/>four-byte<sp/>UTF-8<sp/>sequence<sp/>can<sp/>represent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742" refid="d0/da7/namespacetesting_1_1internal_1acea916a3388da016d05faccd72e51f18" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1acea916a3388da016d05faccd72e51f18" kindref="member">kMaxCodePoint4</ref><sp/>=<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>(3<sp/>+<sp/>3*6))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Chops<sp/>off<sp/>the<sp/>n<sp/>lowest<sp/>bits<sp/>from<sp/>a<sp/>bit<sp/>pattern.<sp/><sp/>Returns<sp/>the<sp/>n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lowest<sp/>bits.<sp/><sp/>As<sp/>a<sp/>side<sp/>effect,<sp/>the<sp/>original<sp/>bit<sp/>pattern<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shifted<sp/>to<sp/>the<sp/>right<sp/>by<sp/>n<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1747" refid="d0/da7/namespacetesting_1_1internal_1a2c54b453387aa8a18f2f3e09f10b5a7d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2c54b453387aa8a18f2f3e09f10b5a7d" kindref="member">ChopLowBits</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref>*<sp/>bits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a555cf768a531e2ff2acacfbf76d28a77" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/>low_bits<sp/>=<sp/>*bits<sp/>&amp;<sp/>((</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a555cf768a531e2ff2acacfbf76d28a77" kindref="member">n</ref>)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/>*bits<sp/>&gt;&gt;=<sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a555cf768a531e2ff2acacfbf76d28a77" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>low_bits;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>Unicode<sp/>code<sp/>point<sp/>to<sp/>a<sp/>narrow<sp/>string<sp/>in<sp/>UTF-8<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code_point<sp/>parameter<sp/>is<sp/>of<sp/>type<sp/>UInt32<sp/>because<sp/>wchar_t<sp/>may<sp/>not<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wide<sp/>enough<sp/>to<sp/>contain<sp/>a<sp/>code<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>code_point<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>Unicode<sp/>code<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(i.e.<sp/>outside<sp/>of<sp/>Unicode<sp/>range<sp/>U+0<sp/>to<sp/>U+10FFFF)<sp/>it<sp/>will<sp/>be<sp/>converted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>&quot;(Invalid<sp/>Unicode<sp/>0xXXXXXXXX)&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759" refid="d0/da7/namespacetesting_1_1internal_1a1259ed57f92a8d860f7fdd6d3c6ead26" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1259ed57f92a8d860f7fdd6d3c6ead26" kindref="member">CodePointToUtf8</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/>code_point)<sp/>{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_point<sp/>&gt;<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1acea916a3388da016d05faccd72e51f18" kindref="member">kMaxCodePoint4</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(Invalid<sp/>Unicode<sp/>0x&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1adf8a689d29be62ae924078e2bfe3447a" kindref="member">String::FormatHexInt</ref>(code_point)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[5];<sp/><sp/></highlight><highlight class="comment">//<sp/>Big<sp/>enough<sp/>for<sp/>the<sp/>largest<sp/>valid<sp/>code<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_point<sp/>&lt;=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a842ee44b2d352fa626e9c0cc37486e34" kindref="member">kMaxCodePoint1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/>str[1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/>str[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(code_point);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0xxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_point<sp/>&lt;=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af814f29030620a69d0c9e71c5d942990" kindref="member">kMaxCodePoint2</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>str[2]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/>str[1]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2c54b453387aa8a18f2f3e09f10b5a7d" kindref="member">ChopLowBits</ref>(&amp;code_point,<sp/>6));<sp/><sp/></highlight><highlight class="comment">//<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/>str[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xC0<sp/>|<sp/>code_point);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>110xxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_point<sp/>&lt;=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a47b4e6ab732c706ac60eb6be97424da9" kindref="member">kMaxCodePoint3</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/>str[3]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>str[2]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2c54b453387aa8a18f2f3e09f10b5a7d" kindref="member">ChopLowBits</ref>(&amp;code_point,<sp/>6));<sp/><sp/></highlight><highlight class="comment">//<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/>str[1]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2c54b453387aa8a18f2f3e09f10b5a7d" kindref="member">ChopLowBits</ref>(&amp;code_point,<sp/>6));<sp/><sp/></highlight><highlight class="comment">//<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/>str[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xE0<sp/>|<sp/>code_point);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1110xxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>code_point<sp/>&lt;=<sp/>kMaxCodePoint4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/>str[4]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>str[3]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2c54b453387aa8a18f2f3e09f10b5a7d" kindref="member">ChopLowBits</ref>(&amp;code_point,<sp/>6));<sp/><sp/></highlight><highlight class="comment">//<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>str[2]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2c54b453387aa8a18f2f3e09f10b5a7d" kindref="member">ChopLowBits</ref>(&amp;code_point,<sp/>6));<sp/><sp/></highlight><highlight class="comment">//<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>str[1]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x80<sp/>|<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2c54b453387aa8a18f2f3e09f10b5a7d" kindref="member">ChopLowBits</ref>(&amp;code_point,<sp/>6));<sp/><sp/></highlight><highlight class="comment">//<sp/>10xxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/>str[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xF0<sp/>|<sp/>code_point);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>11110xxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>two<sp/>functions<sp/>only<sp/>make<sp/>sense<sp/>if<sp/>the<sp/>the<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uses<sp/>UTF-16<sp/>for<sp/>wide<sp/>string<sp/>encoding.<sp/>All<sp/>supported<sp/>systems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>16<sp/>bit<sp/>wchar_t<sp/>(Windows,<sp/>Cygwin,<sp/>Symbian<sp/>OS)<sp/>do<sp/>use<sp/>UTF-16.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determines<sp/>if<sp/>the<sp/>arguments<sp/>constitute<sp/>UTF-16<sp/>surrogate<sp/>pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>thus<sp/>should<sp/>be<sp/>combined<sp/>into<sp/>a<sp/>single<sp/>Unicode<sp/>code<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>CreateCodePointFromUtf16SurrogatePair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1794" refid="d0/da7/namespacetesting_1_1internal_1a681895f8cc32286211be9889da107394" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a681895f8cc32286211be9889da107394" kindref="member">IsUtf16SurrogatePair</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>first,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>second)<sp/>{</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(wchar_t)<sp/>==<sp/>2<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(first<sp/>&amp;<sp/>0xFC00)<sp/>==<sp/>0xD800<sp/>&amp;&amp;<sp/>(second<sp/>&amp;<sp/>0xFC00)<sp/>==<sp/>0xDC00;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Unicode<sp/>code<sp/>point<sp/>from<sp/>UTF16<sp/>surrogate<sp/>pair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800" refid="d0/da7/namespacetesting_1_1internal_1ac8ef1bb10cd9e69de939789b759e6bc9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac8ef1bb10cd9e69de939789b759e6bc9" kindref="member">CreateCodePointFromUtf16SurrogatePair</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>first,</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>second)<sp/>{</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/>mask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>10)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">)<sp/>==<sp/>2)<sp/>?</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(((first<sp/>&amp;<sp/>mask)<sp/>&lt;&lt;<sp/>10)<sp/>|<sp/>(second<sp/>&amp;<sp/>mask))<sp/>+<sp/>0x10000<sp/>:</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>should<sp/>not<sp/>be<sp/>called<sp/>when<sp/>the<sp/>condition<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>false,<sp/>but<sp/>we<sp/>provide<sp/>a<sp/>sensible<sp/>default<sp/>in<sp/>case<sp/>it<sp/>is.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(first);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>wide<sp/>string<sp/>to<sp/>a<sp/>narrow<sp/>string<sp/>in<sp/>UTF-8<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>wide<sp/>string<sp/>is<sp/>assumed<sp/>to<sp/>have<sp/>the<sp/>following<sp/>encoding:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>UTF-16<sp/>if<sp/>sizeof(wchar_t)<sp/>==<sp/>2<sp/>(on<sp/>Windows,<sp/>Cygwin,<sp/>Symbian<sp/>OS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>UTF-32<sp/>if<sp/>sizeof(wchar_t)<sp/>==<sp/>4<sp/>(on<sp/>Linux)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parameter<sp/>str<sp/>points<sp/>to<sp/>a<sp/>null-terminated<sp/>wide<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parameter<sp/>num_chars<sp/>may<sp/>additionally<sp/>limit<sp/>the<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>wchar_t<sp/>characters<sp/>processed.<sp/>-1<sp/>is<sp/>used<sp/>when<sp/>the<sp/>entire<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>processed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>string<sp/>contains<sp/>code<sp/>points<sp/>that<sp/>are<sp/>not<sp/>valid<sp/>Unicode<sp/>code<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(i.e.<sp/>outside<sp/>of<sp/>Unicode<sp/>range<sp/>U+0<sp/>to<sp/>U+10FFFF)<sp/>they<sp/>will<sp/>be<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>&apos;(Invalid<sp/>Unicode<sp/>0xXXXXXXXX)&apos;.<sp/>If<sp/>the<sp/>string<sp/>is<sp/>in<sp/>UTF16<sp/>encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>contains<sp/>invalid<sp/>UTF-16<sp/>surrogate<sp/>pairs,<sp/>values<sp/>in<sp/>those<sp/>pairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>encoded<sp/>as<sp/>individual<sp/>Unicode<sp/>characters<sp/>from<sp/>Basic<sp/>Normal<sp/>Plane.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823" refid="d0/da7/namespacetesting_1_1internal_1a34ba5cda1864f3228954b3a5c8f6b07d" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a34ba5cda1864f3228954b3a5c8f6b07d" kindref="member">WideStringToUtf8</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_chars)<sp/>{</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_chars<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/>num_chars<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wcslen(str));</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_stringstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::stringstream</ref><sp/>stream;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_chars;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref><sp/>unicode_code_point;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str[i]<sp/>==<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>num_chars<sp/>&amp;&amp;<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a681895f8cc32286211be9889da107394" kindref="member">IsUtf16SurrogatePair</ref>(str[i],<sp/>str[i<sp/>+<sp/>1]))<sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unicode_code_point<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac8ef1bb10cd9e69de939789b759e6bc9" kindref="member">CreateCodePointFromUtf16SurrogatePair</ref>(str[i],</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unicode_code_point<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a29df88f24cbbe825f67bbf8e21bfde3f" kindref="member">UInt32</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(str[i]);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1259ed57f92a8d860f7fdd6d3c6ead26" kindref="member">CodePointToUtf8</ref>(unicode_code_point);</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a9743f1da2e8f7a4a8178ec9595a56112" kindref="member">StringStreamToString</ref>(&amp;stream);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>wide<sp/>C<sp/>string<sp/>to<sp/>an<sp/>std::string<sp/>using<sp/>the<sp/>UTF-8<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NULL<sp/>will<sp/>be<sp/>converted<sp/>to<sp/>&quot;(null)&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848" refid="d0/dde/classtesting_1_1internal_1_1_string_1ad3067374c710673e1466b61fc8a368e0" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ad3067374c710673e1466b61fc8a368e0" kindref="member">String::ShowWideCString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<sp/>wide_c_str)<sp/>{</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wide_c_str<sp/>==<sp/>NULL)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a34ba5cda1864f3228954b3a5c8f6b07d" kindref="member">internal::WideStringToUtf8</ref>(wide_c_str,<sp/>-1);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>wide<sp/>C<sp/>strings.<sp/><sp/>Returns<sp/>true<sp/>iff<sp/>they<sp/>have<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight><highlight class="comment">//<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>wcscmp(),<sp/>this<sp/>function<sp/>can<sp/>handle<sp/>NULL<sp/>argument(s).<sp/><sp/>A<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>string<sp/>is<sp/>considered<sp/>different<sp/>to<sp/>any<sp/>non-NULL<sp/>C<sp/>string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight><highlight class="comment">//<sp/>including<sp/>the<sp/>empty<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860" refid="d0/dde/classtesting_1_1internal_1_1_string_1a911db0cff27e6663b2ff74014c05de35" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a911db0cff27e6663b2ff74014c05de35" kindref="member">String::WideCStringEquals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs<sp/>==<sp/>NULL;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rhs<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wcscmp(lhs,<sp/>rhs)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>*_STREQ<sp/>on<sp/>wide<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869" refid="d0/da7/namespacetesting_1_1internal_1a72d1706a1f8e03ef759f9c80712b0072" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a72d1706a1f8e03ef759f9c80712b0072" kindref="member">CmpHelperSTREQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs_expression,</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>lhs,</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a911db0cff27e6663b2ff74014c05de35" kindref="member">String::WideCStringEquals</ref>(lhs,<sp/>rhs))<sp/>{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" kindref="member">EqFailure</ref>(lhs_expression,</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" kindref="member">PrintToString</ref>(lhs),</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" kindref="member">PrintToString</ref>(rhs),</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>*_STRNE<sp/>on<sp/>wide<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885" refid="d0/da7/namespacetesting_1_1internal_1a675759a40d2867bc51981f7594f6beca" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a675759a40d2867bc51981f7594f6beca" kindref="member">CmpHelperSTRNE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1_expression,</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2_expression,</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s1,</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a911db0cff27e6663b2ff74014c05de35" kindref="member">String::WideCStringEquals</ref>(s1,<sp/>s2))<sp/>{</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" kindref="member">AssertionFailure</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s1_expression<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>!=<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>s2_expression<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>actual:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" kindref="member">PrintToString</ref>(s1)</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>vs<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" kindref="member">PrintToString</ref>(s2);</highlight></codeline>
<codeline lineno="1897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>C<sp/>strings,<sp/>ignoring<sp/>case.<sp/><sp/>Returns<sp/>true<sp/>iff<sp/>they<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>strcasecmp(),<sp/>this<sp/>function<sp/>can<sp/>handle<sp/>NULL<sp/>argument(s).<sp/><sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NULL<sp/>C<sp/>string<sp/>is<sp/>considered<sp/>different<sp/>to<sp/>any<sp/>non-NULL<sp/>C<sp/>string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>including<sp/>the<sp/>empty<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905" refid="d0/dde/classtesting_1_1internal_1_1_string_1a74c3f7f7cf90cc53c995dde20883d922" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a74c3f7f7cf90cc53c995dde20883d922" kindref="member">String::CaseInsensitiveCStringEquals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs<sp/>==<sp/>NULL;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rhs<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a1ef2385a7f8e4c706054da35967e76bd" kindref="member">posix::StrCaseCmp</ref>(lhs,<sp/>rhs)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>wide<sp/>C<sp/>strings,<sp/>ignoring<sp/>case.<sp/><sp/>Returns<sp/>true<sp/>iff<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>the<sp/>same<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlike<sp/>wcscasecmp(),<sp/>this<sp/>function<sp/>can<sp/>handle<sp/>NULL<sp/>argument(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>NULL<sp/>C<sp/>string<sp/>is<sp/>considered<sp/>different<sp/>to<sp/>any<sp/>non-NULL<sp/>wide<sp/>C<sp/>string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>including<sp/>the<sp/>empty<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>The<sp/>implementations<sp/>on<sp/>different<sp/>platforms<sp/>slightly<sp/>differ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>windows,<sp/>this<sp/>method<sp/>uses<sp/>_wcsicmp<sp/>which<sp/>compares<sp/>according<sp/>to<sp/>LC_CTYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>environment<sp/>variable.<sp/>On<sp/>GNU<sp/>platform<sp/>this<sp/>method<sp/>uses<sp/>wcscasecmp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>compares<sp/>according<sp/>to<sp/>LC_CTYPE<sp/>category<sp/>of<sp/>the<sp/>current<sp/>locale.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>MacOS<sp/>X,<sp/>it<sp/>uses<sp/>towlower,<sp/>which<sp/>also<sp/>uses<sp/>LC_CTYPE<sp/>category<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>locale.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1925" refid="d0/dde/classtesting_1_1internal_1_1_string_1a7d0738cc0251b4109b35d0c388f99603" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a7d0738cc0251b4109b35d0c388f99603" kindref="member">String::CaseInsensitiveWideCStringEquals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>lhs,</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs<sp/>==<sp/>NULL;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rhs<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_wcsicmp(lhs,<sp/>rhs)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>GTEST_OS_LINUX<sp/>&amp;&amp;<sp/>!GTEST_OS_LINUX_ANDROID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wcscasecmp(lhs,<sp/>rhs)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Android,<sp/>Mac<sp/>OS<sp/>X<sp/>and<sp/>Cygwin<sp/>don&apos;t<sp/>define<sp/>wcscasecmp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Other<sp/>unknown<sp/>OSes<sp/>may<sp/>not<sp/>define<sp/>it<sp/>either.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/>wint_t<sp/>left,<sp/>right;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>towlower(*lhs++);</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>towlower(*rhs++);</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left<sp/>&amp;&amp;<sp/>left<sp/>==<sp/>right);</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left<sp/>==<sp/>right;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>OS<sp/>selector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>str<sp/>ends<sp/>with<sp/>the<sp/>given<sp/>suffix,<sp/>ignoring<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Any<sp/>string<sp/>is<sp/>considered<sp/>to<sp/>end<sp/>with<sp/>an<sp/>empty<sp/>suffix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1949" refid="d0/dde/classtesting_1_1internal_1_1_string_1adb81d60e125e3c75f4b009ce087aed58" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1adb81d60e125e3c75f4b009ce087aed58" kindref="member">String::EndsWithCaseInsensitive</ref>(</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>suffix)<sp/>{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_len<sp/>=<sp/>str.<ref refid="cpp/string/basic_string/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">length</ref>();</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>suffix_len<sp/>=<sp/>suffix.<ref refid="cpp/string/basic_string/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">length</ref>();</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(str_len<sp/>&gt;=<sp/>suffix_len)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a74c3f7f7cf90cc53c995dde20883d922" kindref="member">CaseInsensitiveCStringEquals</ref>(str.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>()<sp/>+<sp/>str_len<sp/>-<sp/>suffix_len,</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suffix.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="1956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>an<sp/>int<sp/>value<sp/>as<sp/>&quot;%02d&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1959" refid="d0/dde/classtesting_1_1internal_1_1_string_1a1c674bb56e2cc7dc32d026056d131bd2" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a1c674bb56e2cc7dc32d026056d131bd2" kindref="member">String::FormatIntWidth2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_stringstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::stringstream</ref><sp/>ss;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/setfill" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::setfill</ref>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/setw" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::setw</ref>(2)<sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.<ref refid="cpp/io/basic_stringstream/str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">str</ref>();</highlight></codeline>
<codeline lineno="1963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>an<sp/>int<sp/>value<sp/>as<sp/>&quot;%X&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1966" refid="d0/dde/classtesting_1_1internal_1_1_string_1adf8a689d29be62ae924078e2bfe3447a" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1adf8a689d29be62ae924078e2bfe3447a" kindref="member">String::FormatHexInt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_stringstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::stringstream</ref><sp/>ss;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/hex" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::hex</ref><sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/uppercase" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::uppercase</ref><sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.<ref refid="cpp/io/basic_stringstream/str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">str</ref>();</highlight></codeline>
<codeline lineno="1970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>byte<sp/>as<sp/>&quot;%02X&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1973" refid="d0/dde/classtesting_1_1internal_1_1_string_1a45841175db35bdac6428d81ac9f00fb4" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a45841175db35bdac6428d81ac9f00fb4" kindref="member">String::FormatByte</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_stringstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::stringstream</ref><sp/>ss;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/setfill" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::setfill</ref>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/setw" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::setw</ref>(2)<sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/hex" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::hex</ref><sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/uppercase" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::uppercase</ref></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.<ref refid="cpp/io/basic_stringstream/str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">str</ref>();</highlight></codeline>
<codeline lineno="1978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>buffer<sp/>in<sp/>a<sp/>stringstream<sp/>to<sp/>an<sp/>std::string,<sp/>converting<sp/>NUL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bytes<sp/>to<sp/>&quot;\\0&quot;<sp/>along<sp/>the<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982" refid="d0/da7/namespacetesting_1_1internal_1a9743f1da2e8f7a4a8178ec9595a56112" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a9743f1da2e8f7a4a8178ec9595a56112" kindref="member">StringStreamToString</ref>(::<ref refid="cpp/io/basic_stringstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::stringstream</ref>*<sp/>ss)<sp/>{</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">const ::std::string</ref>&amp;<sp/>str<sp/>=<sp/>ss-&gt;<ref refid="cpp/io/basic_stringstream/str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">str</ref>();</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>str.c_str();</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>start<sp/>+<sp/>str.length();</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>result;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/>result.<ref refid="cpp/string/basic_string/reserve" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">reserve</ref>(2<sp/>*<sp/>(end<sp/>-<sp/>start));</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ch<sp/>=<sp/>start;<sp/>ch<sp/>!=<sp/>end;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\0&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Replaces<sp/>NUL<sp/>with<sp/>&quot;\\0&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>*ch;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>the<sp/>user-supplied<sp/>message<sp/>to<sp/>the<sp/>Google-Test-generated<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2001" refid="d0/da7/namespacetesting_1_1internal_1a03976378124361dddf218c46dc500e5d" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a03976378124361dddf218c46dc500e5d" kindref="member">AppendUserMessage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>gtest_msg,</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/>user_msg)<sp/>{</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Appends<sp/>the<sp/>user<sp/>message<sp/>if<sp/>it&apos;s<sp/>non-empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>user_msg_string<sp/>=<sp/>user_msg.<ref refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" kindref="member">GetString</ref>();</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(user_msg_string.<ref refid="cpp/string/basic_string/empty" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">empty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gtest_msg;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gtest_msg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>user_msg_string;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>TestResult</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>empty<sp/>TestResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017" refid="d1/d69/classtesting_1_1_test_result_1a434977b0f85d921ae7a2f7ae506576cf" refkind="member"><highlight class="normal"><ref refid="d1/d69/classtesting_1_1_test_result_1a434977b0f85d921ae7a2f7ae506576cf" kindref="member">TestResult::TestResult</ref>()</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>death_test_count_(0),</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elapsed_time_(0)<sp/>{</highlight></codeline>
<codeline lineno="2020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight><highlight class="comment">//<sp/>D&apos;tor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2023" refid="d1/d69/classtesting_1_1_test_result_1ae2816ad307720d4dbdc73941639da1de" refkind="member"><highlight class="normal"><ref refid="d1/d69/classtesting_1_1_test_result_1ae2816ad307720d4dbdc73941639da1de" kindref="member">TestResult::~TestResult</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>i-th<sp/>test<sp/>part<sp/>result<sp/>among<sp/>all<sp/>the<sp/>results.<sp/>i<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight><highlight class="comment">//<sp/>range<sp/>from<sp/>0<sp/>to<sp/>total_part_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight><highlight class="comment">//<sp/>aborts<sp/>the<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029" refid="d1/d69/classtesting_1_1_test_result_1a69232817e4f6a8a13663f151131e4f90" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a69232817e4f6a8a13663f151131e4f90" kindref="member">TestResult::GetTestPartResult</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>0<sp/>||<sp/>i<sp/>&gt;=<sp/><ref refid="d1/d69/classtesting_1_1_test_result_1af2b823bb2a52246eea54b164bca43ec4" kindref="member">total_part_count</ref>())</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::posix::Abort();</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a85f429b80a248eba0578516afbb38a23" kindref="member">test_part_results_</ref>.at(i);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>i-th<sp/>test<sp/>property.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test_property_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>aborts<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight><highlight class="comment">//<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2038" refid="d1/d69/classtesting_1_1_test_result_1a7cd4340ff26d30dadbaf8e50515fbf9a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d27/classtesting_1_1_test_property" kindref="compound">TestProperty</ref>&amp;<sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a7cd4340ff26d30dadbaf8e50515fbf9a" kindref="member">TestResult::GetTestProperty</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>0<sp/>||<sp/>i<sp/>&gt;=<sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a3be0cdbe3beab03196d76376f7c9c4bf" kindref="member">test_property_count</ref>())</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::posix::Abort();</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a928efe9e715fd5ec9e84c206fe051d16" kindref="member">test_properties_</ref>.at(i);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clears<sp/>the<sp/>test<sp/>part<sp/>results.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2045" refid="d1/d69/classtesting_1_1_test_result_1a56db858ea9f9b0de772699a2669a7ede" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a56db858ea9f9b0de772699a2669a7ede" kindref="member">TestResult::ClearTestPartResults</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a85f429b80a248eba0578516afbb38a23" kindref="member">test_part_results_</ref>.clear();</highlight></codeline>
<codeline lineno="2047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>test<sp/>part<sp/>result<sp/>to<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050" refid="d1/d69/classtesting_1_1_test_result_1a3fac5d4edaec29072c5e9d735434471a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a3fac5d4edaec29072c5e9d735434471a" kindref="member">TestResult::AddTestPartResult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>test_part_result)<sp/>{</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a85f429b80a248eba0578516afbb38a23" kindref="member">test_part_results_</ref>.push_back(test_part_result);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>test<sp/>property<sp/>to<sp/>the<sp/>list.<sp/>If<sp/>a<sp/>property<sp/>with<sp/>the<sp/>same<sp/>key<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight><highlight class="comment">//<sp/>supplied<sp/>property<sp/>is<sp/>already<sp/>represented,<sp/>the<sp/>value<sp/>of<sp/>this<sp/>test_property</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight><highlight class="comment">//<sp/>replaces<sp/>the<sp/>old<sp/>value<sp/>for<sp/>that<sp/>key.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057" refid="d1/d69/classtesting_1_1_test_result_1a33626833a874fe245b35ad6e6e1f18d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a33626833a874fe245b35ad6e6e1f18d4" kindref="member">TestResult::RecordProperty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>xml_element,</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d27/classtesting_1_1_test_property" kindref="compound">TestProperty</ref>&amp;<sp/>test_property)<sp/>{</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d1/d69/classtesting_1_1_test_result_1a2443df28261cf11c12cb7f53e968261e" kindref="member">ValidateTestProperty</ref>(xml_element,<sp/>test_property))<sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><ref refid="da/d2b/classtesting_1_1internal_1_1_g_test_mutex_lock" kindref="compound">internal::MutexLock</ref><sp/>lock(&amp;<ref refid="d1/d69/classtesting_1_1_test_result_1ae28fd07e38c889d9a31c99a2c9bfccc2" kindref="member">test_properites_mutex_</ref>);</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;TestProperty&gt;::iterator</ref><sp/>property_with_matching_key<sp/>=</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cpp/algorithm/find" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::find_if</ref>(<ref refid="d1/d69/classtesting_1_1_test_result_1a928efe9e715fd5ec9e84c206fe051d16" kindref="member">test_properties_</ref>.begin(),<sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a928efe9e715fd5ec9e84c206fe051d16" kindref="member">test_properties_</ref>.end(),</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d2e/classtesting_1_1internal_1_1_test_property_key_is" kindref="compound">internal::TestPropertyKeyIs</ref>(test_property.<ref refid="d0/d27/classtesting_1_1_test_property_1a632effa7314f67301c9442f7ac19ac06" kindref="member">key</ref>()));</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(property_with_matching_key<sp/>==<sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a928efe9e715fd5ec9e84c206fe051d16" kindref="member">test_properties_</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a928efe9e715fd5ec9e84c206fe051d16" kindref="member">test_properties_</ref>.push_back(test_property);</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/>property_with_matching_key-&gt;SetValue(test_property.<ref refid="d0/d27/classtesting_1_1_test_property_1a8157d07e22fc254a2e845aa73e0ac33f" kindref="member">value</ref>());</highlight></codeline>
<codeline lineno="2071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>list<sp/>of<sp/>reserved<sp/>attributes<sp/>used<sp/>in<sp/>the<sp/>&lt;testsuites&gt;<sp/>element<sp/>of<sp/>XML</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075" refid="d0/d75/namespacetesting_1ab637e267cd7ea48bd2f428cd47701d30" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1ab637e267cd7ea48bd2f428cd47701d30" kindref="member">kReservedTestSuitesAttributes</ref>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;disabled&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;errors&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;random_seed&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;timestamp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>list<sp/>of<sp/>reserved<sp/>attributes<sp/>used<sp/>in<sp/>the<sp/>&lt;testsuite&gt;<sp/>element<sp/>of<sp/>XML</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088" refid="d0/d75/namespacetesting_1ae92e65fc9642c6992b46eba713317aa8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1ae92e65fc9642c6992b46eba713317aa8" kindref="member">kReservedTestSuiteAttributes</ref>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;disabled&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;errors&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>list<sp/>of<sp/>reserved<sp/>attributes<sp/>used<sp/>in<sp/>the<sp/>&lt;testcase&gt;<sp/>element<sp/>of<sp/>XML<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2098" refid="d0/d75/namespacetesting_1a19e6745e1137a363b563e09db9035c74" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a19e6745e1137a363b563e09db9035c74" kindref="member">kReservedTestCaseAttributes</ref>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;status&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;type_param&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;value_param&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kSize&gt;</highlight></codeline>
<codeline lineno="2108" refid="d0/d75/namespacetesting_1a956d4c522454fa6dfd75b5bbbefe8f9e" refkind="member"><highlight class="normal"><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref><sp/><ref refid="d0/d75/namespacetesting_1a956d4c522454fa6dfd75b5bbbefe8f9e" kindref="member">ArrayAsVector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>(&amp;array)[kSize])<sp/>{</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref>(array,<sp/>array<sp/>+<sp/>kSize);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112" refid="d0/d75/namespacetesting_1acb3fdfadf475a3c2f5e22a3dae73532a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref><sp/><ref refid="d0/d75/namespacetesting_1acb3fdfadf475a3c2f5e22a3dae73532a" kindref="member">GetReservedAttributesForElement</ref>(</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>xml_element)<sp/>{</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xml_element<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;testsuites&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a956d4c522454fa6dfd75b5bbbefe8f9e" kindref="member">ArrayAsVector</ref>(<ref refid="d0/d75/namespacetesting_1ab637e267cd7ea48bd2f428cd47701d30" kindref="member">kReservedTestSuitesAttributes</ref>);</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xml_element<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;testsuite&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a956d4c522454fa6dfd75b5bbbefe8f9e" kindref="member">ArrayAsVector</ref>(<ref refid="d0/d75/namespacetesting_1ae92e65fc9642c6992b46eba713317aa8" kindref="member">kReservedTestSuiteAttributes</ref>);</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xml_element<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a956d4c522454fa6dfd75b5bbbefe8f9e" kindref="member">ArrayAsVector</ref>(<ref refid="d0/d75/namespacetesting_1a19e6745e1137a363b563e09db9035c74" kindref="member">kReservedTestCaseAttributes</ref>);</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1ab54343f0a36dc4cb0ce8a478dd7847b8" kindref="member">GTEST_CHECK_</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unrecognized<sp/>xml_element<sp/>provided:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xml_element;</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>is<sp/>unreachable<sp/>but<sp/>some<sp/>compilers<sp/>may<sp/>not<sp/>realizes<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref>();</highlight></codeline>
<codeline lineno="2125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127" refid="d0/d75/namespacetesting_1a4354761948a5cf56fdf905418a0f78f1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/d75/namespacetesting_1a4354761948a5cf56fdf905418a0f78f1" kindref="member">FormatWordList</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref>&amp;<sp/>words)<sp/>{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref><sp/>word_list;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>words.<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>words.<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>()<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word_list<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>words.<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word_list<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;and<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/>word_list<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>words[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>word_list.<ref refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" kindref="member">GetString</ref>();</highlight></codeline>
<codeline lineno="2139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2141" refid="d0/d75/namespacetesting_1a4c9bd414747bf0563bfdb32a2307dcdf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a4c9bd414747bf0563bfdb32a2307dcdf" kindref="member">ValidateTestPropertyName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>property_name,</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref>&amp;<sp/>reserved_names)<sp/>{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="cpp/algorithm/find" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::find</ref>(reserved_names.<ref refid="cpp/container/vector/begin" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">begin</ref>(),<sp/>reserved_names.<ref refid="cpp/container/vector/end" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">end</ref>(),<sp/>property_name)<sp/>!=</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reserved_names.<ref refid="cpp/container/vector/end" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">end</ref>())<sp/>{</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d73/gtest_8h_1adc16b5b0a740c39084ea5c9e960e3063" kindref="member">ADD_FAILURE</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reserved<sp/>key<sp/>used<sp/>in<sp/>RecordProperty():<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>property_name</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d0/d75/namespacetesting_1a4354761948a5cf56fdf905418a0f78f1" kindref="member">FormatWordList</ref>(reserved_names)</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>are<sp/>reserved<sp/>by<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d3/dc9/gtest-port_8h_1a13d98c217176bd8722c395b9225fc19d" kindref="member">GTEST_NAME_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>failure<sp/>if<sp/>the<sp/>key<sp/>is<sp/>a<sp/>reserved<sp/>attribute<sp/>of<sp/>the<sp/>element<sp/>named</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>xml_element.<sp/><sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>property<sp/>is<sp/>valid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2155" refid="d1/d69/classtesting_1_1_test_result_1a2443df28261cf11c12cb7f53e968261e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a2443df28261cf11c12cb7f53e968261e" kindref="member">TestResult::ValidateTestProperty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>xml_element,</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d27/classtesting_1_1_test_property" kindref="compound">TestProperty</ref>&amp;<sp/>test_property)<sp/>{</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a4c9bd414747bf0563bfdb32a2307dcdf" kindref="member">ValidateTestPropertyName</ref>(test_property.<ref refid="d0/d27/classtesting_1_1_test_property_1a632effa7314f67301c9442f7ac19ac06" kindref="member">key</ref>(),</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1acb3fdfadf475a3c2f5e22a3dae73532a" kindref="member">GetReservedAttributesForElement</ref>(xml_element));</highlight></codeline>
<codeline lineno="2159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clears<sp/>the<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2162" refid="d1/d69/classtesting_1_1_test_result_1aa71d36872f416feaa853788a7a7a7ef8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1aa71d36872f416feaa853788a7a7a7ef8" kindref="member">TestResult::Clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a85f429b80a248eba0578516afbb38a23" kindref="member">test_part_results_</ref>.clear();</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a928efe9e715fd5ec9e84c206fe051d16" kindref="member">test_properties_</ref>.clear();</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1aa8b0cbfd87e7104bed9e7713972d0f8f" kindref="member">death_test_count_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a97b9c166ebee95ae4c9ef26cf3155617" kindref="member">elapsed_time_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170" refid="d1/d69/classtesting_1_1_test_result_1a365c0e4f912940e9cf7d844d06986445" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a365c0e4f912940e9cf7d844d06986445" kindref="member">TestResult::Failed</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="d1/d69/classtesting_1_1_test_result_1af2b823bb2a52246eea54b164bca43ec4" kindref="member">total_part_count</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d1/d69/classtesting_1_1_test_result_1a69232817e4f6a8a13663f151131e4f90" kindref="member">GetTestPartResult</ref>(i).<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a03c20ddaa381f1926a24672f545b70eb" kindref="member">failed</ref>())</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>part<sp/>fatally<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179" refid="d0/d75/namespacetesting_1a9f19442d566c7eaec0702b9fcf282b63" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a9f19442d566c7eaec0702b9fcf282b63" kindref="member">TestPartFatallyFailed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.<ref refid="d0/d4b/classtesting_1_1_test_part_result_1ab380b978032e5896435ef73d1a4bef6d" kindref="member">fatally_failed</ref>();</highlight></codeline>
<codeline lineno="2181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>fatally<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2184" refid="d1/d69/classtesting_1_1_test_result_1a4831d649ecdd7cbd910d236b73122524" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a4831d649ecdd7cbd910d236b73122524" kindref="member">TestResult::HasFatalFailure</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1e77a774d910346eff11a86d8df783a5" kindref="member">CountIf</ref>(<ref refid="d1/d69/classtesting_1_1_test_result_1a85f429b80a248eba0578516afbb38a23" kindref="member">test_part_results_</ref>,<sp/><ref refid="d0/d75/namespacetesting_1a9f19442d566c7eaec0702b9fcf282b63" kindref="member">TestPartFatallyFailed</ref>)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>part<sp/>non-fatally<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189" refid="d0/d75/namespacetesting_1af256d104ca665115eb291f762bb659e3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1af256d104ca665115eb291f762bb659e3" kindref="member">TestPartNonfatallyFailed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a8c3112659a6430e10b97546d18d6b5c5" kindref="member">nonfatally_failed</ref>();</highlight></codeline>
<codeline lineno="2191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>has<sp/>a<sp/>non-fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2194" refid="d1/d69/classtesting_1_1_test_result_1ad0c4dfe3e8f81f7cd6e7e6ccdd1cb687" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1ad0c4dfe3e8f81f7cd6e7e6ccdd1cb687" kindref="member">TestResult::HasNonfatalFailure</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1e77a774d910346eff11a86d8df783a5" kindref="member">CountIf</ref>(<ref refid="d1/d69/classtesting_1_1_test_result_1a85f429b80a248eba0578516afbb38a23" kindref="member">test_part_results_</ref>,<sp/><ref refid="d0/d75/namespacetesting_1af256d104ca665115eb291f762bb659e3" kindref="member">TestPartNonfatallyFailed</ref>)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>test<sp/>parts.<sp/><sp/>This<sp/>is<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>successful<sp/>test<sp/>parts<sp/>and<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>test<sp/>parts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2200" refid="d1/d69/classtesting_1_1_test_result_1af2b823bb2a52246eea54b164bca43ec4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1af2b823bb2a52246eea54b164bca43ec4" kindref="member">TestResult::total_part_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d1/d69/classtesting_1_1_test_result_1a85f429b80a248eba0578516afbb38a23" kindref="member">test_part_results_</ref>.size());</highlight></codeline>
<codeline lineno="2202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>the<sp/>test<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2205" refid="d1/d69/classtesting_1_1_test_result_1a3be0cdbe3beab03196d76376f7c9c4bf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a3be0cdbe3beab03196d76376f7c9c4bf" kindref="member">TestResult::test_property_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d1/d69/classtesting_1_1_test_result_1a928efe9e715fd5ec9e84c206fe051d16" kindref="member">test_properties_</ref>.size());</highlight></codeline>
<codeline lineno="2207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Test<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>c&apos;tor<sp/>saves<sp/>the<sp/>states<sp/>of<sp/>all<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2214" refid="df/d69/classtesting_1_1_test_1a350e5417b9f48c2f7b98937514b03da2" refkind="member"><highlight class="normal"><ref refid="df/d69/classtesting_1_1_test_1a350e5417b9f48c2f7b98937514b03da2" kindref="member">Test::Test</ref>()</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>gtest_flag_saver_(new<sp/><ref refid="d3/dc9/gtest-port_8h_1a3749ef4fba6b3c3993609b336031644d" kindref="member">GTEST_FLAG_SAVER_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>d&apos;tor<sp/>restores<sp/>the<sp/>states<sp/>of<sp/>all<sp/>flags.<sp/><sp/>The<sp/>actual<sp/>work<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>done<sp/>by<sp/>the<sp/>d&apos;tor<sp/>of<sp/>the<sp/>gtest_flag_saver_<sp/>field,<sp/>and<sp/>thus<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>visible<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221" refid="df/d69/classtesting_1_1_test_1a6fba67d17f23fe2f810e5f79f4e91538" refkind="member"><highlight class="normal"><ref refid="df/d69/classtesting_1_1_test_1a6fba67d17f23fe2f810e5f79f4e91538" kindref="member">Test::~Test</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>up<sp/>the<sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>sub-class<sp/>may<sp/>override<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227" refid="df/d69/classtesting_1_1_test_1a1b06560e0e01a806b92c2386220d0b57" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/d69/classtesting_1_1_test_1a1b06560e0e01a806b92c2386220d0b57" kindref="member">Test::SetUp</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tears<sp/>down<sp/>the<sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>sub-class<sp/>may<sp/>override<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233" refid="df/d69/classtesting_1_1_test_1a931587596081ef8178c2b128facb0411" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/d69/classtesting_1_1_test_1a931587596081ef8178c2b128facb0411" kindref="member">Test::TearDown</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allows<sp/>user<sp/>supplied<sp/>key<sp/>value<sp/>pairs<sp/>to<sp/>be<sp/>recorded<sp/>for<sp/>later<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2237" refid="df/d69/classtesting_1_1_test_1a5af7a3ecd40f1592aad222f3add22a77" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/d69/classtesting_1_1_test_1a5af7a3ecd40f1592aad222f3add22a77" kindref="member">Test::RecordProperty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ad200090b11104aca39f25043701886cf" kindref="member">UnitTest::GetInstance</ref>()-&gt;<ref refid="d7/d47/classtesting_1_1_unit_test_1a5af7a3ecd40f1592aad222f3add22a77" kindref="member">RecordProperty</ref>(key,<sp/>value);</highlight></codeline>
<codeline lineno="2239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allows<sp/>user<sp/>supplied<sp/>key<sp/>value<sp/>pairs<sp/>to<sp/>be<sp/>recorded<sp/>for<sp/>later<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2242" refid="df/d69/classtesting_1_1_test_1a77a5dc399e423865154ce5e5b10dd1c0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/d69/classtesting_1_1_test_1a5af7a3ecd40f1592aad222f3add22a77" kindref="member">Test::RecordProperty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref><sp/>value_message;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/>value_message<sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><ref refid="df/d69/classtesting_1_1_test_1a5af7a3ecd40f1592aad222f3add22a77" kindref="member">RecordProperty</ref>(key,<sp/>value_message.<ref refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" kindref="member">GetString</ref>().<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="2246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight></codeline>
<codeline lineno="2250" refid="d0/da7/namespacetesting_1_1internal_1a4fdfe94b1ad045e6e66e6227dd0d130d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4fdfe94b1ad045e6e66e6227dd0d130d" kindref="member">ReportFailureInUnknownLocation</ref>(<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">TestPartResult::Type</ref><sp/>result_type,</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>a<sp/>friend<sp/>of<sp/>UnitTest<sp/>and<sp/>as<sp/>such<sp/>has<sp/>access<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>AddTestPartResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ad200090b11104aca39f25043701886cf" kindref="member">UnitTest::GetInstance</ref>()-&gt;<ref refid="d7/d47/classtesting_1_1_unit_test_1ac9d74c9edbbc9f363be7633138e7ab7f" kindref="member">AddTestPartResult</ref>(</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result_type,</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>info<sp/>about<sp/>the<sp/>source<sp/>file<sp/>where<sp/>the<sp/>exception<sp/>occurred.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>no<sp/>info<sp/>on<sp/>which<sp/>line<sp/>caused<sp/>the<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message,</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>stack<sp/>trace,<sp/>either.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>requires<sp/>all<sp/>tests<sp/>in<sp/>the<sp/>same<sp/>test<sp/>case<sp/>to<sp/>use<sp/>the<sp/>same<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fixture<sp/>class.<sp/><sp/>This<sp/>function<sp/>checks<sp/>if<sp/>the<sp/>current<sp/>test<sp/>has<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>same<sp/>fixture<sp/>class<sp/>as<sp/>the<sp/>first<sp/>test<sp/>in<sp/>the<sp/>current<sp/>test<sp/>case.<sp/><sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>yes,<sp/>it<sp/>returns<sp/>true;<sp/>otherwise<sp/>it<sp/>generates<sp/>a<sp/>Google<sp/>Test<sp/>failure<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2269" refid="df/d69/classtesting_1_1_test_1a33853de09fa3a19530ef4db93e81d4a9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="df/d69/classtesting_1_1_test_1a33853de09fa3a19530ef4db93e81d4a9" kindref="member">Test::HasSameFixtureClass</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">internal::UnitTestImpl</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" kindref="member">internal::GetUnitTestImpl</ref>();</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_case<sp/>=<sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a03f782af442cc7b5163f48a087bc19d0" kindref="member">current_test_case</ref>();</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Info<sp/>about<sp/>the<sp/>first<sp/>test<sp/>in<sp/>the<sp/>current<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>first_test_info<sp/>=<sp/>test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1aaa94fcfd7f8161d39504f535fa995c2d" kindref="member">test_info_list</ref>()[0];</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac535957ba2fde769ce297f9b23db057d" kindref="member">internal::TypeId</ref><sp/>first_fixture_id<sp/>=<sp/>first_test_info-&gt;fixture_class_id_;</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>first_test_name<sp/>=<sp/>first_test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Info<sp/>about<sp/>the<sp/>current<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>this_test_info<sp/>=<sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1aff1e50095f685628d566cb3ac72f902f" kindref="member">current_test_info</ref>();</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac535957ba2fde769ce297f9b23db057d" kindref="member">internal::TypeId</ref><sp/>this_fixture_id<sp/>=<sp/>this_test_info-&gt;fixture_class_id_;</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>this_test_name<sp/>=<sp/>this_test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this_fixture_id<sp/>!=<sp/>first_fixture_id)<sp/>{</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>the<sp/>first<sp/>test<sp/>defined<sp/>using<sp/>TEST?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first_is_TEST<sp/>=<sp/>first_fixture_id<sp/>==<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af4406515630591b54fcdf093991b14e3" kindref="member">internal::GetTestTypeId</ref>();</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>this<sp/>test<sp/>defined<sp/>using<sp/>TEST?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>this_is_TEST<sp/>=<sp/>this_fixture_id<sp/>==<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af4406515630591b54fcdf093991b14e3" kindref="member">internal::GetTestTypeId</ref>();</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_is_TEST<sp/>||<sp/>this_is_TEST)<sp/>{</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Both<sp/>TEST<sp/>and<sp/>TEST_F<sp/>appear<sp/>in<sp/>same<sp/>test<sp/>case,<sp/>which<sp/>is<sp/>incorrect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>the<sp/>user<sp/>how<sp/>to<sp/>fix<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>name<sp/>of<sp/>the<sp/>TEST<sp/>and<sp/>the<sp/>name<sp/>of<sp/>the<sp/>TEST_F.<sp/><sp/>Note</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>first_is_TEST<sp/>and<sp/>this_is_TEST<sp/>cannot<sp/>both<sp/>be<sp/>true,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>fixture<sp/>IDs<sp/>are<sp/>different<sp/>for<sp/>the<sp/>two<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TEST_name<sp/>=</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_is_TEST<sp/>?<sp/>first_test_name<sp/>:<sp/>this_test_name;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TEST_F_name<sp/>=</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_is_TEST<sp/>?<sp/>this_test_name<sp/>:<sp/>first_test_name;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d73/gtest_8h_1adc16b5b0a740c39084ea5c9e960e3063" kindref="member">ADD_FAILURE</ref>()</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>tests<sp/>in<sp/>the<sp/>same<sp/>test<sp/>case<sp/>must<sp/>use<sp/>the<sp/>same<sp/>test<sp/>fixture\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;class,<sp/>so<sp/>mixing<sp/>TEST_F<sp/>and<sp/>TEST<sp/>in<sp/>the<sp/>same<sp/>test<sp/>case<sp/>is\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;illegal.<sp/><sp/>In<sp/>test<sp/>case<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this_test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1a36f45ddad070bbd6e8f06d3923934dba" kindref="member">test_case_name</ref>()</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TEST_F_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>defined<sp/>using<sp/>TEST_F<sp/>but\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TEST_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>defined<sp/>using<sp/>TEST.<sp/><sp/>You<sp/>probably\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;want<sp/>to<sp/>change<sp/>the<sp/>TEST<sp/>to<sp/>TEST_F<sp/>or<sp/>move<sp/>it<sp/>to<sp/>another<sp/>test\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;case.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Two<sp/>fixture<sp/>classes<sp/>with<sp/>the<sp/>same<sp/>name<sp/>appear<sp/>in<sp/>two<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespaces,<sp/>which<sp/>is<sp/>not<sp/>allowed.<sp/>Tell<sp/>the<sp/>user<sp/>how<sp/>to<sp/>fix<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d73/gtest_8h_1adc16b5b0a740c39084ea5c9e960e3063" kindref="member">ADD_FAILURE</ref>()</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>tests<sp/>in<sp/>the<sp/>same<sp/>test<sp/>case<sp/>must<sp/>use<sp/>the<sp/>same<sp/>test<sp/>fixture\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;class.<sp/><sp/>However,<sp/>in<sp/>test<sp/>case<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>this_test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1a36f45ddad070bbd6e8f06d3923934dba" kindref="member">test_case_name</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;you<sp/>defined<sp/>test<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>first_test_name</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>test<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this_test_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;using<sp/>two<sp/>different<sp/>test<sp/>fixture<sp/>classes.<sp/><sp/>This<sp/>can<sp/>happen<sp/>if\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>two<sp/>classes<sp/>are<sp/>from<sp/>different<sp/>namespaces<sp/>or<sp/>translation\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;units<sp/>and<sp/>have<sp/>the<sp/>same<sp/>name.<sp/><sp/>You<sp/>should<sp/>probably<sp/>rename<sp/>one\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;of<sp/>the<sp/>classes<sp/>to<sp/>put<sp/>the<sp/>tests<sp/>into<sp/>different<sp/>test<sp/>cases.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>an<sp/>&quot;exception<sp/>thrown&quot;<sp/>fatal<sp/>failure<sp/>to<sp/>the<sp/>current<sp/>test.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>returns<sp/>its<sp/>result<sp/>via<sp/>an<sp/>output<sp/>parameter<sp/>pointer<sp/>because<sp/>VC++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>prohibits<sp/>creation<sp/>of<sp/>objects<sp/>with<sp/>destructors<sp/>on<sp/>stack<sp/>in<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>__try<sp/>(see<sp/>error<sp/>C2712).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>*<sp/>FormatSehExceptionMessage(DWORD<sp/>exception_code,</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>location)<sp/>{</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref><sp/>message;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;SEH<sp/>exception<sp/>with<sp/>code<sp/>0x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/setbase" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::setbase</ref>(16)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/>exception_code<sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/setbase" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::setbase</ref>(10)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>thrown<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>location<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">std::string</ref>(message.<ref refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="2343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>an<sp/>&quot;exception<sp/>thrown&quot;<sp/>fatal<sp/>failure<sp/>to<sp/>the<sp/>current<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>FormatCxxExceptionMessage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description,</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>location)<sp/>{</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/>Message<sp/>message;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(description<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;C++<sp/>exception<sp/>with<sp/>description<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>description<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>C++<sp/>exception&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>thrown<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>location<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message.GetString();</highlight></codeline>
<codeline lineno="2363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ada13cbf91139f0809a5a31ea2594c1ad" kindref="member">PrintTestPartResultToString</ref>(</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>test_part_result);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal">GoogleTestFailureException::GoogleTestFailureException(</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestPartResult&amp;<sp/>failure)</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>::<ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>::runtime_error(<ref refid="d0/da7/namespacetesting_1_1internal_1ada13cbf91139f0809a5a31ea2594c1ad" kindref="member">PrintTestPartResultToString</ref>(failure).c_str())<sp/>{}</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"></highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>put<sp/>these<sp/>helper<sp/>functions<sp/>in<sp/>the<sp/>internal<sp/>namespace<sp/>as<sp/>IBM&apos;s<sp/>xlC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiler<sp/>rejects<sp/>the<sp/>code<sp/>if<sp/>they<sp/>were<sp/>declared<sp/>static.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runs<sp/>the<sp/>given<sp/>method<sp/>and<sp/>handles<sp/>SEH<sp/>exceptions<sp/>it<sp/>throws,<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SEH<sp/>is<sp/>supported;<sp/>returns<sp/>the<sp/>0-value<sp/>for<sp/>type<sp/>Result<sp/>in<sp/>case<sp/>of<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SEH<sp/>exception.<sp/><sp/>(Microsoft<sp/>compilers<sp/>cannot<sp/>handle<sp/>SEH<sp/>and<sp/>C++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exceptions<sp/>in<sp/>the<sp/>same<sp/>function.<sp/><sp/>Therefore,<sp/>we<sp/>provide<sp/>a<sp/>separate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wrapper<sp/>function<sp/>for<sp/>handling<sp/>SEH<sp/>exceptions.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result&gt;</highlight></codeline>
<codeline lineno="2383" refid="d0/da7/namespacetesting_1_1internal_1ac5293b438139ef7ed05cb7fcaaf63545" refkind="member"><highlight class="normal">Result<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac5293b438139ef7ed05cb7fcaaf63545" kindref="member">HandleSehExceptionsInMethodIfSupported</ref>(</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>Result<sp/>(T::*method)(),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>location)<sp/>{</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/>__try<sp/>{</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(object-&gt;*method)();</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/>}<sp/>__except<sp/>(internal::UnitTestOptions::GTestShouldProcessSEH(<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetExceptionCode()))<sp/>{</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>create<sp/>the<sp/>exception<sp/>message<sp/>on<sp/>the<sp/>heap<sp/>because<sp/>VC++<sp/>prohibits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>creation<sp/>of<sp/>objects<sp/>with<sp/>destructors<sp/>on<sp/>stack<sp/>in<sp/>functions<sp/>using<sp/>__try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(see<sp/>error<sp/>C2712).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>*<sp/>exception_message<sp/>=<sp/>FormatSehExceptionMessage(</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetExceptionCode(),<sp/>location);</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4fdfe94b1ad045e6e66e6227dd0d130d" kindref="member">internal::ReportFailureInUnknownLocation</ref>(<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7afff22986360310b0356db600c8c2187d" kindref="member">TestPartResult::kFatalFailure</ref>,</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*exception_message);</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>exception_message;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Result</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/>(void)location;</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(object-&gt;*method)();</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runs<sp/>the<sp/>given<sp/>method<sp/>and<sp/>catches<sp/>and<sp/>reports<sp/>C++<sp/>and/or<sp/>SEH-style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exceptions,<sp/>if<sp/>they<sp/>are<sp/>supported;<sp/>returns<sp/>the<sp/>0-value<sp/>for<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Result<sp/>in<sp/>case<sp/>of<sp/>an<sp/>SEH<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result&gt;</highlight></codeline>
<codeline lineno="2410" refid="d0/da7/namespacetesting_1_1internal_1addb2ed165b92b74e25fe9ebe9e46b9f9" refkind="member"><highlight class="normal">Result<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1addb2ed165b92b74e25fe9ebe9e46b9f9" kindref="member">HandleExceptionsInMethodIfSupported</ref>(</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>Result<sp/>(T::*method)(),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>location)<sp/>{</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>The<sp/>user<sp/>code<sp/>can<sp/>affect<sp/>the<sp/>way<sp/>in<sp/>which<sp/>Google<sp/>Test<sp/>handles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exceptions<sp/>by<sp/>setting<sp/>GTEST_FLAG(catch_exceptions),<sp/>but<sp/>only<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>RUN_ALL_TESTS()<sp/>starts.<sp/>It<sp/>is<sp/>technically<sp/>possible<sp/>to<sp/>check<sp/>the<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>the<sp/>exception<sp/>is<sp/>caught<sp/>and<sp/>either<sp/>report<sp/>or<sp/>re-throw<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>based<sp/>on<sp/>the<sp/>flag&apos;s<sp/>value:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Perform<sp/>the<sp/>test<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}<sp/>catch<sp/>(...)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(GTEST_FLAG(catch_exceptions))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Report<sp/>the<sp/>exception<sp/>as<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>throw;<sp/><sp/>//<sp/>Re-throws<sp/>the<sp/>original<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>the<sp/>purpose<sp/>of<sp/>this<sp/>flag<sp/>is<sp/>to<sp/>allow<sp/>the<sp/>program<sp/>to<sp/>drop<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>debugger<sp/>when<sp/>the<sp/>exception<sp/>is<sp/>thrown.<sp/>On<sp/>most<sp/>platforms,<sp/>once<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>control<sp/>enters<sp/>the<sp/>catch<sp/>block,<sp/>the<sp/>exception<sp/>origin<sp/>information<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lost<sp/>and<sp/>the<sp/>debugger<sp/>will<sp/>stop<sp/>the<sp/>program<sp/>at<sp/>the<sp/>point<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>re-throw<sp/>in<sp/>this<sp/>function<sp/>--<sp/>instead<sp/>of<sp/>at<sp/>the<sp/>point<sp/>of<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>throw<sp/>statement<sp/>in<sp/>the<sp/>code<sp/>under<sp/>test.<sp/><sp/>For<sp/>this<sp/>reason,<sp/>we<sp/>perform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>check<sp/>early,<sp/>sacrificing<sp/>the<sp/>ability<sp/>to<sp/>affect<sp/>Google<sp/>Test&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>handling<sp/>in<sp/>the<sp/>method<sp/>where<sp/>the<sp/>exception<sp/>is<sp/>thrown.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" kindref="member">internal::GetUnitTestImpl</ref>()-&gt;catch_exceptions())<sp/>{</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac5293b438139ef7ed05cb7fcaaf63545" kindref="member">HandleSehExceptionsInMethodIfSupported</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>method,<sp/>location);</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::GoogleTestFailureException&amp;)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>exception<sp/>type<sp/>can<sp/>only<sp/>be<sp/>thrown<sp/>by<sp/>a<sp/>failed<sp/>Google</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>assertion<sp/>with<sp/>the<sp/>intention<sp/>of<sp/>letting<sp/>another<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>framework<sp/>catch<sp/>it.<sp/><sp/>Therefore<sp/>we<sp/>just<sp/>re-throw<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/error/exception" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::exception</ref>&amp;<sp/>e)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4fdfe94b1ad045e6e66e6227dd0d130d" kindref="member">internal::ReportFailureInUnknownLocation</ref>(</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7afff22986360310b0356db600c8c2187d" kindref="member">TestPartResult::kFatalFailure</ref>,</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatCxxExceptionMessage(e.<ref refid="cpp/error/exception/what" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">what</ref>(),<sp/>location));</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4fdfe94b1ad045e6e66e6227dd0d130d" kindref="member">internal::ReportFailureInUnknownLocation</ref>(</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7afff22986360310b0356db600c8c2187d" kindref="member">TestPartResult::kFatalFailure</ref>,</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatCxxExceptionMessage(NULL,<sp/>location));</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Result</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac5293b438139ef7ed05cb7fcaaf63545" kindref="member">HandleSehExceptionsInMethodIfSupported</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>method,<sp/>location);</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(object-&gt;*method)();</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runs<sp/>the<sp/>test<sp/>and<sp/>updates<sp/>the<sp/>test<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2465" refid="df/d69/classtesting_1_1_test_1aa3eca255b6be227d7d901cc2a72017a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Test::Run()<sp/>{</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasSameFixtureClass())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">internal::UnitTestImpl</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" kindref="member">internal::GetUnitTestImpl</ref>();</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1accb552ad4af910904a9e48c49c5c79a2" kindref="member">os_stack_trace_getter</ref>()-&gt;<ref refid="d7/d10/classtesting_1_1internal_1_1_os_stack_trace_getter_interface_1a62a522fb4e6a18ae9a8799d1cd0b8bc6" kindref="member">UponLeavingGTest</ref>();</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1addb2ed165b92b74e25fe9ebe9e46b9f9" kindref="member">internal::HandleExceptionsInMethodIfSupported</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;Test::SetUp,<sp/></highlight><highlight class="stringliteral">&quot;SetUp()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>run<sp/>the<sp/>test<sp/>only<sp/>if<sp/>SetUp()<sp/>was<sp/>successful.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasFatalFailure())<sp/>{</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1accb552ad4af910904a9e48c49c5c79a2" kindref="member">os_stack_trace_getter</ref>()-&gt;<ref refid="d7/d10/classtesting_1_1internal_1_1_os_stack_trace_getter_interface_1a62a522fb4e6a18ae9a8799d1cd0b8bc6" kindref="member">UponLeavingGTest</ref>();</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1addb2ed165b92b74e25fe9ebe9e46b9f9" kindref="member">internal::HandleExceptionsInMethodIfSupported</ref>(</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;Test::TestBody,<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>test<sp/>body&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>we<sp/>want<sp/>to<sp/>clean<sp/>up<sp/>as<sp/>much<sp/>as<sp/>possible.<sp/><sp/>Hence<sp/>we<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>call<sp/>TearDown(),<sp/>even<sp/>if<sp/>SetUp()<sp/>or<sp/>the<sp/>test<sp/>body<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1accb552ad4af910904a9e48c49c5c79a2" kindref="member">os_stack_trace_getter</ref>()-&gt;<ref refid="d7/d10/classtesting_1_1internal_1_1_os_stack_trace_getter_interface_1a62a522fb4e6a18ae9a8799d1cd0b8bc6" kindref="member">UponLeavingGTest</ref>();</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1addb2ed165b92b74e25fe9ebe9e46b9f9" kindref="member">internal::HandleExceptionsInMethodIfSupported</ref>(</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;Test::TearDown,<sp/></highlight><highlight class="stringliteral">&quot;TearDown()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>current<sp/>test<sp/>has<sp/>a<sp/>fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2487" refid="df/d69/classtesting_1_1_test_1a4f237fa994f623a704494cd821fb761f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Test::HasFatalFailure()<sp/>{</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" kindref="member">internal::GetUnitTestImpl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a385bee93ae6043262a860574aa59ba1a" kindref="member">current_test_result</ref>()-&gt;<ref refid="d1/d69/classtesting_1_1_test_result_1a4831d649ecdd7cbd910d236b73122524" kindref="member">HasFatalFailure</ref>();</highlight></codeline>
<codeline lineno="2489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>current<sp/>test<sp/>has<sp/>a<sp/>non-fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2492" refid="df/d69/classtesting_1_1_test_1a015d02d8208675a344c7fc42c14838b7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Test::HasNonfatalFailure()<sp/>{</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" kindref="member">internal::GetUnitTestImpl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a385bee93ae6043262a860574aa59ba1a" kindref="member">current_test_result</ref>()-&gt;</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HasNonfatalFailure();</highlight></codeline>
<codeline lineno="2495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>TestInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>TestInfo<sp/>object.<sp/>It<sp/>assumes<sp/>ownership<sp/>of<sp/>the<sp/>test<sp/>factory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2501" refid="d1/d79/classtesting_1_1_test_info_1a3d2c0f8f264f6d8c525a4a28b881226d" refkind="member"><highlight class="normal">TestInfo::TestInfo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>a_test_case_name,</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>a_name,</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_type_param,</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_value_param,</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/d69/structtesting_1_1internal_1_1_code_location" kindref="compound">internal::CodeLocation</ref><sp/>a_code_location,</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac535957ba2fde769ce297f9b23db057d" kindref="member">internal::TypeId</ref><sp/>fixture_class_id,</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base" kindref="compound">internal::TestFactoryBase</ref>*<sp/>factory)</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>test_case_name_(a_test_case_name),</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name_(a_name),</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_param_(a_type_param<sp/>?<sp/>new<sp/><ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>::<ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">string</ref>(a_type_param)<sp/>:<sp/>NULL),</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_param_(a_value_param<sp/>?<sp/>new<sp/><ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>::<ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">string</ref>(a_value_param)<sp/>:<sp/>NULL),</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>location_(a_code_location),</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fixture_class_id_(fixture_class_id),</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>should_run_(false),</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>is_disabled_(false),</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matches_filter_(false),</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>factory_(factory),</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result_()<sp/>{}</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Destructs<sp/>a<sp/>TestInfo<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2521" refid="d1/d79/classtesting_1_1_test_info_1aef4e5ab35d68c6c5b82d87246a1ec811" refkind="member"><highlight class="normal"><ref refid="d1/d79/classtesting_1_1_test_info_1aef4e5ab35d68c6c5b82d87246a1ec811" kindref="member">TestInfo::~TestInfo</ref>()<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1a5350444f72fd50e09ca9807dbbd20d39" kindref="member">factory_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>new<sp/>TestInfo<sp/>object<sp/>and<sp/>registers<sp/>it<sp/>with<sp/>Google<sp/>Test;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>the<sp/>created<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>test_case_name:<sp/><sp/><sp/>name<sp/>of<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>of<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>type_param:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>the<sp/>test&apos;s<sp/>type<sp/>parameter,<sp/>or<sp/>NULL<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>is<sp/>not<sp/>a<sp/>typed<sp/>or<sp/>a<sp/>type-parameterized<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>value_param:<sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>representation<sp/>of<sp/>the<sp/>test&apos;s<sp/>value<sp/>parameter,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>NULL<sp/>if<sp/>this<sp/>is<sp/>not<sp/>a<sp/>value-parameterized<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>code_location:<sp/><sp/><sp/><sp/>code<sp/>location<sp/>where<sp/>the<sp/>test<sp/>is<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>fixture_class_id:<sp/>ID<sp/>of<sp/>the<sp/>test<sp/>fixture<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>set_up_tc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>sets<sp/>up<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>tear_down_tc:<sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>tears<sp/>down<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>factory:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>factory<sp/>that<sp/>creates<sp/>a<sp/>test<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>newly<sp/>created<sp/>TestInfo<sp/>instance<sp/>will<sp/>assume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ownership<sp/>of<sp/>the<sp/>factory<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2543" refid="d0/da7/namespacetesting_1_1internal_1a616199437436015fde76f09d80c6d5e7" refkind="member"><highlight class="normal"><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a616199437436015fde76f09d80c6d5e7" kindref="member">MakeAndRegisterTestInfo</ref>(</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_name,</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>type_param,</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value_param,</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/d69/structtesting_1_1internal_1_1_code_location" kindref="compound">CodeLocation</ref><sp/>code_location,</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac535957ba2fde769ce297f9b23db057d" kindref="member">TypeId</ref><sp/>fixture_class_id,</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa56a971a29fe8459940b46db38d3000f" kindref="member">SetUpTestCaseFunc</ref><sp/>set_up_tc,</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a7b4a46c5927d126f2df2d955d98e3b8a" kindref="member">TearDownTestCaseFunc</ref><sp/>tear_down_tc,</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base" kindref="compound">TestFactoryBase</ref>*<sp/>factory)<sp/>{</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>(test_case_name,<sp/>name,<sp/>type_param,<sp/>value_param,</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code_location,<sp/>fixture_class_id,<sp/>factory);</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" kindref="member">GetUnitTestImpl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a0f73735489a968e6f6d57f791a246615" kindref="member">AddTestInfo</ref>(set_up_tc,<sp/>tear_down_tc,<sp/>test_info);</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_info;</highlight></codeline>
<codeline lineno="2558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReportInvalidTestCaseType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_name,</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CodeLocation<sp/>code_location)<sp/>{</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref><sp/>errors;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/>errors</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Attempted<sp/>redefinition<sp/>of<sp/>test<sp/>case<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>test_case_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>tests<sp/>in<sp/>the<sp/>same<sp/>test<sp/>case<sp/>must<sp/>use<sp/>the<sp/>same<sp/>test<sp/>fixture\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;class.<sp/><sp/>However,<sp/>in<sp/>test<sp/>case<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>test_case_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>you<sp/>tried\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;to<sp/>define<sp/>a<sp/>test<sp/>using<sp/>a<sp/>fixture<sp/>class<sp/>different<sp/>from<sp/>the<sp/>one\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;used<sp/>earlier.<sp/>This<sp/>can<sp/>happen<sp/>if<sp/>the<sp/>two<sp/>fixture<sp/>classes<sp/>are\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;from<sp/>different<sp/>namespaces<sp/>and<sp/>have<sp/>the<sp/>same<sp/>name.<sp/>You<sp/>should\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;probably<sp/>rename<sp/>one<sp/>of<sp/>the<sp/>classes<sp/>to<sp/>put<sp/>the<sp/>tests<sp/>into<sp/>different\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>cases.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a6264f0605b7d7d0609eae663c58662c0" kindref="member">FormatFileLocation</ref>(code_location.file.c_str(),</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code_location.line).<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>(),</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errors.<ref refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" kindref="member">GetString</ref>().<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="2578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>predicate<sp/>that<sp/>checks<sp/>the<sp/>test<sp/>name<sp/>of<sp/>a<sp/>TestInfo<sp/>against<sp/>a<sp/>known</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>used<sp/>for<sp/>implementation<sp/>of<sp/>the<sp/>TestCase<sp/>class<sp/>only.<sp/><sp/>We<sp/>put</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>in<sp/>the<sp/>anonymous<sp/>namespace<sp/>to<sp/>prevent<sp/>polluting<sp/>the<sp/>outer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TestNameIs<sp/>is<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2593" refid="de/d42/classtesting_1_1anonymous__namespace_02gtest_8cc_03_1_1_test_name_is" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="de/d42/classtesting_1_1anonymous__namespace_02gtest_8cc_03_1_1_test_name_is" kindref="compound">TestNameIs</ref><sp/>{</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TestNameIs<sp/>has<sp/>NO<sp/>default<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2598" refid="de/d42/classtesting_1_1anonymous__namespace_02gtest_8cc_03_1_1_test_name_is_1a48cc35bb88b3a04afd8ddf26e6fc3892" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="de/d42/classtesting_1_1anonymous__namespace_02gtest_8cc_03_1_1_test_name_is_1a48cc35bb88b3a04afd8ddf26e6fc3892" kindref="member">TestNameIs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>name_(name)<sp/>{}</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>name<sp/>of<sp/>test_info<sp/>matches<sp/>name_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2602" refid="de/d42/classtesting_1_1anonymous__namespace_02gtest_8cc_03_1_1_test_name_is_1ac760376da9bea59bb4df3a4ee5065008" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d42/classtesting_1_1anonymous__namespace_02gtest_8cc_03_1_1_test_name_is_1ac760376da9bea59bb4df3a4ee5065008" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref><sp/>*<sp/>test_info)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_info<sp/>&amp;&amp;<sp/>test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>()<sp/>==<sp/>name_;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2607" refid="de/d42/classtesting_1_1anonymous__namespace_02gtest_8cc_03_1_1_test_name_is_1a4d739cc5d335052eb9f5b2ca559b81d1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="de/d42/classtesting_1_1anonymous__namespace_02gtest_8cc_03_1_1_test_name_is_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>;</highlight></codeline>
<codeline lineno="2608"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>expands<sp/>all<sp/>parameterized<sp/>tests<sp/>registered<sp/>with<sp/>macros<sp/>TEST_P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>INSTANTIATE_TEST_CASE_P<sp/>into<sp/>regular<sp/>tests<sp/>and<sp/>registers<sp/>those.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>done<sp/>just<sp/>once<sp/>during<sp/>the<sp/>program<sp/>runtime.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2617" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a42dd6cc650b930bbf73f665fbb13d515" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a42dd6cc650b930bbf73f665fbb13d515" kindref="member">UnitTestImpl::RegisterParameterizedTests</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parameterized_tests_registered_)<sp/>{</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/>parameterized_test_registry_.RegisterTests();</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/>parameterized_tests_registered_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>the<sp/>test<sp/>object,<sp/>runs<sp/>it,<sp/>records<sp/>its<sp/>result,<sp/>and<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>deletes<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2630" refid="d1/d79/classtesting_1_1_test_info_1aa3eca255b6be227d7d901cc2a72017a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1aa3eca255b6be227d7d901cc2a72017a5" kindref="member">TestInfo::Run</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d1/d79/classtesting_1_1_test_info_1ade0e3d581d82aaeaf7263d575564cb40" kindref="member">should_run_</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>UnitTest<sp/>where<sp/>to<sp/>store<sp/>test<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">internal::UnitTestImpl</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" kindref="member">internal::GetUnitTestImpl</ref>();</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a8bfd2a1906902da5fa95a75792883177" kindref="member">set_current_test_info</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/>repeater<sp/>=<sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ad200090b11104aca39f25043701886cf" kindref="member">UnitTest::GetInstance</ref>()-&gt;<ref refid="d7/d47/classtesting_1_1_unit_test_1aeb82a98c4da4afafa5b68547c8ac380a" kindref="member">listeners</ref>().<ref refid="df/dab/classtesting_1_1_test_event_listeners_1af7cfacdf90b4ba59566c16d95ee5d6cc" kindref="member">repeater</ref>();</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Notifies<sp/>the<sp/>unit<sp/>test<sp/>event<sp/>listeners<sp/>that<sp/>a<sp/>test<sp/>is<sp/>about<sp/>to<sp/>start.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/>repeater-&gt;<ref refid="d1/d46/classtesting_1_1_test_event_listener_1a02f601dff022b7d252f54f559acaf3f7" kindref="member">OnTestStart</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"></highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref><sp/>start<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae0c6fd4543c65945515c42d6f43cc138" kindref="member">internal::GetTimeInMillis</ref>();</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1accb552ad4af910904a9e48c49c5c79a2" kindref="member">os_stack_trace_getter</ref>()-&gt;<ref refid="d7/d10/classtesting_1_1internal_1_1_os_stack_trace_getter_interface_1a62a522fb4e6a18ae9a8799d1cd0b8bc6" kindref="member">UponLeavingGTest</ref>();</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>the<sp/>test<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><ref refid="df/d69/classtesting_1_1_test" kindref="compound">Test</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1addb2ed165b92b74e25fe9ebe9e46b9f9" kindref="member">internal::HandleExceptionsInMethodIfSupported</ref>(</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1a5350444f72fd50e09ca9807dbbd20d39" kindref="member">factory_</ref>,<sp/>&amp;<ref refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base_1a54ad95f17b20927fd00c337710813519" kindref="member">internal::TestFactoryBase::CreateTest</ref>,</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>test<sp/>fixture&apos;s<sp/>constructor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>the<sp/>test<sp/>only<sp/>if<sp/>the<sp/>test<sp/>object<sp/>was<sp/>created<sp/>and<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>constructor<sp/>didn&apos;t<sp/>generate<sp/>a<sp/>fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((test<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>!<ref refid="df/d69/classtesting_1_1_test_1a4f237fa994f623a704494cd821fb761f" kindref="member">Test::HasFatalFailure</ref>())<sp/>{</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>doesn&apos;t<sp/>throw<sp/>as<sp/>all<sp/>user<sp/>code<sp/>that<sp/>can<sp/>throw<sp/>are<sp/>wrapped<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>handling<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/>test-&gt;<ref refid="df/d69/classtesting_1_1_test_1aa3eca255b6be227d7d901cc2a72017a5" kindref="member">Run</ref>();</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deletes<sp/>the<sp/>test<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1accb552ad4af910904a9e48c49c5c79a2" kindref="member">os_stack_trace_getter</ref>()-&gt;<ref refid="d7/d10/classtesting_1_1internal_1_1_os_stack_trace_getter_interface_1a62a522fb4e6a18ae9a8799d1cd0b8bc6" kindref="member">UponLeavingGTest</ref>();</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1addb2ed165b92b74e25fe9ebe9e46b9f9" kindref="member">internal::HandleExceptionsInMethodIfSupported</ref>(</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test,<sp/>&amp;<ref refid="df/d69/classtesting_1_1_test_1a596a17de4388a65184028210bc5bbecb" kindref="member">Test::DeleteSelf_</ref>,<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>test<sp/>fixture&apos;s<sp/>destructor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1afb2ec6cf0ab3f3e57bc2304e0df97c29" kindref="member">result_</ref>.<ref refid="d1/d69/classtesting_1_1_test_result_1a0ca28ac81670a01fff5c6660e78065bb" kindref="member">set_elapsed_time</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae0c6fd4543c65945515c42d6f43cc138" kindref="member">internal::GetTimeInMillis</ref>()<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Notifies<sp/>the<sp/>unit<sp/>test<sp/>event<sp/>listener<sp/>that<sp/>a<sp/>test<sp/>has<sp/>just<sp/>finished.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/>repeater-&gt;<ref refid="d1/d46/classtesting_1_1_test_event_listener_1a48d3993f2b69de40ecca5476ff940e24" kindref="member">OnTestEnd</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>UnitTest<sp/>to<sp/>stop<sp/>associating<sp/>assertion<sp/>results<sp/>to<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a8bfd2a1906902da5fa95a75792883177" kindref="member">set_current_test_info</ref>(NULL);</highlight></codeline>
<codeline lineno="2672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>TestCase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>successful<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2677" refid="d0/dfa/classtesting_1_1_test_case_1aadfe12d81153d7c5838a0eedad197d4e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1aadfe12d81153d7c5838a0eedad197d4e" kindref="member">TestCase::successful_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1e77a774d910346eff11a86d8df783a5" kindref="member">CountIf</ref>(<ref refid="d0/dfa/classtesting_1_1_test_case_1a4d199a11867ccd8361fadf635dbcfa74" kindref="member">test_info_list_</ref>,<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a90cec168fde1398dfc3b1db6e1a797a4" kindref="member">TestPassed</ref>);</highlight></codeline>
<codeline lineno="2679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2682" refid="d0/dfa/classtesting_1_1_test_case_1a527d55a764fa3193cda01aaa95a75e8b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a527d55a764fa3193cda01aaa95a75e8b" kindref="member">TestCase::failed_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1e77a774d910346eff11a86d8df783a5" kindref="member">CountIf</ref>(<ref refid="d0/dfa/classtesting_1_1_test_case_1a4d199a11867ccd8361fadf635dbcfa74" kindref="member">test_info_list_</ref>,<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a34e1cd8d648d9df54eedbb17f02587a4" kindref="member">TestFailed</ref>);</highlight></codeline>
<codeline lineno="2684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests<sp/>that<sp/>will<sp/>be<sp/>reported<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2687" refid="d0/dfa/classtesting_1_1_test_case_1ae79e09f147841ac66b6478137e2260c8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1ae79e09f147841ac66b6478137e2260c8" kindref="member">TestCase::reportable_disabled_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1e77a774d910346eff11a86d8df783a5" kindref="member">CountIf</ref>(<ref refid="d0/dfa/classtesting_1_1_test_case_1a4d199a11867ccd8361fadf635dbcfa74" kindref="member">test_info_list_</ref>,<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1aee5d98a0807fdd67250534a4b491e3d0" kindref="member">TestReportableDisabled</ref>);</highlight></codeline>
<codeline lineno="2689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2692" refid="d0/dfa/classtesting_1_1_test_case_1a306df17b97d7adb53a092db57dd2ed2b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a306df17b97d7adb53a092db57dd2ed2b" kindref="member">TestCase::disabled_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1e77a774d910346eff11a86d8df783a5" kindref="member">CountIf</ref>(<ref refid="d0/dfa/classtesting_1_1_test_case_1a4d199a11867ccd8361fadf635dbcfa74" kindref="member">test_info_list_</ref>,<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a8cab09cdd57af464aec68c4dc9f45e96" kindref="member">TestDisabled</ref>);</highlight></codeline>
<codeline lineno="2694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>to<sp/>be<sp/>printed<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2697" refid="d0/dfa/classtesting_1_1_test_case_1a5b3b073637db1a071ba2d749128e9f8c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a5b3b073637db1a071ba2d749128e9f8c" kindref="member">TestCase::reportable_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1e77a774d910346eff11a86d8df783a5" kindref="member">CountIf</ref>(<ref refid="d0/dfa/classtesting_1_1_test_case_1a4d199a11867ccd8361fadf635dbcfa74" kindref="member">test_info_list_</ref>,<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a9862daa78e71563f6f5785afc36ca972" kindref="member">TestReportable</ref>);</highlight></codeline>
<codeline lineno="2699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight></codeline>
<codeline lineno="2701"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2702" refid="d0/dfa/classtesting_1_1_test_case_1a9964c29b369696df155b3adac96cfe66" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a9964c29b369696df155b3adac96cfe66" kindref="member">TestCase::test_to_run_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1e77a774d910346eff11a86d8df783a5" kindref="member">CountIf</ref>(<ref refid="d0/dfa/classtesting_1_1_test_case_1a4d199a11867ccd8361fadf635dbcfa74" kindref="member">test_info_list_</ref>,<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a8fdbfd24fea404421eb50c2450382e1d" kindref="member">ShouldRunTest</ref>);</highlight></codeline>
<codeline lineno="2704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2707" refid="d0/dfa/classtesting_1_1_test_case_1ac11f534b6c4990ddada85360a2371c4a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1ac11f534b6c4990ddada85360a2371c4a" kindref="member">TestCase::total_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d0/dfa/classtesting_1_1_test_case_1a4d199a11867ccd8361fadf635dbcfa74" kindref="member">test_info_list_</ref>.size());</highlight></codeline>
<codeline lineno="2709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>TestCase<sp/>with<sp/>the<sp/>given<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>of<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>a_type_param:<sp/>the<sp/>name<sp/>of<sp/>the<sp/>test<sp/>case&apos;s<sp/>type<sp/>parameter,<sp/>or<sp/>NULL<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>is<sp/>not<sp/>a<sp/>typed<sp/>or<sp/>a<sp/>type-parameterized<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>set_up_tc:<sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>sets<sp/>up<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>tear_down_tc:<sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>tears<sp/>down<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2720" refid="d0/dfa/classtesting_1_1_test_case_1adf0dcf842d3506fd22c91de33f79df86" refkind="member"><highlight class="normal"><ref refid="d0/dfa/classtesting_1_1_test_case_1adf0dcf842d3506fd22c91de33f79df86" kindref="member">TestCase::TestCase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_type_param,</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa56a971a29fe8459940b46db38d3000f" kindref="member">Test::SetUpTestCaseFunc</ref><sp/>set_up_tc,</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a7b4a46c5927d126f2df2d955d98e3b8a" kindref="member">Test::TearDownTestCaseFunc</ref><sp/>tear_down_tc)</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>name_(a_name),</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_param_(a_type_param<sp/>?<sp/>new<sp/><ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>::<ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">string</ref>(a_type_param)<sp/>:<sp/>NULL),</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_up_tc_(set_up_tc),</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tear_down_tc_(tear_down_tc),</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>should_run_(false),</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elapsed_time_(0)<sp/>{</highlight></codeline>
<codeline lineno="2729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Destructor<sp/>of<sp/>TestCase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2732" refid="d0/dfa/classtesting_1_1_test_case_1ab5565cf238c1b95c8113950cf9eb80b5" refkind="member"><highlight class="normal"><ref refid="d0/dfa/classtesting_1_1_test_case_1ab5565cf238c1b95c8113950cf9eb80b5" kindref="member">TestCase::~TestCase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deletes<sp/>every<sp/>Test<sp/>in<sp/>the<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a52f5504ed65d116201ccb8f99a44fd7e" kindref="member">ForEach</ref>(<ref refid="d0/dfa/classtesting_1_1_test_case_1a4d199a11867ccd8361fadf635dbcfa74" kindref="member">test_info_list_</ref>,<sp/>internal::Delete&lt;TestInfo&gt;);</highlight></codeline>
<codeline lineno="2735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>i-th<sp/>test<sp/>among<sp/>all<sp/>the<sp/>tests.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"></highlight><highlight class="comment">//<sp/>total_test_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2739" refid="d0/dfa/classtesting_1_1_test_case_1a184e6f335c5c8a78e37f9ab1d537de92" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a184e6f335c5c8a78e37f9ab1d537de92" kindref="member">TestCase::GetTestInfo</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a71fdd20a0686bea3dc0cdcd95e0bca1c" kindref="member">GetElementOr</ref>(<ref refid="d0/dfa/classtesting_1_1_test_case_1afc1c050e38b1462e084907bfbac4d480" kindref="member">test_indices_</ref>,<sp/>i,<sp/>-1);</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index<sp/>&lt;<sp/>0<sp/>?<sp/>NULL<sp/>:<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a4d199a11867ccd8361fadf635dbcfa74" kindref="member">test_info_list_</ref>[index];</highlight></codeline>
<codeline lineno="2742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>i-th<sp/>test<sp/>among<sp/>all<sp/>the<sp/>tests.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>total_test_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2746" refid="d0/dfa/classtesting_1_1_test_case_1aeea35099284cdd7127924592152e3b73" refkind="member"><highlight class="normal"><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1aeea35099284cdd7127924592152e3b73" kindref="member">TestCase::GetMutableTestInfo</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a71fdd20a0686bea3dc0cdcd95e0bca1c" kindref="member">GetElementOr</ref>(<ref refid="d0/dfa/classtesting_1_1_test_case_1afc1c050e38b1462e084907bfbac4d480" kindref="member">test_indices_</ref>,<sp/>i,<sp/>-1);</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index<sp/>&lt;<sp/>0<sp/>?<sp/>NULL<sp/>:<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a4d199a11867ccd8361fadf635dbcfa74" kindref="member">test_info_list_</ref>[index];</highlight></codeline>
<codeline lineno="2749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>test<sp/>to<sp/>this<sp/>test<sp/>case.<sp/><sp/>Will<sp/>delete<sp/>the<sp/>test<sp/>upon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"></highlight><highlight class="comment">//<sp/>destruction<sp/>of<sp/>the<sp/>TestCase<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2753" refid="d0/dfa/classtesting_1_1_test_case_1a2a0417de1ee92080aae4676c77318b01" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a2a0417de1ee92080aae4676c77318b01" kindref="member">TestCase::AddTestInfo</ref>(<ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref><sp/>*<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a4d199a11867ccd8361fadf635dbcfa74" kindref="member">test_info_list_</ref>.push_back(test_info);</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1afc1c050e38b1462e084907bfbac4d480" kindref="member">test_indices_</ref>.<ref refid="cpp/container/vector/push_back" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">push_back</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d0/dfa/classtesting_1_1_test_case_1afc1c050e38b1462e084907bfbac4d480" kindref="member">test_indices_</ref>.<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>()));</highlight></codeline>
<codeline lineno="2756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"></highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runs<sp/>every<sp/>test<sp/>in<sp/>this<sp/>TestCase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2759" refid="d0/dfa/classtesting_1_1_test_case_1aa3eca255b6be227d7d901cc2a72017a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1aa3eca255b6be227d7d901cc2a72017a5" kindref="member">TestCase::Run</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d0/dfa/classtesting_1_1_test_case_1ade0e3d581d82aaeaf7263d575564cb40" kindref="member">should_run_</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">internal::UnitTestImpl</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" kindref="member">internal::GetUnitTestImpl</ref>();</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a0566e56597ac7b24d29d6545d82b5f3e" kindref="member">set_current_test_case</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/>repeater<sp/>=<sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ad200090b11104aca39f25043701886cf" kindref="member">UnitTest::GetInstance</ref>()-&gt;<ref refid="d7/d47/classtesting_1_1_unit_test_1aeb82a98c4da4afafa5b68547c8ac380a" kindref="member">listeners</ref>().<ref refid="df/dab/classtesting_1_1_test_event_listeners_1af7cfacdf90b4ba59566c16d95ee5d6cc" kindref="member">repeater</ref>();</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"></highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/>repeater-&gt;<ref refid="d1/d46/classtesting_1_1_test_event_listener_1aaf531e12c423fe117b7a4c6d2217dcf7" kindref="member">OnTestCaseStart</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1accb552ad4af910904a9e48c49c5c79a2" kindref="member">os_stack_trace_getter</ref>()-&gt;<ref refid="d7/d10/classtesting_1_1internal_1_1_os_stack_trace_getter_interface_1a62a522fb4e6a18ae9a8799d1cd0b8bc6" kindref="member">UponLeavingGTest</ref>();</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1addb2ed165b92b74e25fe9ebe9e46b9f9" kindref="member">internal::HandleExceptionsInMethodIfSupported</ref>(</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;<ref refid="d0/dfa/classtesting_1_1_test_case_1a0a9185d58f27f485506f4c0dedaab124" kindref="member">TestCase::RunSetUpTestCase</ref>,<sp/></highlight><highlight class="stringliteral">&quot;SetUpTestCase()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">internal::TimeInMillis</ref><sp/>start<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae0c6fd4543c65945515c42d6f43cc138" kindref="member">internal::GetTimeInMillis</ref>();</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1ac11f534b6c4990ddada85360a2371c4a" kindref="member">total_test_count</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1aeea35099284cdd7127924592152e3b73" kindref="member">GetMutableTestInfo</ref>(i)-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1aa3eca255b6be227d7d901cc2a72017a5" kindref="member">Run</ref>();</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a97b9c166ebee95ae4c9ef26cf3155617" kindref="member">elapsed_time_</ref><sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae0c6fd4543c65945515c42d6f43cc138" kindref="member">internal::GetTimeInMillis</ref>()<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1accb552ad4af910904a9e48c49c5c79a2" kindref="member">os_stack_trace_getter</ref>()-&gt;<ref refid="d7/d10/classtesting_1_1internal_1_1_os_stack_trace_getter_interface_1a62a522fb4e6a18ae9a8799d1cd0b8bc6" kindref="member">UponLeavingGTest</ref>();</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1addb2ed165b92b74e25fe9ebe9e46b9f9" kindref="member">internal::HandleExceptionsInMethodIfSupported</ref>(</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;<ref refid="d0/dfa/classtesting_1_1_test_case_1a68c2b3492b96c37271344d40a79caa84" kindref="member">TestCase::RunTearDownTestCase</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TearDownTestCase()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/>repeater-&gt;<ref refid="d1/d46/classtesting_1_1_test_event_listener_1ab92df2852da3e002303be838d8550c76" kindref="member">OnTestCaseEnd</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/>impl-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a0566e56597ac7b24d29d6545d82b5f3e" kindref="member">set_current_test_case</ref>(NULL);</highlight></codeline>
<codeline lineno="2784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clears<sp/>the<sp/>results<sp/>of<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2787" refid="d0/dfa/classtesting_1_1_test_case_1a566dca6156477ed747aa781f341d13d5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a566dca6156477ed747aa781f341d13d5" kindref="member">TestCase::ClearResult</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1ae5fbed6752ae31d54b7db28c8a84df0a" kindref="member">ad_hoc_test_result_</ref>.<ref refid="d1/d69/classtesting_1_1_test_result_1aa71d36872f416feaa853788a7a7a7ef8" kindref="member">Clear</ref>();</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a52f5504ed65d116201ccb8f99a44fd7e" kindref="member">ForEach</ref>(<ref refid="d0/dfa/classtesting_1_1_test_case_1a4d199a11867ccd8361fadf635dbcfa74" kindref="member">test_info_list_</ref>,<sp/><ref refid="d1/d79/classtesting_1_1_test_info_1a2230ddd76d3cfef898ecb4f8fb722f35" kindref="member">TestInfo::ClearTestResult</ref>);</highlight></codeline>
<codeline lineno="2790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"></highlight></codeline>
<codeline lineno="2792"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Shuffles<sp/>the<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2793" refid="d0/dfa/classtesting_1_1_test_case_1a0005a140538304e16d0bbd0bf08b3b65" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a0005a140538304e16d0bbd0bf08b3b65" kindref="member">TestCase::ShuffleTests</ref>(<ref refid="db/da2/classtesting_1_1internal_1_1_random" kindref="compound">internal::Random</ref>*<sp/>random)<sp/>{</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a90d9e6ffe8522a7eb1b2ce9b1a0c4673" kindref="member">Shuffle</ref>(random,<sp/>&amp;<ref refid="d0/dfa/classtesting_1_1_test_case_1afc1c050e38b1462e084907bfbac4d480" kindref="member">test_indices_</ref>);</highlight></codeline>
<codeline lineno="2795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>test<sp/>order<sp/>to<sp/>before<sp/>the<sp/>first<sp/>shuffle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2798" refid="d0/dfa/classtesting_1_1_test_case_1ae4c0afbfb6a7d13aece4c3a256a5d01d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1ae4c0afbfb6a7d13aece4c3a256a5d01d" kindref="member">TestCase::UnshuffleTests</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1afc1c050e38b1462e084907bfbac4d480" kindref="member">test_indices_</ref>.<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1afc1c050e38b1462e084907bfbac4d480" kindref="member">test_indices_</ref>[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i);</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>countable<sp/>noun.<sp/><sp/>Depending<sp/>on<sp/>its<sp/>quantity,<sp/>either<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"></highlight><highlight class="comment">//<sp/>singular<sp/>form<sp/>or<sp/>the<sp/>plural<sp/>form<sp/>is<sp/>used.<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2806"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FormatCountableNoun(1,<sp/>&quot;formula&quot;,<sp/>&quot;formuli&quot;)<sp/>returns<sp/>&quot;1<sp/>formula&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FormatCountableNoun(5,<sp/>&quot;book&quot;,<sp/>&quot;books&quot;)<sp/>returns<sp/>&quot;5<sp/>books&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2809" refid="d0/d75/namespacetesting_1a33e070c3e994cb75f9017fa2a044d536" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/d75/namespacetesting_1a33e070c3e994cb75f9017fa2a044d536" kindref="member">FormatCountableNoun</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>singular_form,</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>plural_form)<sp/>{</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">internal::StreamableToString</ref>(count)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(count<sp/>==<sp/>1<sp/>?<sp/>singular_form<sp/>:<sp/>plural_form);</highlight></codeline>
<codeline lineno="2814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>the<sp/>count<sp/>of<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2817" refid="d0/d75/namespacetesting_1a7420a0eb48a02ba210e265afb75febdf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/d75/namespacetesting_1a7420a0eb48a02ba210e265afb75febdf" kindref="member">FormatTestCount</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_count)<sp/>{</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a33e070c3e994cb75f9017fa2a044d536" kindref="member">FormatCountableNoun</ref>(test_count,<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>the<sp/>count<sp/>of<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2822" refid="d0/d75/namespacetesting_1ab8cabb45f3d8c52d336372c1b62d75c5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/d75/namespacetesting_1ab8cabb45f3d8c52d336372c1b62d75c5" kindref="member">FormatTestCaseCount</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_case_count)<sp/>{</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a33e070c3e994cb75f9017fa2a044d536" kindref="member">FormatCountableNoun</ref>(test_case_count,<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>case&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>cases&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"></highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>TestPartResult::Type<sp/>enum<sp/>to<sp/>human-friendly<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight><highlight class="comment">//<sp/>representation.<sp/><sp/>Both<sp/>kNonFatalFailure<sp/>and<sp/>kFatalFailure<sp/>are<sp/>translated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>&quot;Failure&quot;,<sp/>as<sp/>the<sp/>user<sp/>usually<sp/>doesn&apos;t<sp/>care<sp/>about<sp/>the<sp/>difference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2829"><highlight class="normal"></highlight><highlight class="comment">//<sp/>between<sp/>the<sp/>two<sp/>when<sp/>viewing<sp/>the<sp/>test<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2830" refid="d0/d75/namespacetesting_1a4e9fdeef31f7e49afccfde0532f76864" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="d0/d75/namespacetesting_1a4e9fdeef31f7e49afccfde0532f76864" kindref="member">TestPartResultTypeToString</ref>(<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">TestPartResult::Type</ref><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7af0536797208144380691e2b376ffc1d1" kindref="member">TestPartResult::kSuccess</ref>:</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Success&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7ae354b0d94856044d54b2066ebb74635c" kindref="member">TestPartResult::kNonFatalFailure</ref>:</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7afff22986360310b0356db600c8c2187d" kindref="member">TestPartResult::kFatalFailure</ref>:</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;error:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Failure\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>result<sp/>type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"></highlight></codeline>
<codeline lineno="2847"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>TestPartResult<sp/>to<sp/>an<sp/>std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2850" refid="d0/da7/namespacetesting_1_1internal_1ada13cbf91139f0809a5a31ea2594c1ad" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ada13cbf91139f0809a5a31ea2594c1ad" kindref="member">PrintTestPartResultToString</ref>(</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>test_part_result)<sp/>{</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>()</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a6264f0605b7d7d0609eae663c58662c0" kindref="member">internal::FormatFileLocation</ref>(test_part_result.<ref refid="d0/d4b/classtesting_1_1_test_part_result_1ad5e655e4f5a697870e836f380a16797c" kindref="member">file_name</ref>(),</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a10a4f56de3322c42846ad149b1227d86" kindref="member">line_number</ref>())</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d0/d75/namespacetesting_1a4e9fdeef31f7e49afccfde0532f76864" kindref="member">TestPartResultTypeToString</ref>(test_part_result.<ref refid="d0/d4b/classtesting_1_1_test_part_result_1adf4a6727c689e0038cf2cdd158d5ed2c" kindref="member">type</ref>())</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>test_part_result.<ref refid="d0/d4b/classtesting_1_1_test_part_result_1aea6220e002a8039b97dc6fbd9ff79f46" kindref="member">message</ref>()).GetString();</highlight></codeline>
<codeline lineno="2857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"></highlight></codeline>
<codeline lineno="2859"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>TestPartResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2860" refid="d0/da7/namespacetesting_1_1internal_1ac844b3d05dd6f665f72e2a1cec1872ba" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac844b3d05dd6f665f72e2a1cec1872ba" kindref="member">PrintTestPartResult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>test_part_result)<sp/>{</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>result<sp/>=</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ada13cbf91139f0809a5a31ea2594c1ad" kindref="member">PrintTestPartResultToString</ref>(test_part_result);</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>result.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>test<sp/>program<sp/>runs<sp/>in<sp/>Visual<sp/>Studio<sp/>or<sp/>a<sp/>debugger,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>following<sp/>statements<sp/>add<sp/>the<sp/>test<sp/>part<sp/>result<sp/>message<sp/>to<sp/>the<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>window<sp/>such<sp/>that<sp/>the<sp/>user<sp/>can<sp/>double-click<sp/>on<sp/>it<sp/>to<sp/>jump<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>corresponding<sp/>source<sp/>code<sp/>location;<sp/>otherwise<sp/>they<sp/>do<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2869"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>call<sp/>OutputDebugString*()<sp/>on<sp/>Windows<sp/>Mobile,<sp/>as<sp/>printing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>stdout<sp/>is<sp/>done<sp/>by<sp/>OutputDebugString()<sp/>there<sp/>already<sp/>-<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>want<sp/>the<sp/>same<sp/>message<sp/>printed<sp/>twice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/>::OutputDebugStringA(result.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/>::OutputDebugStringA(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>PrettyUnitTestResultPrinter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight></codeline>
<codeline lineno="2880" refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965" kindref="member">GTestColor</ref><sp/>{</highlight></codeline>
<codeline lineno="2881" refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a0b8d8b18037efc3cdb5dd0313e7c67dc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a0b8d8b18037efc3cdb5dd0313e7c67dc" kindref="member">COLOR_DEFAULT</ref>,</highlight></codeline>
<codeline lineno="2882" refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" kindref="member">COLOR_RED</ref>,</highlight></codeline>
<codeline lineno="2883" refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" kindref="member">COLOR_GREEN</ref>,</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965ab03862907066c68204ee9df1ee04aa29" kindref="member">COLOR_YELLOW</ref></highlight></codeline>
<codeline lineno="2885" refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965ab03862907066c68204ee9df1ee04aa29" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="2888"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>!GTEST_OS_WINDOWS_PHONE<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_RT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>character<sp/>attribute<sp/>for<sp/>the<sp/>given<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2891"><highlight class="normal">WORD<sp/>GetColorAttribute(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965" kindref="member">GTestColor</ref><sp/>color)<sp/>{</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(color)<sp/>{</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" kindref="member">COLOR_RED</ref>:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FOREGROUND_RED;</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" kindref="member">COLOR_GREEN</ref>:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FOREGROUND_GREEN;</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965ab03862907066c68204ee9df1ee04aa29" kindref="member">COLOR_YELLOW</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FOREGROUND_RED<sp/>|<sp/>FOREGROUND_GREEN;</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>ANSI<sp/>color<sp/>code<sp/>for<sp/>the<sp/>given<sp/>color.<sp/><sp/>COLOR_DEFAULT<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>invalid<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2904" refid="d0/da7/namespacetesting_1_1internal_1a0aefb9deb60e90f19c236559837303d8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0aefb9deb60e90f19c236559837303d8" kindref="member">GetAnsiColorCode</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965" kindref="member">GTestColor</ref><sp/>color)<sp/>{</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(color)<sp/>{</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" kindref="member">COLOR_RED</ref>:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" kindref="member">COLOR_GREEN</ref>:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965ab03862907066c68204ee9df1ee04aa29" kindref="member">COLOR_YELLOW</ref>:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>Google<sp/>Test<sp/>should<sp/>use<sp/>colors<sp/>in<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2916" refid="d0/da7/namespacetesting_1_1internal_1ab0f928e61ab8ec92e75ddfcae9324c1e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ab0f928e61ab8ec92e75ddfcae9324c1e" kindref="member">ShouldUseColor</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stdout_is_tty)<sp/>{</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gtest_color<sp/>=<sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(color).c_str();</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a74c3f7f7cf90cc53c995dde20883d922" kindref="member">String::CaseInsensitiveCStringEquals</ref>(gtest_color,<sp/></highlight><highlight class="stringliteral">&quot;auto&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>Windows<sp/>the<sp/>TERM<sp/>variable<sp/>is<sp/>usually<sp/>not<sp/>set,<sp/>but<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>console<sp/>there<sp/>does<sp/>support<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stdout_is_tty;</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>non-Windows<sp/>platforms,<sp/>we<sp/>rely<sp/>on<sp/>the<sp/>TERM<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>term<sp/>=<sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a1d5e3da5a27eed25986859fa83cafe95" kindref="member">posix::GetEnv</ref>(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>term_supports_color<sp/>=</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" kindref="member">String::CStringEquals</ref>(term,<sp/></highlight><highlight class="stringliteral">&quot;xterm&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" kindref="member">String::CStringEquals</ref>(term,<sp/></highlight><highlight class="stringliteral">&quot;xterm-color&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" kindref="member">String::CStringEquals</ref>(term,<sp/></highlight><highlight class="stringliteral">&quot;xterm-256color&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" kindref="member">String::CStringEquals</ref>(term,<sp/></highlight><highlight class="stringliteral">&quot;screen&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" kindref="member">String::CStringEquals</ref>(term,<sp/></highlight><highlight class="stringliteral">&quot;screen-256color&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" kindref="member">String::CStringEquals</ref>(term,<sp/></highlight><highlight class="stringliteral">&quot;tmux&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" kindref="member">String::CStringEquals</ref>(term,<sp/></highlight><highlight class="stringliteral">&quot;tmux-256color&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" kindref="member">String::CStringEquals</ref>(term,<sp/></highlight><highlight class="stringliteral">&quot;rxvt-unicode&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" kindref="member">String::CStringEquals</ref>(term,<sp/></highlight><highlight class="stringliteral">&quot;rxvt-unicode-256color&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" kindref="member">String::CStringEquals</ref>(term,<sp/></highlight><highlight class="stringliteral">&quot;linux&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" kindref="member">String::CStringEquals</ref>(term,<sp/></highlight><highlight class="stringliteral">&quot;cygwin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stdout_is_tty<sp/>&amp;&amp;<sp/>term_supports_color;</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a74c3f7f7cf90cc53c995dde20883d922" kindref="member">String::CaseInsensitiveCStringEquals</ref>(gtest_color,<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a74c3f7f7cf90cc53c995dde20883d922" kindref="member">String::CaseInsensitiveCStringEquals</ref>(gtest_color,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a74c3f7f7cf90cc53c995dde20883d922" kindref="member">String::CaseInsensitiveCStringEquals</ref>(gtest_color,<sp/></highlight><highlight class="stringliteral">&quot;t&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" kindref="member">String::CStringEquals</ref>(gtest_color,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>take<sp/>&quot;yes&quot;,<sp/>&quot;true&quot;,<sp/>&quot;t&quot;,<sp/>and<sp/>&quot;1&quot;<sp/>as<sp/>meaning<sp/>&quot;yes&quot;.<sp/><sp/>If<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>is<sp/>neither<sp/>one<sp/>of<sp/>these<sp/>nor<sp/>&quot;auto&quot;,<sp/>we<sp/>treat<sp/>it<sp/>as<sp/>&quot;no&quot;<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>conservative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"></highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helpers<sp/>for<sp/>printing<sp/>colored<sp/>strings<sp/>to<sp/>stdout.<sp/>Note<sp/>that<sp/>on<sp/>Windows,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cannot<sp/>simply<sp/>emit<sp/>special<sp/>characters<sp/>and<sp/>have<sp/>the<sp/>terminal<sp/>change<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>routine<sp/>must<sp/>actually<sp/>emit<sp/>the<sp/>characters<sp/>rather<sp/>than<sp/>return<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>would<sp/>be<sp/>colored<sp/>when<sp/>printed,<sp/>as<sp/>can<sp/>be<sp/>done<sp/>on<sp/>Linux.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2956" refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965" kindref="member">GTestColor</ref><sp/>color,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><ref refid="cpp/utility/variadic/va_list" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">va_list</ref><sp/>args;</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/>va_start(args,<sp/>fmt);</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"></highlight></codeline>
<codeline lineno="2960"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS_MOBILE<sp/>||<sp/>GTEST_OS_SYMBIAN<sp/>||<sp/>GTEST_OS_ZOS<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="2961"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_OS_IOS<sp/>||<sp/>GTEST_OS_WINDOWS_PHONE<sp/>||<sp/>GTEST_OS_WINDOWS_RT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_color<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4b24c851ab13569b1b15b3d259b60d2e" kindref="member">AlwaysFalse</ref>();</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_color_mode<sp/>=</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ab0f928e61ab8ec92e75ddfcae9324c1e" kindref="member">ShouldUseColor</ref>(<ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a16ebe936b3a8ea462a94191635aedc27" kindref="member">posix::IsATTY</ref>(<ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a3117b067e1f942a2031e666953120ccc" kindref="member">posix::FileNo</ref>(stdout))<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_color<sp/>=<sp/>in_color_mode<sp/>&amp;&amp;<sp/>(color<sp/>!=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a0b8d8b18037efc3cdb5dd0313e7c67dc" kindref="member">COLOR_DEFAULT</ref>);</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS_MOBILE<sp/>||<sp/>GTEST_OS_SYMBIAN<sp/>||<sp/>GTEST_OS_ZOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>&apos;!=<sp/>0&apos;<sp/>comparison<sp/>is<sp/>necessary<sp/>to<sp/>satisfy<sp/>MSVC<sp/>7.1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!use_color)<sp/>{</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/>vprintf(fmt,<sp/>args);</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="2977"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>!GTEST_OS_WINDOWS_PHONE<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_RT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HANDLE<sp/>stdout_handle<sp/>=<sp/>GetStdHandle(STD_OUTPUT_HANDLE);</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"></highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>current<sp/>text<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/>CONSOLE_SCREEN_BUFFER_INFO<sp/>buffer_info;</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/>GetConsoleScreenBufferInfo(stdout_handle,<sp/>&amp;buffer_info);</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WORD<sp/>old_color_attrs<sp/>=<sp/>buffer_info.wAttributes;</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>flush<sp/>the<sp/>stream<sp/>buffers<sp/>into<sp/>the<sp/>console<sp/>before<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SetConsoleTextAttribute<sp/>call<sp/>lest<sp/>it<sp/>affect<sp/>the<sp/>text<sp/>that<sp/>is<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>printed<sp/>but<sp/>has<sp/>not<sp/>yet<sp/>reached<sp/>the<sp/>console.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/>SetConsoleTextAttribute(stdout_handle,</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetColorAttribute(color)<sp/>|<sp/>FOREGROUND_INTENSITY);</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/>vprintf(fmt,<sp/>args);</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>text<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/>SetConsoleTextAttribute(stdout_handle,<sp/>old_color_attrs);</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\033[0;3%sm&quot;</highlight><highlight class="normal">,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0aefb9deb60e90f19c236559837303d8" kindref="member">GetAnsiColorCode</ref>(color));</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/>vprintf(fmt,<sp/>args);</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\033[m&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>Resets<sp/>the<sp/>terminal<sp/>to<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="3002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"></highlight></codeline>
<codeline lineno="3004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Text<sp/>printed<sp/>in<sp/>Google<sp/>Test&apos;s<sp/>text<sp/>output<sp/>and<sp/>--gunit_list_tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output<sp/>to<sp/>label<sp/>the<sp/>type<sp/>parameter<sp/>and<sp/>value<sp/>parameter<sp/>for<sp/>a<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3006" refid="d0/da7/namespacetesting_1_1internal_1adc4b22274985eb08dc161b351e9012b9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adc4b22274985eb08dc161b351e9012b9" kindref="member">kTypeParamLabel</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TypeParam&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3007" refid="d0/da7/namespacetesting_1_1internal_1a30b2827871fa3535353e63cb259ff90f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a30b2827871fa3535353e63cb259ff90f" kindref="member">kValueParamLabel</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;GetParam()&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"></highlight></codeline>
<codeline lineno="3009" refid="d0/da7/namespacetesting_1_1internal_1a7a85ebe3b4de93a1edb091f92f1fb393" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a7a85ebe3b4de93a1edb091f92f1fb393" kindref="member">PrintFullTestCommentIfPresent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type_param<sp/>=<sp/>test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1af7c235854a4f2716ffe707d712673772" kindref="member">type_param</ref>();</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_param<sp/>=<sp/>test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1af89b13e99f07353bc39ca99ce8086553" kindref="member">value_param</ref>();</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"></highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_param<sp/>!=<sp/>NULL<sp/>||<sp/>value_param<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>where<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_param<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>=<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adc4b22274985eb08dc161b351e9012b9" kindref="member">kTypeParamLabel</ref>,<sp/>type_param);</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_param<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_param<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>=<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a30b2827871fa3535353e63cb259ff90f" kindref="member">kValueParamLabel</ref>,<sp/>value_param);</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"></highlight></codeline>
<codeline lineno="3026"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>implements<sp/>the<sp/>TestEventListener<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/>PrettyUnitTestResultPrinter<sp/>is<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3029" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer" kindref="compound">PrettyUnitTestResultPrinter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref><sp/>{</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3031" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a7a5522d7d82830d114fb19dedeff3d2f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a7a5522d7d82830d114fb19dedeff3d2f" kindref="member">PrettyUnitTestResultPrinter</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="3032" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a4ec2068e374e2e36d6c61dbae70d98a4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a4ec2068e374e2e36d6c61dbae70d98a4" kindref="member">PrintTestName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>test_case,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>test)<sp/>{</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s.%s&quot;</highlight><highlight class="normal">,<sp/>test_case,<sp/>test);</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"></highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>methods<sp/>override<sp/>what&apos;s<sp/>in<sp/>the<sp/>TestEventListener<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3037" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a9d43d6e5c4c37ade824998de2d83bd20" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a9d43d6e5c4c37ade824998de2d83bd20" kindref="member">OnTestProgramStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aab7032bcb450f58f2ce48c00ad6401e8" kindref="member">OnTestIterationStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration);</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a47648ecaae8cb68691d2104531d0ece0" kindref="member">OnEnvironmentsSetUpStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="3040" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a4ab2823e779a053ad65cf7f01bb76b54" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a4ab2823e779a053ad65cf7f01bb76b54" kindref="member">OnEnvironmentsSetUpEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1ac6bcd29fa938fde58ea70012e7ea420a" kindref="member">OnTestCaseStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/>test_case);</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1abc248085e6dcbfc41789bd620e5bdbae" kindref="member">OnTestStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info);</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1ad655f93fa60c0aeb7be4f44edeb10e0f" kindref="member">OnTestPartResult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>result);</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a41824a58ecc1d0bf99a2b691cd865701" kindref="member">OnTestEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info);</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1adecad7fba2c2b8083a93a152046f06dd" kindref="member">OnTestCaseEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/>test_case);</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a7f429e4591b590d3429263c7c5ab0ceb" kindref="member">OnEnvironmentsTearDownStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="3047" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1af00cb6141021245e02c511782ce66b46" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1af00cb6141021245e02c511782ce66b46" kindref="member">OnEnvironmentsTearDownEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aa21b349a51378e47877ee6d153c37116" kindref="member">OnTestIterationEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration);</highlight></codeline>
<codeline lineno="3049" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a79232f629150d6a1e560f6729271e729" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a79232f629150d6a1e560f6729271e729" kindref="member">OnTestProgramEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"></highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a7af737d93a96c26c3af9501b4cc78d93" kindref="member">PrintFailedTests</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="3053"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fired<sp/>before<sp/>each<sp/>iteration<sp/>of<sp/>tests<sp/>starts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3056" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aab7032bcb450f58f2ce48c00ad6401e8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aab7032bcb450f58f2ce48c00ad6401e8" kindref="member">PrettyUnitTestResultPrinter::OnTestIterationStart</ref>(</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration)<sp/>{</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(repeat)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nRepeating<sp/>all<sp/>tests<sp/>(iteration<sp/>%d)<sp/>.<sp/>.<sp/>.\n\n&quot;</highlight><highlight class="normal">,<sp/>iteration<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"></highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>filter<sp/>=<sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(filter).c_str();</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"></highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>filter<sp/>if<sp/>it&apos;s<sp/>not<sp/>*.<sp/><sp/>This<sp/>reminds<sp/>the<sp/>user<sp/>that<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tests<sp/>may<sp/>be<sp/>skipped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" kindref="member">String::CStringEquals</ref>(filter,<sp/><ref refid="d0/d75/namespacetesting_1a1e85b0754dce94c87f067d7b0379c171" kindref="member">kUniversalFilter</ref>))<sp/>{</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965ab03862907066c68204ee9df1ee04aa29" kindref="member">COLOR_YELLOW</ref>,</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Note:<sp/>%s<sp/>filter<sp/>=<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="d3/dc9/gtest-port_8h_1a13d98c217176bd8722c395b9225fc19d" kindref="member">GTEST_NAME_</ref>,<sp/>filter);</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/da7/namespacetesting_1_1internal_1a57e2697262a419061fc4cd3377a9271e" kindref="member">internal::ShouldShard</ref>(<ref refid="d0/d75/namespacetesting_1a19fe5fab1b6f6ecbfc6357a56f17aa03" kindref="member">kTestTotalShards</ref>,<sp/><ref refid="d0/d75/namespacetesting_1aab047cced200c1809bef2340dabe904f" kindref="member">kTestShardIndex</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2f32e8087820ba11f87940176f14d58c" kindref="member">Int32</ref><sp/>shard_index<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1afec7cf2eb159fa969f88d192ee507d23" kindref="member">Int32FromEnvOrDie</ref>(<ref refid="d0/d75/namespacetesting_1aab047cced200c1809bef2340dabe904f" kindref="member">kTestShardIndex</ref>,<sp/>-1);</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965ab03862907066c68204ee9df1ee04aa29" kindref="member">COLOR_YELLOW</ref>,</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Note:<sp/>This<sp/>is<sp/>test<sp/>shard<sp/>%d<sp/>of<sp/>%s.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(shard_index)<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a1d5e3da5a27eed25986859fa83cafe95" kindref="member">internal::posix::GetEnv</ref>(<ref refid="d0/d75/namespacetesting_1a19fe5fab1b6f6ecbfc6357a56f17aa03" kindref="member">kTestTotalShards</ref>));</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(shuffle))<sp/>{</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965ab03862907066c68204ee9df1ee04aa29" kindref="member">COLOR_YELLOW</ref>,</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Note:<sp/>Randomizing<sp/>tests&apos;<sp/>orders<sp/>with<sp/>a<sp/>seed<sp/>of<sp/>%d<sp/>.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1ad4565896fee1929f7fb711abcbe05eb6" kindref="member">random_seed</ref>());</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" kindref="member">COLOR_GREEN</ref>,<sp/><sp/></highlight><highlight class="stringliteral">&quot;[==========]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Running<sp/>%s<sp/>from<sp/>%s.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1a7420a0eb48a02ba210e265afb75febdf" kindref="member">FormatTestCount</ref>(unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1a9964c29b369696df155b3adac96cfe66" kindref="member">test_to_run_count</ref>()).<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>(),</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1ab8cabb45f3d8c52d336372c1b62d75c5" kindref="member">FormatTestCaseCount</ref>(unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1a8ab1158b5875c26962e688932c442616" kindref="member">test_case_to_run_count</ref>()).<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="3089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"></highlight></codeline>
<codeline lineno="3091" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a47648ecaae8cb68691d2104531d0ece0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a47648ecaae8cb68691d2104531d0ece0" kindref="member">PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart</ref>(</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" kindref="member">COLOR_GREEN</ref>,<sp/><sp/></highlight><highlight class="stringliteral">&quot;[----------]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Global<sp/>test<sp/>environment<sp/>set-up.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="3096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"></highlight></codeline>
<codeline lineno="3098" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1ac6bcd29fa938fde58ea70012e7ea420a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1ac6bcd29fa938fde58ea70012e7ea420a" kindref="member">PrettyUnitTestResultPrinter::OnTestCaseStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/>test_case)<sp/>{</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>counts<sp/>=</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1a33e070c3e994cb75f9017fa2a044d536" kindref="member">FormatCountableNoun</ref>(test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a9964c29b369696df155b3adac96cfe66" kindref="member">test_to_run_count</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" kindref="member">COLOR_GREEN</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[----------]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>from<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>counts.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>(),<sp/>test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a8c4da4b626748f746b1f9fdbe885edfb" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a699abee960ad215748fa6408da345f84" kindref="member">type_param</ref>()<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>where<sp/>%s<sp/>=<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adc4b22274985eb08dc161b351e9012b9" kindref="member">kTypeParamLabel</ref>,<sp/>test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a699abee960ad215748fa6408da345f84" kindref="member">type_param</ref>());</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="3109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight></codeline>
<codeline lineno="3111" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1abc248085e6dcbfc41789bd620e5bdbae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1abc248085e6dcbfc41789bd620e5bdbae" kindref="member">PrettyUnitTestResultPrinter::OnTestStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" kindref="member">COLOR_GREEN</ref>,<sp/><sp/></highlight><highlight class="stringliteral">&quot;[<sp/>RUN<sp/><sp/><sp/><sp/><sp/><sp/>]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a4ec2068e374e2e36d6c61dbae70d98a4" kindref="member">PrintTestName</ref>(test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1a36f45ddad070bbd6e8f06d3923934dba" kindref="member">test_case_name</ref>(),<sp/>test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="3116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Called<sp/>after<sp/>an<sp/>assertion<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3119" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1ad655f93fa60c0aeb7be4f44edeb10e0f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1ad655f93fa60c0aeb7be4f44edeb10e0f" kindref="member">PrettyUnitTestResultPrinter::OnTestPartResult</ref>(</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>test<sp/>part<sp/>succeeded,<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>do<sp/>anything.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.<ref refid="d0/d4b/classtesting_1_1_test_part_result_1adf4a6727c689e0038cf2cdd158d5ed2c" kindref="member">type</ref>()<sp/>==<sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7af0536797208144380691e2b376ffc1d1" kindref="member">TestPartResult::kSuccess</ref>)</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"></highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>failure<sp/>message<sp/>from<sp/>the<sp/>assertion<sp/>(e.g.<sp/>expected<sp/>this<sp/>and<sp/>got<sp/>that).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac844b3d05dd6f665f72e2a1cec1872ba" kindref="member">PrintTestPartResult</ref>(result);</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="3128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"></highlight></codeline>
<codeline lineno="3130" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a41824a58ecc1d0bf99a2b691cd865701" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a41824a58ecc1d0bf99a2b691cd865701" kindref="member">PrettyUnitTestResultPrinter::OnTestEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1af9eee0a44c398bf857c0ab4f961c2bd7" kindref="member">result</ref>()-&gt;<ref refid="d1/d69/classtesting_1_1_test_result_1aad2f13a7fb077e9e26c761dea838c160" kindref="member">Passed</ref>())<sp/>{</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" kindref="member">COLOR_GREEN</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/><sp/><sp/><sp/><sp/><sp/>OK<sp/>]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" kindref="member">COLOR_RED</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>FAILED<sp/><sp/>]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a4ec2068e374e2e36d6c61dbae70d98a4" kindref="member">PrintTestName</ref>(test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1a36f45ddad070bbd6e8f06d3923934dba" kindref="member">test_case_name</ref>(),<sp/>test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1af9eee0a44c398bf857c0ab4f961c2bd7" kindref="member">result</ref>()-&gt;<ref refid="d1/d69/classtesting_1_1_test_result_1a365c0e4f912940e9cf7d844d06986445" kindref="member">Failed</ref>())</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a7a85ebe3b4de93a1edb091f92f1fb393" kindref="member">PrintFullTestCommentIfPresent</ref>(test_info);</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"></highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(print_time))<sp/>{</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>(%s<sp/>ms)\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">internal::StreamableToString</ref>(</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1af9eee0a44c398bf857c0ab4f961c2bd7" kindref="member">result</ref>()-&gt;<ref refid="d1/d69/classtesting_1_1_test_result_1afc30650e1ab3e777836e49831149f429" kindref="member">elapsed_time</ref>()).<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="3147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"></highlight></codeline>
<codeline lineno="3149" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1adecad7fba2c2b8083a93a152046f06dd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1adecad7fba2c2b8083a93a152046f06dd" kindref="member">PrettyUnitTestResultPrinter::OnTestCaseEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/>test_case)<sp/>{</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(print_time))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"></highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>counts<sp/>=</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1a33e070c3e994cb75f9017fa2a044d536" kindref="member">FormatCountableNoun</ref>(test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a9964c29b369696df155b3adac96cfe66" kindref="member">test_to_run_count</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" kindref="member">COLOR_GREEN</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[----------]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>from<sp/>%s<sp/>(%s<sp/>ms<sp/>total)\n\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counts.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>(),<sp/>test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a8c4da4b626748f746b1f9fdbe885edfb" kindref="member">name</ref>(),</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">internal::StreamableToString</ref>(test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1afc30650e1ab3e777836e49831149f429" kindref="member">elapsed_time</ref>()).<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="3159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"></highlight></codeline>
<codeline lineno="3161" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a7f429e4591b590d3429263c7c5ab0ceb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a7f429e4591b590d3429263c7c5ab0ceb" kindref="member">PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart</ref>(</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" kindref="member">COLOR_GREEN</ref>,<sp/><sp/></highlight><highlight class="stringliteral">&quot;[----------]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Global<sp/>test<sp/>environment<sp/>tear-down\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="3166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Internal<sp/>helper<sp/>for<sp/>printing<sp/>the<sp/>list<sp/>of<sp/>failed<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3169" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a7af737d93a96c26c3af9501b4cc78d93" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a7af737d93a96c26c3af9501b4cc78d93" kindref="member">PrettyUnitTestResultPrinter::PrintFailedTests</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test)<sp/>{</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failed_test_count<sp/>=<sp/>unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1a527d55a764fa3193cda01aaa95a75e8b" kindref="member">failed_test_count</ref>();</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failed_test_count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"></highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1ab06cec6b304d4b5d853e4047f98dba3b" kindref="member">total_test_case_count</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/>test_case<sp/>=<sp/>*unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1ae331bba7ebd2790388dbbf576b6ceba9" kindref="member">GetTestCase</ref>(i);</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a80b7dba9dc7b6b640c8ba46897c8e181" kindref="member">should_run</ref>()<sp/>||<sp/>(test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a527d55a764fa3193cda01aaa95a75e8b" kindref="member">failed_test_count</ref>()<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1ac11f534b6c4990ddada85360a2371c4a" kindref="member">total_test_count</ref>();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info<sp/>=<sp/>*test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a184e6f335c5c8a78e37f9ab1d537de92" kindref="member">GetTestInfo</ref>(j);</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1a80b7dba9dc7b6b640c8ba46897c8e181" kindref="member">should_run</ref>()<sp/>||<sp/>test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1af9eee0a44c398bf857c0ab4f961c2bd7" kindref="member">result</ref>()-&gt;<ref refid="d1/d69/classtesting_1_1_test_result_1aad2f13a7fb077e9e26c761dea838c160" kindref="member">Passed</ref>())<sp/>{</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" kindref="member">COLOR_RED</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>FAILED<sp/><sp/>]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s.%s&quot;</highlight><highlight class="normal">,<sp/>test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a8c4da4b626748f746b1f9fdbe885edfb" kindref="member">name</ref>(),<sp/>test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a7a85ebe3b4de93a1edb091f92f1fb393" kindref="member">PrintFullTestCommentIfPresent</ref>(test_info);</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight></codeline>
<codeline lineno="3193" refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aa21b349a51378e47877ee6d153c37116" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aa21b349a51378e47877ee6d153c37116" kindref="member">PrettyUnitTestResultPrinter::OnTestIterationEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*iteration*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" kindref="member">COLOR_GREEN</ref>,<sp/><sp/></highlight><highlight class="stringliteral">&quot;[==========]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>from<sp/>%s<sp/>ran.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1a7420a0eb48a02ba210e265afb75febdf" kindref="member">FormatTestCount</ref>(unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1a9964c29b369696df155b3adac96cfe66" kindref="member">test_to_run_count</ref>()).<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>(),</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1ab8cabb45f3d8c52d336372c1b62d75c5" kindref="member">FormatTestCaseCount</ref>(unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1a8ab1158b5875c26962e688932c442616" kindref="member">test_case_to_run_count</ref>()).<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(print_time))<sp/>{</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>(%s<sp/>ms<sp/>total)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">internal::StreamableToString</ref>(unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1a39749dc106ab26d79347aa5bd908762e" kindref="member">elapsed_time</ref>()).<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" kindref="member">COLOR_GREEN</ref>,<sp/><sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>PASSED<sp/><sp/>]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s.\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="d0/d75/namespacetesting_1a7420a0eb48a02ba210e265afb75febdf" kindref="member">FormatTestCount</ref>(unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1aadfe12d81153d7c5838a0eedad197d4e" kindref="member">successful_test_count</ref>()).<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"></highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_failures<sp/>=<sp/>unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1a527d55a764fa3193cda01aaa95a75e8b" kindref="member">failed_test_count</ref>();</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1aad2f13a7fb077e9e26c761dea838c160" kindref="member">Passed</ref>())<sp/>{</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failed_test_count<sp/>=<sp/>unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1a527d55a764fa3193cda01aaa95a75e8b" kindref="member">failed_test_count</ref>();</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" kindref="member">COLOR_RED</ref>,<sp/><sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>FAILED<sp/><sp/>]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s,<sp/>listed<sp/>below:\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="d0/d75/namespacetesting_1a7420a0eb48a02ba210e265afb75febdf" kindref="member">FormatTestCount</ref>(failed_test_count).c_str());</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a7af737d93a96c26c3af9501b4cc78d93" kindref="member">PrintFailedTests</ref>(unit_test);</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n%2d<sp/>FAILED<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>num_failures,</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_failures<sp/>==<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;TEST&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;TESTS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"></highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_disabled<sp/>=<sp/>unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1ae79e09f147841ac66b6478137e2260c8" kindref="member">reportable_disabled_test_count</ref>();</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_disabled<sp/>&amp;&amp;<sp/>!<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(also_run_disabled_tests))<sp/>{</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!num_failures)<sp/>{</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>spacer<sp/>if<sp/>no<sp/>FAILURE<sp/>banner<sp/>is<sp/>displayed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965ab03862907066c68204ee9df1ee04aa29" kindref="member">COLOR_YELLOW</ref>,</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>YOU<sp/>HAVE<sp/>%d<sp/>DISABLED<sp/>%s\n\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_disabled,</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_disabled<sp/>==<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;TEST&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;TESTS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>Google<sp/>Test<sp/>output<sp/>is<sp/>printed<sp/>before,<sp/>e.g.,<sp/>heapchecker<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="3229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"></highlight></codeline>
<codeline lineno="3231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>PrettyUnitTestResultPrinter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>TestEventRepeater</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>forwards<sp/>events<sp/>to<sp/>other<sp/>event<sp/>listeners.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3236" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater" kindref="compound">TestEventRepeater</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref><sp/>{</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3238" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a75cb462a1faf8e97a8ea24af5a3730c7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a75cb462a1faf8e97a8ea24af5a3730c7" kindref="member">TestEventRepeater</ref>()<sp/>:<sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a61be6f7c2025bac9b4fc5cd7f8aaa7df" kindref="member">forwarding_enabled_</ref>(true)<sp/>{}</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a0c61657b7a6747cfcd25c5f116353690" kindref="member">~TestEventRepeater</ref>();</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1ad98bf37c3296d62b69659734cb6c7cf8" kindref="member">Append</ref>(<ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref><sp/>*listener);</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1aac8fdc5e2ed8269a0c227dd554b00d27" kindref="member">Release</ref>(<ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/>listener);</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Controls<sp/>whether<sp/>events<sp/>will<sp/>be<sp/>forwarded<sp/>to<sp/>listeners_.<sp/>Set<sp/>to<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>death<sp/>test<sp/>child<sp/>processes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3245" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a9e1c8698abdf66a53358d64273c51314" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a9e1c8698abdf66a53358d64273c51314" kindref="member">forwarding_enabled</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a61be6f7c2025bac9b4fc5cd7f8aaa7df" kindref="member">forwarding_enabled_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="3246" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a98d02212569aa17d23c98a0c4b742d08" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a98d02212569aa17d23c98a0c4b742d08" kindref="member">set_forwarding_enabled</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)<sp/>{<sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a61be6f7c2025bac9b4fc5cd7f8aaa7df" kindref="member">forwarding_enabled_</ref><sp/>=<sp/>enable;<sp/>}</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight></codeline>
<codeline lineno="3248" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a99623b41fa569a273446aafb98cc43b0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a99623b41fa569a273446aafb98cc43b0" kindref="member">OnTestProgramStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="3249" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1aea5c56c29cc19b7d811a02ea93f0c440" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1aea5c56c29cc19b7d811a02ea93f0c440" kindref="member">OnTestIterationStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration);</highlight></codeline>
<codeline lineno="3250" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a54e314e87dd4f40cf054af17214fe5d8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a54e314e87dd4f40cf054af17214fe5d8" kindref="member">OnEnvironmentsSetUpStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="3251" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a4ff3e9c1eca9b8c7d17c39c260283985" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a4ff3e9c1eca9b8c7d17c39c260283985" kindref="member">OnEnvironmentsSetUpEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="3252" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1adeff7f41a379b240b282fe511ff8bcbf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1adeff7f41a379b240b282fe511ff8bcbf" kindref="member">OnTestCaseStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/>test_case);</highlight></codeline>
<codeline lineno="3253" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1ae19a0ede8525bdc3ec6e05725004769b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1ae19a0ede8525bdc3ec6e05725004769b" kindref="member">OnTestStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info);</highlight></codeline>
<codeline lineno="3254" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a2999e3c9131fe27efd468fb4c20aef3a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a2999e3c9131fe27efd468fb4c20aef3a" kindref="member">OnTestPartResult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>result);</highlight></codeline>
<codeline lineno="3255" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a57247960bc1147abddf11908402394c1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a57247960bc1147abddf11908402394c1" kindref="member">OnTestEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info);</highlight></codeline>
<codeline lineno="3256" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a3cc06a6f14e5734766b458543ca2115e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a3cc06a6f14e5734766b458543ca2115e" kindref="member">OnTestCaseEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/>test_case);</highlight></codeline>
<codeline lineno="3257" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a3dd57271e7f1c9b85e8280acc6114b03" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a3dd57271e7f1c9b85e8280acc6114b03" kindref="member">OnEnvironmentsTearDownStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="3258" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1aa4355567b2991e8e38e4fcb964f44387" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1aa4355567b2991e8e38e4fcb964f44387" kindref="member">OnEnvironmentsTearDownEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1aa21b349a51378e47877ee6d153c37116" kindref="member">OnTestIterationEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration);</highlight></codeline>
<codeline lineno="3260" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a01d008c30d3b3e73f55f77aabc4cbbb9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a01d008c30d3b3e73f55f77aabc4cbbb9" kindref="member">OnTestProgramEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Controls<sp/>whether<sp/>events<sp/>will<sp/>be<sp/>forwarded<sp/>to<sp/>listeners_.<sp/>Set<sp/>to<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>death<sp/>test<sp/>child<sp/>processes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3265" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a61be6f7c2025bac9b4fc5cd7f8aaa7df" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a61be6f7c2025bac9b4fc5cd7f8aaa7df" kindref="member">forwarding_enabled_</ref>;</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>list<sp/>of<sp/>listeners<sp/>that<sp/>receive<sp/>events.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3267" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a2f78cc6db68f1306b075d561225437d2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;TestEventListener*&gt;</ref><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a2f78cc6db68f1306b075d561225437d2" kindref="member">listeners_</ref>;</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"></highlight></codeline>
<codeline lineno="3269" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a95320dee7678ac1035017209dd8cbac5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a95320dee7678ac1035017209dd8cbac5" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater" kindref="compound">TestEventRepeater</ref>);</highlight></codeline>
<codeline lineno="3270"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight></codeline>
<codeline lineno="3272" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a0c61657b7a6747cfcd25c5f116353690" refkind="member"><highlight class="normal"><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a0c61657b7a6747cfcd25c5f116353690" kindref="member">TestEventRepeater::~TestEventRepeater</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a52f5504ed65d116201ccb8f99a44fd7e" kindref="member">ForEach</ref>(<ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a2f78cc6db68f1306b075d561225437d2" kindref="member">listeners_</ref>,<sp/>Delete&lt;TestEventListener&gt;);</highlight></codeline>
<codeline lineno="3274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"></highlight></codeline>
<codeline lineno="3276" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1ad98bf37c3296d62b69659734cb6c7cf8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1ad98bf37c3296d62b69659734cb6c7cf8" kindref="member">TestEventRepeater::Append</ref>(<ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref><sp/>*listener)<sp/>{</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a2f78cc6db68f1306b075d561225437d2" kindref="member">listeners_</ref>.push_back(listener);</highlight></codeline>
<codeline lineno="3278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(vladl@google.com):<sp/>Factor<sp/>the<sp/>search<sp/>functionality<sp/>into<sp/>Vector::Find.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3281" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1aac8fdc5e2ed8269a0c227dd554b00d27" refkind="member"><highlight class="normal"><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1aac8fdc5e2ed8269a0c227dd554b00d27" kindref="member">TestEventRepeater::Release</ref>(<ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref><sp/>*listener)<sp/>{</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a2f78cc6db68f1306b075d561225437d2" kindref="member">listeners_</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a2f78cc6db68f1306b075d561225437d2" kindref="member">listeners_</ref>[i]<sp/>==<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a2f78cc6db68f1306b075d561225437d2" kindref="member">listeners_</ref>.erase(<ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a2f78cc6db68f1306b075d561225437d2" kindref="member">listeners_</ref>.begin()<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>listener;</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>most<sp/>methods<sp/>are<sp/>very<sp/>similar,<sp/>use<sp/>macros<sp/>to<sp/>reduce<sp/>boilerplate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>a<sp/>member<sp/>that<sp/>forwards<sp/>the<sp/>call<sp/>to<sp/>all<sp/>listeners.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3294" refid="df/d5b/gtest_8cc_1a87a475ab9e81de8b49525787665b9229" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_REPEATER_METHOD_(Name,<sp/>Type)<sp/>\</highlight></codeline>
<codeline lineno="3295"><highlight class="preprocessor">void<sp/>TestEventRepeater::Name(const<sp/>Type&amp;<sp/>parameter)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3296"><highlight class="preprocessor"><sp/><sp/>if<sp/>(forwarding_enabled_)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3297"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>listeners_.size();<sp/>i++)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3298"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>listeners_[i]-&gt;Name(parameter);<sp/>\</highlight></codeline>
<codeline lineno="3299"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="3300"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="3301"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>a<sp/>member<sp/>that<sp/>forwards<sp/>the<sp/>call<sp/>to<sp/>all<sp/>listeners<sp/>in<sp/>reverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3304" refid="df/d5b/gtest_8cc_1aa7da32fd7da6a8cceeed6b448cb7b5f2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_REVERSE_REPEATER_METHOD_(Name,<sp/>Type)<sp/>\</highlight></codeline>
<codeline lineno="3305"><highlight class="preprocessor">void<sp/>TestEventRepeater::Name(const<sp/>Type&amp;<sp/>parameter)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3306"><highlight class="preprocessor"><sp/><sp/>if<sp/>(forwarding_enabled_)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3307"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>static_cast&lt;int&gt;(listeners_.size())<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3308"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>listeners_[i]-&gt;Name(parameter);<sp/>\</highlight></codeline>
<codeline lineno="3309"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="3310"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="3311"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3312"><highlight class="normal"></highlight></codeline>
<codeline lineno="3313" refid="d0/da7/namespacetesting_1_1internal_1ac9931727dc0f845cddff1f228db37668" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1ac9931727dc0f845cddff1f228db37668" kindref="member">GTEST_REPEATER_METHOD_</ref>(OnTestProgramStart,<sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>)</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1ac9931727dc0f845cddff1f228db37668" kindref="member">GTEST_REPEATER_METHOD_</ref>(OnEnvironmentsSetUpStart,<sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>)</highlight></codeline>
<codeline lineno="3315" refid="d0/da7/namespacetesting_1_1internal_1a7129b6f50c9bf93c1a47bf2edd5c6acf" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1ac9931727dc0f845cddff1f228db37668" kindref="member">GTEST_REPEATER_METHOD_</ref>(OnTestCaseStart,<sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>)</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1ac9931727dc0f845cddff1f228db37668" kindref="member">GTEST_REPEATER_METHOD_</ref>(OnTestStart,<sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>)</highlight></codeline>
<codeline lineno="3317" refid="d0/da7/namespacetesting_1_1internal_1aa602ef304f88b3b7c0619b95a477d50f" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1ac9931727dc0f845cddff1f228db37668" kindref="member">GTEST_REPEATER_METHOD_</ref>(OnTestPartResult,<sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>)</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1ac9931727dc0f845cddff1f228db37668" kindref="member">GTEST_REPEATER_METHOD_</ref>(OnEnvironmentsTearDownStart,<sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>)</highlight></codeline>
<codeline lineno="3319" refid="d0/da7/namespacetesting_1_1internal_1adfd61e7c715137b3bf55604f43e78e9b" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1adfd61e7c715137b3bf55604f43e78e9b" kindref="member">GTEST_REVERSE_REPEATER_METHOD_</ref>(OnEnvironmentsSetUpEnd,<sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>)</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1adfd61e7c715137b3bf55604f43e78e9b" kindref="member">GTEST_REVERSE_REPEATER_METHOD_</ref>(OnEnvironmentsTearDownEnd,<sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>)</highlight></codeline>
<codeline lineno="3321" refid="d0/da7/namespacetesting_1_1internal_1ad00b72c4abd63ed2c00c207cd4270bf4" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1adfd61e7c715137b3bf55604f43e78e9b" kindref="member">GTEST_REVERSE_REPEATER_METHOD_</ref>(OnTestEnd,<sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>)</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1adfd61e7c715137b3bf55604f43e78e9b" kindref="member">GTEST_REVERSE_REPEATER_METHOD_</ref>(OnTestCaseEnd,<sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>)</highlight></codeline>
<codeline lineno="3323" refid="d0/da7/namespacetesting_1_1internal_1a6def6030b2054b4ed24b9ef66c98d320" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1adfd61e7c715137b3bf55604f43e78e9b" kindref="member">GTEST_REVERSE_REPEATER_METHOD_</ref>(OnTestProgramEnd,<sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>)</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"></highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_REPEATER_METHOD_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_REVERSE_REPEATER_METHOD_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3327"><highlight class="normal"></highlight></codeline>
<codeline lineno="3328"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1aea5c56c29cc19b7d811a02ea93f0c440" kindref="member">TestEventRepeater::OnTestIterationStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration)<sp/>{</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a61be6f7c2025bac9b4fc5cd7f8aaa7df" kindref="member">forwarding_enabled_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a2f78cc6db68f1306b075d561225437d2" kindref="member">listeners_</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a2f78cc6db68f1306b075d561225437d2" kindref="member">listeners_</ref>[i]-&gt;OnTestIterationStart(unit_test,<sp/>iteration);</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"></highlight></codeline>
<codeline lineno="3337" refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1aa21b349a51378e47877ee6d153c37116" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1aa21b349a51378e47877ee6d153c37116" kindref="member">TestEventRepeater::OnTestIterationEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration)<sp/>{</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a61be6f7c2025bac9b4fc5cd7f8aaa7df" kindref="member">forwarding_enabled_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a2f78cc6db68f1306b075d561225437d2" kindref="member">listeners_</ref>.size())<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a2f78cc6db68f1306b075d561225437d2" kindref="member">listeners_</ref>[i]-&gt;OnTestIterationEnd(unit_test,<sp/>iteration);</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>TestEventRepeater</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3347"><highlight class="normal"></highlight></codeline>
<codeline lineno="3348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>generates<sp/>an<sp/>XML<sp/>output<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3349" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer" kindref="compound">XmlUnitTestResultPrinter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="dd/dff/classtesting_1_1_empty_test_event_listener" kindref="compound">EmptyTestEventListener</ref><sp/>{</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a7bfec56d4e2ab7d80f3f0fde70fbf255" kindref="member">XmlUnitTestResultPrinter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output_file);</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1aa21b349a51378e47877ee6d153c37116" kindref="member">OnTestIterationEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration);</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"></highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>c<sp/>a<sp/>whitespace<sp/>character<sp/>that<sp/>is<sp/>normalized<sp/>to<sp/>a<sp/>space<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>appears<sp/>in<sp/>an<sp/>XML<sp/>attribute<sp/>value?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3358" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a3d910f5c6a752c629a276a8585640795" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a3d910f5c6a752c629a276a8585640795" kindref="member">IsNormalizableWhitespace</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>==<sp/>0x9<sp/>||<sp/>c<sp/>==<sp/>0xA<sp/>||<sp/>c<sp/>==<sp/>0xD;</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"></highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>c<sp/>appear<sp/>in<sp/>a<sp/>well-formed<sp/>XML<sp/>document?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3363" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a18cfed6b1b9d7aedd2c43129c7e46e95" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a18cfed6b1b9d7aedd2c43129c7e46e95" kindref="member">IsValidXmlCharacter</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a3d910f5c6a752c629a276a8585640795" kindref="member">IsNormalizableWhitespace</ref>(c)<sp/>||<sp/>c<sp/>&gt;=<sp/>0x20;</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>XML-escaped<sp/>copy<sp/>of<sp/>the<sp/>input<sp/>string<sp/>str.<sp/><sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is_attribute<sp/>is<sp/>true,<sp/>the<sp/>text<sp/>is<sp/>meant<sp/>to<sp/>appear<sp/>as<sp/>an<sp/>attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value,<sp/>and<sp/>normalizable<sp/>whitespace<sp/>is<sp/>preserved<sp/>by<sp/>replacing<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>character<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a574c52329b5b097822f969ce2007d97f" kindref="member">EscapeXml</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>str,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_attribute);</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"></highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>given<sp/>string<sp/>with<sp/>all<sp/>characters<sp/>invalid<sp/>in<sp/>XML<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a110bba54ef230f36ee4b226ead1ebbe7" kindref="member">RemoveInvalidXmlCharacters</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>str);</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convenience<sp/>wrapper<sp/>around<sp/>EscapeXml<sp/>when<sp/>str<sp/>is<sp/>an<sp/>attribute<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3377" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1acf1a6d570b5f55d2cf7deba7c0cd374a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1acf1a6d570b5f55d2cf7deba7c0cd374a" kindref="member">EscapeXmlAttribute</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a574c52329b5b097822f969ce2007d97f" kindref="member">EscapeXml</ref>(str,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"></highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convenience<sp/>wrapper<sp/>around<sp/>EscapeXml<sp/>when<sp/>str<sp/>is<sp/>not<sp/>an<sp/>attribute<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3382" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a91d326b45970fe5317fdec9d41c533b3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a91d326b45970fe5317fdec9d41c533b3" kindref="member">EscapeXmlText</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a574c52329b5b097822f969ce2007d97f" kindref="member">EscapeXml</ref>(str,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>given<sp/>attribute<sp/>belongs<sp/>to<sp/>the<sp/>given<sp/>element<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>streams<sp/>the<sp/>attribute<sp/>as<sp/>XML.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>stream,</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>element_name,</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>value);</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"></highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streams<sp/>an<sp/>XML<sp/>CDATA<sp/>section,<sp/>escaping<sp/>invalid<sp/>CDATA<sp/>sequences<sp/>as<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1abe3b759db2f664b7f61500b785d9f2a4" kindref="member">OutputXmlCDataSection</ref>(::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"></highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streams<sp/>an<sp/>XML<sp/>representation<sp/>of<sp/>a<sp/>TestInfo<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a1385d3994e1daf7d80693bc6936e9853" kindref="member">OutputXmlTestInfo</ref>(::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>stream,</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_name,</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info);</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"></highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>an<sp/>XML<sp/>representation<sp/>of<sp/>a<sp/>TestCase<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1addf25742548aa0376bf180ed28187460" kindref="member">PrintXmlTestCase</ref>(::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>stream,</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/>test_case);</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>an<sp/>XML<sp/>summary<sp/>of<sp/>unit_test<sp/>to<sp/>output<sp/>stream<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1af053fc729d29be4c3de9c1e5e7585cdc" kindref="member">PrintXmlUnitTest</ref>(::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>stream,</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test);</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"></highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Produces<sp/>a<sp/>string<sp/>representing<sp/>the<sp/>test<sp/>properties<sp/>in<sp/>a<sp/>result<sp/>as<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delimited<sp/>XML<sp/>attributes<sp/>based<sp/>on<sp/>the<sp/>property<sp/>key=&quot;value&quot;<sp/>pairs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>the<sp/>std::string<sp/>is<sp/>not<sp/>empty,<sp/>it<sp/>includes<sp/>a<sp/>space<sp/>at<sp/>the<sp/>beginning,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>delimit<sp/>this<sp/>attribute<sp/>from<sp/>prior<sp/>attributes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1ae6b121e2b6c573baab04973b8616268d" kindref="member">TestPropertiesAsXmlAttributes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result" kindref="compound">TestResult</ref>&amp;<sp/>result);</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"></highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>output<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3416" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a66b6bb452af7102afcb07fc7146f0c9f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a66b6bb452af7102afcb07fc7146f0c9f" kindref="member">output_file_</ref>;</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"></highlight></codeline>
<codeline lineno="3418" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a3369b39ed647f06785cf2d65b8d38b98" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a3369b39ed647f06785cf2d65b8d38b98" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer" kindref="compound">XmlUnitTestResultPrinter</ref>);</highlight></codeline>
<codeline lineno="3419"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"></highlight></codeline>
<codeline lineno="3421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>new<sp/>XmlUnitTestResultPrinter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3422" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a7bfec56d4e2ab7d80f3f0fde70fbf255" refkind="member"><highlight class="normal"><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a7bfec56d4e2ab7d80f3f0fde70fbf255" kindref="member">XmlUnitTestResultPrinter::XmlUnitTestResultPrinter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output_file)</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>output_file_(output_file)<sp/>{</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a66b6bb452af7102afcb07fc7146f0c9f" kindref="member">output_file_</ref>.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>()<sp/>==<sp/>NULL<sp/>||<sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a66b6bb452af7102afcb07fc7146f0c9f" kindref="member">output_file_</ref>.<ref refid="cpp/string/basic_string/empty" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">empty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;XML<sp/>output<sp/>file<sp/>may<sp/>not<sp/>be<sp/>null\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Called<sp/>after<sp/>the<sp/>unit<sp/>test<sp/>ends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3432" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1aa21b349a51378e47877ee6d153c37116" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1aa21b349a51378e47877ee6d153c37116" kindref="member">XmlUnitTestResultPrinter::OnTestIterationEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*iteration*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/>FILE*<sp/>xmlout<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><ref refid="de/d14/classtesting_1_1internal_1_1_file_path" kindref="compound">FilePath</ref><sp/>output_file(<ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a66b6bb452af7102afcb07fc7146f0c9f" kindref="member">output_file_</ref>);</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><ref refid="de/d14/classtesting_1_1internal_1_1_file_path" kindref="compound">FilePath</ref><sp/>output_dir(output_file.<ref refid="de/d14/classtesting_1_1internal_1_1_file_path_1af170c740d93389979d9fcfa1058812c5" kindref="member">RemoveFileName</ref>());</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"></highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_dir.<ref refid="de/d14/classtesting_1_1internal_1_1_file_path_1a957e950af2e23bbd4e8b647214595218" kindref="member">CreateDirectoriesRecursively</ref>())<sp/>{</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/>xmlout<sp/>=<sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a4042201dcc4932641d484e7ddf94de7d" kindref="member">posix::FOpen</ref>(<ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a66b6bb452af7102afcb07fc7146f0c9f" kindref="member">output_file_</ref>.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xmlout<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(wan):<sp/>report<sp/>the<sp/>reason<sp/>of<sp/>the<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>do<sp/>it<sp/>for<sp/>now<sp/>as:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>There<sp/>is<sp/>no<sp/>urgent<sp/>need<sp/>for<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>It&apos;s<sp/>a<sp/>bit<sp/>involved<sp/>to<sp/>make<sp/>the<sp/>errno<sp/>variable<sp/>thread-safe<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>all<sp/>three<sp/>operating<sp/>systems<sp/>(Linux,<sp/>Windows,<sp/>and<sp/>Mac<sp/>OS).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>3.<sp/>To<sp/>interpret<sp/>the<sp/>meaning<sp/>of<sp/>errno<sp/>in<sp/>a<sp/>thread-safe<sp/>way,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>we<sp/>need<sp/>the<sp/>strerror_r()<sp/>function,<sp/>which<sp/>is<sp/>not<sp/>available<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>file<sp/>\&quot;%s\&quot;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a66b6bb452af7102afcb07fc7146f0c9f" kindref="member">output_file_</ref>.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_stringstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::stringstream</ref><sp/>stream;</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1af053fc729d29be4c3de9c1e5e7585cdc" kindref="member">PrintXmlUnitTest</ref>(&amp;stream,<sp/>unit_test);</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/>fprintf(xmlout,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a9743f1da2e8f7a4a8178ec9595a56112" kindref="member">StringStreamToString</ref>(&amp;stream).c_str());</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/>fclose(xmlout);</highlight></codeline>
<codeline lineno="3462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>XML-escaped<sp/>copy<sp/>of<sp/>the<sp/>input<sp/>string<sp/>str.<sp/><sp/>If<sp/>is_attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3465"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>true,<sp/>the<sp/>text<sp/>is<sp/>meant<sp/>to<sp/>appear<sp/>as<sp/>an<sp/>attribute<sp/>value,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>normalizable<sp/>whitespace<sp/>is<sp/>preserved<sp/>by<sp/>replacing<sp/>it<sp/>with<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Invalid<sp/>XML<sp/>characters<sp/>in<sp/>str,<sp/>if<sp/>any,<sp/>are<sp/>stripped<sp/>from<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>expected<sp/>that<sp/>most,<sp/>if<sp/>not<sp/>all,<sp/>of<sp/>the<sp/>text<sp/>processed<sp/>by<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>module<sp/>will<sp/>consist<sp/>of<sp/>ordinary<sp/>English<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>module<sp/>is<sp/>ever<sp/>modified<sp/>to<sp/>produce<sp/>version<sp/>1.1<sp/>XML<sp/>output,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"></highlight><highlight class="comment">//<sp/>most<sp/>invalid<sp/>characters<sp/>can<sp/>be<sp/>retained<sp/>using<sp/>character<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(wan):<sp/>It<sp/>might<sp/>be<sp/>nice<sp/>to<sp/>have<sp/>a<sp/>minimally<sp/>invasive,<sp/>human-readable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"></highlight><highlight class="comment">//<sp/>escaping<sp/>scheme<sp/>for<sp/>invalid<sp/>characters,<sp/>rather<sp/>than<sp/>dropping<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3476" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a574c52329b5b097822f969ce2007d97f" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a574c52329b5b097822f969ce2007d97f" kindref="member">XmlUnitTestResultPrinter::EscapeXml</ref>(</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>str,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_attribute)<sp/>{</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref><sp/>m;</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>str.<ref refid="cpp/string/basic_string/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>str[i];</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ch)<sp/>{</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;lt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;amp;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_attribute)</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_attribute)</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a18cfed6b1b9d7aedd2c43129c7e46e95" kindref="member">IsValidXmlCharacter</ref>(ch))<sp/>{</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_attribute<sp/>&amp;&amp;<sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a3d910f5c6a752c629a276a8585640795" kindref="member">IsNormalizableWhitespace</ref>(ch))</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;#x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a45841175db35bdac6428d81ac9f00fb4" kindref="member">String::FormatByte</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch))</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/>ch;</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m.<ref refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" kindref="member">GetString</ref>();</highlight></codeline>
<codeline lineno="3517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"></highlight></codeline>
<codeline lineno="3519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>given<sp/>string<sp/>with<sp/>all<sp/>characters<sp/>invalid<sp/>in<sp/>XML<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3520"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Currently<sp/>invalid<sp/>characters<sp/>are<sp/>dropped<sp/>from<sp/>the<sp/>string.<sp/>An</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3521"><highlight class="normal"></highlight><highlight class="comment">//<sp/>alternative<sp/>is<sp/>to<sp/>replace<sp/>them<sp/>with<sp/>certain<sp/>characters<sp/>such<sp/>as<sp/>.<sp/>or<sp/>?.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3522" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a110bba54ef230f36ee4b226ead1ebbe7" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a110bba54ef230f36ee4b226ead1ebbe7" kindref="member">XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters</ref>(</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>output;</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/>output.<ref refid="cpp/string/basic_string/reserve" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">reserve</ref>(str.<ref refid="cpp/string/basic_string/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>());</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::string::const_iterator<sp/>it<sp/>=<sp/>str.<ref refid="cpp/string/basic_string/begin" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">begin</ref>();<sp/>it<sp/>!=<sp/>str.<ref refid="cpp/string/basic_string/end" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">end</ref>();<sp/>++it)</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a18cfed6b1b9d7aedd2c43129c7e46e95" kindref="member">IsValidXmlCharacter</ref>(*it))</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output.<ref refid="cpp/string/basic_string/push_back" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">push_back</ref>(*it);</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"></highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="3531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"></highlight></codeline>
<codeline lineno="3533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>routines<sp/>generate<sp/>an<sp/>XML<sp/>representation<sp/>of<sp/>a<sp/>UnitTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3536"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>how<sp/>Google<sp/>Test<sp/>concepts<sp/>map<sp/>to<sp/>the<sp/>DTD:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3537"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3538"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;testsuites<sp/>name=&quot;AllTests&quot;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;--<sp/>corresponds<sp/>to<sp/>a<sp/>UnitTest<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3539"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>&lt;testsuite<sp/>name=&quot;testcase-name&quot;&gt;<sp/><sp/>&lt;--<sp/>corresponds<sp/>to<sp/>a<sp/>TestCase<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3540"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&lt;testcase<sp/>name=&quot;test-name&quot;&gt;<sp/><sp/><sp/><sp/><sp/>&lt;--<sp/>corresponds<sp/>to<sp/>a<sp/>TestInfo<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3541"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=&quot;...&quot;&gt;...&lt;/failure&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3542"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=&quot;...&quot;&gt;...&lt;/failure&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3543"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=&quot;...&quot;&gt;...&lt;/failure&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3544"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;--<sp/>individual<sp/>assertion<sp/>failures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3545"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&lt;/testcase&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3546"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>&lt;/testsuite&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3547"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;/testsuites&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"></highlight></codeline>
<codeline lineno="3549"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>the<sp/>given<sp/>time<sp/>in<sp/>milliseconds<sp/>as<sp/>seconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3550" refid="d0/da7/namespacetesting_1_1internal_1a5802d68a85d566a0c82a0df5fd2aa58b" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a5802d68a85d566a0c82a0df5fd2aa58b" kindref="member">FormatTimeInMillisAsSeconds</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref><sp/>ms)<sp/>{</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_stringstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::stringstream</ref><sp/>ss;</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/>(static_cast&lt;double&gt;(ms)<sp/>*<sp/>1e-3);</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.<ref refid="cpp/io/basic_stringstream/str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">str</ref>();</highlight></codeline>
<codeline lineno="3554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"></highlight></codeline>
<codeline lineno="3556" refid="d0/da7/namespacetesting_1_1internal_1a60af94307ed4f00a57b5c6d9617c046d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a60af94307ed4f00a57b5c6d9617c046d" kindref="member">PortableLocaltime</ref>(time_t<sp/>seconds,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>tm*<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>localtime_s(out,<sp/>&amp;seconds)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__MINGW32__)<sp/>||<sp/>defined(__MINGW64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MINGW<sp/>&lt;time.h&gt;<sp/>provides<sp/>neither<sp/>localtime_r<sp/>nor<sp/>localtime_s,<sp/>but<sp/>uses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows&apos;<sp/>localtime(),<sp/>which<sp/>has<sp/>a<sp/>thread-local<sp/>tm<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm*<sp/>tm_ptr<sp/>=<sp/>localtime(&amp;seconds);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tm_ptr<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/>*out<sp/>=<sp/>*tm_ptr;</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>localtime_r(&amp;seconds,<sp/>out)<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"></highlight></codeline>
<codeline lineno="3572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>given<sp/>epoch<sp/>time<sp/>in<sp/>milliseconds<sp/>to<sp/>a<sp/>date<sp/>string<sp/>in<sp/>the<sp/>ISO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3573"><highlight class="normal"></highlight><highlight class="comment">//<sp/>8601<sp/>format,<sp/>without<sp/>the<sp/>timezone<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3574" refid="d0/da7/namespacetesting_1_1internal_1a779873280d17edf78c0a569a419432db" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a779873280d17edf78c0a569a419432db" kindref="member">FormatEpochTimeInMillisAsIso8601</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref><sp/>ms)<sp/>{</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>time_struct;</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d0/da7/namespacetesting_1_1internal_1a60af94307ed4f00a57b5c6d9617c046d" kindref="member">PortableLocaltime</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">time_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ms<sp/>/<sp/>1000),<sp/>&amp;time_struct))</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>YYYY-MM-DDThh:mm:ss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(time_struct.tm_year<sp/>+<sp/>1900)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a1c674bb56e2cc7dc32d026056d131bd2" kindref="member">String::FormatIntWidth2</ref>(time_struct.tm_mon<sp/>+<sp/>1)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a1c674bb56e2cc7dc32d026056d131bd2" kindref="member">String::FormatIntWidth2</ref>(time_struct.tm_mday)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a1c674bb56e2cc7dc32d026056d131bd2" kindref="member">String::FormatIntWidth2</ref>(time_struct.tm_hour)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a1c674bb56e2cc7dc32d026056d131bd2" kindref="member">String::FormatIntWidth2</ref>(time_struct.tm_min)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a1c674bb56e2cc7dc32d026056d131bd2" kindref="member">String::FormatIntWidth2</ref>(time_struct.tm_sec);</highlight></codeline>
<codeline lineno="3585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"></highlight></codeline>
<codeline lineno="3587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Streams<sp/>an<sp/>XML<sp/>CDATA<sp/>section,<sp/>escaping<sp/>invalid<sp/>CDATA<sp/>sequences<sp/>as<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3588" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1abe3b759db2f664b7f61500b785d9f2a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1abe3b759db2f664b7f61500b785d9f2a4" kindref="member">XmlUnitTestResultPrinter::OutputXmlCDataSection</ref>(::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>stream,</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>segment<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;![CDATA[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>next_segment<sp/>=<sp/>strstr(segment,<sp/></highlight><highlight class="stringliteral">&quot;]]&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_segment<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;<ref refid="cpp/io/basic_ostream/write" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">write</ref>(</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="cpp/io/streamsize" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::streamsize</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(next_segment<sp/>-<sp/>segment));</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]]&gt;]]&amp;gt;&lt;![CDATA[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segment<sp/>=<sp/>next_segment<sp/>+<sp/>strlen(</highlight><highlight class="stringliteral">&quot;]]&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/>segment;</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]]&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"></highlight></codeline>
<codeline lineno="3607" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">XmlUnitTestResultPrinter::OutputXmlAttribute</ref>(</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>stream,</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>element_name,</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref>&amp;<sp/>allowed_names<sp/>=</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1acb3fdfadf475a3c2f5e22a3dae73532a" kindref="member">GetReservedAttributesForElement</ref>(element_name);</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"></highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1ab54343f0a36dc4cb0ce8a478dd7847b8" kindref="member">GTEST_CHECK_</ref>(<ref refid="cpp/algorithm/find" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::find</ref>(allowed_names.<ref refid="cpp/container/vector/begin" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">begin</ref>(),<sp/>allowed_names.<ref refid="cpp/container/vector/end" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">end</ref>(),<sp/>name)<sp/>!=</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allowed_names.<ref refid="cpp/container/vector/end" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">end</ref>())</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Attribute<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>allowed<sp/>for<sp/>element<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>element_name</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1acf1a6d570b5f55d2cf7deba7c0cd374a" kindref="member">EscapeXmlAttribute</ref>(value)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"></highlight></codeline>
<codeline lineno="3623"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>an<sp/>XML<sp/>representation<sp/>of<sp/>a<sp/>TestInfo<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(wan):<sp/>There<sp/>is<sp/>also<sp/>value<sp/>in<sp/>printing<sp/>properties<sp/>with<sp/>the<sp/>plain<sp/>printer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3625" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a1385d3994e1daf7d80693bc6936e9853" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a1385d3994e1daf7d80693bc6936e9853" kindref="member">XmlUnitTestResultPrinter::OutputXmlTestInfo</ref>(::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>stream,</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_name,</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result" kindref="compound">TestResult</ref>&amp;<sp/>result<sp/>=<sp/>*test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1af9eee0a44c398bf857c0ab4f961c2bd7" kindref="member">result</ref>();</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>kTestcase<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"></highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&lt;testcase&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestcase,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"></highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1af89b13e99f07353bc39ca99ce8086553" kindref="member">value_param</ref>()<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestcase,<sp/></highlight><highlight class="stringliteral">&quot;value_param&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1af89b13e99f07353bc39ca99ce8086553" kindref="member">value_param</ref>());</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1af7c235854a4f2716ffe707d712673772" kindref="member">type_param</ref>()<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestcase,<sp/></highlight><highlight class="stringliteral">&quot;type_param&quot;</highlight><highlight class="normal">,<sp/>test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1af7c235854a4f2716ffe707d712673772" kindref="member">type_param</ref>());</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestcase,<sp/></highlight><highlight class="stringliteral">&quot;status&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info.<ref refid="d1/d79/classtesting_1_1_test_info_1a80b7dba9dc7b6b640c8ba46897c8e181" kindref="member">should_run</ref>()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;run&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;notrun&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestcase,<sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a5802d68a85d566a0c82a0df5fd2aa58b" kindref="member">FormatTimeInMillisAsSeconds</ref>(result.<ref refid="d1/d69/classtesting_1_1_test_result_1afc30650e1ab3e777836e49831149f429" kindref="member">elapsed_time</ref>()));</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestcase,<sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal">,<sp/>test_case_name);</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1ae6b121e2b6c573baab04973b8616268d" kindref="member">TestPropertiesAsXmlAttributes</ref>(result);</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"></highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failures<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>result.<ref refid="d1/d69/classtesting_1_1_test_result_1af2b823bb2a52246eea54b164bca43ec4" kindref="member">total_part_count</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>part<sp/>=<sp/>result.<ref refid="d1/d69/classtesting_1_1_test_result_1a69232817e4f6a8a13663f151131e4f90" kindref="member">GetTestPartResult</ref>(i);</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(part.<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a03c20ddaa381f1926a24672f545b70eb" kindref="member">failed</ref>())<sp/>{</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++failures<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>location<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae75f0742876f6d9ba86daf5603bf2448" kindref="member">internal::FormatCompilerIndependentFileLocation</ref>(</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part.<ref refid="d0/d4b/classtesting_1_1_test_part_result_1ad5e655e4f5a697870e836f380a16797c" kindref="member">file_name</ref>(),<sp/>part.<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a10a4f56de3322c42846ad149b1227d86" kindref="member">line_number</ref>());</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>summary<sp/>=<sp/>location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>part.<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a4e009fb3d1ece6cd065fa5aa070df80d" kindref="member">summary</ref>();</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1acf1a6d570b5f55d2cf7deba7c0cd374a" kindref="member">EscapeXmlAttribute</ref>(summary.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>())</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>type=\&quot;\&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>detail<sp/>=<sp/>location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>part.<ref refid="d0/d4b/classtesting_1_1_test_part_result_1aea6220e002a8039b97dc6fbd9ff79f46" kindref="member">message</ref>();</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1abe3b759db2f664b7f61500b785d9f2a4" kindref="member">OutputXmlCDataSection</ref>(stream,<sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a110bba54ef230f36ee4b226ead1ebbe7" kindref="member">RemoveInvalidXmlCharacters</ref>(detail).c_str());</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/failure&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"></highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failures<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>/&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&lt;/testcase&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"></highlight></codeline>
<codeline lineno="3674"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>an<sp/>XML<sp/>representation<sp/>of<sp/>a<sp/>TestCase<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3675" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1addf25742548aa0376bf180ed28187460" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1addf25742548aa0376bf180ed28187460" kindref="member">XmlUnitTestResultPrinter::PrintXmlTestCase</ref>(<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>stream,</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/>test_case)<sp/>{</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>kTestsuite<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testsuite&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kTestsuite;</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestsuite,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a8c4da4b626748f746b1f9fdbe885edfb" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestsuite,<sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a5b3b073637db1a071ba2d749128e9f8c" kindref="member">reportable_test_count</ref>()));</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestsuite,<sp/></highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a527d55a764fa3193cda01aaa95a75e8b" kindref="member">failed_test_count</ref>()));</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream,<sp/>kTestsuite,<sp/></highlight><highlight class="stringliteral">&quot;disabled&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1ae79e09f147841ac66b6478137e2260c8" kindref="member">reportable_disabled_test_count</ref>()));</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestsuite,<sp/></highlight><highlight class="stringliteral">&quot;errors&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestsuite,<sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a5802d68a85d566a0c82a0df5fd2aa58b" kindref="member">FormatTimeInMillisAsSeconds</ref>(test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1afc30650e1ab3e777836e49831149f429" kindref="member">elapsed_time</ref>()));</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1ae6b121e2b6c573baab04973b8616268d" kindref="member">TestPropertiesAsXmlAttributes</ref>(test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a0f8738e1646472a8dd4061aff7b58d6b" kindref="member">ad_hoc_test_result</ref>())</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"></highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1ac11f534b6c4990ddada85360a2371c4a" kindref="member">total_test_count</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a184e6f335c5c8a78e37f9ab1d537de92" kindref="member">GetTestInfo</ref>(i)-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1a2bda7f5b5e6c4149215ee073f7ec6e7b" kindref="member">is_reportable</ref>())</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a1385d3994e1daf7d80693bc6936e9853" kindref="member">OutputXmlTestInfo</ref>(stream,<sp/>test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a8c4da4b626748f746b1f9fdbe885edfb" kindref="member">name</ref>(),<sp/>*test_case.<ref refid="d0/dfa/classtesting_1_1_test_case_1a184e6f335c5c8a78e37f9ab1d537de92" kindref="member">GetTestInfo</ref>(i));</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kTestsuite<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"></highlight></codeline>
<codeline lineno="3700"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>an<sp/>XML<sp/>summary<sp/>of<sp/>unit_test<sp/>to<sp/>output<sp/>stream<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3701" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1af053fc729d29be4c3de9c1e5e7585cdc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1af053fc729d29be4c3de9c1e5e7585cdc" kindref="member">XmlUnitTestResultPrinter::PrintXmlUnitTest</ref>(<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>stream,</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test)<sp/>{</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>kTestsuites<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testsuites&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"></highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;?xml<sp/>version=\&quot;1.0\&quot;<sp/>encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kTestsuites;</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"></highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestsuites,<sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1a5b3b073637db1a071ba2d749128e9f8c" kindref="member">reportable_test_count</ref>()));</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestsuites,<sp/></highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1a527d55a764fa3193cda01aaa95a75e8b" kindref="member">failed_test_count</ref>()));</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream,<sp/>kTestsuites,<sp/></highlight><highlight class="stringliteral">&quot;disabled&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1ae79e09f147841ac66b6478137e2260c8" kindref="member">reportable_disabled_test_count</ref>()));</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestsuites,<sp/></highlight><highlight class="stringliteral">&quot;errors&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream,<sp/>kTestsuites,<sp/></highlight><highlight class="stringliteral">&quot;timestamp&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a779873280d17edf78c0a569a419432db" kindref="member">FormatEpochTimeInMillisAsIso8601</ref>(unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1aa5a11697bd2475019fecc0ab3c02b7a3" kindref="member">start_timestamp</ref>()));</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestsuites,<sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a5802d68a85d566a0c82a0df5fd2aa58b" kindref="member">FormatTimeInMillisAsSeconds</ref>(unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1a39749dc106ab26d79347aa5bd908762e" kindref="member">elapsed_time</ref>()));</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"></highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(shuffle))<sp/>{</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestsuites,<sp/></highlight><highlight class="stringliteral">&quot;random_seed&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1ad4565896fee1929f7fb711abcbe05eb6" kindref="member">random_seed</ref>()));</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"></highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1ae6b121e2b6c573baab04973b8616268d" kindref="member">TestPropertiesAsXmlAttributes</ref>(unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1aceeb0e1f6e67b6876a2740b8445cabe3" kindref="member">ad_hoc_test_result</ref>());</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"></highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1a4d8342f10ee86c7a4d66a8dc38b778c5" kindref="member">OutputXmlAttribute</ref>(stream,<sp/>kTestsuites,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AllTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"></highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1ab06cec6b304d4b5d853e4047f98dba3b" kindref="member">total_test_case_count</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1ae331bba7ebd2790388dbbf576b6ceba9" kindref="member">GetTestCase</ref>(i)-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1a5b3b073637db1a071ba2d749128e9f8c" kindref="member">reportable_test_count</ref>()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1addf25742548aa0376bf180ed28187460" kindref="member">PrintXmlTestCase</ref>(stream,<sp/>*unit_test.<ref refid="d7/d47/classtesting_1_1_unit_test_1ae331bba7ebd2790388dbbf576b6ceba9" kindref="member">GetTestCase</ref>(i));</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kTestsuites<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"></highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produces<sp/>a<sp/>string<sp/>representing<sp/>the<sp/>test<sp/>properties<sp/>in<sp/>a<sp/>result<sp/>as<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight><highlight class="comment">//<sp/>delimited<sp/>XML<sp/>attributes<sp/>based<sp/>on<sp/>the<sp/>property<sp/>key=&quot;value&quot;<sp/>pairs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3741" refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1ae6b121e2b6c573baab04973b8616268d" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1ae6b121e2b6c573baab04973b8616268d" kindref="member">XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes</ref>(</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result" kindref="compound">TestResult</ref>&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref><sp/>attributes;</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>result.<ref refid="d1/d69/classtesting_1_1_test_result_1a3be0cdbe3beab03196d76376f7c9c4bf" kindref="member">test_property_count</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d27/classtesting_1_1_test_property" kindref="compound">TestProperty</ref>&amp;<sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal"><sp/>=<sp/>result.<ref refid="d1/d69/classtesting_1_1_test_result_1a7cd4340ff26d30dadbaf8e50515fbf9a" kindref="member">GetTestProperty</ref>(i);</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/>attributes<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal">.key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1acf1a6d570b5f55d2cf7deba7c0cd374a" kindref="member">EscapeXmlAttribute</ref>(property.value())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attributes.<ref refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" kindref="member">GetString</ref>();</highlight></codeline>
<codeline lineno="3750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"></highlight></codeline>
<codeline lineno="3752"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>XmlUnitTestResultPrinter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3753"><highlight class="normal"></highlight></codeline>
<codeline lineno="3754"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3755"><highlight class="normal"></highlight></codeline>
<codeline lineno="3756"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Checks<sp/>if<sp/>str<sp/>contains<sp/>&apos;=&apos;,<sp/>&apos;&amp;&apos;,<sp/>&apos;%&apos;<sp/>or<sp/>&apos;\n&apos;<sp/>characters.<sp/>If<sp/>yes,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3757"><highlight class="normal"></highlight><highlight class="comment">//<sp/>replaces<sp/>them<sp/>by<sp/>&quot;%xx&quot;<sp/>where<sp/>xx<sp/>is<sp/>their<sp/>hexadecimal<sp/>value.<sp/>For</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>example,<sp/>replaces<sp/>&quot;=&quot;<sp/>with<sp/>&quot;%3D&quot;.<sp/><sp/>This<sp/>algorithm<sp/>is<sp/>O(strlen(str))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3759"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>both<sp/>time<sp/>and<sp/>space<sp/>--<sp/>important<sp/>as<sp/>the<sp/>input<sp/>str<sp/>may<sp/>contain<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arbitrarily<sp/>long<sp/>test<sp/>failure<sp/>message<sp/>and<sp/>stack<sp/>trace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>StreamingListener::UrlEncode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/>result.<ref refid="cpp/string/basic_string/reserve" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">reserve</ref>(strlen(str)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>*str;<sp/>ch<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>ch<sp/>=<sp/>*++str)<sp/>{</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ch)<sp/>{</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="cpp/string/basic_string/append" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">append</ref>(</highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="d0/dde/classtesting_1_1internal_1_1_string_1a45841175db35bdac6428d81ac9f00fb4" kindref="member">String::FormatByte</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch)));</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="cpp/string/basic_string/push_back" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">push_back</ref>(ch);</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"></highlight></codeline>
<codeline lineno="3780"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StreamingListener::SocketWriter::MakeConnection()<sp/>{</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1ab54343f0a36dc4cb0ce8a478dd7847b8" kindref="member">GTEST_CHECK_</ref>(sockfd_<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MakeConnection()<sp/>can&apos;t<sp/>be<sp/>called<sp/>when<sp/>there<sp/>is<sp/>already<sp/>a<sp/>connection.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"></highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/>addrinfo<sp/>hints;</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/byte/memset" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">memset</ref>(&amp;hints,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hints));</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/>hints.ai_family<sp/>=<sp/>AF_UNSPEC;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>allow<sp/>both<sp/>IPv4<sp/>and<sp/>IPv6<sp/>addresses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/>hints.ai_socktype<sp/>=<sp/>SOCK_STREAM;</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/>addrinfo*<sp/>servinfo<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"></highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>getaddrinfo()<sp/>to<sp/>get<sp/>a<sp/>linked<sp/>list<sp/>of<sp/>IP<sp/>addresses<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>host<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_num<sp/>=<sp/>getaddrinfo(</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_name_.c_str(),<sp/>port_num_.c_str(),<sp/>&amp;hints,<sp/>&amp;servinfo);</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error_num<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a8ef4cb4c465db8c15464aecc6d9510ef" kindref="member">GTEST_LOG_</ref>(WARNING)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;stream_result_to:<sp/>getaddrinfo()<sp/>failed:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>gai_strerror(error_num);</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>through<sp/>all<sp/>the<sp/>results<sp/>and<sp/>connect<sp/>to<sp/>the<sp/>first<sp/>we<sp/>can.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(addrinfo*<sp/>cur_addr<sp/>=<sp/>servinfo;<sp/>sockfd_<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>cur_addr<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur_addr<sp/>=<sp/>cur_addr-&gt;ai_next)<sp/>{</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/>sockfd_<sp/>=<sp/>socket(</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur_addr-&gt;ai_family,<sp/>cur_addr-&gt;ai_socktype,<sp/>cur_addr-&gt;ai_protocol);</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sockfd_<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Connect<sp/>the<sp/>client<sp/>socket<sp/>to<sp/>the<sp/>server<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connect(sockfd_,<sp/>cur_addr-&gt;ai_addr,<sp/>cur_addr-&gt;ai_addrlen)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(sockfd_);</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sockfd_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"></highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/>freeaddrinfo(servinfo);<sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>done<sp/>with<sp/>this<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3814"><highlight class="normal"></highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sockfd_<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a8ef4cb4c465db8c15464aecc6d9510ef" kindref="member">GTEST_LOG_</ref>(WARNING)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;stream_result_to:<sp/>failed<sp/>to<sp/>connect<sp/>to<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>host_name_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>port_num_;</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"></highlight></codeline>
<codeline lineno="3821"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>class<sp/>Streaming<sp/>Listener</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3822"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_CAN_STREAM_RESULTS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/>ScopedTrace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pushes<sp/>the<sp/>given<sp/>source<sp/>file<sp/>location<sp/>and<sp/>message<sp/>onto<sp/>a<sp/>per-thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3827"><highlight class="normal"></highlight><highlight class="comment">//<sp/>trace<sp/>stack<sp/>maintained<sp/>by<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3828" refid="d9/d53/classtesting_1_1internal_1_1_scoped_trace_1a4c2fc42261af156212deb572aab8e88b" refkind="member"><highlight class="normal"><ref refid="d9/d53/classtesting_1_1internal_1_1_scoped_trace_1a4c2fc42261af156212deb572aab8e88b" kindref="member">ScopedTrace::ScopedTrace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/>message)</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a69abff5a4efdd07bd5faebe3dd318d06" kindref="member">GTEST_LOCK_EXCLUDED_</ref>(&amp;<ref refid="d7/d47/classtesting_1_1_unit_test_1ac9dde2076fedd43264499dc77faea627" kindref="member">UnitTest::mutex_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><ref refid="d6/deb/structtesting_1_1internal_1_1_trace_info" kindref="compound">TraceInfo</ref><sp/>trace;</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/>trace.<ref refid="d6/deb/structtesting_1_1internal_1_1_trace_info_1af0baa3ccdd9d2a6adf03b72e2bea5789" kindref="member">file</ref><sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/>trace.<ref refid="d6/deb/structtesting_1_1internal_1_1_trace_info_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref><sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/>trace.<ref refid="d6/deb/structtesting_1_1internal_1_1_trace_info_1a36bd74109f547f7f8198faf5a12d2879" kindref="member">message</ref><sp/>=<sp/>message.GetString();</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"></highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ad200090b11104aca39f25043701886cf" kindref="member">UnitTest::GetInstance</ref>()-&gt;<ref refid="d7/d47/classtesting_1_1_unit_test_1a5441ed38ff9485c7c4fe50f91b0cad7c" kindref="member">PushGTestTrace</ref>(trace);</highlight></codeline>
<codeline lineno="3836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"></highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pops<sp/>the<sp/>info<sp/>pushed<sp/>by<sp/>the<sp/>c&apos;tor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3839" refid="d9/d53/classtesting_1_1internal_1_1_scoped_trace_1a0bd652af94f27e7d9b40cf9369df948c" refkind="member"><highlight class="normal"><ref refid="d9/d53/classtesting_1_1internal_1_1_scoped_trace_1a0bd652af94f27e7d9b40cf9369df948c" kindref="member">ScopedTrace::~ScopedTrace</ref>()</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a69abff5a4efdd07bd5faebe3dd318d06" kindref="member">GTEST_LOCK_EXCLUDED_</ref>(&amp;<ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>::mutex_)<sp/>{</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ad200090b11104aca39f25043701886cf" kindref="member">UnitTest::GetInstance</ref>()-&gt;<ref refid="d7/d47/classtesting_1_1_unit_test_1af9705e0e80ae8712d476b48aedfb6847" kindref="member">PopGTestTrace</ref>();</highlight></codeline>
<codeline lineno="3842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal"></highlight></codeline>
<codeline lineno="3845"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>OsStackTraceGetter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3846"><highlight class="normal"></highlight></codeline>
<codeline lineno="3847"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d10/classtesting_1_1internal_1_1_os_stack_trace_getter_interface_1adf15738d11421bb96e42bd0baa4ab1cd" kindref="member">OsStackTraceGetterInterface::kElidedFramesMarker</ref><sp/>=</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;...<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a13d98c217176bd8722c395b9225fc19d" kindref="member">GTEST_NAME_</ref><sp/></highlight><highlight class="stringliteral">&quot;<sp/>internal<sp/>frames<sp/>...&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"></highlight></codeline>
<codeline lineno="3850" refid="d6/db4/classtesting_1_1internal_1_1_os_stack_trace_getter_1a3db1eb30008425796fc369aea9c6d240" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="d6/db4/classtesting_1_1internal_1_1_os_stack_trace_getter_1a3db1eb30008425796fc369aea9c6d240" kindref="member">OsStackTraceGetter::CurrentStackTrace</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*max_depth*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*skip_count*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"></highlight></codeline>
<codeline lineno="3855" refid="d6/db4/classtesting_1_1internal_1_1_os_stack_trace_getter_1aa97e532da98f524272b1256f018c0f07" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/db4/classtesting_1_1internal_1_1_os_stack_trace_getter_1aa97e532da98f524272b1256f018c0f07" kindref="member">OsStackTraceGetter::UponLeavingGTest</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"></highlight></codeline>
<codeline lineno="3857"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>class<sp/>that<sp/>creates<sp/>the<sp/>premature-exit<sp/>file<sp/>in<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3858"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constructor<sp/>and<sp/>deletes<sp/>the<sp/>file<sp/>in<sp/>its<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3859" refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file" kindref="compound">ScopedPrematureExitFile</ref><sp/>{</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3861" refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file_1af1dfc7a420889546ab10e4430c75885a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file_1af1dfc7a420889546ab10e4430c75885a" kindref="member">ScopedPrematureExitFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>premature_exit_filepath)</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file_1a867b09bc2d27e1a2a3fd6f62924bef45" kindref="member">premature_exit_filepath_</ref>(premature_exit_filepath)<sp/>{</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>path<sp/>to<sp/>the<sp/>premature-exit<sp/>file<sp/>is<sp/>specified...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(premature_exit_filepath<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>*premature_exit_filepath<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>file<sp/>with<sp/>a<sp/>single<sp/>&quot;0&quot;<sp/>character<sp/>in<sp/>it.<sp/><sp/>I/O</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>errors<sp/>are<sp/>ignored<sp/>as<sp/>there&apos;s<sp/>nothing<sp/>better<sp/>we<sp/>can<sp/>do<sp/>and<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>want<sp/>to<sp/>fail<sp/>the<sp/>test<sp/>because<sp/>of<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FILE*<sp/>pfile<sp/>=<sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a4042201dcc4932641d484e7ddf94de7d" kindref="member">posix::FOpen</ref>(premature_exit_filepath,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>1,<sp/>pfile);</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(pfile);</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"></highlight></codeline>
<codeline lineno="3874" refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file_1aedf72aefc47c81f117f540c1efa42a4d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file_1aedf72aefc47c81f117f540c1efa42a4d" kindref="member">~ScopedPrematureExitFile</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file_1a867b09bc2d27e1a2a3fd6f62924bef45" kindref="member">premature_exit_filepath_</ref><sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>*<ref refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file_1a867b09bc2d27e1a2a3fd6f62924bef45" kindref="member">premature_exit_filepath_</ref><sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remove(<ref refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file_1a867b09bc2d27e1a2a3fd6f62924bef45" kindref="member">premature_exit_filepath_</ref>);</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"></highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3881" refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file_1a867b09bc2d27e1a2a3fd6f62924bef45" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file_1a867b09bc2d27e1a2a3fd6f62924bef45" kindref="member">premature_exit_filepath_</ref>;</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"></highlight></codeline>
<codeline lineno="3883" refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file_1a99664f0fcce8fc8b7a2c72d4ff640574" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file_1a99664f0fcce8fc8b7a2c72d4ff640574" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file" kindref="compound">ScopedPrematureExitFile</ref>);</highlight></codeline>
<codeline lineno="3884"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3887"><highlight class="normal"></highlight></codeline>
<codeline lineno="3888"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>TestEventListeners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3889"><highlight class="normal"></highlight></codeline>
<codeline lineno="3890" refid="df/dab/classtesting_1_1_test_event_listeners_1a0d220264f48a921da04205ae52f77dcc" refkind="member"><highlight class="normal"><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a0d220264f48a921da04205ae52f77dcc" kindref="member">TestEventListeners::TestEventListeners</ref>()</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>repeater_(new<sp/>internal::TestEventRepeater()),</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_result_printer_(NULL),</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_xml_generator_(NULL)<sp/>{</highlight></codeline>
<codeline lineno="3894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"></highlight></codeline>
<codeline lineno="3896" refid="df/dab/classtesting_1_1_test_event_listeners_1a64868cfad376fa452e2f5d27c3a7c37d" refkind="member"><highlight class="normal"><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a64868cfad376fa452e2f5d27c3a7c37d" kindref="member">TestEventListeners::~TestEventListeners</ref>()<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a214e13f255aec851b01f01cadce19ded" kindref="member">repeater_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"></highlight></codeline>
<codeline lineno="3898"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>standard<sp/>listener<sp/>responsible<sp/>for<sp/>the<sp/>default<sp/>console</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3899"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output.<sp/><sp/>Can<sp/>be<sp/>removed<sp/>from<sp/>the<sp/>listeners<sp/>list<sp/>to<sp/>shut<sp/>down<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight><highlight class="comment">//<sp/>console<sp/>output.<sp/><sp/>Note<sp/>that<sp/>removing<sp/>this<sp/>object<sp/>from<sp/>the<sp/>listener<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>Release<sp/>transfers<sp/>its<sp/>ownership<sp/>to<sp/>the<sp/>user.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3902" refid="df/dab/classtesting_1_1_test_event_listeners_1ad98bf37c3296d62b69659734cb6c7cf8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1ad98bf37c3296d62b69659734cb6c7cf8" kindref="member">TestEventListeners::Append</ref>(<ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a214e13f255aec851b01f01cadce19ded" kindref="member">repeater_</ref>-&gt;<ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1ad98bf37c3296d62b69659734cb6c7cf8" kindref="member">Append</ref>(listener);</highlight></codeline>
<codeline lineno="3904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"></highlight></codeline>
<codeline lineno="3906"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Removes<sp/>the<sp/>given<sp/>event<sp/>listener<sp/>from<sp/>the<sp/>list<sp/>and<sp/>returns<sp/>it.<sp/><sp/>It<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>becomes<sp/>the<sp/>caller&apos;s<sp/>responsibility<sp/>to<sp/>delete<sp/>the<sp/>listener.<sp/>Returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NULL<sp/>if<sp/>the<sp/>listener<sp/>is<sp/>not<sp/>found<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3909" refid="df/dab/classtesting_1_1_test_event_listeners_1aac8fdc5e2ed8269a0c227dd554b00d27" refkind="member"><highlight class="normal"><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1aac8fdc5e2ed8269a0c227dd554b00d27" kindref="member">TestEventListeners::Release</ref>(<ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener<sp/>==<sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a4ea1a52addfc6ead892cff75c59a3648" kindref="member">default_result_printer_</ref>)</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a4ea1a52addfc6ead892cff75c59a3648" kindref="member">default_result_printer_</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener<sp/>==<sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a949bfbb24b7248c7713bee3f303f07f7" kindref="member">default_xml_generator_</ref>)</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a949bfbb24b7248c7713bee3f303f07f7" kindref="member">default_xml_generator_</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a214e13f255aec851b01f01cadce19ded" kindref="member">repeater_</ref>-&gt;<ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1aac8fdc5e2ed8269a0c227dd554b00d27" kindref="member">Release</ref>(listener);</highlight></codeline>
<codeline lineno="3915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"></highlight></codeline>
<codeline lineno="3917"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>repeater<sp/>that<sp/>broadcasts<sp/>the<sp/>TestEventListener<sp/>events<sp/>to<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3918"><highlight class="normal"></highlight><highlight class="comment">//<sp/>subscribers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3919" refid="df/dab/classtesting_1_1_test_event_listeners_1af7cfacdf90b4ba59566c16d95ee5d6cc" refkind="member"><highlight class="normal"><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1af7cfacdf90b4ba59566c16d95ee5d6cc" kindref="member">TestEventListeners::repeater</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a214e13f255aec851b01f01cadce19ded" kindref="member">repeater_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"></highlight></codeline>
<codeline lineno="3921"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>default_result_printer<sp/>attribute<sp/>to<sp/>the<sp/>provided<sp/>listener.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3922"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>listener<sp/>is<sp/>also<sp/>added<sp/>to<sp/>the<sp/>listener<sp/>list<sp/>and<sp/>previous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3923"><highlight class="normal"></highlight><highlight class="comment">//<sp/>default_result_printer<sp/>is<sp/>removed<sp/>from<sp/>it<sp/>and<sp/>deleted.<sp/>The<sp/>listener<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3924"><highlight class="normal"></highlight><highlight class="comment">//<sp/>also<sp/>be<sp/>NULL<sp/>in<sp/>which<sp/>case<sp/>it<sp/>will<sp/>not<sp/>be<sp/>added<sp/>to<sp/>the<sp/>list.<sp/>Does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3925"><highlight class="normal"></highlight><highlight class="comment">//<sp/>nothing<sp/>if<sp/>the<sp/>previous<sp/>and<sp/>the<sp/>current<sp/>listener<sp/>objects<sp/>are<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3926" refid="df/dab/classtesting_1_1_test_event_listeners_1a961d3f9b9dabd19bef6758afe2f6f814" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a961d3f9b9dabd19bef6758afe2f6f814" kindref="member">TestEventListeners::SetDefaultResultPrinter</ref>(<ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="df/dab/classtesting_1_1_test_event_listeners_1a4ea1a52addfc6ead892cff75c59a3648" kindref="member">default_result_printer_</ref><sp/>!=<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>an<sp/>error<sp/>to<sp/>pass<sp/>this<sp/>method<sp/>a<sp/>listener<sp/>that<sp/>is<sp/>already<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1aac8fdc5e2ed8269a0c227dd554b00d27" kindref="member">Release</ref>(<ref refid="df/dab/classtesting_1_1_test_event_listeners_1a4ea1a52addfc6ead892cff75c59a3648" kindref="member">default_result_printer_</ref>);</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a4ea1a52addfc6ead892cff75c59a3648" kindref="member">default_result_printer_</ref><sp/>=<sp/>listener;</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1ad98bf37c3296d62b69659734cb6c7cf8" kindref="member">Append</ref>(listener);</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"></highlight></codeline>
<codeline lineno="3937"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>default_xml_generator<sp/>attribute<sp/>to<sp/>the<sp/>provided<sp/>listener.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"></highlight><highlight class="comment">//<sp/>listener<sp/>is<sp/>also<sp/>added<sp/>to<sp/>the<sp/>listener<sp/>list<sp/>and<sp/>previous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3939"><highlight class="normal"></highlight><highlight class="comment">//<sp/>default_xml_generator<sp/>is<sp/>removed<sp/>from<sp/>it<sp/>and<sp/>deleted.<sp/>The<sp/>listener<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3940"><highlight class="normal"></highlight><highlight class="comment">//<sp/>also<sp/>be<sp/>NULL<sp/>in<sp/>which<sp/>case<sp/>it<sp/>will<sp/>not<sp/>be<sp/>added<sp/>to<sp/>the<sp/>list.<sp/>Does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3941"><highlight class="normal"></highlight><highlight class="comment">//<sp/>nothing<sp/>if<sp/>the<sp/>previous<sp/>and<sp/>the<sp/>current<sp/>listener<sp/>objects<sp/>are<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3942" refid="df/dab/classtesting_1_1_test_event_listeners_1a1e86c96ef131392c2b0bd302f16fb735" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a1e86c96ef131392c2b0bd302f16fb735" kindref="member">TestEventListeners::SetDefaultXmlGenerator</ref>(<ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="df/dab/classtesting_1_1_test_event_listeners_1a949bfbb24b7248c7713bee3f303f07f7" kindref="member">default_xml_generator_</ref><sp/>!=<sp/>listener)<sp/>{</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>an<sp/>error<sp/>to<sp/>pass<sp/>this<sp/>method<sp/>a<sp/>listener<sp/>that<sp/>is<sp/>already<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1aac8fdc5e2ed8269a0c227dd554b00d27" kindref="member">Release</ref>(<ref refid="df/dab/classtesting_1_1_test_event_listeners_1a949bfbb24b7248c7713bee3f303f07f7" kindref="member">default_xml_generator_</ref>);</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a949bfbb24b7248c7713bee3f303f07f7" kindref="member">default_xml_generator_</ref><sp/>=<sp/>listener;</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1ad98bf37c3296d62b69659734cb6c7cf8" kindref="member">Append</ref>(listener);</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"></highlight></codeline>
<codeline lineno="3953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Controls<sp/>whether<sp/>events<sp/>will<sp/>be<sp/>forwarded<sp/>by<sp/>the<sp/>repeater<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3954"><highlight class="normal"></highlight><highlight class="comment">//<sp/>listeners<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3955" refid="df/dab/classtesting_1_1_test_event_listeners_1a7f268cc2dd071206dcbbf6d82c63106b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a7f268cc2dd071206dcbbf6d82c63106b" kindref="member">TestEventListeners::EventForwardingEnabled</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a214e13f255aec851b01f01cadce19ded" kindref="member">repeater_</ref>-&gt;<ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a9e1c8698abdf66a53358d64273c51314" kindref="member">forwarding_enabled</ref>();</highlight></codeline>
<codeline lineno="3957"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"></highlight></codeline>
<codeline lineno="3959" refid="df/dab/classtesting_1_1_test_event_listeners_1ac2231ac2b553e0f6a1cc2923224b9623" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1ac2231ac2b553e0f6a1cc2923224b9623" kindref="member">TestEventListeners::SuppressEventForwarding</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a214e13f255aec851b01f01cadce19ded" kindref="member">repeater_</ref>-&gt;<ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater_1a98d02212569aa17d23c98a0c4b742d08" kindref="member">set_forwarding_enabled</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"></highlight></codeline>
<codeline lineno="3963"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>UnitTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"></highlight></codeline>
<codeline lineno="3965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>singleton<sp/>UnitTest<sp/>object.<sp/><sp/>The<sp/>first<sp/>time<sp/>this<sp/>method<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3966"><highlight class="normal"></highlight><highlight class="comment">//<sp/>called,<sp/>a<sp/>UnitTest<sp/>object<sp/>is<sp/>constructed<sp/>and<sp/>returned.<sp/><sp/>Consecutive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3967"><highlight class="normal"></highlight><highlight class="comment">//<sp/>calls<sp/>will<sp/>return<sp/>the<sp/>same<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3968"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3969"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>protect<sp/>this<sp/>under<sp/>mutex_<sp/>as<sp/>a<sp/>user<sp/>is<sp/>not<sp/>supposed<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3970"><highlight class="normal"></highlight><highlight class="comment">//<sp/>call<sp/>this<sp/>before<sp/>main()<sp/>starts,<sp/>from<sp/>which<sp/>point<sp/>on<sp/>the<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3971"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>will<sp/>never<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3972" refid="d7/d47/classtesting_1_1_unit_test_1ad200090b11104aca39f25043701886cf" refkind="member"><highlight class="normal"><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>*<sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ad200090b11104aca39f25043701886cf" kindref="member">UnitTest::GetInstance</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>compiled<sp/>with<sp/>MSVC<sp/>7.1<sp/>in<sp/>optimized<sp/>mode,<sp/>destroying<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>UnitTest<sp/>object<sp/>upon<sp/>exiting<sp/>the<sp/>program<sp/>messes<sp/>up<sp/>the<sp/>exit<sp/>code,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>causing<sp/>successful<sp/>tests<sp/>to<sp/>appear<sp/>failed.<sp/><sp/>We<sp/>have<sp/>to<sp/>use<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>different<sp/>implementation<sp/>in<sp/>this<sp/>case<sp/>to<sp/>bypass<sp/>the<sp/>compiler<sp/>bug.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>implementation<sp/>makes<sp/>the<sp/>compiler<sp/>happy,<sp/>at<sp/>the<sp/>cost<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>leaking<sp/>the<sp/>UnitTest<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3979"><highlight class="normal"></highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>CodeGear<sp/>C++Builder<sp/>insists<sp/>on<sp/>a<sp/>public<sp/>destructor<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>implementation.<sp/><sp/>Use<sp/>this<sp/>implementation<sp/>to<sp/>keep<sp/>good<sp/>OO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>design<sp/>with<sp/>private<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(_MSC_VER<sp/>==<sp/>1310<sp/>&amp;&amp;<sp/>!defined(_DEBUG))<sp/>||<sp/>defined(__BORLANDC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a3c5dacde37a0ec6c0bf79322f7e355ed" kindref="member">UnitTest</ref>;</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance;</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref><sp/>instance;</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;instance;</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>(_MSC_VER<sp/>==<sp/>1310<sp/>&amp;&amp;<sp/>!defined(_DEBUG))<sp/>||<sp/>defined(__BORLANDC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"></highlight></codeline>
<codeline lineno="3993"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>successful<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3994" refid="d7/d47/classtesting_1_1_unit_test_1a843725bbe9bfa57ae5fa11a84e575272" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a843725bbe9bfa57ae5fa11a84e575272" kindref="member">UnitTest::successful_test_case_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a843725bbe9bfa57ae5fa11a84e575272" kindref="member">successful_test_case_count</ref>();</highlight></codeline>
<codeline lineno="3996"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"></highlight></codeline>
<codeline lineno="3998"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3999" refid="d7/d47/classtesting_1_1_unit_test_1af0467dfbdb2874eb7efb3b80e81d063f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1af0467dfbdb2874eb7efb3b80e81d063f" kindref="member">UnitTest::failed_test_case_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1af0467dfbdb2874eb7efb3b80e81d063f" kindref="member">failed_test_case_count</ref>();</highlight></codeline>
<codeline lineno="4001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"></highlight></codeline>
<codeline lineno="4003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4004" refid="d7/d47/classtesting_1_1_unit_test_1ab06cec6b304d4b5d853e4047f98dba3b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ab06cec6b304d4b5d853e4047f98dba3b" kindref="member">UnitTest::total_test_case_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ab06cec6b304d4b5d853e4047f98dba3b" kindref="member">total_test_case_count</ref>();</highlight></codeline>
<codeline lineno="4006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"></highlight></codeline>
<codeline lineno="4008"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>test<sp/>cases<sp/>that<sp/>contain<sp/>at<sp/>least<sp/>one<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4009"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4010" refid="d7/d47/classtesting_1_1_unit_test_1a8ab1158b5875c26962e688932c442616" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a8ab1158b5875c26962e688932c442616" kindref="member">UnitTest::test_case_to_run_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a8ab1158b5875c26962e688932c442616" kindref="member">test_case_to_run_count</ref>();</highlight></codeline>
<codeline lineno="4012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"></highlight></codeline>
<codeline lineno="4014"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>successful<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4015" refid="d7/d47/classtesting_1_1_unit_test_1aadfe12d81153d7c5838a0eedad197d4e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1aadfe12d81153d7c5838a0eedad197d4e" kindref="member">UnitTest::successful_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1aadfe12d81153d7c5838a0eedad197d4e" kindref="member">successful_test_count</ref>();</highlight></codeline>
<codeline lineno="4017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"></highlight></codeline>
<codeline lineno="4019"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4020" refid="d7/d47/classtesting_1_1_unit_test_1a527d55a764fa3193cda01aaa95a75e8b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a527d55a764fa3193cda01aaa95a75e8b" kindref="member">UnitTest::failed_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a527d55a764fa3193cda01aaa95a75e8b" kindref="member">failed_test_count</ref>();<sp/>}</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"></highlight></codeline>
<codeline lineno="4022"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests<sp/>that<sp/>will<sp/>be<sp/>reported<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4023" refid="d7/d47/classtesting_1_1_unit_test_1ae79e09f147841ac66b6478137e2260c8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ae79e09f147841ac66b6478137e2260c8" kindref="member">UnitTest::reportable_disabled_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ae79e09f147841ac66b6478137e2260c8" kindref="member">reportable_disabled_test_count</ref>();</highlight></codeline>
<codeline lineno="4025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4028" refid="d7/d47/classtesting_1_1_unit_test_1a306df17b97d7adb53a092db57dd2ed2b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a306df17b97d7adb53a092db57dd2ed2b" kindref="member">UnitTest::disabled_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a306df17b97d7adb53a092db57dd2ed2b" kindref="member">disabled_test_count</ref>();</highlight></codeline>
<codeline lineno="4030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>to<sp/>be<sp/>printed<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4033" refid="d7/d47/classtesting_1_1_unit_test_1a5b3b073637db1a071ba2d749128e9f8c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a5b3b073637db1a071ba2d749128e9f8c" kindref="member">UnitTest::reportable_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a5b3b073637db1a071ba2d749128e9f8c" kindref="member">reportable_test_count</ref>();</highlight></codeline>
<codeline lineno="4035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"></highlight></codeline>
<codeline lineno="4037"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4038" refid="d7/d47/classtesting_1_1_unit_test_1ac11f534b6c4990ddada85360a2371c4a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ac11f534b6c4990ddada85360a2371c4a" kindref="member">UnitTest::total_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ac11f534b6c4990ddada85360a2371c4a" kindref="member">total_test_count</ref>();<sp/>}</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"></highlight></codeline>
<codeline lineno="4040"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4041" refid="d7/d47/classtesting_1_1_unit_test_1a9964c29b369696df155b3adac96cfe66" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a9964c29b369696df155b3adac96cfe66" kindref="member">UnitTest::test_to_run_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a9964c29b369696df155b3adac96cfe66" kindref="member">test_to_run_count</ref>();<sp/>}</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"></highlight></codeline>
<codeline lineno="4043"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>time<sp/>of<sp/>the<sp/>test<sp/>program<sp/>start,<sp/>in<sp/>ms<sp/>from<sp/>the<sp/>start<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4044"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UNIX<sp/>epoch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4045" refid="d7/d47/classtesting_1_1_unit_test_1aa5a11697bd2475019fecc0ab3c02b7a3" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">internal::TimeInMillis</ref><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1aa5a11697bd2475019fecc0ab3c02b7a3" kindref="member">UnitTest::start_timestamp</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a04680a4b891b33f6c7a620151f1cc5d9" kindref="member">start_timestamp</ref>();</highlight></codeline>
<codeline lineno="4047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"></highlight></codeline>
<codeline lineno="4049"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>elapsed<sp/>time,<sp/>in<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4050" refid="d7/d47/classtesting_1_1_unit_test_1a39749dc106ab26d79347aa5bd908762e" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">internal::TimeInMillis</ref><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a39749dc106ab26d79347aa5bd908762e" kindref="member">UnitTest::elapsed_time</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1afc30650e1ab3e777836e49831149f429" kindref="member">elapsed_time</ref>();</highlight></codeline>
<codeline lineno="4052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"></highlight></codeline>
<codeline lineno="4054"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>unit<sp/>test<sp/>passed<sp/>(i.e.<sp/>all<sp/>test<sp/>cases<sp/>passed).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4055" refid="d7/d47/classtesting_1_1_unit_test_1aad2f13a7fb077e9e26c761dea838c160" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1aad2f13a7fb077e9e26c761dea838c160" kindref="member">UnitTest::Passed</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1aad2f13a7fb077e9e26c761dea838c160" kindref="member">Passed</ref>();<sp/>}</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"></highlight></codeline>
<codeline lineno="4057"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>unit<sp/>test<sp/>failed<sp/>(i.e.<sp/>some<sp/>test<sp/>case<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4058"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>something<sp/>outside<sp/>of<sp/>all<sp/>tests<sp/>failed).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4059" refid="d7/d47/classtesting_1_1_unit_test_1a365c0e4f912940e9cf7d844d06986445" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a365c0e4f912940e9cf7d844d06986445" kindref="member">UnitTest::Failed</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a365c0e4f912940e9cf7d844d06986445" kindref="member">Failed</ref>();<sp/>}</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"></highlight></codeline>
<codeline lineno="4061"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>i-th<sp/>test<sp/>case<sp/>among<sp/>all<sp/>the<sp/>test<sp/>cases.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4062"><highlight class="normal"></highlight><highlight class="comment">//<sp/>total_test_case_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4063" refid="d7/d47/classtesting_1_1_unit_test_1ae331bba7ebd2790388dbbf576b6ceba9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ae331bba7ebd2790388dbbf576b6ceba9" kindref="member">UnitTest::GetTestCase</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ab1514adec2c0da45bdc22ac3ce01bd75" kindref="member">GetTestCase</ref>(i);</highlight></codeline>
<codeline lineno="4065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"></highlight></codeline>
<codeline lineno="4067"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestResult<sp/>containing<sp/>information<sp/>on<sp/>test<sp/>failures<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4068"><highlight class="normal"></highlight><highlight class="comment">//<sp/>properties<sp/>logged<sp/>outside<sp/>of<sp/>individual<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4069" refid="d7/d47/classtesting_1_1_unit_test_1aceeb0e1f6e67b6876a2740b8445cabe3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result" kindref="compound">TestResult</ref>&amp;<sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1aceeb0e1f6e67b6876a2740b8445cabe3" kindref="member">UnitTest::ad_hoc_test_result</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a631915902b859eb456ae198543068d4b" kindref="member">ad_hoc_test_result</ref>();</highlight></codeline>
<codeline lineno="4071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"></highlight></codeline>
<codeline lineno="4073"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>i-th<sp/>test<sp/>case<sp/>among<sp/>all<sp/>the<sp/>test<sp/>cases.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4074"><highlight class="normal"></highlight><highlight class="comment">//<sp/>total_test_case_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4075" refid="d7/d47/classtesting_1_1_unit_test_1aed9ba9977fbd9b36e14b42fe9d72bfed" refkind="member"><highlight class="normal"><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1aed9ba9977fbd9b36e14b42fe9d72bfed" kindref="member">UnitTest::GetMutableTestCase</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a04b94a3c825711103b247aa87d6b76e3" kindref="member">GetMutableTestCase</ref>(i);</highlight></codeline>
<codeline lineno="4077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"></highlight></codeline>
<codeline lineno="4079"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>list<sp/>of<sp/>event<sp/>listeners<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>track<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4080"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inside<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4081" refid="d7/d47/classtesting_1_1_unit_test_1aeb82a98c4da4afafa5b68547c8ac380a" refkind="member"><highlight class="normal"><ref refid="df/dab/classtesting_1_1_test_event_listeners" kindref="compound">TestEventListeners</ref>&amp;<sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1aeb82a98c4da4afafa5b68547c8ac380a" kindref="member">UnitTest::listeners</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a371c481b63deeb0ecd47f42b4720480b" kindref="member">listeners</ref>();</highlight></codeline>
<codeline lineno="4083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"></highlight></codeline>
<codeline lineno="4085"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Registers<sp/>and<sp/>returns<sp/>a<sp/>global<sp/>test<sp/>environment.<sp/><sp/>When<sp/>a<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4086"><highlight class="normal"></highlight><highlight class="comment">//<sp/>program<sp/>is<sp/>run,<sp/>all<sp/>global<sp/>test<sp/>environments<sp/>will<sp/>be<sp/>set-up<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>order<sp/>they<sp/>were<sp/>registered.<sp/><sp/>After<sp/>all<sp/>tests<sp/>in<sp/>the<sp/>program<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4088"><highlight class="normal"></highlight><highlight class="comment">//<sp/>finished,<sp/>all<sp/>global<sp/>test<sp/>environments<sp/>will<sp/>be<sp/>torn-down<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4089"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*reverse*<sp/>order<sp/>they<sp/>were<sp/>registered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4090"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>UnitTest<sp/>object<sp/>takes<sp/>ownership<sp/>of<sp/>the<sp/>given<sp/>environment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4093"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>protect<sp/>this<sp/>under<sp/>mutex_,<sp/>as<sp/>we<sp/>only<sp/>support<sp/>calling<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4094"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4095" refid="d7/d47/classtesting_1_1_unit_test_1a615f6515c254c5ddda5f695e25da3da3" refkind="member"><highlight class="normal"><ref refid="d6/d91/classtesting_1_1_environment" kindref="compound">Environment</ref>*<sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a615f6515c254c5ddda5f695e25da3da3" kindref="member">UnitTest::AddEnvironment</ref>(<ref refid="d6/d91/classtesting_1_1_environment" kindref="compound">Environment</ref>*<sp/>env)<sp/>{</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(env<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a8e19d41ff9252d813d764bfa3c078689" kindref="member">impl_</ref>-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ab8c736184a052dbb4cb9e217683bae7a" kindref="member">environments</ref>().push_back(env);</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>env;</highlight></codeline>
<codeline lineno="4102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"></highlight></codeline>
<codeline lineno="4104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>TestPartResult<sp/>to<sp/>the<sp/>current<sp/>TestResult<sp/>object.<sp/><sp/>All<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assertion<sp/>macros<sp/>(e.g.<sp/>ASSERT_TRUE,<sp/>EXPECT_EQ,<sp/>etc)<sp/>eventually<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>to<sp/>report<sp/>their<sp/>results.<sp/><sp/>The<sp/>user<sp/>code<sp/>should<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assertion<sp/>macros<sp/>instead<sp/>of<sp/>calling<sp/>this<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4108" refid="d7/d47/classtesting_1_1_unit_test_1ac9d74c9edbbc9f363be7633138e7ab7f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ac9d74c9edbbc9f363be7633138e7ab7f" kindref="member">UnitTest::AddTestPartResult</ref>(</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">TestPartResult::Type</ref><sp/>result_type,</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file_name,</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_number,</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>message,</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>os_stack_trace)<sp/><ref refid="d3/dc9/gtest-port_8h_1a69abff5a4efdd07bd5faebe3dd318d06" kindref="member">GTEST_LOCK_EXCLUDED_</ref>(mutex_)<sp/>{</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref><sp/>msg;</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/>message;</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"></highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><ref refid="da/d2b/classtesting_1_1internal_1_1_g_test_mutex_lock" kindref="compound">internal::MutexLock</ref><sp/>lock(&amp;mutex_);</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(impl_-&gt;gtest_trace_stack().size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d3/dc9/gtest-port_8h_1a13d98c217176bd8722c395b9225fc19d" kindref="member">GTEST_NAME_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>trace:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"></highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(impl_-&gt;gtest_trace_stack().size());</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>&gt;<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/deb/structtesting_1_1internal_1_1_trace_info" kindref="compound">internal::TraceInfo</ref>&amp;<sp/>trace<sp/>=<sp/>impl_-&gt;gtest_trace_stack()[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a6264f0605b7d7d0609eae663c58662c0" kindref="member">internal::FormatFileLocation</ref>(trace.<ref refid="d6/deb/structtesting_1_1internal_1_1_trace_info_1af0baa3ccdd9d2a6adf03b72e2bea5789" kindref="member">file</ref>,<sp/>trace.<ref refid="d6/deb/structtesting_1_1internal_1_1_trace_info_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>)</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>trace.<ref refid="d6/deb/structtesting_1_1internal_1_1_trace_info_1a36bd74109f547f7f8198faf5a12d2879" kindref="member">message</ref>;</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"></highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(os_stack_trace.c_str()<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>!os_stack_trace.empty())<sp/>{</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a728a6aad655cf4704dad1a048212c570" kindref="member">internal::kStackTraceMarker</ref><sp/>&lt;&lt;<sp/>os_stack_trace;</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"></highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref><sp/>result<sp/>=</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>(result_type,<sp/>file_name,<sp/>line_number,</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.<ref refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" kindref="member">GetString</ref>().<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/>impl_-&gt;GetTestPartResultReporterForCurrentThread()-&gt;</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReportTestPartResult(result);</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"></highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result_type<sp/>!=<sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7af0536797208144380691e2b376ffc1d1" kindref="member">TestPartResult::kSuccess</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gtest_break_on_failure<sp/>takes<sp/>precedence<sp/>over</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gtest_throw_on_failure.<sp/><sp/>This<sp/>allows<sp/>a<sp/>user<sp/>to<sp/>set<sp/>the<sp/>latter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>code<sp/>(perhaps<sp/>in<sp/>order<sp/>to<sp/>use<sp/>Google<sp/>Test<sp/>assertions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>another<sp/>testing<sp/>framework)<sp/>and<sp/>specify<sp/>the<sp/>former<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>command<sp/>line<sp/>for<sp/>debugging.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(break_on_failure))<sp/>{</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_PHONE<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_RT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>DebugBreak<sp/>on<sp/>Windows<sp/>allows<sp/>gtest<sp/>to<sp/>still<sp/>break<sp/>into<sp/>a<sp/>debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>a<sp/>failure<sp/>happens<sp/>and<sp/>both<sp/>the<sp/>--gtest_break_on_failure<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>--gtest_catch_exceptions<sp/>flags<sp/>are<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DebugBreak();</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dereference<sp/>NULL<sp/>through<sp/>a<sp/>volatile<sp/>pointer<sp/>to<sp/>prevent<sp/>the<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>removing.<sp/>We<sp/>use<sp/>this<sp/>rather<sp/>than<sp/>abort()<sp/>or<sp/>__builtin_trap()<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>portability:<sp/>Symbian<sp/>doesn&apos;t<sp/>implement<sp/>abort()<sp/>well,<sp/>and<sp/>some<sp/>debuggers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>correctly<sp/>trap<sp/>abort().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">volatile<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(NULL)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(throw_on_failure))<sp/>{</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>internal::GoogleTestFailureException(result);</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>call<sp/>abort()<sp/>as<sp/>it<sp/>generates<sp/>a<sp/>pop-up<sp/>in<sp/>debug<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>cannot<sp/>be<sp/>suppressed<sp/>in<sp/>VC<sp/>7.1<sp/>or<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"></highlight></codeline>
<codeline lineno="4170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>TestProperty<sp/>to<sp/>the<sp/>current<sp/>TestResult<sp/>object<sp/>when<sp/>invoked<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inside<sp/>a<sp/>test,<sp/>to<sp/>current<sp/>TestCase&apos;s<sp/>ad_hoc_test_result_<sp/>when<sp/>invoked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>SetUpTestCase<sp/>or<sp/>TearDownTestCase,<sp/>or<sp/>to<sp/>the<sp/>global<sp/>property<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>invoked<sp/>elsewhere.<sp/><sp/>If<sp/>the<sp/>result<sp/>already<sp/>contains<sp/>a<sp/>property<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>key,<sp/>the<sp/>value<sp/>will<sp/>be<sp/>updated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4175" refid="d7/d47/classtesting_1_1_unit_test_1a5af7a3ecd40f1592aad222f3add22a77" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a5af7a3ecd40f1592aad222f3add22a77" kindref="member">UnitTest::RecordProperty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>key,</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a8e19d41ff9252d813d764bfa3c078689" kindref="member">impl_</ref>-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1aaeadbc79a8d2cc722ecffc52b03c3a08" kindref="member">RecordProperty</ref>(<ref refid="d0/d27/classtesting_1_1_test_property" kindref="compound">TestProperty</ref>(key,<sp/>value));</highlight></codeline>
<codeline lineno="4178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"></highlight></codeline>
<codeline lineno="4180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runs<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>UnitTest<sp/>object<sp/>and<sp/>prints<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>0<sp/>if<sp/>successful,<sp/>or<sp/>1<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4182"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>protect<sp/>this<sp/>under<sp/>mutex_,<sp/>as<sp/>we<sp/>only<sp/>support<sp/>calling<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4185" refid="d7/d47/classtesting_1_1_unit_test_1a22f3e90081aaad35b4eccfa93a28042c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a22f3e90081aaad35b4eccfa93a28042c" kindref="member">UnitTest::Run</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_death_test_child_process<sp/>=</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">internal::GTEST_FLAG</ref>(internal_run_death_test).length()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"></highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>implements<sp/>this<sp/>protocol<sp/>for<sp/>catching<sp/>that<sp/>a<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>exits<sp/>before<sp/>returning<sp/>control<sp/>to<sp/>Google<sp/>Test:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>Upon<sp/>start,<sp/>Google<sp/>Test<sp/>creates<sp/>a<sp/>file<sp/>whose<sp/>absolute<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>specified<sp/>by<sp/>the<sp/>environment<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>TEST_PREMATURE_EXIT_FILE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>When<sp/>Google<sp/>Test<sp/>has<sp/>finished<sp/>its<sp/>work,<sp/>it<sp/>deletes<sp/>the<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>allows<sp/>a<sp/>test<sp/>runner<sp/>to<sp/>set<sp/>TEST_PREMATURE_EXIT_FILE<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>running<sp/>a<sp/>Google-Test-based<sp/>test<sp/>program<sp/>and<sp/>check<sp/>the<sp/>existence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>file<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>test<sp/>execution<sp/>to<sp/>see<sp/>if<sp/>it<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exited<sp/>prematurely.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4201"><highlight class="normal"></highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>in<sp/>the<sp/>child<sp/>process<sp/>of<sp/>a<sp/>death<sp/>test,<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create/delete<sp/>the<sp/>premature<sp/>exit<sp/>file,<sp/>as<sp/>doing<sp/>so<sp/>is<sp/>unnecessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>will<sp/>confuse<sp/>the<sp/>parent<sp/>process.<sp/><sp/>Otherwise,<sp/>create/delete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>file<sp/>upon<sp/>entering/leaving<sp/>this<sp/>function.<sp/><sp/>If<sp/>the<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>somehow<sp/>exits<sp/>before<sp/>this<sp/>function<sp/>has<sp/>a<sp/>chance<sp/>to<sp/>return,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>premature-exit<sp/>file<sp/>will<sp/>be<sp/>left<sp/>undeleted,<sp/>causing<sp/>a<sp/>test<sp/>runner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>understands<sp/>the<sp/>premature-exit-file<sp/>protocol<sp/>to<sp/>report<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>as<sp/>having<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d7b/classtesting_1_1internal_1_1_scoped_premature_exit_file" kindref="compound">internal::ScopedPrematureExitFile</ref><sp/>premature_exit_file(</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in_death_test_child_process<sp/>?</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NULL<sp/>:<sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a1d5e3da5a27eed25986859fa83cafe95" kindref="member">internal::posix::GetEnv</ref>(</highlight><highlight class="stringliteral">&quot;TEST_PREMATURE_EXIT_FILE&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"></highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Captures<sp/>the<sp/>value<sp/>of<sp/>GTEST_FLAG(catch_exceptions).<sp/><sp/>This<sp/>value<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>for<sp/>the<sp/>duration<sp/>of<sp/>the<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a74595949fcf89d662112e08b5e21e560" kindref="member">set_catch_exceptions</ref>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(catch_exceptions));</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"></highlight></codeline>
<codeline lineno="4218"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Either<sp/>the<sp/>user<sp/>wants<sp/>Google<sp/>Test<sp/>to<sp/>catch<sp/>exceptions<sp/>thrown<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tests<sp/>or<sp/>this<sp/>is<sp/>executing<sp/>in<sp/>the<sp/>context<sp/>of<sp/>death<sp/>test<sp/>child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>process.<sp/>In<sp/>either<sp/>case<sp/>the<sp/>user<sp/>does<sp/>not<sp/>want<sp/>to<sp/>see<sp/>pop-up<sp/>dialogs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>about<sp/>crashes<sp/>-<sp/>they<sp/>are<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()-&gt;catch_exceptions()<sp/>||<sp/>in_death_test_child_process)<sp/>{</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!GTEST_OS_WINDOWS_MOBILE<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_PHONE<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_RT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SetErrorMode<sp/>doesn&apos;t<sp/>exist<sp/>on<sp/>CE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/>SetErrorMode(SEM_FAILCRITICALERRORS<sp/>|<sp/>SEM_NOALIGNMENTFAULTEXCEPT<sp/>|</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEM_NOGPFAULTERRORBOX<sp/>|<sp/>SEM_NOOPENFILEERRORBOX);</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4229"><highlight class="normal"></highlight></codeline>
<codeline lineno="4230"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>(defined(_MSC_VER)<sp/>||<sp/>GTEST_OS_WINDOWS_MINGW)<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Death<sp/>test<sp/>children<sp/>can<sp/>be<sp/>terminated<sp/>with<sp/>_abort().<sp/><sp/>On<sp/>Windows,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_abort()<sp/>can<sp/>show<sp/>a<sp/>dialog<sp/>with<sp/>a<sp/>warning<sp/>message.<sp/><sp/>This<sp/>forces<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>abort<sp/>message<sp/>to<sp/>go<sp/>to<sp/>stderr<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/>_set_error_mode(_OUT_TO_STDERR);</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4236"><highlight class="normal"></highlight></codeline>
<codeline lineno="4237"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>_MSC_VER<sp/>&gt;=<sp/>1400<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>debug<sp/>version,<sp/>Visual<sp/>Studio<sp/>pops<sp/>up<sp/>a<sp/>separate<sp/>dialog</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>offering<sp/>a<sp/>choice<sp/>to<sp/>debug<sp/>the<sp/>aborted<sp/>program.<sp/>We<sp/>need<sp/>to<sp/>suppress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>dialog<sp/>or<sp/>it<sp/>will<sp/>pop<sp/>up<sp/>for<sp/>every<sp/>EXPECT/ASSERT_DEATH<sp/>statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>executed.<sp/>Google<sp/>Test<sp/>will<sp/>notify<sp/>the<sp/>user<sp/>of<sp/>any<sp/>unexpected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>failure<sp/>via<sp/>stderr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>VC++<sp/>doesn&apos;t<sp/>define<sp/>_set_abort_behavior()<sp/>prior<sp/>to<sp/>the<sp/>version<sp/>8.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Users<sp/>of<sp/>prior<sp/>VC<sp/>versions<sp/>shall<sp/>suffer<sp/>the<sp/>agony<sp/>and<sp/>pain<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clicking<sp/>through<sp/>the<sp/>countless<sp/>debug<sp/>dialogs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vladl@google.com):<sp/>find<sp/>a<sp/>way<sp/>to<sp/>suppress<sp/>the<sp/>abort<sp/>dialog()<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debug<sp/>mode<sp/>when<sp/>compiled<sp/>with<sp/>VC<sp/>7.1<sp/>or<sp/>lower.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(break_on_failure))</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_set_abort_behavior(</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>following<sp/>flags:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_WRITE_ABORT_MSG<sp/>|<sp/>_CALL_REPORTFAULT);<sp/><sp/></highlight><highlight class="comment">//<sp/>pop-up<sp/>window,<sp/>core<sp/>dump.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4253"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1addb2ed165b92b74e25fe9ebe9e46b9f9" kindref="member">internal::HandleExceptionsInMethodIfSupported</ref>(</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>(),</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4d5d6a2e8fa3b918a284252602a98279" kindref="member">internal::UnitTestImpl::RunAllTests</ref>,</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;auxiliary<sp/>test<sp/>code<sp/>(environments<sp/>or<sp/>event<sp/>listeners)&quot;</highlight><highlight class="normal">)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="4261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"></highlight></codeline>
<codeline lineno="4263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>working<sp/>directory<sp/>when<sp/>the<sp/>first<sp/>TEST()<sp/>or<sp/>TEST_F()<sp/>was</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>executed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4265" refid="d7/d47/classtesting_1_1_unit_test_1a8623e561822f52b2150dd55b69b28f7a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a8623e561822f52b2150dd55b69b28f7a" kindref="member">UnitTest::original_working_dir</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a8e19d41ff9252d813d764bfa3c078689" kindref="member">impl_</ref>-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a31c402be948f2244efdda0e5f38fab0e" kindref="member">original_working_dir_</ref>.<ref refid="de/d14/classtesting_1_1internal_1_1_file_path_1a14989d8fe448c5f947832aea3dae615a" kindref="member">c_str</ref>();</highlight></codeline>
<codeline lineno="4267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"></highlight></codeline>
<codeline lineno="4269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestCase<sp/>object<sp/>for<sp/>the<sp/>test<sp/>that&apos;s<sp/>currently<sp/>running,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>NULL<sp/>if<sp/>no<sp/>test<sp/>is<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4271" refid="d7/d47/classtesting_1_1_unit_test_1ade541f1c0e5bdbe1ff76c03003155ea7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ade541f1c0e5bdbe1ff76c03003155ea7" kindref="member">UnitTest::current_test_case</ref>()<sp/>const</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a69abff5a4efdd07bd5faebe3dd318d06" kindref="member">GTEST_LOCK_EXCLUDED_</ref>(mutex_)<sp/>{</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><ref refid="da/d2b/classtesting_1_1internal_1_1_g_test_mutex_lock" kindref="compound">internal::MutexLock</ref><sp/>lock(&amp;<ref refid="d7/d47/classtesting_1_1_unit_test_1ac9dde2076fedd43264499dc77faea627" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a8e19d41ff9252d813d764bfa3c078689" kindref="member">impl_</ref>-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a03f782af442cc7b5163f48a087bc19d0" kindref="member">current_test_case</ref>();</highlight></codeline>
<codeline lineno="4275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"></highlight></codeline>
<codeline lineno="4277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestInfo<sp/>object<sp/>for<sp/>the<sp/>test<sp/>that&apos;s<sp/>currently<sp/>running,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>NULL<sp/>if<sp/>no<sp/>test<sp/>is<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4279" refid="d7/d47/classtesting_1_1_unit_test_1a6cf5acb9b2df2f9e9eb2d127522f7f89" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a6cf5acb9b2df2f9e9eb2d127522f7f89" kindref="member">UnitTest::current_test_info</ref>()<sp/>const</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a69abff5a4efdd07bd5faebe3dd318d06" kindref="member">GTEST_LOCK_EXCLUDED_</ref>(mutex_)<sp/>{</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><ref refid="da/d2b/classtesting_1_1internal_1_1_g_test_mutex_lock" kindref="compound">internal::MutexLock</ref><sp/>lock(&amp;<ref refid="d7/d47/classtesting_1_1_unit_test_1ac9dde2076fedd43264499dc77faea627" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a8e19d41ff9252d813d764bfa3c078689" kindref="member">impl_</ref>-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1aff1e50095f685628d566cb3ac72f902f" kindref="member">current_test_info</ref>();</highlight></codeline>
<codeline lineno="4283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"></highlight></codeline>
<codeline lineno="4285"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>random<sp/>seed<sp/>used<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the<sp/>current<sp/>test<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4286" refid="d7/d47/classtesting_1_1_unit_test_1ad4565896fee1929f7fb711abcbe05eb6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ad4565896fee1929f7fb711abcbe05eb6" kindref="member">UnitTest::random_seed</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a8e19d41ff9252d813d764bfa3c078689" kindref="member">impl_</ref>-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ad4565896fee1929f7fb711abcbe05eb6" kindref="member">random_seed</ref>();<sp/>}</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"></highlight></codeline>
<codeline lineno="4288"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>ParameterizedTestCaseRegistry<sp/>object<sp/>used<sp/>to<sp/>keep<sp/>track<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value-parameterized<sp/>tests<sp/>and<sp/>instantiate<sp/>and<sp/>register<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4291"><highlight class="normal">internal::ParameterizedTestCaseRegistry&amp;</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/>UnitTest::parameterized_test_registry()</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a69abff5a4efdd07bd5faebe3dd318d06" kindref="member">GTEST_LOCK_EXCLUDED_</ref>(mutex_)<sp/>{</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a8e19d41ff9252d813d764bfa3c078689" kindref="member">impl_</ref>-&gt;parameterized_test_registry();</highlight></codeline>
<codeline lineno="4295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal"></highlight></codeline>
<codeline lineno="4298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>empty<sp/>UnitTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4299" refid="d7/d47/classtesting_1_1_unit_test_1a3c5dacde37a0ec6c0bf79322f7e355ed" refkind="member"><highlight class="normal"><ref refid="d7/d47/classtesting_1_1_unit_test_1a3c5dacde37a0ec6c0bf79322f7e355ed" kindref="member">UnitTest::UnitTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a8e19d41ff9252d813d764bfa3c078689" kindref="member">impl_</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">internal::UnitTestImpl</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"></highlight></codeline>
<codeline lineno="4303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Destructor<sp/>of<sp/>UnitTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4304" refid="d7/d47/classtesting_1_1_unit_test_1a103aeda10e620c4427e2196b705bb64b" refkind="member"><highlight class="normal"><ref refid="d7/d47/classtesting_1_1_unit_test_1a103aeda10e620c4427e2196b705bb64b" kindref="member">UnitTest::~UnitTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a8e19d41ff9252d813d764bfa3c078689" kindref="member">impl_</ref>;</highlight></codeline>
<codeline lineno="4306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"></highlight></codeline>
<codeline lineno="4308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pushes<sp/>a<sp/>trace<sp/>defined<sp/>by<sp/>SCOPED_TRACE()<sp/>on<sp/>to<sp/>the<sp/>per-thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>trace<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4310" refid="d7/d47/classtesting_1_1_unit_test_1a5441ed38ff9485c7c4fe50f91b0cad7c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a5441ed38ff9485c7c4fe50f91b0cad7c" kindref="member">UnitTest::PushGTestTrace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/deb/structtesting_1_1internal_1_1_trace_info" kindref="compound">internal::TraceInfo</ref>&amp;<sp/>trace)</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a69abff5a4efdd07bd5faebe3dd318d06" kindref="member">GTEST_LOCK_EXCLUDED_</ref>(mutex_)<sp/>{</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><ref refid="da/d2b/classtesting_1_1internal_1_1_g_test_mutex_lock" kindref="compound">internal::MutexLock</ref><sp/>lock(&amp;mutex_);</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/>impl_-&gt;gtest_trace_stack().push_back(trace);</highlight></codeline>
<codeline lineno="4314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"></highlight></codeline>
<codeline lineno="4316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pops<sp/>a<sp/>trace<sp/>from<sp/>the<sp/>per-thread<sp/>Google<sp/>Test<sp/>trace<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4317" refid="d7/d47/classtesting_1_1_unit_test_1af9705e0e80ae8712d476b48aedfb6847" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1af9705e0e80ae8712d476b48aedfb6847" kindref="member">UnitTest::PopGTestTrace</ref>()</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a69abff5a4efdd07bd5faebe3dd318d06" kindref="member">GTEST_LOCK_EXCLUDED_</ref>(mutex_)<sp/>{</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><ref refid="da/d2b/classtesting_1_1internal_1_1_g_test_mutex_lock" kindref="compound">internal::MutexLock</ref><sp/>lock(&amp;<ref refid="d7/d47/classtesting_1_1_unit_test_1ac9dde2076fedd43264499dc77faea627" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a8e19d41ff9252d813d764bfa3c078689" kindref="member">impl_</ref>-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a07ea86c2b77af0393783430499b22321" kindref="member">gtest_trace_stack</ref>().pop_back();</highlight></codeline>
<codeline lineno="4321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"></highlight></codeline>
<codeline lineno="4323"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"></highlight></codeline>
<codeline lineno="4325" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1aee362cac8540779d6b2287bd44f15444" refkind="member"><highlight class="normal"><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1aee362cac8540779d6b2287bd44f15444" kindref="member">UnitTestImpl::UnitTestImpl</ref>(<ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>*<sp/>parent)</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>parent_(parent),</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a76a726de98cf61e65af03fd6f10a9bc0" kindref="member">GTEST_DISABLE_MSC_WARNINGS_PUSH_</ref>(4355<sp/></highlight><highlight class="comment">/*<sp/>using<sp/>this<sp/>in<sp/>initializer<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_global_test_part_result_reporter_(this),</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_per_thread_test_part_result_reporter_(this),</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1ab4c44546d6d9aced68993b87b608fc06" kindref="member">GTEST_DISABLE_MSC_WARNINGS_POP_</ref>()</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>global_test_part_result_repoter_(</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;default_global_test_part_result_reporter_),</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>per_thread_test_part_result_reporter_(</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;default_per_thread_test_part_result_reporter_),</highlight></codeline>
<codeline lineno="4335"><highlight class="normal">#if<sp/><ref refid="d3/dc9/gtest-port_8h_1a743ee591e0b9a044e3d7513ad5ab5ef9" kindref="member">GTEST_HAS_PARAM_TEST</ref></highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameterized_test_registry_(),</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameterized_tests_registered_(false),</highlight></codeline>
<codeline lineno="4338"><highlight class="normal">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_death_test_case_(-1),</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_test_case_(NULL),</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_test_info_(NULL),</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ad_hoc_test_result_(),</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os_stack_trace_getter_(NULL),</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>post_flag_parse_init_performed_(false),</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>random_seed_(0),<sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>be<sp/>overridden<sp/>by<sp/>the<sp/>flag<sp/>before<sp/>first<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>random_(0),<sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>be<sp/>reseeded<sp/>before<sp/>first<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start_timestamp_(0),</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elapsed_time_(0),</highlight></codeline>
<codeline lineno="4349"><highlight class="normal">#if<sp/>GTEST_HAS_DEATH_TEST</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>death_test_factory_(new<sp/>DefaultDeathTestFactory),</highlight></codeline>
<codeline lineno="4351"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>be<sp/>overridden<sp/>by<sp/>the<sp/>flag<sp/>before<sp/>first<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>catch_exceptions_(false)<sp/>{</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a371c481b63deeb0ecd47f42b4720480b" kindref="member">listeners</ref>()-&gt;<ref refid="df/dab/classtesting_1_1_test_event_listeners_1a961d3f9b9dabd19bef6758afe2f6f814" kindref="member">SetDefaultResultPrinter</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer" kindref="compound">PrettyUnitTestResultPrinter</ref>);</highlight></codeline>
<codeline lineno="4355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"></highlight></codeline>
<codeline lineno="4357" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a1cfa956ff0bfca1d1830454d0dd02f41" refkind="member"><highlight class="normal"><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a1cfa956ff0bfca1d1830454d0dd02f41" kindref="member">UnitTestImpl::~UnitTestImpl</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deletes<sp/>every<sp/>TestCase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a52f5504ed65d116201ccb8f99a44fd7e" kindref="member">ForEach</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>,<sp/>internal::Delete&lt;TestCase&gt;);</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"></highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deletes<sp/>every<sp/>Environment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a52f5504ed65d116201ccb8f99a44fd7e" kindref="member">ForEach</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a7997fa11dbc4f4b3f19f11f7322bb3d0" kindref="member">environments_</ref>,<sp/>internal::Delete&lt;Environment&gt;);</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"></highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a632a0ce2843f514e873eb5ef95201a2c" kindref="member">os_stack_trace_getter_</ref>;</highlight></codeline>
<codeline lineno="4365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"></highlight></codeline>
<codeline lineno="4367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>TestProperty<sp/>to<sp/>the<sp/>current<sp/>TestResult<sp/>object<sp/>when<sp/>invoked<sp/>in<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>context<sp/>of<sp/>a<sp/>test,<sp/>to<sp/>current<sp/>test<sp/>case&apos;s<sp/>ad_hoc_test_result<sp/>when<sp/>invoke</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>SetUpTestCase/TearDownTestCase,<sp/>or<sp/>to<sp/>the<sp/>global<sp/>property<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise.<sp/><sp/>If<sp/>the<sp/>result<sp/>already<sp/>contains<sp/>a<sp/>property<sp/>with<sp/>the<sp/>same<sp/>key,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>value<sp/>will<sp/>be<sp/>updated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4372" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1aaeadbc79a8d2cc722ecffc52b03c3a08" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1aaeadbc79a8d2cc722ecffc52b03c3a08" kindref="member">UnitTestImpl::RecordProperty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d27/classtesting_1_1_test_property" kindref="compound">TestProperty</ref>&amp;<sp/>test_property)<sp/>{</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>xml_element;</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><ref refid="d1/d69/classtesting_1_1_test_result" kindref="compound">TestResult</ref>*<sp/>test_result;<sp/><sp/></highlight><highlight class="comment">//<sp/>TestResult<sp/>appropriate<sp/>for<sp/>property<sp/>recording.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4375"><highlight class="normal"></highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ae2f57d288d3e4f195a2536c74ebc3a1b" kindref="member">current_test_info_</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/>xml_element<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/>test_result<sp/>=<sp/>&amp;(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ae2f57d288d3e4f195a2536c74ebc3a1b" kindref="member">current_test_info_</ref>-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1afb2ec6cf0ab3f3e57bc2304e0df97c29" kindref="member">result_</ref>);</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a19daffedf2686b9dbf96e7327a66f7b5" kindref="member">current_test_case_</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/>xml_element<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testsuite&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/>test_result<sp/>=<sp/>&amp;(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a19daffedf2686b9dbf96e7327a66f7b5" kindref="member">current_test_case_</ref>-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1ae5fbed6752ae31d54b7db28c8a84df0a" kindref="member">ad_hoc_test_result_</ref>);</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/>xml_element<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testsuites&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/>test_result<sp/>=<sp/>&amp;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ae5fbed6752ae31d54b7db28c8a84df0a" kindref="member">ad_hoc_test_result_</ref>;</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/>test_result-&gt;<ref refid="d1/d69/classtesting_1_1_test_result_1a33626833a874fe245b35ad6e6e1f18d4" kindref="member">RecordProperty</ref>(xml_element,<sp/>test_property);</highlight></codeline>
<codeline lineno="4387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Disables<sp/>event<sp/>forwarding<sp/>if<sp/>the<sp/>control<sp/>is<sp/>currently<sp/>in<sp/>a<sp/>death<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>subprocess.<sp/>Must<sp/>not<sp/>be<sp/>called<sp/>before<sp/>InitGoogleTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4392"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTestImpl::SuppressTestEventsIfInSubprocess()<sp/>{</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(internal_run_death_test_flag_.get()<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a371c481b63deeb0ecd47f42b4720480b" kindref="member">listeners</ref>()-&gt;<ref refid="df/dab/classtesting_1_1_test_event_listeners_1ac2231ac2b553e0f6a1cc2923224b9623" kindref="member">SuppressEventForwarding</ref>();</highlight></codeline>
<codeline lineno="4395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4397"><highlight class="normal"></highlight></codeline>
<codeline lineno="4398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initializes<sp/>event<sp/>listeners<sp/>performing<sp/>XML<sp/>output<sp/>as<sp/>specified<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnitTestOptions.<sp/>Must<sp/>not<sp/>be<sp/>called<sp/>before<sp/>InitGoogleTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4400" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1acc7d69fbca3370bbdd13ee2b63576030" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1acc7d69fbca3370bbdd13ee2b63576030" kindref="member">UnitTestImpl::ConfigureXmlOutput</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>output_format<sp/>=<sp/><ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a4283d9e9321fb7a93d733899bece00af" kindref="member">UnitTestOptions::GetOutputFormat</ref>();</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_format<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;xml&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a371c481b63deeb0ecd47f42b4720480b" kindref="member">listeners</ref>()-&gt;<ref refid="df/dab/classtesting_1_1_test_event_listeners_1a1e86c96ef131392c2b0bd302f16fb735" kindref="member">SetDefaultXmlGenerator</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer" kindref="compound">XmlUnitTestResultPrinter</ref>(</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a8cd6d2ad634d8f29bd2345d5b2ec5673" kindref="member">UnitTestOptions::GetAbsolutePathToOutputFile</ref>().c_str()));</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_format<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>unrecognized<sp/>output<sp/>format<sp/>\&quot;%s\&quot;<sp/>ignored.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_format.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"></highlight></codeline>
<codeline lineno="4412"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initializes<sp/>event<sp/>listeners<sp/>for<sp/>streaming<sp/>test<sp/>results<sp/>in<sp/>string<sp/>form.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Must<sp/>not<sp/>be<sp/>called<sp/>before<sp/>InitGoogleTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4415"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnitTestImpl::ConfigureStreamingOutput()<sp/>{</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>target<sp/>=<sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(stream_result_to);</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!target.<ref refid="cpp/string/basic_string/empty" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">empty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>target.<ref refid="cpp/string/basic_string/find" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">find</ref>(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a371c481b63deeb0ecd47f42b4720480b" kindref="member">listeners</ref>()-&gt;<ref refid="df/dab/classtesting_1_1_test_event_listeners_1ad98bf37c3296d62b69659734cb6c7cf8" kindref="member">Append</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>StreamingListener(target.<ref refid="cpp/string/basic_string/substr" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">substr</ref>(0,<sp/>pos),</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target.<ref refid="cpp/string/basic_string/substr" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">substr</ref>(pos+1)));</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>unrecognized<sp/>streaming<sp/>target<sp/>\&quot;%s\&quot;<sp/>ignored.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4430"><highlight class="normal"></highlight></codeline>
<codeline lineno="4431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Performs<sp/>initialization<sp/>dependent<sp/>upon<sp/>flag<sp/>values<sp/>obtained<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ParseGoogleTestFlagsOnly.<sp/><sp/>Is<sp/>called<sp/>from<sp/>InitGoogleTest<sp/>after<sp/>the<sp/>call<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ParseGoogleTestFlagsOnly.<sp/><sp/>In<sp/>case<sp/>a<sp/>user<sp/>neglects<sp/>to<sp/>call<sp/>InitGoogleTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>function<sp/>is<sp/>also<sp/>called<sp/>from<sp/>RunAllTests.<sp/><sp/>Since<sp/>this<sp/>function<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>called<sp/>more<sp/>than<sp/>once,<sp/>it<sp/>has<sp/>to<sp/>be<sp/>idempotent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4436" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a3d68c6d1fdec822210f96171a3b57b47" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a3d68c6d1fdec822210f96171a3b57b47" kindref="member">UnitTestImpl::PostFlagParsingInit</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensures<sp/>that<sp/>this<sp/>function<sp/>does<sp/>not<sp/>execute<sp/>more<sp/>than<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1af27b4c10f54dbf7cf61814bd71e2f71d" kindref="member">post_flag_parse_init_performed_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1af27b4c10f54dbf7cf61814bd71e2f71d" kindref="member">post_flag_parse_init_performed_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"></highlight></codeline>
<codeline lineno="4441"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>to<sp/>send<sp/>notifications<sp/>about<sp/>key<sp/>process<sp/>state<sp/>changes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a371c481b63deeb0ecd47f42b4720480b" kindref="member">listeners</ref>()-&gt;<ref refid="df/dab/classtesting_1_1_test_event_listeners_1ad98bf37c3296d62b69659734cb6c7cf8" kindref="member">Append</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>GTEST_CUSTOM_TEST_EVENT_LISTENER_());</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"></highlight></codeline>
<codeline lineno="4446"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/>InitDeathTestSubprocessControlInfo();</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/>SuppressTestEventsIfInSubprocess();</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4450"><highlight class="normal"></highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Registers<sp/>parameterized<sp/>tests.<sp/>This<sp/>makes<sp/>parameterized<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>available<sp/>to<sp/>the<sp/>UnitTest<sp/>reflection<sp/>API<sp/>without<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RUN_ALL_TESTS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a42dd6cc650b930bbf73f665fbb13d515" kindref="member">RegisterParameterizedTests</ref>();</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"></highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configures<sp/>listeners<sp/>for<sp/>XML<sp/>output.<sp/>This<sp/>makes<sp/>it<sp/>possible<sp/>for<sp/>users</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>shut<sp/>down<sp/>the<sp/>default<sp/>XML<sp/>output<sp/>before<sp/>invoking<sp/>RUN_ALL_TESTS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1acc7d69fbca3370bbdd13ee2b63576030" kindref="member">ConfigureXmlOutput</ref>();</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"></highlight></codeline>
<codeline lineno="4460"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configures<sp/>listeners<sp/>for<sp/>streaming<sp/>test<sp/>results<sp/>to<sp/>the<sp/>specified<sp/>server.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/>ConfigureStreamingOutput();</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"></highlight></codeline>
<codeline lineno="4467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>predicate<sp/>that<sp/>checks<sp/>the<sp/>name<sp/>of<sp/>a<sp/>TestCase<sp/>against<sp/>a<sp/>known</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4469"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>used<sp/>for<sp/>implementation<sp/>of<sp/>the<sp/>UnitTest<sp/>class<sp/>only.<sp/><sp/>We<sp/>put</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>in<sp/>the<sp/>anonymous<sp/>namespace<sp/>to<sp/>prevent<sp/>polluting<sp/>the<sp/>outer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4473"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4474"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TestCaseNameIs<sp/>is<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4475" refid="de/d6c/classtesting_1_1internal_1_1_test_case_name_is" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="de/d6c/classtesting_1_1internal_1_1_test_case_name_is" kindref="compound">TestCaseNameIs</ref><sp/>{</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4478" refid="de/d6c/classtesting_1_1internal_1_1_test_case_name_is_1af1734d8eec54e78a38c69b6ceba21091" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="de/d6c/classtesting_1_1internal_1_1_test_case_name_is_1af1734d8eec54e78a38c69b6ceba21091" kindref="member">TestCaseNameIs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>name)</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="de/d6c/classtesting_1_1internal_1_1_test_case_name_is_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>(name)<sp/>{}</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"></highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>name<sp/>of<sp/>test_case<sp/>matches<sp/>name_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4482" refid="de/d6c/classtesting_1_1internal_1_1_test_case_name_is_1ad2bd07145d06040b3af248b4089707ef" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d6c/classtesting_1_1internal_1_1_test_case_name_is_1ad2bd07145d06040b3af248b4089707ef" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/>test_case)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_case<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strcmp(test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1a8c4da4b626748f746b1f9fdbe885edfb" kindref="member">name</ref>(),<sp/><ref refid="de/d6c/classtesting_1_1internal_1_1_test_case_name_is_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>())<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"></highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4487" refid="de/d6c/classtesting_1_1internal_1_1_test_case_name_is_1a4d739cc5d335052eb9f5b2ca559b81d1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="de/d6c/classtesting_1_1internal_1_1_test_case_name_is_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>;</highlight></codeline>
<codeline lineno="4488"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"></highlight></codeline>
<codeline lineno="4490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Finds<sp/>and<sp/>returns<sp/>a<sp/>TestCase<sp/>with<sp/>the<sp/>given<sp/>name.<sp/><sp/>If<sp/>one<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exist,<sp/>creates<sp/>one<sp/>and<sp/>returns<sp/>it.<sp/><sp/>It&apos;s<sp/>the<sp/>CALLER&apos;S</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RESPONSIBILITY<sp/>to<sp/>ensure<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>called<sp/>WHEN<sp/>THE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4493"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TESTS<sp/>ARE<sp/>NOT<sp/>SHUFFLED.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4494"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4496"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4497"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>test_case_name:<sp/>name<sp/>of<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4498"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>type_param:<sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>the<sp/>test<sp/>case&apos;s<sp/>type<sp/>parameter,<sp/>or<sp/>NULL<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4499"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>is<sp/>not<sp/>a<sp/>typed<sp/>or<sp/>a<sp/>type-parameterized<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4500"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>set_up_tc:<sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>sets<sp/>up<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4501"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>tear_down_tc:<sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>tears<sp/>down<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4502" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a6438a25b62877163bec864df1369909b" refkind="member"><highlight class="normal"><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ab1514adec2c0da45bdc22ac3ce01bd75" kindref="member">UnitTestImpl::GetTestCase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_name,</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>type_param,</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa56a971a29fe8459940b46db38d3000f" kindref="member">Test::SetUpTestCaseFunc</ref><sp/>set_up_tc,</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a7b4a46c5927d126f2df2d955d98e3b8a" kindref="member">Test::TearDownTestCaseFunc</ref><sp/>tear_down_tc)<sp/>{</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>we<sp/>find<sp/>a<sp/>TestCase<sp/>with<sp/>the<sp/>given<sp/>name?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;TestCase*&gt;::const_iterator</ref><sp/>test_case<sp/>=</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cpp/algorithm/find" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::find_if</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>.begin(),<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>.end(),</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/d6c/classtesting_1_1internal_1_1_test_case_name_is" kindref="compound">TestCaseNameIs</ref>(test_case_name));</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"></highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_case<sp/>!=<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>.end())</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*test_case;</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"></highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No.<sp/><sp/>Let&apos;s<sp/>create<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>new_test_case<sp/>=</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>(test_case_name,<sp/>type_param,<sp/>set_up_tc,<sp/>tear_down_tc);</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"></highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>this<sp/>a<sp/>death<sp/>test<sp/>case?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a51c4969c39bbb6a3f0d596e7f47f3530" kindref="member">internal::UnitTestOptions::MatchesFilter</ref>(test_case_name,</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1a815040dbde1aafa2b5c0628f7b97b3c0" kindref="member">kDeathTestCaseFilter</ref>))<sp/>{</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Yes.<sp/><sp/>Inserts<sp/>the<sp/>test<sp/>case<sp/>after<sp/>the<sp/>last<sp/>death<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>defined<sp/>so<sp/>far.<sp/><sp/>This<sp/>only<sp/>works<sp/>when<sp/>the<sp/>test<sp/>cases<sp/>haven&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>been<sp/>shuffled.<sp/><sp/>Otherwise<sp/>we<sp/>may<sp/>end<sp/>up<sp/>running<sp/>a<sp/>death<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>a<sp/>non-death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a93b260f5e9218dd561831f3135ac9f26" kindref="member">last_death_test_case_</ref>;</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>.insert(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>.begin()<sp/>+<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a93b260f5e9218dd561831f3135ac9f26" kindref="member">last_death_test_case_</ref>,</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_test_case);</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No.<sp/><sp/>Appends<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>.push_back(new_test_case);</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"></highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4417a00242bf8ef70029d5e50bf4c7c2" kindref="member">test_case_indices_</ref>.<ref refid="cpp/container/vector/push_back" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">push_back</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4417a00242bf8ef70029d5e50bf4c7c2" kindref="member">test_case_indices_</ref>.<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>()));</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_test_case;</highlight></codeline>
<codeline lineno="4535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"></highlight></codeline>
<codeline lineno="4537"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helpers<sp/>for<sp/>setting<sp/>up<sp/>/<sp/>tearing<sp/>down<sp/>the<sp/>given<sp/>environment.<sp/><sp/>They</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4538"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>for<sp/>use<sp/>in<sp/>the<sp/>ForEach()<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4539" refid="d0/da7/namespacetesting_1_1internal_1a5f5535012d4548788a5d1a4e0f18e19e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a5f5535012d4548788a5d1a4e0f18e19e" kindref="member">SetUpEnvironment</ref>(<ref refid="d6/d91/classtesting_1_1_environment" kindref="compound">Environment</ref>*<sp/>env)<sp/>{<sp/>env-&gt;<ref refid="d6/d91/classtesting_1_1_environment_1a901706a587f9ae84df8b2395fbe759cb" kindref="member">SetUp</ref>();<sp/>}</highlight></codeline>
<codeline lineno="4540" refid="d0/da7/namespacetesting_1_1internal_1ac467e871e4781da3f5ebed2a4465aec4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac467e871e4781da3f5ebed2a4465aec4" kindref="member">TearDownEnvironment</ref>(<ref refid="d6/d91/classtesting_1_1_environment" kindref="compound">Environment</ref>*<sp/>env)<sp/>{<sp/>env-&gt;<ref refid="d6/d91/classtesting_1_1_environment_1a870a092058305911f3d42df45dd657e5" kindref="member">TearDown</ref>();<sp/>}</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"></highlight></codeline>
<codeline lineno="4542"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runs<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>UnitTest<sp/>object,<sp/>prints<sp/>the<sp/>result,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4543"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>true<sp/>if<sp/>all<sp/>tests<sp/>are<sp/>successful.<sp/><sp/>If<sp/>any<sp/>exception<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4544"><highlight class="normal"></highlight><highlight class="comment">//<sp/>thrown<sp/>during<sp/>a<sp/>test,<sp/>the<sp/>test<sp/>is<sp/>considered<sp/>to<sp/>be<sp/>failed,<sp/>but<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4545"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rest<sp/>of<sp/>the<sp/>tests<sp/>will<sp/>still<sp/>be<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4546"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4547"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>parameterized<sp/>tests<sp/>are<sp/>enabled,<sp/>it<sp/>expands<sp/>and<sp/>registers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4548"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameterized<sp/>tests<sp/>first<sp/>in<sp/>RegisterParameterizedTests().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4549"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>other<sp/>functions<sp/>called<sp/>from<sp/>RunAllTests()<sp/>may<sp/>safely<sp/>assume<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4550"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameterized<sp/>tests<sp/>are<sp/>ready<sp/>to<sp/>be<sp/>counted<sp/>and<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4551" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4d5d6a2e8fa3b918a284252602a98279" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4d5d6a2e8fa3b918a284252602a98279" kindref="member">UnitTestImpl::RunAllTests</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>InitGoogleTest()<sp/>was<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d0/da7/namespacetesting_1_1internal_1a91e707e0d371fae0224ffd37f0d042af" kindref="member">GTestIsInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nThis<sp/>test<sp/>program<sp/>did<sp/>NOT<sp/>call<sp/>::testing::InitGoogleTest<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;before<sp/>calling<sp/>RUN_ALL_TESTS().<sp/><sp/>Please<sp/>fix<sp/>it.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"></highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>run<sp/>any<sp/>test<sp/>if<sp/>the<sp/>--help<sp/>flag<sp/>was<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/da7/namespacetesting_1_1internal_1a05b77c93e2ac596346466a00277288ca" kindref="member">g_help_flag</ref>)</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"></highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeats<sp/>the<sp/>call<sp/>to<sp/>the<sp/>post-flag<sp/>parsing<sp/>initialization<sp/>in<sp/>case<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>user<sp/>didn&apos;t<sp/>call<sp/>InitGoogleTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a3d68c6d1fdec822210f96171a3b57b47" kindref="member">PostFlagParsingInit</ref>();</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"></highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Even<sp/>if<sp/>sharding<sp/>is<sp/>not<sp/>on,<sp/>test<sp/>runners<sp/>may<sp/>want<sp/>to<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_SHARD_STATUS_FILE<sp/>to<sp/>query<sp/>whether<sp/>the<sp/>test<sp/>supports<sp/>the<sp/>sharding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>protocol.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a656c8ec8f2ee82fa90b9ba61b6145538" kindref="member">internal::WriteToShardStatusFileIfNeeded</ref>();</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"></highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>iff<sp/>we<sp/>are<sp/>in<sp/>a<sp/>subprocess<sp/>for<sp/>running<sp/>a<sp/>thread-safe-style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_subprocess_for_death_test<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"></highlight></codeline>
<codeline lineno="4577"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/>in_subprocess_for_death_test<sp/>=<sp/>(internal_run_death_test_flag_.get()<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_subprocess_for_death_test)<sp/>{</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4585"><highlight class="normal"></highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_shard<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a57e2697262a419061fc4cd3377a9271e" kindref="member">ShouldShard</ref>(<ref refid="d0/d75/namespacetesting_1a19fe5fab1b6f6ecbfc6357a56f17aa03" kindref="member">kTestTotalShards</ref>,<sp/><ref refid="d0/d75/namespacetesting_1aab047cced200c1809bef2340dabe904f" kindref="member">kTestShardIndex</ref>,</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_subprocess_for_death_test);</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"></highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>the<sp/>full<sp/>test<sp/>names<sp/>with<sp/>the<sp/>filter<sp/>to<sp/>decide<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tests<sp/>to<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_tests_to_run<sp/>=<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1af8cfcffb71cba69a55105ddac96786aa" kindref="member">FilterTests</ref>(should_shard</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ac8d671a300e2bd293e21f8ad1612543ca2087ebbedbe760cb54ec9227101a70aa" kindref="member">HONOR_SHARDING_PROTOCOL</ref></highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ac8d671a300e2bd293e21f8ad1612543ca8df05d491e4291bd178228eaa19fa7c9" kindref="member">IGNORE_SHARDING_PROTOCOL</ref>)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"></highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Lists<sp/>the<sp/>tests<sp/>and<sp/>exits<sp/>if<sp/>the<sp/>--gtest_list_tests<sp/>flag<sp/>was<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(list_tests))<sp/>{</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>must<sp/>be<sp/>called<sp/>*after*<sp/>FilterTests()<sp/>has<sp/>been<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1abc77b71cd244096a75b13b8a2d9f7d14" kindref="member">ListTestsMatchingFilter</ref>();</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"></highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a3076e24cbd93ed76f370a5a2fce53403" kindref="member">random_seed_</ref><sp/>=<sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(shuffle)<sp/>?</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae74fedbdaebaac8d1202192266243b9e" kindref="member">GetRandomSeedFromFlag</ref>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ad4565896fee1929f7fb711abcbe05eb6" kindref="member">random_seed</ref>))<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"></highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>iff<sp/>at<sp/>least<sp/>one<sp/>test<sp/>has<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>failed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"></highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/>repeater<sp/>=<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a371c481b63deeb0ecd47f42b4720480b" kindref="member">listeners</ref>()-&gt;<ref refid="df/dab/classtesting_1_1_test_event_listeners_1af7cfacdf90b4ba59566c16d95ee5d6cc" kindref="member">repeater</ref>();</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"></highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a3d6699cb7b3c0bcb789a92baec6ff7e0" kindref="member">start_timestamp_</ref><sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae0c6fd4543c65945515c42d6f43cc138" kindref="member">GetTimeInMillis</ref>();</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/>repeater-&gt;<ref refid="d1/d46/classtesting_1_1_test_event_listener_1a1dceff89a70d9e37ca025e8db3674eac" kindref="member">OnTestProgramStart</ref>(*<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4933023bf72db430433dbce1c0e2602d" kindref="member">parent_</ref>);</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"></highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>How<sp/>many<sp/>times<sp/>to<sp/>repeat<sp/>the<sp/>tests?<sp/><sp/>We<sp/>don&apos;t<sp/>want<sp/>to<sp/>repeat<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>we<sp/>are<sp/>inside<sp/>the<sp/>subprocess<sp/>of<sp/>a<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>repeat<sp/>=<sp/>in_subprocess_for_death_test<sp/>?<sp/>1<sp/>:<sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(repeat);</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeats<sp/>forever<sp/>if<sp/>the<sp/>repeat<sp/>count<sp/>is<sp/>negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forever<sp/>=<sp/>repeat<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>forever<sp/>||<sp/>i<sp/>!=<sp/>repeat;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>to<sp/>preserve<sp/>failures<sp/>generated<sp/>by<sp/>ad-hoc<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assertions<sp/>executed<sp/>before<sp/>RUN_ALL_TESTS().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a3f7a43dd50595257ac958e7ec9112945" kindref="member">ClearNonAdHocTestResult</ref>();</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"></highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref><sp/>start<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae0c6fd4543c65945515c42d6f43cc138" kindref="member">GetTimeInMillis</ref>();</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"></highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shuffles<sp/>test<sp/>cases<sp/>and<sp/>tests<sp/>if<sp/>requested.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_tests_to_run<sp/>&amp;&amp;<sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(shuffle))<sp/>{</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a485dc510d5b4af5835231d23e5510b25" kindref="member">random</ref>()-&gt;<ref refid="db/da2/classtesting_1_1internal_1_1_random_1aaca1e9a7a7bc2a613347117db7ab28b1" kindref="member">Reseed</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a3076e24cbd93ed76f370a5a2fce53403" kindref="member">random_seed_</ref>);</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>be<sp/>done<sp/>before<sp/>calling<sp/>OnTestIterationStart(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>such<sp/>that<sp/>a<sp/>test<sp/>event<sp/>listener<sp/>can<sp/>see<sp/>the<sp/>actual<sp/>test<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a1835112b5b9bb3931956c68f05a3cf69" kindref="member">ShuffleTests</ref>();</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"></highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>the<sp/>unit<sp/>test<sp/>event<sp/>listeners<sp/>that<sp/>the<sp/>tests<sp/>are<sp/>about<sp/>to<sp/>start.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/>repeater-&gt;<ref refid="d1/d46/classtesting_1_1_test_event_listener_1ac7cacc17e8a9b6e18d7c6031df762608" kindref="member">OnTestIterationStart</ref>(*<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4933023bf72db430433dbce1c0e2602d" kindref="member">parent_</ref>,<sp/>i);</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"></highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>each<sp/>test<sp/>case<sp/>if<sp/>there<sp/>is<sp/>at<sp/>least<sp/>one<sp/>test<sp/>to<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_tests_to_run)<sp/>{</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>up<sp/>all<sp/>environments<sp/>beforehand.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>repeater-&gt;<ref refid="d1/d46/classtesting_1_1_test_event_listener_1a070798921b8d09f891e02762287ee5b0" kindref="member">OnEnvironmentsSetUpStart</ref>(*<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4933023bf72db430433dbce1c0e2602d" kindref="member">parent_</ref>);</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a52f5504ed65d116201ccb8f99a44fd7e" kindref="member">ForEach</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a7997fa11dbc4f4b3f19f11f7322bb3d0" kindref="member">environments_</ref>,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a5f5535012d4548788a5d1a4e0f18e19e" kindref="member">SetUpEnvironment</ref>);</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>repeater-&gt;<ref refid="d1/d46/classtesting_1_1_test_event_listener_1a9ff0d48e0f7c64dea5cb0a607498d6f6" kindref="member">OnEnvironmentsSetUpEnd</ref>(*<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4933023bf72db430433dbce1c0e2602d" kindref="member">parent_</ref>);</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"></highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>the<sp/>tests<sp/>only<sp/>if<sp/>there<sp/>was<sp/>no<sp/>fatal<sp/>failure<sp/>during<sp/>global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set-up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="df/d69/classtesting_1_1_test_1a4f237fa994f623a704494cd821fb761f" kindref="member">Test::HasFatalFailure</ref>())<sp/>{</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_index<sp/>=<sp/>0;<sp/>test_index<sp/>&lt;<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ab06cec6b304d4b5d853e4047f98dba3b" kindref="member">total_test_case_count</ref>();</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_index++)<sp/>{</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a04b94a3c825711103b247aa87d6b76e3" kindref="member">GetMutableTestCase</ref>(test_index)-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1aa3eca255b6be227d7d901cc2a72017a5" kindref="member">Run</ref>();</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"></highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tears<sp/>down<sp/>all<sp/>environments<sp/>in<sp/>reverse<sp/>order<sp/>afterwards.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>repeater-&gt;<ref refid="d1/d46/classtesting_1_1_test_event_listener_1a1246b8fa84a0807afeffa6e986254ee8" kindref="member">OnEnvironmentsTearDownStart</ref>(*<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4933023bf72db430433dbce1c0e2602d" kindref="member">parent_</ref>);</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cpp/algorithm/for_each" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::for_each</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a7997fa11dbc4f4b3f19f11f7322bb3d0" kindref="member">environments_</ref>.rbegin(),<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a7997fa11dbc4f4b3f19f11f7322bb3d0" kindref="member">environments_</ref>.rend(),</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac467e871e4781da3f5ebed2a4465aec4" kindref="member">TearDownEnvironment</ref>);</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>repeater-&gt;<ref refid="d1/d46/classtesting_1_1_test_event_listener_1a9cc8d7ef2c9e722a301ec4cee20633e2" kindref="member">OnEnvironmentsTearDownEnd</ref>(*<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4933023bf72db430433dbce1c0e2602d" kindref="member">parent_</ref>);</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"></highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a97b9c166ebee95ae4c9ef26cf3155617" kindref="member">elapsed_time_</ref><sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae0c6fd4543c65945515c42d6f43cc138" kindref="member">GetTimeInMillis</ref>()<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"></highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>the<sp/>unit<sp/>test<sp/>event<sp/>listener<sp/>that<sp/>the<sp/>tests<sp/>have<sp/>just<sp/>finished.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/>repeater-&gt;<ref refid="d1/d46/classtesting_1_1_test_event_listener_1a7e35fec33b744e6a410f10e2fa090015" kindref="member">OnTestIterationEnd</ref>(*<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4933023bf72db430433dbce1c0e2602d" kindref="member">parent_</ref>,<sp/>i);</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"></highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>result<sp/>and<sp/>clears<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1aad2f13a7fb077e9e26c761dea838c160" kindref="member">Passed</ref>())<sp/>{</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"></highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>original<sp/>test<sp/>order<sp/>after<sp/>the<sp/>iteration.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>quickly<sp/>repro<sp/>a<sp/>failure<sp/>that<sp/>happens<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>N-th<sp/>iteration<sp/>without<sp/>repeating<sp/>the<sp/>first<sp/>(N<sp/>-<sp/>1)<sp/>iterations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>not<sp/>enclosed<sp/>in<sp/>&quot;if<sp/>(GTEST_FLAG(shuffle))<sp/>{<sp/>...<sp/>}&quot;,<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>the<sp/>user<sp/>somehow<sp/>changes<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag<sp/>somewhere</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(it&apos;s<sp/>always<sp/>safe<sp/>to<sp/>unshuffle<sp/>the<sp/>tests).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ae4c0afbfb6a7d13aece4c3a256a5d01d" kindref="member">UnshuffleTests</ref>();</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"></highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(shuffle))<sp/>{</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Picks<sp/>a<sp/>new<sp/>random<sp/>seed<sp/>for<sp/>each<sp/>iteration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a3076e24cbd93ed76f370a5a2fce53403" kindref="member">random_seed_</ref><sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a6e07a655cb987d131cd8fbeba9a7f1eb" kindref="member">GetNextRandomSeed</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a3076e24cbd93ed76f370a5a2fce53403" kindref="member">random_seed_</ref>);</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"></highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/>repeater-&gt;<ref refid="d1/d46/classtesting_1_1_test_event_listener_1a543233908c4fd972550c7198c31c895a" kindref="member">OnTestProgramEnd</ref>(*<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4933023bf72db430433dbce1c0e2602d" kindref="member">parent_</ref>);</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"></highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!failed;</highlight></codeline>
<codeline lineno="4687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"></highlight></codeline>
<codeline lineno="4689"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>the<sp/>GTEST_SHARD_STATUS_FILE<sp/>environment<sp/>variable,<sp/>and<sp/>creates<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4690"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>variable<sp/>is<sp/>present.<sp/>If<sp/>a<sp/>file<sp/>already<sp/>exists<sp/>at<sp/>this<sp/>location,<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>will<sp/>write<sp/>over<sp/>it.<sp/>If<sp/>the<sp/>variable<sp/>is<sp/>present,<sp/>but<sp/>the<sp/>file<sp/>cannot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>created,<sp/>prints<sp/>an<sp/>error<sp/>and<sp/>exits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4693" refid="d0/da7/namespacetesting_1_1internal_1a656c8ec8f2ee82fa90b9ba61b6145538" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a656c8ec8f2ee82fa90b9ba61b6145538" kindref="member">WriteToShardStatusFileIfNeeded</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_shard_file<sp/>=<sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a1d5e3da5a27eed25986859fa83cafe95" kindref="member">posix::GetEnv</ref>(<ref refid="d0/d75/namespacetesting_1a7f337be0b85c12d2ed9bcaedbba7af99" kindref="member">kTestShardStatusFile</ref>);</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_shard_file<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>file<sp/>=<sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a4042201dcc4932641d484e7ddf94de7d" kindref="member">posix::FOpen</ref>(test_shard_file,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" kindref="member">COLOR_RED</ref>,</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>write<sp/>to<sp/>the<sp/>test<sp/>shard<sp/>status<sp/>file<sp/>\&quot;%s\&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;specified<sp/>by<sp/>the<sp/>%s<sp/>environment<sp/>variable.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_shard_file,<sp/><ref refid="d0/d75/namespacetesting_1a7f337be0b85c12d2ed9bcaedbba7af99" kindref="member">kTestShardStatusFile</ref>);</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"></highlight></codeline>
<codeline lineno="4709"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Checks<sp/>whether<sp/>sharding<sp/>is<sp/>enabled<sp/>by<sp/>examining<sp/>the<sp/>relevant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4710"><highlight class="normal"></highlight><highlight class="comment">//<sp/>environment<sp/>variable<sp/>values.<sp/>If<sp/>the<sp/>variables<sp/>are<sp/>present,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4711"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>inconsistent<sp/>(i.e.,<sp/>shard_index<sp/>&gt;=<sp/>total_shards),<sp/>prints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4712"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>error<sp/>and<sp/>exits.<sp/>If<sp/>in_subprocess_for_death_test,<sp/>sharding<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4713"><highlight class="normal"></highlight><highlight class="comment">//<sp/>disabled<sp/>because<sp/>it<sp/>must<sp/>only<sp/>be<sp/>applied<sp/>to<sp/>the<sp/>original<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4714"><highlight class="normal"></highlight><highlight class="comment">//<sp/>process.<sp/>Otherwise,<sp/>we<sp/>could<sp/>filter<sp/>out<sp/>death<sp/>tests<sp/>we<sp/>intended<sp/>to<sp/>execute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4715" refid="d0/da7/namespacetesting_1_1internal_1a57e2697262a419061fc4cd3377a9271e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a57e2697262a419061fc4cd3377a9271e" kindref="member">ShouldShard</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>total_shards_env,</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>shard_index_env,</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_subprocess_for_death_test)<sp/>{</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_subprocess_for_death_test)<sp/>{</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"></highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2f32e8087820ba11f87940176f14d58c" kindref="member">Int32</ref><sp/>total_shards<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1afec7cf2eb159fa969f88d192ee507d23" kindref="member">Int32FromEnvOrDie</ref>(total_shards_env,<sp/>-1);</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2f32e8087820ba11f87940176f14d58c" kindref="member">Int32</ref><sp/>shard_index<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1afec7cf2eb159fa969f88d192ee507d23" kindref="member">Int32FromEnvOrDie</ref>(shard_index_env,<sp/>-1);</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"></highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total_shards<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>shard_index<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total_shards<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>shard_index<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref><sp/>msg<sp/>=<sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>()</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>environment<sp/>variables:<sp/>you<sp/>have<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="d0/d75/namespacetesting_1aab047cced200c1809bef2340dabe904f" kindref="member">kTestShardIndex</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>shard_index</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>have<sp/>left<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d0/d75/namespacetesting_1a19fe5fab1b6f6ecbfc6357a56f17aa03" kindref="member">kTestTotalShards</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>unset.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" kindref="member">COLOR_RED</ref>,<sp/>msg.<ref refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" kindref="member">GetString</ref>().<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total_shards<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>shard_index<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref><sp/>msg<sp/>=<sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>()</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>environment<sp/>variables:<sp/>you<sp/>have<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="d0/d75/namespacetesting_1a19fe5fab1b6f6ecbfc6357a56f17aa03" kindref="member">kTestTotalShards</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>total_shards</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>have<sp/>left<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d0/d75/namespacetesting_1aab047cced200c1809bef2340dabe904f" kindref="member">kTestShardIndex</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>unset.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" kindref="member">COLOR_RED</ref>,<sp/>msg.<ref refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" kindref="member">GetString</ref>().<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shard_index<sp/>&lt;<sp/>0<sp/>||<sp/>shard_index<sp/>&gt;=<sp/>total_shards)<sp/>{</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref><sp/>msg<sp/>=<sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>()</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>environment<sp/>variables:<sp/>we<sp/>require<sp/>0<sp/>&lt;=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="d0/d75/namespacetesting_1aab047cced200c1809bef2340dabe904f" kindref="member">kTestShardIndex</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d0/d75/namespacetesting_1a19fe5fab1b6f6ecbfc6357a56f17aa03" kindref="member">kTestTotalShards</ref></highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>you<sp/>have<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d0/d75/namespacetesting_1aab047cced200c1809bef2340dabe904f" kindref="member">kTestShardIndex</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>shard_index</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d0/d75/namespacetesting_1a19fe5fab1b6f6ecbfc6357a56f17aa03" kindref="member">kTestTotalShards</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>total_shards<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" kindref="member">COLOR_RED</ref>,<sp/>msg.<ref refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" kindref="member">GetString</ref>().<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"></highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_shards<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="4755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>environment<sp/>variable<sp/>var<sp/>as<sp/>an<sp/>Int32.<sp/>If<sp/>it<sp/>is<sp/>unset,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>default_val.<sp/>If<sp/>it<sp/>is<sp/>not<sp/>an<sp/>Int32,<sp/>prints<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4759"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>aborts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4760" refid="d0/da7/namespacetesting_1_1internal_1afec7cf2eb159fa969f88d192ee507d23" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a2f32e8087820ba11f87940176f14d58c" kindref="member">Int32</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1afec7cf2eb159fa969f88d192ee507d23" kindref="member">Int32FromEnvOrDie</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>var,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2f32e8087820ba11f87940176f14d58c" kindref="member">Int32</ref><sp/>default_val)<sp/>{</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str_val<sp/>=<sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a1d5e3da5a27eed25986859fa83cafe95" kindref="member">posix::GetEnv</ref>(var);</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_val<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_val;</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"></highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2f32e8087820ba11f87940176f14d58c" kindref="member">Int32</ref><sp/>result;</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d0/da7/namespacetesting_1_1internal_1a3bd151d0274b216f9c2e6275ccc4a9a3" kindref="member">ParseInt32</ref>(<ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>value<sp/>of<sp/>environment<sp/>variable<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>var,</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_val,<sp/>&amp;result))<sp/>{</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"></highlight></codeline>
<codeline lineno="4774"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>the<sp/>total<sp/>number<sp/>of<sp/>shards,<sp/>the<sp/>shard<sp/>index,<sp/>and<sp/>the<sp/>test<sp/>id,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4775"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>should<sp/>be<sp/>run<sp/>on<sp/>this<sp/>shard.<sp/>The<sp/>test<sp/>id<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4776"><highlight class="normal"></highlight><highlight class="comment">//<sp/>some<sp/>arbitrary<sp/>but<sp/>unique<sp/>non-negative<sp/>integer<sp/>assigned<sp/>to<sp/>each<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4777"><highlight class="normal"></highlight><highlight class="comment">//<sp/>method.<sp/>Assumes<sp/>that<sp/>0<sp/>&lt;=<sp/>shard_index<sp/>&lt;<sp/>total_shards.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4778" refid="d0/da7/namespacetesting_1_1internal_1ac05861de55e638fa73ea70a3f2f6f622" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac05861de55e638fa73ea70a3f2f6f622" kindref="member">ShouldRunTestOnShard</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_shards,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shard_index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_id)<sp/>{</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(test_id<sp/>%<sp/>total_shards)<sp/>==<sp/>shard_index;</highlight></codeline>
<codeline lineno="4780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"></highlight></codeline>
<codeline lineno="4782"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compares<sp/>the<sp/>name<sp/>of<sp/>each<sp/>test<sp/>with<sp/>the<sp/>user-specified<sp/>filter<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4783"><highlight class="normal"></highlight><highlight class="comment">//<sp/>decide<sp/>whether<sp/>the<sp/>test<sp/>should<sp/>be<sp/>run,<sp/>then<sp/>records<sp/>the<sp/>result<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>each<sp/>TestCase<sp/>and<sp/>TestInfo<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4785"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>shard_tests<sp/>==<sp/>true,<sp/>further<sp/>filters<sp/>tests<sp/>based<sp/>on<sp/>sharding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4786"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variables<sp/>in<sp/>the<sp/>environment<sp/>-<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4787"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://code.google.com/p/googletest/wiki/GoogleTestAdvancedGuide.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4788"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4789" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1af8cfcffb71cba69a55105ddac96786aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1af8cfcffb71cba69a55105ddac96786aa" kindref="member">UnitTestImpl::FilterTests</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ac8d671a300e2bd293e21f8ad1612543c" kindref="member">ReactionToSharding</ref><sp/>shard_tests)<sp/>{</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2f32e8087820ba11f87940176f14d58c" kindref="member">Int32</ref><sp/>total_shards<sp/>=<sp/>shard_tests<sp/>==<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ac8d671a300e2bd293e21f8ad1612543ca2087ebbedbe760cb54ec9227101a70aa" kindref="member">HONOR_SHARDING_PROTOCOL</ref><sp/>?</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1afec7cf2eb159fa969f88d192ee507d23" kindref="member">Int32FromEnvOrDie</ref>(<ref refid="d0/d75/namespacetesting_1a19fe5fab1b6f6ecbfc6357a56f17aa03" kindref="member">kTestTotalShards</ref>,<sp/>-1)<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2f32e8087820ba11f87940176f14d58c" kindref="member">Int32</ref><sp/>shard_index<sp/>=<sp/>shard_tests<sp/>==<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ac8d671a300e2bd293e21f8ad1612543ca2087ebbedbe760cb54ec9227101a70aa" kindref="member">HONOR_SHARDING_PROTOCOL</ref><sp/>?</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1afec7cf2eb159fa969f88d192ee507d23" kindref="member">Int32FromEnvOrDie</ref>(<ref refid="d0/d75/namespacetesting_1aab047cced200c1809bef2340dabe904f" kindref="member">kTestShardIndex</ref>,<sp/>-1)<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"></highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>num_runnable_tests<sp/>are<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>that<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>across<sp/>all<sp/>shards<sp/>(i.e.,<sp/>match<sp/>filter<sp/>and<sp/>are<sp/>not<sp/>disabled).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>num_selected_tests<sp/>are<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>to<sp/>be<sp/>run<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>shard.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_runnable_tests<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_selected_tests<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_case<sp/>=<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>[i];</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>&amp;test_case_name<sp/>=<sp/>test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1a8c4da4b626748f746b1f9fdbe885edfb" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/>test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1ab3f3dbe8ef52473f912aef44d04193d5" kindref="member">set_should_run</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"></highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1aaa94fcfd7f8161d39504f535fa995c2d" kindref="member">test_info_list</ref>().size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=<sp/>test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1aaa94fcfd7f8161d39504f535fa995c2d" kindref="member">test_info_list</ref>()[j];</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>test_name(test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>is<sp/>disabled<sp/>if<sp/>test<sp/>case<sp/>name<sp/>or<sp/>test<sp/>name<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kDisableTestFilter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_disabled<sp/>=</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a51c4969c39bbb6a3f0d596e7f47f3530" kindref="member">internal::UnitTestOptions::MatchesFilter</ref>(test_case_name,</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1a1b6299d8c2a3b3dc522db40e1858527b" kindref="member">kDisableTestFilter</ref>)<sp/>||</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1a51c4969c39bbb6a3f0d596e7f47f3530" kindref="member">internal::UnitTestOptions::MatchesFilter</ref>(test_name,</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d75/namespacetesting_1a1b6299d8c2a3b3dc522db40e1858527b" kindref="member">kDisableTestFilter</ref>);</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1a461785b0a586f2fa2c146f1599293015" kindref="member">is_disabled_</ref><sp/>=<sp/>is_disabled;</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"></highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matches_filter<sp/>=</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/df0/classtesting_1_1internal_1_1_unit_test_options_1ae2c97834ce45d56f46d39df7cc310109" kindref="member">internal::UnitTestOptions::FilterMatchesTest</ref>(test_case_name,</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_name);</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1aff50a5d6360f8193a19682c01593b42b" kindref="member">matches_filter_</ref><sp/>=<sp/>matches_filter;</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"></highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_runnable<sp/>=</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(also_run_disabled_tests)<sp/>||<sp/>!is_disabled)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matches_filter;</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"></highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_selected<sp/>=<sp/>is_runnable<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(shard_tests<sp/>==<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ac8d671a300e2bd293e21f8ad1612543ca8df05d491e4291bd178228eaa19fa7c9" kindref="member">IGNORE_SHARDING_PROTOCOL</ref><sp/>||</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac05861de55e638fa73ea70a3f2f6f622" kindref="member">ShouldRunTestOnShard</ref>(total_shards,<sp/>shard_index,</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_runnable_tests));</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"></highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_runnable_tests<sp/>+=<sp/>is_runnable;</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_selected_tests<sp/>+=<sp/>is_selected;</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"></highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1ade0e3d581d82aaeaf7263d575564cb40" kindref="member">should_run_</ref><sp/>=<sp/>is_selected;</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1ab3f3dbe8ef52473f912aef44d04193d5" kindref="member">set_should_run</ref>(test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1a80b7dba9dc7b6b640c8ba46897c8e181" kindref="member">should_run</ref>()<sp/>||<sp/>is_selected);</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_selected_tests;</highlight></codeline>
<codeline lineno="4840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"></highlight></codeline>
<codeline lineno="4842"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>given<sp/>C-string<sp/>on<sp/>a<sp/>single<sp/>line<sp/>by<sp/>replacing<sp/>all<sp/>&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4843"><highlight class="normal"></highlight><highlight class="comment">//<sp/>characters<sp/>with<sp/>string<sp/>&quot;\\n&quot;.<sp/><sp/>If<sp/>the<sp/>output<sp/>takes<sp/>more<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4844"><highlight class="normal"></highlight><highlight class="comment">//<sp/>max_length<sp/>characters,<sp/>only<sp/>prints<sp/>the<sp/>first<sp/>max_length<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4845"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>&quot;...&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4846" refid="d0/da7/namespacetesting_1_1internal_1a4a8708bfb808411f9d918c7356ae7362" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4a8708bfb808411f9d918c7356ae7362" kindref="member">PrintOnOneLine</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_length)<sp/>{</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>*str<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>++str)<sp/>{</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>max_length)<sp/>{</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>*str);</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"></highlight></codeline>
<codeline lineno="4864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>names<sp/>of<sp/>the<sp/>tests<sp/>matching<sp/>the<sp/>user-specified<sp/>filter<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4865" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1abc77b71cd244096a75b13b8a2d9f7d14" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1abc77b71cd244096a75b13b8a2d9f7d14" kindref="member">UnitTestImpl::ListTestsMatchingFilter</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>at<sp/>most<sp/>this<sp/>many<sp/>characters<sp/>for<sp/>each<sp/>type/value<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kMaxParamLength<sp/>=<sp/>250;</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"></highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_case<sp/>=<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>[i];</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>printed_test_case_name<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"></highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1aaa94fcfd7f8161d39504f535fa995c2d" kindref="member">test_info_list</ref>().size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_info<sp/>=</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1aaa94fcfd7f8161d39504f535fa995c2d" kindref="member">test_info_list</ref>()[j];</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1aff50a5d6360f8193a19682c01593b42b" kindref="member">matches_filter_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!printed_test_case_name)<sp/>{</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printed_test_case_name<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s.&quot;</highlight><highlight class="normal">,<sp/>test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1a8c4da4b626748f746b1f9fdbe885edfb" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1a699abee960ad215748fa6408da345f84" kindref="member">type_param</ref>()<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>#<sp/>%s<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adc4b22274985eb08dc161b351e9012b9" kindref="member">kTypeParamLabel</ref>);</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>print<sp/>the<sp/>type<sp/>parameter<sp/>on<sp/>a<sp/>single<sp/>line<sp/>to<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>output<sp/>easy<sp/>to<sp/>parse<sp/>by<sp/>a<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4a8708bfb808411f9d918c7356ae7362" kindref="member">PrintOnOneLine</ref>(test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1a699abee960ad215748fa6408da345f84" kindref="member">type_param</ref>(),<sp/>kMaxParamLength);</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1af89b13e99f07353bc39ca99ce8086553" kindref="member">value_param</ref>()<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>#<sp/>%s<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a30b2827871fa3535353e63cb259ff90f" kindref="member">kValueParamLabel</ref>);</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>print<sp/>the<sp/>value<sp/>parameter<sp/>on<sp/>a<sp/>single<sp/>line<sp/>to<sp/>make<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>easy<sp/>to<sp/>parse<sp/>by<sp/>a<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4a8708bfb808411f9d918c7356ae7362" kindref="member">PrintOnOneLine</ref>(test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1af89b13e99f07353bc39ca99ce8086553" kindref="member">value_param</ref>(),<sp/>kMaxParamLength);</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="4900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"></highlight></codeline>
<codeline lineno="4902"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>OS<sp/>stack<sp/>trace<sp/>getter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4903"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Does<sp/>nothing<sp/>if<sp/>the<sp/>input<sp/>and<sp/>the<sp/>current<sp/>OS<sp/>stack<sp/>trace<sp/>getter<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4905"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>same;<sp/>otherwise,<sp/>deletes<sp/>the<sp/>old<sp/>getter<sp/>and<sp/>makes<sp/>the<sp/>input<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4906"><highlight class="normal"></highlight><highlight class="comment">//<sp/>current<sp/>getter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4907" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a965c4bc292baeaefc41238f86f36f67c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a965c4bc292baeaefc41238f86f36f67c" kindref="member">UnitTestImpl::set_os_stack_trace_getter</ref>(</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/d10/classtesting_1_1internal_1_1_os_stack_trace_getter_interface" kindref="compound">OsStackTraceGetterInterface</ref>*<sp/>getter)<sp/>{</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a632a0ce2843f514e873eb5ef95201a2c" kindref="member">os_stack_trace_getter_</ref><sp/>!=<sp/>getter)<sp/>{</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a632a0ce2843f514e873eb5ef95201a2c" kindref="member">os_stack_trace_getter_</ref>;</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a632a0ce2843f514e873eb5ef95201a2c" kindref="member">os_stack_trace_getter_</ref><sp/>=<sp/>getter;</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"></highlight></codeline>
<codeline lineno="4915"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>OS<sp/>stack<sp/>trace<sp/>getter<sp/>if<sp/>it<sp/>is<sp/>not<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4916"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise,<sp/>creates<sp/>an<sp/>OsStackTraceGetter,<sp/>makes<sp/>it<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4917"><highlight class="normal"></highlight><highlight class="comment">//<sp/>getter,<sp/>and<sp/>returns<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4918" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1accb552ad4af910904a9e48c49c5c79a2" refkind="member"><highlight class="normal"><ref refid="d7/d10/classtesting_1_1internal_1_1_os_stack_trace_getter_interface" kindref="compound">OsStackTraceGetterInterface</ref>*<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1accb552ad4af910904a9e48c49c5c79a2" kindref="member">UnitTestImpl::os_stack_trace_getter</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a632a0ce2843f514e873eb5ef95201a2c" kindref="member">os_stack_trace_getter_</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_STACK_TRACE_GETTER_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a632a0ce2843f514e873eb5ef95201a2c" kindref="member">os_stack_trace_getter_</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>GTEST_OS_STACK_TRACE_GETTER_;</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a632a0ce2843f514e873eb5ef95201a2c" kindref="member">os_stack_trace_getter_</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d6/db4/classtesting_1_1internal_1_1_os_stack_trace_getter" kindref="compound">OsStackTraceGetter</ref>;</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_STACK_TRACE_GETTER_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"></highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a632a0ce2843f514e873eb5ef95201a2c" kindref="member">os_stack_trace_getter_</ref>;</highlight></codeline>
<codeline lineno="4928"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"></highlight></codeline>
<codeline lineno="4930"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestResult<sp/>for<sp/>the<sp/>test<sp/>that&apos;s<sp/>currently<sp/>running,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4931"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>TestResult<sp/>for<sp/>the<sp/>ad<sp/>hoc<sp/>test<sp/>if<sp/>no<sp/>test<sp/>is<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4932" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a385bee93ae6043262a860574aa59ba1a" refkind="member"><highlight class="normal"><ref refid="d1/d69/classtesting_1_1_test_result" kindref="compound">TestResult</ref>*<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a385bee93ae6043262a860574aa59ba1a" kindref="member">UnitTestImpl::current_test_result</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ae2f57d288d3e4f195a2536c74ebc3a1b" kindref="member">current_test_info_</ref><sp/>?</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ae2f57d288d3e4f195a2536c74ebc3a1b" kindref="member">current_test_info_</ref>-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1afb2ec6cf0ab3f3e57bc2304e0df97c29" kindref="member">result_</ref>)<sp/>:<sp/>&amp;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ae5fbed6752ae31d54b7db28c8a84df0a" kindref="member">ad_hoc_test_result_</ref>;</highlight></codeline>
<codeline lineno="4935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"></highlight></codeline>
<codeline lineno="4937"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Shuffles<sp/>all<sp/>test<sp/>cases,<sp/>and<sp/>the<sp/>tests<sp/>within<sp/>each<sp/>test<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4938"><highlight class="normal"></highlight><highlight class="comment">//<sp/>making<sp/>sure<sp/>that<sp/>death<sp/>tests<sp/>are<sp/>still<sp/>run<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4939" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a1835112b5b9bb3931956c68f05a3cf69" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a1835112b5b9bb3931956c68f05a3cf69" kindref="member">UnitTestImpl::ShuffleTests</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shuffles<sp/>the<sp/>death<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0e1d3dc36138a591769412d4c7779861" kindref="member">ShuffleRange</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a485dc510d5b4af5835231d23e5510b25" kindref="member">random</ref>(),<sp/>0,<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a93b260f5e9218dd561831f3135ac9f26" kindref="member">last_death_test_case_</ref><sp/>+<sp/>1,<sp/>&amp;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4417a00242bf8ef70029d5e50bf4c7c2" kindref="member">test_case_indices_</ref>);</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"></highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shuffles<sp/>the<sp/>non-death<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0e1d3dc36138a591769412d4c7779861" kindref="member">ShuffleRange</ref>(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a485dc510d5b4af5835231d23e5510b25" kindref="member">random</ref>(),<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a93b260f5e9218dd561831f3135ac9f26" kindref="member">last_death_test_case_</ref><sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>.size()),<sp/>&amp;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4417a00242bf8ef70029d5e50bf4c7c2" kindref="member">test_case_indices_</ref>);</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"></highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shuffles<sp/>the<sp/>tests<sp/>inside<sp/>each<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>[i]-&gt;ShuffleTests(<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a485dc510d5b4af5835231d23e5510b25" kindref="member">random</ref>());</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"></highlight></codeline>
<codeline lineno="4953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>test<sp/>cases<sp/>and<sp/>tests<sp/>to<sp/>their<sp/>order<sp/>before<sp/>the<sp/>first<sp/>shuffle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4954" refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ae4c0afbfb6a7d13aece4c3a256a5d01d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1ae4c0afbfb6a7d13aece4c3a256a5d01d" kindref="member">UnitTestImpl::UnshuffleTests</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unshuffles<sp/>the<sp/>tests<sp/>in<sp/>each<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a929ca367f30be9bc92b65afe848ca3f9" kindref="member">test_cases_</ref>[i]-&gt;UnshuffleTests();</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resets<sp/>the<sp/>index<sp/>of<sp/>each<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a4417a00242bf8ef70029d5e50bf4c7c2" kindref="member">test_case_indices_</ref>[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i);</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"></highlight></codeline>
<codeline lineno="4963"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>OS<sp/>stack<sp/>trace<sp/>as<sp/>an<sp/>std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4964"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>stack<sp/>frames<sp/>to<sp/>be<sp/>included<sp/>is<sp/>specified<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4966"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>gtest_stack_trace_depth<sp/>flag.<sp/><sp/>The<sp/>skip_count<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4967"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specifies<sp/>the<sp/>number<sp/>of<sp/>top<sp/>frames<sp/>to<sp/>be<sp/>skipped,<sp/>which<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4968"><highlight class="normal"></highlight><highlight class="comment">//<sp/>count<sp/>against<sp/>the<sp/>number<sp/>of<sp/>frames<sp/>to<sp/>be<sp/>included.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4969"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4970"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>if<sp/>Foo()<sp/>calls<sp/>Bar(),<sp/>which<sp/>in<sp/>turn<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4971"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GetCurrentOsStackTraceExceptTop(...,<sp/>1),<sp/>Foo()<sp/>will<sp/>be<sp/>included<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4972"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>trace<sp/>but<sp/>Bar()<sp/>and<sp/>GetCurrentOsStackTraceExceptTop()<sp/>won&apos;t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4973" refid="d0/da7/namespacetesting_1_1internal_1a1ffce3a1491bc0de802157425b30f3a1" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1ffce3a1491bc0de802157425b30f3a1" kindref="member">GetCurrentOsStackTraceExceptTop</ref>(<ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>*<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip_count)<sp/>{</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>pass<sp/>skip_count<sp/>+<sp/>1<sp/>to<sp/>skip<sp/>this<sp/>wrapper<sp/>function<sp/>in<sp/>addition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>what<sp/>the<sp/>user<sp/>really<sp/>wants<sp/>to<sp/>skip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" kindref="member">GetUnitTestImpl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a243591ed1070d5a856b4243810d85f94" kindref="member">CurrentOsStackTraceExceptTop</ref>(skip_count<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"></highlight></codeline>
<codeline lineno="4980"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>by<sp/>the<sp/>GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_<sp/>macro<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>suppress<sp/>unreachable<sp/>code<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4982"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4983" refid="d1/da8/classtesting_1_1internal_1_1anonymous__namespace_02gtest_8cc_03_1_1_class_unique_to_always_true" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/da8/classtesting_1_1internal_1_1anonymous__namespace_02gtest_8cc_03_1_1_class_unique_to_always_true" kindref="compound">ClassUniqueToAlwaysTrue</ref><sp/>{};</highlight></codeline>
<codeline lineno="4984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"></highlight></codeline>
<codeline lineno="4986" refid="d0/da7/namespacetesting_1_1internal_1a8ca2411dd35c0816107b93cf9ec7ebf0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8ca2411dd35c0816107b93cf9ec7ebf0" kindref="member">IsTrue</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>condition)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>condition;<sp/>}</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"></highlight></codeline>
<codeline lineno="4988" refid="d0/da7/namespacetesting_1_1internal_1af72a7a7eee6997f4ed9e18d9620a7b87" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af72a7a7eee6997f4ed9e18d9620a7b87" kindref="member">AlwaysTrue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>condition<sp/>is<sp/>always<sp/>false<sp/>so<sp/>AlwaysTrue()<sp/>never<sp/>actually<sp/>throws,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>it<sp/>makes<sp/>the<sp/>compiler<sp/>think<sp/>that<sp/>it<sp/>may<sp/>throw.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/da7/namespacetesting_1_1internal_1a8ca2411dd35c0816107b93cf9ec7ebf0" kindref="member">IsTrue</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ClassUniqueToAlwaysTrue();</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4996"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"></highlight></codeline>
<codeline lineno="4998"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>*pstr<sp/>starts<sp/>with<sp/>the<sp/>given<sp/>prefix,<sp/>modifies<sp/>*pstr<sp/>to<sp/>be<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4999"><highlight class="normal"></highlight><highlight class="comment">//<sp/>past<sp/>the<sp/>prefix<sp/>and<sp/>returns<sp/>true;<sp/>otherwise<sp/>leaves<sp/>*pstr<sp/>unchanged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5000"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>returns<sp/>false.<sp/><sp/>None<sp/>of<sp/>pstr,<sp/>*pstr,<sp/>and<sp/>prefix<sp/>can<sp/>be<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5001" refid="d0/da7/namespacetesting_1_1internal_1abcf66fcfdb8c336eba8636bc8b49b4aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1abcf66fcfdb8c336eba8636bc8b49b4aa" kindref="member">SkipPrefix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>pstr)<sp/>{</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>prefix_len<sp/>=<sp/>strlen(prefix);</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(*pstr,<sp/>prefix,<sp/>prefix_len)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/>*pstr<sp/>+=<sp/>prefix_len;</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5008"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"></highlight></codeline>
<codeline lineno="5010"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>a<sp/>string<sp/>as<sp/>a<sp/>command<sp/>line<sp/>flag.<sp/><sp/>The<sp/>string<sp/>should<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5011"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>format<sp/>&quot;--flag=value&quot;.<sp/><sp/>When<sp/>def_optional<sp/>is<sp/>true,<sp/>the<sp/>&quot;=value&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5012"><highlight class="normal"></highlight><highlight class="comment">//<sp/>part<sp/>can<sp/>be<sp/>omitted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5013"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5014"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag,<sp/>or<sp/>NULL<sp/>if<sp/>the<sp/>parsing<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5015" refid="d0/da7/namespacetesting_1_1internal_1a8bfd56af5e4a89bfb76f7e1723e41b03" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8bfd56af5e4a89bfb76f7e1723e41b03" kindref="member">ParseFlagValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag,</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>def_optional)<sp/>{</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>str<sp/>and<sp/>flag<sp/>must<sp/>not<sp/>be<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/>NULL<sp/>||<sp/>flag<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"></highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>flag<sp/>must<sp/>start<sp/>with<sp/>&quot;--&quot;<sp/>followed<sp/>by<sp/>GTEST_FLAG_PREFIX_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>flag_str<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">std::string</ref>(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/>+<sp/>flag;</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>flag_len<sp/>=<sp/>flag_str.<ref refid="cpp/string/basic_string/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">length</ref>();</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(str,<sp/>flag_str.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>(),<sp/>flag_len)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"></highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Skips<sp/>the<sp/>flag<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag_end<sp/>=<sp/>str<sp/>+<sp/>flag_len;</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"></highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>def_optional<sp/>is<sp/>true,<sp/>it&apos;s<sp/>OK<sp/>to<sp/>not<sp/>have<sp/>a<sp/>&quot;=value&quot;<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def_optional<sp/>&amp;&amp;<sp/>(flag_end[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flag_end;</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"></highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>def_optional<sp/>is<sp/>true<sp/>and<sp/>there<sp/>are<sp/>more<sp/>characters<sp/>after<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>flag<sp/>name,<sp/>or<sp/>if<sp/>def_optional<sp/>is<sp/>false,<sp/>there<sp/>must<sp/>be<sp/>a<sp/>&apos;=&apos;<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>flag<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag_end[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"></highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>string<sp/>after<sp/>&quot;=&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flag_end<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="5041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"></highlight></codeline>
<codeline lineno="5043"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>a<sp/>string<sp/>for<sp/>a<sp/>bool<sp/>flag,<sp/>in<sp/>the<sp/>form<sp/>of<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5044"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;--flag=value&quot;<sp/>or<sp/>&quot;--flag&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5045"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5046"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>former<sp/>case,<sp/>the<sp/>value<sp/>is<sp/>taken<sp/>as<sp/>true<sp/>as<sp/>long<sp/>as<sp/>it<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5047"><highlight class="normal"></highlight><highlight class="comment">//<sp/>not<sp/>start<sp/>with<sp/>&apos;0&apos;,<sp/>&apos;f&apos;,<sp/>or<sp/>&apos;F&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5048"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5049"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>latter<sp/>case,<sp/>the<sp/>value<sp/>is<sp/>taken<sp/>as<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5050"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5051"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>success,<sp/>stores<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag<sp/>in<sp/>*value,<sp/>and<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5052"><highlight class="normal"></highlight><highlight class="comment">//<sp/>true.<sp/><sp/>On<sp/>failure,<sp/>returns<sp/>false<sp/>without<sp/>changing<sp/>*value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5053" refid="d0/da7/namespacetesting_1_1internal_1ada3b98e7cfe93f4ba2053c470d9e3e51" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ada3b98e7cfe93f4ba2053c470d9e3e51" kindref="member">ParseBoolFlag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag<sp/>as<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_str<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8bfd56af5e4a89bfb76f7e1723e41b03" kindref="member">ParseFlagValue</ref>(str,<sp/>flag,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"></highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Aborts<sp/>if<sp/>the<sp/>parsing<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_str<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"></highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>string<sp/>value<sp/>to<sp/>a<sp/>bool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/>*value<sp/>=<sp/>!(*value_str<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>*value_str<sp/>==<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>||<sp/>*value_str<sp/>==<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"></highlight></codeline>
<codeline lineno="5065"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>a<sp/>string<sp/>for<sp/>an<sp/>Int32<sp/>flag,<sp/>in<sp/>the<sp/>form<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5066"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;--flag=value&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5067"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5068"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>success,<sp/>stores<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag<sp/>in<sp/>*value,<sp/>and<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5069"><highlight class="normal"></highlight><highlight class="comment">//<sp/>true.<sp/><sp/>On<sp/>failure,<sp/>returns<sp/>false<sp/>without<sp/>changing<sp/>*value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5070" refid="d0/da7/namespacetesting_1_1internal_1a082f2d6b59adc025b035b2c51b0fc47e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a082f2d6b59adc025b035b2c51b0fc47e" kindref="member">ParseInt32Flag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2f32e8087820ba11f87940176f14d58c" kindref="member">Int32</ref>*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag<sp/>as<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_str<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8bfd56af5e4a89bfb76f7e1723e41b03" kindref="member">ParseFlagValue</ref>(str,<sp/>flag,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"></highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Aborts<sp/>if<sp/>the<sp/>parsing<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_str<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"></highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>*value<sp/>to<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3bd151d0274b216f9c2e6275ccc4a9a3" kindref="member">ParseInt32</ref>(<ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>value<sp/>of<sp/>flag<sp/>--&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>flag,</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_str,<sp/>value);</highlight></codeline>
<codeline lineno="5080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"></highlight></codeline>
<codeline lineno="5082"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>a<sp/>string<sp/>for<sp/>a<sp/>string<sp/>flag,<sp/>in<sp/>the<sp/>form<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5083"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;--flag=value&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5084"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5085"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>success,<sp/>stores<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag<sp/>in<sp/>*value,<sp/>and<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5086"><highlight class="normal"></highlight><highlight class="comment">//<sp/>true.<sp/><sp/>On<sp/>failure,<sp/>returns<sp/>false<sp/>without<sp/>changing<sp/>*value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5087" refid="d0/da7/namespacetesting_1_1internal_1aa4ce312efaaf7a97aac2303173afe021" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa4ce312efaaf7a97aac2303173afe021" kindref="member">ParseStringFlag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>flag,<sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag<sp/>as<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_str<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8bfd56af5e4a89bfb76f7e1723e41b03" kindref="member">ParseFlagValue</ref>(str,<sp/>flag,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"></highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Aborts<sp/>if<sp/>the<sp/>parsing<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_str<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"></highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>*value<sp/>to<sp/>the<sp/>value<sp/>of<sp/>the<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/>*value<sp/>=<sp/>value_str;</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5097"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"></highlight></codeline>
<codeline lineno="5099"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determines<sp/>whether<sp/>a<sp/>string<sp/>has<sp/>a<sp/>prefix<sp/>that<sp/>Google<sp/>Test<sp/>uses<sp/>for<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>flags,<sp/>i.e.,<sp/>starts<sp/>with<sp/>GTEST_FLAG_PREFIX_<sp/>or<sp/>GTEST_FLAG_PREFIX_DASH_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>Google<sp/>Test<sp/>detects<sp/>that<sp/>a<sp/>command<sp/>line<sp/>flag<sp/>has<sp/>its<sp/>prefix<sp/>but<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recognized,<sp/>it<sp/>will<sp/>print<sp/>its<sp/>help<sp/>message.<sp/>Flags<sp/>starting<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTEST_INTERNAL_PREFIX_<sp/>followed<sp/>by<sp/>&quot;internal_&quot;<sp/>are<sp/>considered<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>internal<sp/>flags<sp/>and<sp/>do<sp/>not<sp/>trigger<sp/>the<sp/>help<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5105" refid="d0/da7/namespacetesting_1_1internal_1a6fff795269f50673e358438721710d6f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a6fff795269f50673e358438721710d6f" kindref="member">HasGoogleTestFlagPrefix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d0/da7/namespacetesting_1_1internal_1abcf66fcfdb8c336eba8636bc8b49b4aa" kindref="member">SkipPrefix</ref>(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">,<sp/>&amp;str)<sp/>||</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1abcf66fcfdb8c336eba8636bc8b49b4aa" kindref="member">SkipPrefix</ref>(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>&amp;str)<sp/>||</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1abcf66fcfdb8c336eba8636bc8b49b4aa" kindref="member">SkipPrefix</ref>(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>&amp;str))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="d0/da7/namespacetesting_1_1internal_1abcf66fcfdb8c336eba8636bc8b49b4aa" kindref="member">SkipPrefix</ref>(<ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/></highlight><highlight class="stringliteral">&quot;internal_&quot;</highlight><highlight class="normal">,<sp/>&amp;str)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="d0/da7/namespacetesting_1_1internal_1abcf66fcfdb8c336eba8636bc8b49b4aa" kindref="member">SkipPrefix</ref>(<ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref>,<sp/>&amp;str)<sp/>||</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1abcf66fcfdb8c336eba8636bc8b49b4aa" kindref="member">SkipPrefix</ref>(<ref refid="d3/dc9/gtest-port_8h_1a4251ff898f9f94ec6b8b9402c3436759" kindref="member">GTEST_FLAG_PREFIX_DASH_</ref>,<sp/>&amp;str));</highlight></codeline>
<codeline lineno="5112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"></highlight></codeline>
<codeline lineno="5114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>string<sp/>containing<sp/>code-encoded<sp/>text.<sp/><sp/>The<sp/>following<sp/>escape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sequences<sp/>can<sp/>be<sp/>used<sp/>in<sp/>the<sp/>string<sp/>to<sp/>control<sp/>the<sp/>text<sp/>color:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5116"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5117"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>@@<sp/><sp/><sp/><sp/>prints<sp/>a<sp/>single<sp/>&apos;@&apos;<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5118"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>@R<sp/><sp/><sp/><sp/>changes<sp/>the<sp/>color<sp/>to<sp/>red.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5119"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>@G<sp/><sp/><sp/><sp/>changes<sp/>the<sp/>color<sp/>to<sp/>green.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5120"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>@Y<sp/><sp/><sp/><sp/>changes<sp/>the<sp/>color<sp/>to<sp/>yellow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5121"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>@D<sp/><sp/><sp/><sp/>changes<sp/>to<sp/>the<sp/>default<sp/>terminal<sp/>text<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5122"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(wan@google.com):<sp/>Write<sp/>tests<sp/>for<sp/>this<sp/>once<sp/>we<sp/>add<sp/>stdout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>capturing<sp/>to<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5125" refid="d0/da7/namespacetesting_1_1internal_1a7d8c446a29c7e22d7d4dde8f530bb57e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a7d8c446a29c7e22d7d4dde8f530bb57e" kindref="member">PrintColorEncoded</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965" kindref="member">GTestColor</ref><sp/>color<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a0b8d8b18037efc3cdb5dd0313e7c67dc" kindref="member">COLOR_DEFAULT</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>current<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5127"><highlight class="normal"></highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Conceptually,<sp/>we<sp/>split<sp/>the<sp/>string<sp/>into<sp/>segments<sp/>divided<sp/>by<sp/>escape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sequences.<sp/><sp/>Then<sp/>we<sp/>print<sp/>one<sp/>segment<sp/>at<sp/>a<sp/>time.<sp/><sp/>At<sp/>the<sp/>end<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>iteration,<sp/>the<sp/>str<sp/>pointer<sp/>advances<sp/>to<sp/>the<sp/>beginning<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>segment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>strchr(str,<sp/></highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(color,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>str);</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"></highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(color,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>(str,<sp/>p).c_str());</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"></highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>p[1];</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>p<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1adef3055706176001364e54eb73a87e31" kindref="member">ColoredPrintf</ref>(color,<sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a0b8d8b18037efc3cdb5dd0313e7c67dc" kindref="member">COLOR_DEFAULT</ref>;</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965a592503b9434c1e751a92f3fc536d7950" kindref="member">COLOR_RED</ref>;</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;G&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965acfa9d8bbffc418447ed826f286abca02" kindref="member">COLOR_GREEN</ref>;</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;Y&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae78c352c52b710a680c35b87b1c5d965ab03862907066c68204ee9df1ee04aa29" kindref="member">COLOR_YELLOW</ref>;</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--str;</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"></highlight></codeline>
<codeline lineno="5159" refid="d0/da7/namespacetesting_1_1internal_1a454d13f6ba62cea7cfa4798257bf3910" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a454d13f6ba62cea7cfa4798257bf3910" kindref="member">kColorEncodedHelpMessage</ref>[]<sp/>=</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;This<sp/>program<sp/>contains<sp/>tests<sp/>written<sp/>using<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a13d98c217176bd8722c395b9225fc19d" kindref="member">GTEST_NAME_</ref><sp/></highlight><highlight class="stringliteral">&quot;.<sp/>You<sp/>can<sp/>use<sp/>the\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5161"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;following<sp/>command<sp/>line<sp/>flags<sp/>to<sp/>control<sp/>its<sp/>behavior:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5162"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5163"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;Test<sp/>Selection:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5164"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/></highlight><highlight class="stringliteral">&quot;list_tests@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5165"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>List<sp/>the<sp/>names<sp/>of<sp/>all<sp/>tests<sp/>instead<sp/>of<sp/>running<sp/>them.<sp/>The<sp/>name<sp/>of\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5166"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>TEST(Foo,<sp/>Bar)<sp/>is<sp/>\&quot;Foo.Bar\&quot;.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5167"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/></highlight><highlight class="stringliteral">&quot;filter=@YPOSTIVE_PATTERNS&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[@G-@YNEGATIVE_PATTERNS]@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5169"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Run<sp/>only<sp/>the<sp/>tests<sp/>whose<sp/>name<sp/>matches<sp/>one<sp/>of<sp/>the<sp/>positive<sp/>patterns<sp/>but\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5170"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>none<sp/>of<sp/>the<sp/>negative<sp/>patterns.<sp/>&apos;?&apos;<sp/>matches<sp/>any<sp/>single<sp/>character;<sp/>&apos;*&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5171"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>matches<sp/>any<sp/>substring;<sp/>&apos;:&apos;<sp/>separates<sp/>two<sp/>patterns.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5172"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/></highlight><highlight class="stringliteral">&quot;also_run_disabled_tests@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5173"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Run<sp/>all<sp/>disabled<sp/>tests<sp/>too.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5174"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5175"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;Test<sp/>Execution:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5176"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/></highlight><highlight class="stringliteral">&quot;repeat=@Y[COUNT]@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5177"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Run<sp/>the<sp/>tests<sp/>repeatedly;<sp/>use<sp/>a<sp/>negative<sp/>count<sp/>to<sp/>repeat<sp/>forever.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5178"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/></highlight><highlight class="stringliteral">&quot;shuffle@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5179"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Randomize<sp/>tests&apos;<sp/>orders<sp/>on<sp/>every<sp/>iteration.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5180"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/></highlight><highlight class="stringliteral">&quot;random_seed=@Y[NUMBER]@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5181"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Random<sp/>number<sp/>seed<sp/>to<sp/>use<sp/>for<sp/>shuffling<sp/>test<sp/>orders<sp/>(between<sp/>1<sp/>and\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5182"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>99999,<sp/>or<sp/>0<sp/>to<sp/>use<sp/>a<sp/>seed<sp/>based<sp/>on<sp/>the<sp/>current<sp/>time).\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5183"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5184"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;Test<sp/>Output:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5185"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/></highlight><highlight class="stringliteral">&quot;color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5186"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Enable/disable<sp/>colored<sp/>output.<sp/>The<sp/>default<sp/>is<sp/>@Gauto@D.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5187"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>-@G-&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/></highlight><highlight class="stringliteral">&quot;print_time=0@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5188"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Don&apos;t<sp/>print<sp/>the<sp/>elapsed<sp/>time<sp/>of<sp/>each<sp/>test.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5189"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/></highlight><highlight class="stringliteral">&quot;output=xml@Y[@G:@YDIRECTORY_PATH@G&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1afbb636e91bdd50267dbef11a50490b29" kindref="member">GTEST_PATH_SEP_</ref><sp/></highlight><highlight class="stringliteral">&quot;@Y|@G:@YFILE_PATH]@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5191"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Generate<sp/>an<sp/>XML<sp/>report<sp/>in<sp/>the<sp/>given<sp/>directory<sp/>or<sp/>with<sp/>the<sp/>given<sp/>file\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5192"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>name.<sp/>@YFILE_PATH@D<sp/>defaults<sp/>to<sp/>@Gtest_details.xml@D.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5193"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5194"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/></highlight><highlight class="stringliteral">&quot;stream_result_to=@YHOST@G:@YPORT@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5195"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Stream<sp/>test<sp/>results<sp/>to<sp/>the<sp/>given<sp/>server.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_CAN_STREAM_RESULTS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5197"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5198"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;Assertion<sp/>Behavior:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5199"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5200"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/></highlight><highlight class="stringliteral">&quot;death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5201"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Set<sp/>the<sp/>default<sp/>death<sp/>test<sp/>style.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5203"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/></highlight><highlight class="stringliteral">&quot;break_on_failure@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5204"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Turn<sp/>assertion<sp/>failures<sp/>into<sp/>debugger<sp/>break-points.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5205"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/></highlight><highlight class="stringliteral">&quot;throw_on_failure@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5206"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Turn<sp/>assertion<sp/>failures<sp/>into<sp/>C++<sp/>exceptions.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5207"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/>@G--&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/></highlight><highlight class="stringliteral">&quot;catch_exceptions=0@D\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5208"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Do<sp/>not<sp/>report<sp/>exceptions<sp/>as<sp/>test<sp/>failures.<sp/>Instead,<sp/>allow<sp/>them\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5209"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>crash<sp/>the<sp/>program<sp/>or<sp/>throw<sp/>a<sp/>pop-up<sp/>(on<sp/>Windows).\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5210"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5211"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;Except<sp/>for<sp/>@G--&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/></highlight><highlight class="stringliteral">&quot;list_tests@D,<sp/>you<sp/>can<sp/>alternatively<sp/>set<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>corresponding\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5213"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;environment<sp/>variable<sp/>of<sp/>a<sp/>flag<sp/>(all<sp/>letters<sp/>in<sp/>upper-case).<sp/>For<sp/>example,<sp/>to\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5214"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;disable<sp/>colored<sp/>text<sp/>output,<sp/>you<sp/>can<sp/>either<sp/>specify<sp/>@G--&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref></highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;color=no@D<sp/>or<sp/>set\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5216"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;the<sp/>@G&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a4018b7f288f974d022df397e2730633a" kindref="member">GTEST_FLAG_PREFIX_UPPER_</ref><sp/></highlight><highlight class="stringliteral">&quot;COLOR@D<sp/>environment<sp/>variable<sp/>to<sp/>@Gno@D.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5217"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5218"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;For<sp/>more<sp/>information,<sp/>please<sp/>read<sp/>the<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a13d98c217176bd8722c395b9225fc19d" kindref="member">GTEST_NAME_</ref><sp/></highlight><highlight class="stringliteral">&quot;<sp/>documentation<sp/>at\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5219"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;@G&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a5aa3c938fc1d049f1d9c5332f6a0b1d4" kindref="member">GTEST_PROJECT_URL_</ref><sp/></highlight><highlight class="stringliteral">&quot;@D.<sp/>If<sp/>you<sp/>find<sp/>a<sp/>bug<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a13d98c217176bd8722c395b9225fc19d" kindref="member">GTEST_NAME_</ref><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5220"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;(not<sp/>one<sp/>in<sp/>your<sp/>own<sp/>code<sp/>or<sp/>tests),<sp/>please<sp/>report<sp/>it<sp/>to\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5221"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;@G&lt;&quot;</highlight><highlight class="normal"><sp/><ref refid="d3/dc9/gtest-port_8h_1a21086d276b1a64d6763ee8a94b12c1b8" kindref="member">GTEST_DEV_EMAIL_</ref><sp/></highlight><highlight class="stringliteral">&quot;&gt;@D.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"></highlight></codeline>
<codeline lineno="5223" refid="d0/da7/namespacetesting_1_1internal_1afccff08aa2b1ede0dd32c1364a5dee42" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1afccff08aa2b1ede0dd32c1364a5dee42" kindref="member">ParseGoogleTestFlag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ada3b98e7cfe93f4ba2053c470d9e3e51" kindref="member">ParseBoolFlag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a40f1e51c777d9472a0fda6afdf18878b" kindref="member">kAlsoRunDisabledTestsFlag</ref>,</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(also_run_disabled_tests))<sp/>||</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ada3b98e7cfe93f4ba2053c470d9e3e51" kindref="member">ParseBoolFlag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aaf2d732a6c2ca2a3cb47b6e81998b043" kindref="member">kBreakOnFailureFlag</ref>,</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(break_on_failure))<sp/>||</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ada3b98e7cfe93f4ba2053c470d9e3e51" kindref="member">ParseBoolFlag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ada1f05af2a2d934b26f96866fa79f9f4" kindref="member">kCatchExceptionsFlag</ref>,</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(catch_exceptions))<sp/>||</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa4ce312efaaf7a97aac2303173afe021" kindref="member">ParseStringFlag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a839337d3f8323c348142c6d1224e7c1a" kindref="member">kColorFlag</ref>,<sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(color))<sp/>||</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa4ce312efaaf7a97aac2303173afe021" kindref="member">ParseStringFlag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac2118ecf66313a8f09dbb4a3f87f9d82" kindref="member">kDeathTestStyleFlag</ref>,</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(death_test_style))<sp/>||</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ada3b98e7cfe93f4ba2053c470d9e3e51" kindref="member">ParseBoolFlag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a31cad6bbb8ac973c61b58a0d53d5f9eb" kindref="member">kDeathTestUseFork</ref>,</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(death_test_use_fork))<sp/>||</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa4ce312efaaf7a97aac2303173afe021" kindref="member">ParseStringFlag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ab871c4f63c409bba1b284db0284375f4" kindref="member">kFilterFlag</ref>,<sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(filter))<sp/>||</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa4ce312efaaf7a97aac2303173afe021" kindref="member">ParseStringFlag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a88b858ed510625c9bb0aa41fbbf31308" kindref="member">kInternalRunDeathTestFlag</ref>,</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(internal_run_death_test))<sp/>||</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ada3b98e7cfe93f4ba2053c470d9e3e51" kindref="member">ParseBoolFlag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a484a75f903c2eb081e377d2eae1aabe0" kindref="member">kListTestsFlag</ref>,<sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(list_tests))<sp/>||</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa4ce312efaaf7a97aac2303173afe021" kindref="member">ParseStringFlag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3356de7ab27f52e081b5b2cd89915454" kindref="member">kOutputFlag</ref>,<sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(output))<sp/>||</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ada3b98e7cfe93f4ba2053c470d9e3e51" kindref="member">ParseBoolFlag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aac057c0b9e05e37742f23f063ebb8d79" kindref="member">kPrintTimeFlag</ref>,<sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(print_time))<sp/>||</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a082f2d6b59adc025b035b2c51b0fc47e" kindref="member">ParseInt32Flag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a9159056bc011a8e575c2324056941d13" kindref="member">kRandomSeedFlag</ref>,<sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(random_seed))<sp/>||</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a082f2d6b59adc025b035b2c51b0fc47e" kindref="member">ParseInt32Flag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac28af745e517b8e2ac57e9365f1697d4" kindref="member">kRepeatFlag</ref>,<sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(repeat))<sp/>||</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ada3b98e7cfe93f4ba2053c470d9e3e51" kindref="member">ParseBoolFlag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a7e3065f820ccc6fed72c3b8461c58b64" kindref="member">kShuffleFlag</ref>,<sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(shuffle))<sp/>||</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a082f2d6b59adc025b035b2c51b0fc47e" kindref="member">ParseInt32Flag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad7dc206d070dfc3d5e07954cd30e42de" kindref="member">kStackTraceDepthFlag</ref>,</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(stack_trace_depth))<sp/>||</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa4ce312efaaf7a97aac2303173afe021" kindref="member">ParseStringFlag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aea94ce12391e08c95c99f053f453af8c" kindref="member">kStreamResultToFlag</ref>,</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(stream_result_to))<sp/>||</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ada3b98e7cfe93f4ba2053c470d9e3e51" kindref="member">ParseBoolFlag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a71a67b159db4a554b87416e815ddbdf1" kindref="member">kThrowOnFailureFlag</ref>,</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(throw_on_failure));</highlight></codeline>
<codeline lineno="5250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"></highlight></codeline>
<codeline lineno="5252"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_USE_OWN_FLAGFILE_FLAG_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5253"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LoadFlagsFromFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>path)<sp/>{</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/>FILE*<sp/>flagfile<sp/>=<sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a4042201dcc4932641d484e7ddf94de7d" kindref="member">posix::FOpen</ref>(path.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!flagfile)<sp/>{</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>file<sp/>\&quot;%s\&quot;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(flagfile).c_str());</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>contents(<ref refid="d0/da7/namespacetesting_1_1internal_1a4a45cdd04726316e078e3cd8ab034f05" kindref="member">ReadEntireFile</ref>(flagfile));</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1af4beeaaa8d62916d5e3b644a1ddfbd6b" kindref="member">posix::FClose</ref>(flagfile);</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;std::string&gt;</ref><sp/>lines;</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8eb8eddf760375a490e007b20777ec56" kindref="member">SplitString</ref>(contents,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,<sp/>&amp;lines);</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lines.<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lines[i].empty())</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d0/da7/namespacetesting_1_1internal_1afccff08aa2b1ede0dd32c1364a5dee42" kindref="member">ParseGoogleTestFlag</ref>(lines[i].c_str()))</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a05b77c93e2ac596346466a00277288ca" kindref="member">g_help_flag</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_USE_OWN_FLAGFILE_FLAG_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5274"><highlight class="normal"></highlight></codeline>
<codeline lineno="5275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>command<sp/>line<sp/>for<sp/>Google<sp/>Test<sp/>flags,<sp/>without<sp/>initializing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>other<sp/>parts<sp/>of<sp/>Google<sp/>Test.<sp/><sp/>The<sp/>type<sp/>parameter<sp/>CharType<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiated<sp/>to<sp/>either<sp/>char<sp/>or<sp/>wchar_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5278"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType&gt;</highlight></codeline>
<codeline lineno="5279" refid="d0/da7/namespacetesting_1_1internal_1ae4c46ce8c3d016848fff52cc5133f2ac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae4c46ce8c3d016848fff52cc5133f2ac" kindref="member">ParseGoogleTestFlagsOnlyImpl</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/>CharType**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>*argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>arg_string<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(argv[i]);</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arg<sp/>=<sp/>arg_string.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>();</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"></highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ada3b98e7cfe93f4ba2053c470d9e3e51" kindref="member">internal::ParseBoolFlag</ref>;</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a082f2d6b59adc025b035b2c51b0fc47e" kindref="member">internal::ParseInt32Flag</ref>;</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa4ce312efaaf7a97aac2303173afe021" kindref="member">internal::ParseStringFlag</ref>;</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"></highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>remove_flag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/da7/namespacetesting_1_1internal_1afccff08aa2b1ede0dd32c1364a5dee42" kindref="member">ParseGoogleTestFlag</ref>(arg))<sp/>{</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remove_flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_USE_OWN_FLAGFILE_FLAG_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/da7/namespacetesting_1_1internal_1aa4ce312efaaf7a97aac2303173afe021" kindref="member">ParseStringFlag</ref>(arg,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae9b474f0121788ef889e9187455fcf78" kindref="member">kFlagfileFlag</ref>,<sp/>&amp;<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(flagfile)))<sp/>{</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LoadFlagsFromFile(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(flagfile));</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remove_flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_USE_OWN_FLAGFILE_FLAG_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg_string<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;--help&quot;</highlight><highlight class="normal"><sp/>||<sp/>arg_string<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-h&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_string<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-?&quot;</highlight><highlight class="normal"><sp/>||<sp/>arg_string<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;/?&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a6fff795269f50673e358438721710d6f" kindref="member">HasGoogleTestFlagPrefix</ref>(arg))<sp/>{</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Both<sp/>help<sp/>flag<sp/>and<sp/>unrecognized<sp/>Google<sp/>Test<sp/>flags<sp/>(excluding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>internal<sp/>ones)<sp/>trigger<sp/>help<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a05b77c93e2ac596346466a00277288ca" kindref="member">g_help_flag</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"></highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remove_flag)<sp/>{</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shift<sp/>the<sp/>remainder<sp/>of<sp/>the<sp/>argv<sp/>list<sp/>left<sp/>by<sp/>one.<sp/><sp/>Note</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>argv<sp/>has<sp/>(*argc<sp/>+<sp/>1)<sp/>elements,<sp/>the<sp/>last<sp/>one<sp/>always<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL.<sp/><sp/>The<sp/>following<sp/>loop<sp/>moves<sp/>the<sp/>trailing<sp/>NULL<sp/>element<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i;<sp/>j<sp/>!=<sp/>*argc;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argv[j]<sp/>=<sp/>argv[j<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"></highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrements<sp/>the<sp/>argument<sp/>count.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*argc)--;</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"></highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>also<sp/>need<sp/>to<sp/>decrement<sp/>the<sp/>iterator<sp/>as<sp/>we<sp/>just<sp/>removed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"></highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/da7/namespacetesting_1_1internal_1a05b77c93e2ac596346466a00277288ca" kindref="member">g_help_flag</ref>)<sp/>{</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>print<sp/>the<sp/>help<sp/>here<sp/>instead<sp/>of<sp/>in<sp/>RUN_ALL_TESTS(),<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>latter<sp/>may<sp/>not<sp/>be<sp/>called<sp/>at<sp/>all<sp/>if<sp/>the<sp/>user<sp/>is<sp/>using<sp/>Google</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>another<sp/>testing<sp/>framework.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a7d8c446a29c7e22d7d4dde8f530bb57e" kindref="member">PrintColorEncoded</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a454d13f6ba62cea7cfa4798257bf3910" kindref="member">kColorEncodedHelpMessage</ref>);</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"></highlight></codeline>
<codeline lineno="5330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>command<sp/>line<sp/>for<sp/>Google<sp/>Test<sp/>flags,<sp/>without<sp/>initializing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>other<sp/>parts<sp/>of<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5332" refid="d0/da7/namespacetesting_1_1internal_1a5655276556ac09c8d184920553da3e90" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a5655276556ac09c8d184920553da3e90" kindref="member">ParseGoogleTestFlagsOnly</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae4c46ce8c3d016848fff52cc5133f2ac" kindref="member">ParseGoogleTestFlagsOnlyImpl</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="5334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5335" refid="d0/da7/namespacetesting_1_1internal_1ae231639ccb18f92df31567b3eca47ac9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a5655276556ac09c8d184920553da3e90" kindref="member">ParseGoogleTestFlagsOnly</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae4c46ce8c3d016848fff52cc5133f2ac" kindref="member">ParseGoogleTestFlagsOnlyImpl</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="5337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"></highlight></codeline>
<codeline lineno="5339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>internal<sp/>implementation<sp/>of<sp/>InitGoogleTest().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5340"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>type<sp/>parameter<sp/>CharType<sp/>can<sp/>be<sp/>instantiated<sp/>to<sp/>either<sp/>char<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5343"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType&gt;</highlight></codeline>
<codeline lineno="5344" refid="d0/da7/namespacetesting_1_1internal_1ac3c6fa93391768aa91c6238b31aaeeb5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac3c6fa93391768aa91c6238b31aaeeb5" kindref="member">InitGoogleTestImpl</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/>CharType**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>want<sp/>to<sp/>run<sp/>the<sp/>initialization<sp/>code<sp/>twice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/da7/namespacetesting_1_1internal_1a91e707e0d371fae0224ffd37f0d042af" kindref="member">GTestIsInitialized</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"></highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*argc<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"></highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aaef5a3e9dd2e630d870d98a6d8145d09" kindref="member">g_argvs</ref>.clear();</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>*argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aaef5a3e9dd2e630d870d98a6d8145d09" kindref="member">g_argvs</ref>.push_back(<ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(argv[i]));</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"></highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a5655276556ac09c8d184920553da3e90" kindref="member">ParseGoogleTestFlagsOnly</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" kindref="member">GetUnitTestImpl</ref>()-&gt;<ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl_1a3d68c6d1fdec822210f96171a3b57b47" kindref="member">PostFlagParsingInit</ref>();</highlight></codeline>
<codeline lineno="5357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"></highlight></codeline>
<codeline lineno="5359"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5360"><highlight class="normal"></highlight></codeline>
<codeline lineno="5361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initializes<sp/>Google<sp/>Test.<sp/><sp/>This<sp/>must<sp/>be<sp/>called<sp/>before<sp/>calling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RUN_ALL_TESTS().<sp/><sp/>In<sp/>particular,<sp/>it<sp/>parses<sp/>a<sp/>command<sp/>line<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>flags<sp/>that<sp/>Google<sp/>Test<sp/>recognizes.<sp/><sp/>Whenever<sp/>a<sp/>Google<sp/>Test<sp/>flag<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>seen,<sp/>it<sp/>is<sp/>removed<sp/>from<sp/>argv,<sp/>and<sp/>*argc<sp/>is<sp/>decremented.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5365"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>No<sp/>value<sp/>is<sp/>returned.<sp/><sp/>Instead,<sp/>the<sp/>Google<sp/>Test<sp/>flag<sp/>variables<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>updated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5368"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calling<sp/>the<sp/>function<sp/>for<sp/>the<sp/>second<sp/>time<sp/>has<sp/>no<sp/>user-visible<sp/>effect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5370" refid="d0/d75/namespacetesting_1aefed8296a2dd394336ae59e0737ba4c1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1aefed8296a2dd394336ae59e0737ba4c1" kindref="member">InitGoogleTest</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/>GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac3c6fa93391768aa91c6238b31aaeeb5" kindref="member">internal::InitGoogleTestImpl</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"></highlight></codeline>
<codeline lineno="5378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>overloaded<sp/>version<sp/>can<sp/>be<sp/>used<sp/>in<sp/>Windows<sp/>programs<sp/>compiled<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UNICODE<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5380" refid="d0/d75/namespacetesting_1a1e9668bd7ea1c9158eca20c9864866f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1aefed8296a2dd394336ae59e0737ba4c1" kindref="member">InitGoogleTest</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/>GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac3c6fa93391768aa91c6238b31aaeeb5" kindref="member">internal::InitGoogleTestImpl</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"></highlight></codeline>
<codeline lineno="5388"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/googletest/src/gtest.cc"/>
  </compounddef>
</doxygen>
