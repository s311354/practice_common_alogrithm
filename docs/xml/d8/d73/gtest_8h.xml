<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d8/d73/gtest_8h" kind="file" language="C++">
    <compoundname>gtest.h</compoundname>
    <includes local="no">limits</includes>
    <includes local="no">ostream</includes>
    <includes local="no">vector</includes>
    <includes refid="d5/da1/gtest-internal_8h" local="yes">gtest/internal/gtest-internal.h</includes>
    <includes refid="d0/d45/gtest-string_8h" local="yes">gtest/internal/gtest-string.h</includes>
    <includes refid="d4/d59/gtest-death-test_8h" local="yes">gtest/gtest-death-test.h</includes>
    <includes refid="d6/da4/gtest-message_8h" local="yes">gtest/gtest-message.h</includes>
    <includes refid="d0/d31/gtest-param-test_8h" local="yes">gtest/gtest-param-test.h</includes>
    <includes refid="d0/d6d/gtest-printers_8h" local="yes">gtest/gtest-printers.h</includes>
    <includes refid="d4/db1/gtest__prod_8h" local="yes">gtest/gtest_prod.h</includes>
    <includes refid="d1/d01/gtest-test-part_8h" local="yes">gtest/gtest-test-part.h</includes>
    <includes refid="de/dce/gtest-typed-test_8h" local="yes">gtest/gtest-typed-test.h</includes>
    <includes refid="db/d6e/gtest__pred__impl_8h" local="yes">gtest/gtest_pred_impl.h</includes>
    <includedby refid="d1/d8c/gtest-all_8cc" local="yes">lib/googletest/src/gtest-all.cc</includedby>
    <includedby refid="d0/da1/gtest-internal-inl_8h" local="yes">lib/googletest/src/gtest-internal-inl.h</includedby>
    <includedby refid="d9/d5a/gtest-typed-test_8cc" local="yes">lib/googletest/src/gtest-typed-test.cc</includedby>
    <includedby refid="d3/d3a/gtest__main_8cc" local="yes">lib/googletest/src/gtest_main.cc</includedby>
    <includedby refid="dc/dbe/gtest-spi_8h" local="yes">lib/googletest/include/gtest/gtest-spi.h</includedby>
    <includedby refid="df/d5b/gtest_8cc" local="yes">lib/googletest/src/gtest.cc</includedby>
    <incdepgraph>
      <node id="13">
        <label>sys/stat.h</label>
      </node>
      <node id="37">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="dc/df2/gtest-param-util_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lib/googletest/include/gtest/gtest.h</label>
        <link refid="d8/d73/gtest_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>typeinfo</label>
        <link refid="cpp/header/typeinfo" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="40">
        <label>assert.h</label>
      </node>
      <node id="26">
        <label>float.h</label>
      </node>
      <node id="44">
        <label>gtest/gtest_prod.h</label>
        <link refid="d4/db1/gtest__prod_8h"/>
      </node>
      <node id="19">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="d6/d76/gtest-port-arch_8h"/>
      </node>
      <node id="3">
        <label>ostream</label>
        <link refid="cpp/header/ostream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="32">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="dc/d79/gtest-filepath_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stdlib.h</label>
      </node>
      <node id="43">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="dc/db7/gtest-param-util-generated_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>iomanip</label>
        <link refid="cpp/header/iomanip" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="29">
        <label>set</label>
        <link refid="cpp/header/set" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="31">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="d0/d45/gtest-string_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="d5/da1/gtest-internal_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>gtest/gtest-death-test.h</label>
        <link refid="d4/d59/gtest-death-test_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>algorithm</label>
        <link refid="cpp/header/algorithm" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="25">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="d1/d63/gtest-tuple_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stddef.h</label>
      </node>
      <node id="46">
        <label>iosfwd</label>
        <link refid="cpp/header/iosfwd" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="33">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="d9/d97/gtest-type-util_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>vector</label>
        <link refid="cpp/header/vector" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="12">
        <label>sys/types.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="6">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="d3/dc9/gtest-port_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="de/dce/gtest-typed-test_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="da/db0/internal_2custom_2gtest-printers_8h"/>
      </node>
      <node id="21">
        <label>unistd.h</label>
      </node>
      <node id="2">
        <label>limits</label>
        <link refid="cpp/header/limits" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="18">
        <label>utility</label>
        <link refid="cpp/header/utility" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="35">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="d0/d1a/gtest-death-test-internal_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>string</label>
        <link refid="cpp/header/string" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="30">
        <label>gtest/gtest-message.h</label>
        <link refid="d6/da4/gtest-message_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>strings.h</label>
      </node>
      <node id="38">
        <label>iterator</label>
        <link refid="cpp/header/iterator" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="7">
        <label>ctype.h</label>
      </node>
      <node id="15">
        <label>iostream</label>
        <link refid="cpp/header/iostream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="48">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="db/d6e/gtest__pred__impl_8h"/>
      </node>
      <node id="45">
        <label>gtest/gtest-test-part.h</label>
        <link refid="d1/d01/gtest-test-part_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>gtest/gtest-param-test.h</label>
        <link refid="d0/d31/gtest-param-test_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>sstream</label>
        <link refid="cpp/header/sstream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="39">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="d0/d03/gtest-linked__ptr_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>regex.h</label>
      </node>
      <node id="20">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="d5/d66/custom_2gtest-port_8h"/>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
      <node id="41">
        <label>gtest/gtest-printers.h</label>
        <link refid="d0/d6d/gtest-printers_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>map</label>
        <link refid="cpp/header/map" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>lib/googletest/include/gtest/gtest.h</label>
        <link refid="d8/d73/gtest_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>lib/googletest/src/gtest-internal-inl.h</label>
        <link refid="d0/da1/gtest-internal-inl_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>lib/googletest/src/gtest-all.cc</label>
        <link refid="d1/d8c/gtest-all_8cc"/>
      </node>
      <node id="4">
        <label>lib/googletest/src/gtest-death-test.cc</label>
        <link refid="de/d50/gtest-death-test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>lib/googletest/src/gtest_main.cc</label>
        <link refid="d3/d3a/gtest__main_8cc"/>
      </node>
      <node id="7">
        <label>lib/googletest/src/gtest.cc</label>
        <link refid="df/d5b/gtest_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>lib/googletest/src/gtest-typed-test.cc</label>
        <link refid="d9/d5a/gtest-typed-test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>lib/googletest/src/gtest-test-part.cc</label>
        <link refid="d3/dc2/gtest-test-part_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>lib/googletest/src/gtest-port.cc</label>
        <link refid="df/d09/gtest-port_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>lib/googletest/include/gtest/gtest-spi.h</label>
        <link refid="dc/dbe/gtest-spi_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data" prot="private">testing::internal::AssertHelper::AssertHelperData</innerclass>
    <innernamespace refid="d0/d75/namespacetesting">testing</innernamespace>
    <innernamespace refid="d0/da7/namespacetesting_1_1internal">testing::internal</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="d8/d73/gtest_8h_1adc16b5b0a740c39084ea5c9e960e3063" prot="public" static="no">
        <name>ADD_FAILURE</name>
        <param></param>
        <initializer><ref refid="d5/da1/gtest-internal_8h_1a6cb7482cfa03661a91c698eb5895f642" kindref="member">GTEST_NONFATAL_FAILURE_</ref>(&quot;Failed&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1808" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1808" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a448d7e5105b640e892fd8153fbee0b7f" prot="public" static="no">
        <name>ADD_FAILURE_AT</name>
        <param><defname>file</defname></param>
        <param><defname>line</defname></param>
        <initializer>  <ref refid="d5/da1/gtest-internal_8h_1a8d70025c45a47a493780746dfd66d565" kindref="member">GTEST_MESSAGE_AT_</ref>(file, line, &quot;Failed&quot;, \
                    ::testing::TestPartResult::kNonFatalFailure)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1812" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1812" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1affadeef9379fe5aabf6f28d9eab9d3c0" prot="public" static="no">
        <name>ASSERT_ANY_THROW</name>
        <param><defname>statement</defname></param>
        <initializer>  <ref refid="d5/da1/gtest-internal_8h_1af48bbd26d54d4afc5e4cef39b1c76ba3" kindref="member">GTEST_TEST_ANY_THROW_</ref>(statement, <ref refid="d5/da1/gtest-internal_8h_1a0f9a4c3ea82cc7bf4478eaffdc168358" kindref="member">GTEST_FATAL_FAILURE_</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1853" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1853" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a6617da62e5ae5490995a3bfca1f331a9" prot="public" static="no">
        <name>ASSERT_DOUBLE_EQ</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1ac452685a1a98ea3d96eb956a062ee210" kindref="member">ASSERT_PRED_FORMAT2</ref>(::<ref refid="d0/da7/namespacetesting_1_1internal_1a98ce463e5dbe0c6120fa817e1f8f2944" kindref="member">testing::internal::CmpHelperFloatingPointEQ</ref>&lt;double&gt;, \
                      val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2039" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2039" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a1a6db8b1338ee7040329322b77779086" prot="public" static="no">
        <name>ASSERT_EQ</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer><ref refid="d8/d73/gtest_8h_1a8a7a47387090810cdfe78933d348182d" kindref="member">GTEST_ASSERT_EQ</ref>(val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1956" column="10" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1956" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a8197fa52f3538588d20d8af4834c9003" prot="public" static="no">
        <name>ASSERT_FALSE</name>
        <param><defname>condition</defname></param>
        <initializer>  <ref refid="d5/da1/gtest-internal_8h_1ae8912365e1d00a7a2bd248268c64aa1a" kindref="member">GTEST_TEST_BOOLEAN_</ref>(!(condition), #condition, true, false, \
                      <ref refid="d5/da1/gtest-internal_8h_1a0f9a4c3ea82cc7bf4478eaffdc168358" kindref="member">GTEST_FATAL_FAILURE_</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1868" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a4663ffbf844baa54bdb29f9148fd0f96" prot="public" static="no">
        <name>ASSERT_FLOAT_EQ</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1ac452685a1a98ea3d96eb956a062ee210" kindref="member">ASSERT_PRED_FORMAT2</ref>(::<ref refid="d0/da7/namespacetesting_1_1internal_1a98ce463e5dbe0c6120fa817e1f8f2944" kindref="member">testing::internal::CmpHelperFloatingPointEQ</ref>&lt;float&gt;, \
                      val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2035" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2035" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1af4ff5dc71479fcb374b6bc2ed195bcc4" prot="public" static="no">
        <name>ASSERT_GE</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer><ref refid="d8/d73/gtest_8h_1a55373d99c079ff1b894e2eb5bcd15c5a" kindref="member">GTEST_ASSERT_GE</ref>(val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1972" column="10" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1972" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a16a882d4eafc9f8643867aea40879140" prot="public" static="no">
        <name>ASSERT_GT</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer><ref refid="d8/d73/gtest_8h_1a088b9056fd1c1f316b41c22f64deb33a" kindref="member">GTEST_ASSERT_GT</ref>(val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1976" column="10" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1976" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a775643748feff0b490aae651d041e971" prot="public" static="no">
        <name>ASSERT_LE</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer><ref refid="d8/d73/gtest_8h_1abef04dcd4a0259d378de7b3b3ffb6730" kindref="member">GTEST_ASSERT_LE</ref>(val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1964" column="10" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1964" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1affc4f9cae4c3aabfe60fced83737b42c" prot="public" static="no">
        <name>ASSERT_LT</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer><ref refid="d8/d73/gtest_8h_1a5a75667e637febd18e5f7d4f3abf55e8" kindref="member">GTEST_ASSERT_LT</ref>(val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1968" column="10" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1968" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1aa866c8dece57912e6f51495ed3e8d8d5" prot="public" static="no">
        <name>ASSERT_NE</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer><ref refid="d8/d73/gtest_8h_1a6fa9bb2b6731eba8f481e40e9e4931b3" kindref="member">GTEST_ASSERT_NE</ref>(val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1960" column="10" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1960" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a73cce6b752d204f91a36bef2f8e663b3" prot="public" static="no">
        <name>ASSERT_NEAR</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <param><defname>abs_error</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1a494e3b8dc22f4765f7e041f16c930e3d" kindref="member">ASSERT_PRED_FORMAT3</ref>(::<ref refid="d0/da7/namespacetesting_1_1internal_1a5059777ec92cd98da4c4159dee8201c2" kindref="member">testing::internal::DoubleNearPredFormat</ref>, \
                      val1, val2, abs_error)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2047" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2047" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a5034fda3490aad5a93942ac83f4cea49" prot="public" static="no">
        <name>ASSERT_NO_FATAL_FAILURE</name>
        <param><defname>statement</defname></param>
        <initializer>    <ref refid="d5/da1/gtest-internal_8h_1a1b37a3c446836d33040f3266a6236081" kindref="member">GTEST_TEST_NO_FATAL_FAILURE_</ref>(statement, <ref refid="d5/da1/gtest-internal_8h_1a0f9a4c3ea82cc7bf4478eaffdc168358" kindref="member">GTEST_FATAL_FAILURE_</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2099" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2099" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a895c34d9b192cdc2ba46d2680623485d" prot="public" static="no">
        <name>ASSERT_NO_THROW</name>
        <param><defname>statement</defname></param>
        <initializer>  <ref refid="d5/da1/gtest-internal_8h_1a9a109d026b5a904646437d7570e13581" kindref="member">GTEST_TEST_NO_THROW_</ref>(statement, <ref refid="d5/da1/gtest-internal_8h_1a0f9a4c3ea82cc7bf4478eaffdc168358" kindref="member">GTEST_FATAL_FAILURE_</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1851" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1851" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a58847dd696200a3268361401dfcd0fa0" prot="public" static="no">
        <name>ASSERT_STRCASEEQ</name>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1ac452685a1a98ea3d96eb956a062ee210" kindref="member">ASSERT_PRED_FORMAT2</ref>(::<ref refid="d0/da7/namespacetesting_1_1internal_1a00c3d012df6173622ef558a131bfb95d" kindref="member">testing::internal::CmpHelperSTRCASEEQ</ref>, s1, s2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2008" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2008" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1ac3d2c3836b103068a050f32585b2aaad" prot="public" static="no">
        <name>ASSERT_STRCASENE</name>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1ac452685a1a98ea3d96eb956a062ee210" kindref="member">ASSERT_PRED_FORMAT2</ref>(::<ref refid="d0/da7/namespacetesting_1_1internal_1a5f74b933606b0a742cd5a8ad2d7087e0" kindref="member">testing::internal::CmpHelperSTRCASENE</ref>, s1, s2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2010" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2010" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a74f4189ea570bab9a65d47104659ef9c" prot="public" static="no">
        <name>ASSERT_STREQ</name>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1ac452685a1a98ea3d96eb956a062ee210" kindref="member">ASSERT_PRED_FORMAT2</ref>(::<ref refid="d0/da7/namespacetesting_1_1internal_1a72d1706a1f8e03ef759f9c80712b0072" kindref="member">testing::internal::CmpHelperSTREQ</ref>, s1, s2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2004" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2004" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a3d679660ac1b2f9f6e6c7608452af923" prot="public" static="no">
        <name>ASSERT_STRNE</name>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1ac452685a1a98ea3d96eb956a062ee210" kindref="member">ASSERT_PRED_FORMAT2</ref>(::<ref refid="d0/da7/namespacetesting_1_1internal_1a675759a40d2867bc51981f7594f6beca" kindref="member">testing::internal::CmpHelperSTRNE</ref>, s1, s2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2006" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2006" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1aedb1eddae6c2a2430b0e7b7e03b4f052" prot="public" static="no">
        <name>ASSERT_THROW</name>
        <param><defname>statement</defname></param>
        <param><defname>expected_exception</defname></param>
        <initializer>  <ref refid="d5/da1/gtest-internal_8h_1a3f71db93eaf30b0cfca9612b9ac32106" kindref="member">GTEST_TEST_THROW_</ref>(statement, expected_exception, <ref refid="d5/da1/gtest-internal_8h_1a0f9a4c3ea82cc7bf4478eaffdc168358" kindref="member">GTEST_FATAL_FAILURE_</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1849" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1849" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1ae9244bfbda562e8b798789b001993fa5" prot="public" static="no">
        <name>ASSERT_TRUE</name>
        <param><defname>condition</defname></param>
        <initializer>  <ref refid="d5/da1/gtest-internal_8h_1ae8912365e1d00a7a2bd248268c64aa1a" kindref="member">GTEST_TEST_BOOLEAN_</ref>(condition, #condition, false, true, \
                      <ref refid="d5/da1/gtest-internal_8h_1a0f9a4c3ea82cc7bf4478eaffdc168358" kindref="member">GTEST_FATAL_FAILURE_</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1865" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a9be43f44d148e8a8d6a89c864bf4e461" prot="public" static="no">
        <name>EXPECT_ANY_THROW</name>
        <param><defname>statement</defname></param>
        <initializer>  <ref refid="d5/da1/gtest-internal_8h_1af48bbd26d54d4afc5e4cef39b1c76ba3" kindref="member">GTEST_TEST_ANY_THROW_</ref>(statement, <ref refid="d5/da1/gtest-internal_8h_1a6cb7482cfa03661a91c698eb5895f642" kindref="member">GTEST_NONFATAL_FAILURE_</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1847" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1ab4852f9430cf656690256ea7fe6323b8" prot="public" static="no">
        <name>EXPECT_DOUBLE_EQ</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1af0141918615a5e2d5247e9cda8324dae" kindref="member">EXPECT_PRED_FORMAT2</ref>(::<ref refid="d0/da7/namespacetesting_1_1internal_1a98ce463e5dbe0c6120fa817e1f8f2944" kindref="member">testing::internal::CmpHelperFloatingPointEQ</ref>&lt;double&gt;, \
                      val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2031" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2031" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a4159019abda84f5366acdb7604ff220a" prot="public" static="no">
        <name>EXPECT_EQ</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1af0141918615a5e2d5247e9cda8324dae" kindref="member">EXPECT_PRED_FORMAT2</ref>(::testing::internal:: \
                      EqHelper&lt;<ref refid="d5/da1/gtest-internal_8h_1ae5dd8e23090e08856613878fa1ff6fca" kindref="member">GTEST_IS_NULL_LITERAL_</ref>(val1)&gt;::Compare, \
                      val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1922" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1922" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1aeb6c7ae89f440c90c1a1815951c836da" prot="public" static="no">
        <name>EXPECT_FALSE</name>
        <param><defname>condition</defname></param>
        <initializer>  <ref refid="d5/da1/gtest-internal_8h_1ae8912365e1d00a7a2bd248268c64aa1a" kindref="member">GTEST_TEST_BOOLEAN_</ref>(!(condition), #condition, true, false, \
                      <ref refid="d5/da1/gtest-internal_8h_1a6cb7482cfa03661a91c698eb5895f642" kindref="member">GTEST_NONFATAL_FAILURE_</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1862" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1862" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a981e552322fb084042d02d6dfa9860ca" prot="public" static="no">
        <name>EXPECT_FLOAT_EQ</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1af0141918615a5e2d5247e9cda8324dae" kindref="member">EXPECT_PRED_FORMAT2</ref>(::<ref refid="d0/da7/namespacetesting_1_1internal_1a98ce463e5dbe0c6120fa817e1f8f2944" kindref="member">testing::internal::CmpHelperFloatingPointEQ</ref>&lt;float&gt;, \
                      val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2027" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2027" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1ab7a0ff4bfa4d9b27baa118d8b0756ca0" prot="public" static="no">
        <name>EXPECT_GE</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1af0141918615a5e2d5247e9cda8324dae" kindref="member">EXPECT_PRED_FORMAT2</ref>(::testing::internal::CmpHelperGE, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1932" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1932" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1aa8bc8320813e1abb0016129b636e3b27" prot="public" static="no">
        <name>EXPECT_GT</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1af0141918615a5e2d5247e9cda8324dae" kindref="member">EXPECT_PRED_FORMAT2</ref>(::testing::internal::CmpHelperGT, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1934" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1934" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1ae0f265632323b4a07b585dcfde10f60a" prot="public" static="no">
        <name>EXPECT_LE</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1af0141918615a5e2d5247e9cda8324dae" kindref="member">EXPECT_PRED_FORMAT2</ref>(::testing::internal::CmpHelperLE, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1928" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1928" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1af28c06b2b5e8dee151896f299f6610cf" prot="public" static="no">
        <name>EXPECT_LT</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1af0141918615a5e2d5247e9cda8324dae" kindref="member">EXPECT_PRED_FORMAT2</ref>(::testing::internal::CmpHelperLT, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1930" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1930" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a6ae7443947f25abc58bfcfcfc56b0d75" prot="public" static="no">
        <name>EXPECT_NE</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1af0141918615a5e2d5247e9cda8324dae" kindref="member">EXPECT_PRED_FORMAT2</ref>(::testing::internal::CmpHelperNE, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1926" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1926" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a88cd7978af0e7dbd42cd606dfabdcc6f" prot="public" static="no">
        <name>EXPECT_NEAR</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <param><defname>abs_error</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1a7285708fa5d37d6d8ed5b5e59da08bae" kindref="member">EXPECT_PRED_FORMAT3</ref>(::<ref refid="d0/da7/namespacetesting_1_1internal_1a5059777ec92cd98da4c4159dee8201c2" kindref="member">testing::internal::DoubleNearPredFormat</ref>, \
                      val1, val2, abs_error)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2043" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2043" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a067c02ccaf3171d6e1781cd0f8cdcf74" prot="public" static="no">
        <name>EXPECT_NO_FATAL_FAILURE</name>
        <param><defname>statement</defname></param>
        <initializer>    <ref refid="d5/da1/gtest-internal_8h_1a1b37a3c446836d33040f3266a6236081" kindref="member">GTEST_TEST_NO_FATAL_FAILURE_</ref>(statement, <ref refid="d5/da1/gtest-internal_8h_1a6cb7482cfa03661a91c698eb5895f642" kindref="member">GTEST_NONFATAL_FAILURE_</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2101" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a2743a1438137ad857aa3f9fec3ff67ec" prot="public" static="no">
        <name>EXPECT_NO_THROW</name>
        <param><defname>statement</defname></param>
        <initializer>  <ref refid="d5/da1/gtest-internal_8h_1a9a109d026b5a904646437d7570e13581" kindref="member">GTEST_TEST_NO_THROW_</ref>(statement, <ref refid="d5/da1/gtest-internal_8h_1a6cb7482cfa03661a91c698eb5895f642" kindref="member">GTEST_NONFATAL_FAILURE_</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1845" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1845" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a740cab7e3eec5c178a64b4f558bde66e" prot="public" static="no">
        <name>EXPECT_STRCASEEQ</name>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1af0141918615a5e2d5247e9cda8324dae" kindref="member">EXPECT_PRED_FORMAT2</ref>(::<ref refid="d0/da7/namespacetesting_1_1internal_1a00c3d012df6173622ef558a131bfb95d" kindref="member">testing::internal::CmpHelperSTRCASEEQ</ref>, s1, s2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1999" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a07d0b5cbd3b5f7c8b6f44c609046ff07" prot="public" static="no">
        <name>EXPECT_STRCASENE</name>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1af0141918615a5e2d5247e9cda8324dae" kindref="member">EXPECT_PRED_FORMAT2</ref>(::<ref refid="d0/da7/namespacetesting_1_1internal_1a5f74b933606b0a742cd5a8ad2d7087e0" kindref="member">testing::internal::CmpHelperSTRCASENE</ref>, s1, s2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2001" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2001" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1ad20f7b94ac5081e16f0005b94e95f0c6" prot="public" static="no">
        <name>EXPECT_STREQ</name>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1af0141918615a5e2d5247e9cda8324dae" kindref="member">EXPECT_PRED_FORMAT2</ref>(::<ref refid="d0/da7/namespacetesting_1_1internal_1a72d1706a1f8e03ef759f9c80712b0072" kindref="member">testing::internal::CmpHelperSTREQ</ref>, s1, s2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1995" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1995" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1aee7e9c42f55549dbc0dfc42391eb9775" prot="public" static="no">
        <name>EXPECT_STRNE</name>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1af0141918615a5e2d5247e9cda8324dae" kindref="member">EXPECT_PRED_FORMAT2</ref>(::<ref refid="d0/da7/namespacetesting_1_1internal_1a675759a40d2867bc51981f7594f6beca" kindref="member">testing::internal::CmpHelperSTRNE</ref>, s1, s2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1997" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1997" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a789842b4475eed948e6fd18390d5a859" prot="public" static="no">
        <name>EXPECT_THROW</name>
        <param><defname>statement</defname></param>
        <param><defname>expected_exception</defname></param>
        <initializer>  <ref refid="d5/da1/gtest-internal_8h_1a3f71db93eaf30b0cfca9612b9ac32106" kindref="member">GTEST_TEST_THROW_</ref>(statement, expected_exception, <ref refid="d5/da1/gtest-internal_8h_1a6cb7482cfa03661a91c698eb5895f642" kindref="member">GTEST_NONFATAL_FAILURE_</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1843" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1843" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1ac33e7cdfb5d44a7a0f0ab552eb5c3c6a" prot="public" static="no">
        <name>EXPECT_TRUE</name>
        <param><defname>condition</defname></param>
        <initializer>  <ref refid="d5/da1/gtest-internal_8h_1ae8912365e1d00a7a2bd248268c64aa1a" kindref="member">GTEST_TEST_BOOLEAN_</ref>(condition, #condition, false, true, \
                      <ref refid="d5/da1/gtest-internal_8h_1a6cb7482cfa03661a91c698eb5895f642" kindref="member">GTEST_NONFATAL_FAILURE_</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1859" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1859" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a3e26a8d27caa386ed0ea7ce9d5b7c4ed" prot="public" static="no">
        <name>FAIL</name>
        <param></param>
        <initializer><ref refid="d8/d73/gtest_8h_1a636231436707c30d6778f79ae96f5dc6" kindref="member">GTEST_FAIL</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1822" column="10" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1822" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a8a7a47387090810cdfe78933d348182d" prot="public" static="no">
        <name>GTEST_ASSERT_EQ</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1ac452685a1a98ea3d96eb956a062ee210" kindref="member">ASSERT_PRED_FORMAT2</ref>(::testing::internal:: \
                      EqHelper&lt;<ref refid="d5/da1/gtest-internal_8h_1ae5dd8e23090e08856613878fa1ff6fca" kindref="member">GTEST_IS_NULL_LITERAL_</ref>(val1)&gt;::Compare, \
                      val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1937" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1937" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a55373d99c079ff1b894e2eb5bcd15c5a" prot="public" static="no">
        <name>GTEST_ASSERT_GE</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1ac452685a1a98ea3d96eb956a062ee210" kindref="member">ASSERT_PRED_FORMAT2</ref>(::testing::internal::CmpHelperGE, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1947" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1947" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a088b9056fd1c1f316b41c22f64deb33a" prot="public" static="no">
        <name>GTEST_ASSERT_GT</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1ac452685a1a98ea3d96eb956a062ee210" kindref="member">ASSERT_PRED_FORMAT2</ref>(::testing::internal::CmpHelperGT, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1949" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1949" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1abef04dcd4a0259d378de7b3b3ffb6730" prot="public" static="no">
        <name>GTEST_ASSERT_LE</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1ac452685a1a98ea3d96eb956a062ee210" kindref="member">ASSERT_PRED_FORMAT2</ref>(::testing::internal::CmpHelperLE, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1943" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1943" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a5a75667e637febd18e5f7d4f3abf55e8" prot="public" static="no">
        <name>GTEST_ASSERT_LT</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1ac452685a1a98ea3d96eb956a062ee210" kindref="member">ASSERT_PRED_FORMAT2</ref>(::testing::internal::CmpHelperLT, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1945" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1945" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a6fa9bb2b6731eba8f481e40e9e4931b3" prot="public" static="no">
        <name>GTEST_ASSERT_NE</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>  <ref refid="db/d6e/gtest__pred__impl_8h_1ac452685a1a98ea3d96eb956a062ee210" kindref="member">ASSERT_PRED_FORMAT2</ref>(::testing::internal::CmpHelperNE, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1941" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1941" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a636231436707c30d6778f79ae96f5dc6" prot="public" static="no">
        <name>GTEST_FAIL</name>
        <param></param>
        <initializer><ref refid="d5/da1/gtest-internal_8h_1a0f9a4c3ea82cc7bf4478eaffdc168358" kindref="member">GTEST_FATAL_FAILURE_</ref>(&quot;Failed&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1817" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1817" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a4a5b6fbde5dd05e05dd6846ac5e5c18e" prot="public" static="no">
        <name>GTEST_IMPL_CMP_HELPER_</name>
        <param><defname>op_name</defname></param>
        <param><defname>op</defname></param>
        <initializer>template &lt;typename T1, typename T2&gt;\
AssertionResult CmpHelper##op_name(const char* expr1, const char* expr2, \
                                   const T1&amp; val1, const T2&amp; val2) {\
  if (val1 op val2) {\
    return AssertionSuccess();\
  } else {\
    return CmpHelperOpFailure(expr1, expr2, val1, val2, #op);\
  }\
}\
<ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> AssertionResult CmpHelper##op_name(\
    const char* expr1, const char* expr2, BiggestInt val1, BiggestInt val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1506" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1506" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a2690441c38202728f4159ac2462d9720" prot="public" static="no">
        <name>GTEST_SUCCEED</name>
        <param></param>
        <initializer><ref refid="d5/da1/gtest-internal_8h_1abe012b550eb3807e8c49f7e161bd1567" kindref="member">GTEST_SUCCESS_</ref>(&quot;Succeeded&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1826" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1826" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a725b565bedc3a34dc109901854214cc4" prot="public" static="no">
        <name>GTEST_TEST</name>
        <param><defname>test_case_name</defname></param>
        <param><defname>test_name</defname></param>
        <initializer>  <ref refid="d5/da1/gtest-internal_8h_1ae2d26f0f92fbaf62bf4c1eca45bb2f1f" kindref="member">GTEST_TEST_</ref>(test_case_name, test_name, \
              ::<ref refid="df/d69/classtesting_1_1_test" kindref="compound">testing::Test</ref>, ::<ref refid="d0/da7/namespacetesting_1_1internal_1af4406515630591b54fcdf093991b14e3" kindref="member">testing::internal::GetTestTypeId</ref>())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2180" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a4dac08f15adc8cb1ee0e5c1bfb0f440d" prot="public" static="no">
        <name>SCOPED_TRACE</name>
        <param><defname>message</defname></param>
        <initializer>  ::<ref refid="d9/d53/classtesting_1_1internal_1_1_scoped_trace" kindref="compound">testing::internal::ScopedTrace</ref> <ref refid="d5/da1/gtest-internal_8h_1ae3c336cbe1ae2bd1b1d019333e4428a0" kindref="member">GTEST_CONCAT_TOKEN_</ref>(gtest_trace_, __LINE__)(\
    __FILE__, __LINE__, ::<ref refid="d2/da9/classtesting_1_1_message" kindref="compound">testing::Message</ref>() &lt;&lt; (message))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2115" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a75adcdf89f69b0b615e395daafc315af" prot="public" static="no">
        <name>SUCCEED</name>
        <param></param>
        <initializer><ref refid="d8/d73/gtest_8h_1a2690441c38202728f4159ac2462d9720" kindref="member">GTEST_SUCCEED</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1831" column="10" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1831" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1ad8b332753515c0ab8baada563c2547eb" prot="public" static="no">
        <name>TEST</name>
        <param><defname>test_case_name</defname></param>
        <param><defname>test_name</defname></param>
        <initializer><ref refid="d8/d73/gtest_8h_1a725b565bedc3a34dc109901854214cc4" kindref="member">GTEST_TEST</ref>(test_case_name, test_name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2187" column="10" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d8/d73/gtest_8h_1a0ee66d464d1a06c20c1929cae09d8758" prot="public" static="no">
        <name>TEST_F</name>
        <param><defname>test_fixture</defname></param>
        <param><defname>test_name</defname></param>
        <initializer>  <ref refid="d5/da1/gtest-internal_8h_1ae2d26f0f92fbaf62bf4c1eca45bb2f1f" kindref="member">GTEST_TEST_</ref>(test_fixture, test_name, test_fixture, \
              ::<ref refid="d0/da7/namespacetesting_1_1internal_1a6b108e56fdc68ea937ffb3759fb55ab0" kindref="member">testing::internal::GetTypeId</ref>&lt;test_fixture&gt;())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2216" column="9" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2216" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d0/d75/namespacetesting_1ab6f3c269fc46c9c1c0f81b3431240138" prot="package" static="no" mutable="no">
        <type></type>
        <definition>__pad0__</definition>
        <argsstring></argsstring>
        <name>__pad0__</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="480" column="1" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1af923b7f5ce597d321ccd3f7e62afb270" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int kMaxStackTraceDepth</definition>
        <argsstring></argsstring>
        <name>kMaxStackTraceDepth</name>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="147" column="11" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/d75/namespacetesting_1a460d7b998622e332392c1e00be3a60d5" prot="package" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Environment *</type>
        <definition>Environment* testing::AddGlobalTestEnvironment</definition>
        <argsstring>(Environment *env)</argsstring>
        <name>AddGlobalTestEnvironment</name>
        <param>
          <type>Environment *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1350" column="20" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1350" bodyend="1352"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult AssertionFailure</definition>
        <argsstring>()</argsstring>
        <name>AssertionFailure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1015" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1015" bodyend="1017" declfile="lib/googletest/include/gtest/gtest.h" declline="342" declcolumn="28"/>
        <referencedby refid="d0/d75/namespacetesting_1a72c97910499dac9ec752ad77dccdda3c" compoundref="df/d5b/gtest_8cc" startline="1021" endline="1023">testing::AssertionFailure</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a41d32b74fac585ac04cc9ba037c9fed4" compoundref="db/d6e/gtest__pred__impl_8h" startline="87" endline="96">AssertPred1Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1aa21b5175030ef2d76837bde68459effe" compoundref="db/d6e/gtest__pred__impl_8h" startline="129" endline="142">AssertPred2Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1ae48a4ec033f85849b47bcbd2aa94baab" compoundref="db/d6e/gtest__pred__impl_8h" startline="178" endline="195">AssertPred3Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a22f4e27e6b18091281c45d4395c98517" compoundref="db/d6e/gtest__pred__impl_8h" startline="234" endline="255">AssertPred4Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a1012d0b317e600d13b1a74712f0d8a48" compoundref="db/d6e/gtest__pred__impl_8h" startline="297" endline="322">AssertPred5Helper</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a894ffccd936d78fd555f490020c27f0a" compoundref="d8/d73/gtest_8h" startline="1486" endline="1493">testing::internal::CmpHelperOpFailure</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a675759a40d2867bc51981f7594f6beca" compoundref="df/d5b/gtest_8cc" startline="1885" endline="1897">testing::internal::CmpHelperSTRNE</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a5059777ec92cd98da4c4159dee8201c2" compoundref="df/d5b/gtest_8cc" startline="1362" endline="1379">testing::internal::DoubleNearPredFormat</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" compoundref="df/d5b/gtest_8cc" startline="1312" endline="1343">testing::internal::EqFailure</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a17b52b6b1f81f6dcad5cc4d12e5173a6" compoundref="df/d5b/gtest_8cc" startline="1384" endline="1415">testing::internal::FloatingPointLE</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a14ff02e6d151f45e998657674e9af88a" compoundref="df/d5b/gtest_8cc" startline="631" endline="665">testing::internal::HasOneFailure</referencedby>
        <referencedby refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a72c97910499dac9ec752ad77dccdda3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult AssertionFailure</definition>
        <argsstring>(const Message &amp;message)</argsstring>
        <name>AssertionFailure</name>
        <param>
          <type>const Message &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1021" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1021" bodyend="1023" declfile="lib/googletest/include/gtest/gtest.h" declline="346" declcolumn="28"/>
        <references refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" compoundref="df/d5b/gtest_8cc" startline="1015" endline="1017">testing::AssertionFailure</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult AssertionSuccess</definition>
        <argsstring>()</argsstring>
        <name>AssertionSuccess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1010" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1010" bodyend="1012" declfile="lib/googletest/include/gtest/gtest.h" declline="339" declcolumn="28"/>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a41d32b74fac585ac04cc9ba037c9fed4" compoundref="db/d6e/gtest__pred__impl_8h" startline="87" endline="96">AssertPred1Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1aa21b5175030ef2d76837bde68459effe" compoundref="db/d6e/gtest__pred__impl_8h" startline="129" endline="142">AssertPred2Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1ae48a4ec033f85849b47bcbd2aa94baab" compoundref="db/d6e/gtest__pred__impl_8h" startline="178" endline="195">AssertPred3Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a22f4e27e6b18091281c45d4395c98517" compoundref="db/d6e/gtest__pred__impl_8h" startline="234" endline="255">AssertPred4Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a1012d0b317e600d13b1a74712f0d8a48" compoundref="db/d6e/gtest__pred__impl_8h" startline="297" endline="322">AssertPred5Helper</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a4638c74d9b32e971f9b321af6fafc2f1" compoundref="d8/d73/gtest_8h" startline="1387" endline="1398">testing::internal::CmpHelperEQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a98ce463e5dbe0c6120fa817e1f8f2944" compoundref="d8/d73/gtest_8h" startline="1631" endline="1654">testing::internal::CmpHelperFloatingPointEQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a72d1706a1f8e03ef759f9c80712b0072" compoundref="df/d5b/gtest_8cc" startline="1869" endline="1882">testing::internal::CmpHelperSTREQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a675759a40d2867bc51981f7594f6beca" compoundref="df/d5b/gtest_8cc" startline="1885" endline="1897">testing::internal::CmpHelperSTRNE</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a5059777ec92cd98da4c4159dee8201c2" compoundref="df/d5b/gtest_8cc" startline="1362" endline="1379">testing::internal::DoubleNearPredFormat</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a17b52b6b1f81f6dcad5cc4d12e5173a6" compoundref="df/d5b/gtest_8cc" startline="1384" endline="1415">testing::internal::FloatingPointLE</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1aace9bb29e075d3cc3c4e689de03f0e71">testing::internal::GTEST_IMPL_CMP_HELPER_</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a14ff02e6d151f45e998657674e9af88a" compoundref="df/d5b/gtest_8cc" startline="631" endline="665">testing::internal::HasOneFailure</referencedby>
        <referencedby refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a3c265df9280510bd1d78bfd155113393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult CmpHelperEQ</definition>
        <argsstring>(const char *lhs_expression, const char *rhs_expression, BiggestInt lhs, BiggestInt rhs)</argsstring>
        <name>CmpHelperEQ</name>
        <param>
          <type>const char *</type>
          <declname>lhs_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs_expression</declname>
        </param>
        <param>
          <type>BiggestInt</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>BiggestInt</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1437" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1437" bodyend="1450" declfile="lib/googletest/include/gtest/gtest.h" declline="1403" declcolumn="28"/>
        <references refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" compoundref="df/d5b/gtest_8cc" startline="1010" endline="1012">testing::AssertionSuccess</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" compoundref="df/d5b/gtest_8cc" startline="1312" endline="1343">testing::internal::EqFailure</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a91ab078f10adc669f09b7f604975c518" compoundref="d0/d6d/gtest-printers_8h" startline="349" endline="352">testing::internal::FormatForComparisonFailureMessage</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a4638c74d9b32e971f9b321af6fafc2f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>AssertionResult</type>
        <definition>AssertionResult testing::internal::CmpHelperEQ</definition>
        <argsstring>(const char *lhs_expression, const char *rhs_expression, const T1 &amp;lhs, const T2 &amp;rhs)</argsstring>
        <name>CmpHelperEQ</name>
        <param>
          <type>const char *</type>
          <declname>lhs_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs_expression</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1387" column="17" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1387" bodyend="1398"/>
        <references refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" compoundref="df/d5b/gtest_8cc" startline="1010" endline="1012">testing::AssertionSuccess</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a1def8ec9393360a1b34a20528703e7f7" compoundref="d8/d73/gtest_8h" startline="1375" endline="1383">testing::internal::CmpHelperEQFailure</references>
        <references refid="d3/dc9/gtest-port_8h_1ab4c44546d6d9aced68993b87b608fc06" compoundref="d3/dc9/gtest-port_8h" startline="318">GTEST_DISABLE_MSC_WARNINGS_POP_</references>
        <references refid="d3/dc9/gtest-port_8h_1a86994cc68e844d8b82089c70408dfc61" compoundref="d3/dc9/gtest-port_8h" startline="317">GTEST_DISABLE_MSC_WARNINGS_PUSH_</references>
        <referencedby refid="d2/d1a/classtesting_1_1internal_1_1_eq_helper_1aadb9e81165711a2583f885a937d8bdf1" compoundref="d8/d73/gtest_8h" startline="1417" endline="1422">EqHelper&lt; lhs_is_null_literal &gt;::Compare</referencedby>
        <referencedby refid="d1/db2/classtesting_1_1internal_1_1_eq_helper_3_01true_01_4_1afba0180482bf5eea37970e15625a9888" compoundref="d8/d73/gtest_8h" startline="1448" endline="1460">EqHelper&lt; true &gt;::Compare</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a1def8ec9393360a1b34a20528703e7f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>AssertionResult</type>
        <definition>AssertionResult testing::internal::CmpHelperEQFailure</definition>
        <argsstring>(const char *lhs_expression, const char *rhs_expression, const T1 &amp;lhs, const T2 &amp;rhs)</argsstring>
        <name>CmpHelperEQFailure</name>
        <param>
          <type>const char *</type>
          <declname>lhs_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs_expression</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1375" column="17" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1375" bodyend="1383"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" compoundref="df/d5b/gtest_8cc" startline="1312" endline="1343">testing::internal::EqFailure</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a91ab078f10adc669f09b7f604975c518" compoundref="d0/d6d/gtest-printers_8h" startline="349" endline="352">testing::internal::FormatForComparisonFailureMessage</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a4638c74d9b32e971f9b321af6fafc2f1" compoundref="d8/d73/gtest_8h" startline="1387" endline="1398">testing::internal::CmpHelperEQ</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a98ce463e5dbe0c6120fa817e1f8f2944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RawType</type>
          </param>
        </templateparamlist>
        <type>AssertionResult</type>
        <definition>AssertionResult testing::internal::CmpHelperFloatingPointEQ</definition>
        <argsstring>(const char *lhs_expression, const char *rhs_expression, RawType lhs_value, RawType rhs_value)</argsstring>
        <name>CmpHelperFloatingPointEQ</name>
        <param>
          <type>const char *</type>
          <declname>lhs_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs_expression</declname>
        </param>
        <param>
          <type>RawType</type>
          <declname>lhs_value</declname>
        </param>
        <param>
          <type>RawType</type>
          <declname>rhs_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1631" column="17" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1631" bodyend="1654"/>
        <references refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" compoundref="df/d5b/gtest_8cc" startline="1010" endline="1012">testing::AssertionSuccess</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" compoundref="df/d5b/gtest_8cc" startline="1312" endline="1343">testing::internal::EqFailure</references>
        <references refid="cpp/io/manip/setprecision_1">std::setprecision</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a9743f1da2e8f7a4a8178ec9595a56112" compoundref="df/d5b/gtest_8cc" startline="1982" endline="1998">testing::internal::StringStreamToString</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a894ffccd936d78fd555f490020c27f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>AssertionResult</type>
        <definition>AssertionResult testing::internal::CmpHelperOpFailure</definition>
        <argsstring>(const char *expr1, const char *expr2, const T1 &amp;val1, const T2 &amp;val2, const char *op)</argsstring>
        <name>CmpHelperOpFailure</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>val2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1486" column="17" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1486" bodyend="1493"/>
        <references refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" compoundref="df/d5b/gtest_8cc" startline="1015" endline="1017">testing::AssertionFailure</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a91ab078f10adc669f09b7f604975c518" compoundref="d0/d6d/gtest-printers_8h" startline="349" endline="352">testing::internal::FormatForComparisonFailureMessage</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a00c3d012df6173622ef558a131bfb95d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> AssertionResult</type>
        <definition>GTEST_API_ AssertionResult testing::internal::CmpHelperSTRCASEEQ</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const char *s1, const char *s2)</argsstring>
        <name>CmpHelperSTRCASEEQ</name>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1545" column="28" declfile="lib/googletest/include/gtest/gtest.h" declline="1545" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a5f74b933606b0a742cd5a8ad2d7087e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> AssertionResult</type>
        <definition>GTEST_API_ AssertionResult testing::internal::CmpHelperSTRCASENE</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const char *s1, const char *s2)</argsstring>
        <name>CmpHelperSTRCASENE</name>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1561" column="28" declfile="lib/googletest/include/gtest/gtest.h" declline="1561" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a72d1706a1f8e03ef759f9c80712b0072" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult CmpHelperSTREQ</definition>
        <argsstring>(const char *lhs_expression, const char *rhs_expression, const wchar_t *lhs, const wchar_t *rhs)</argsstring>
        <name>CmpHelperSTREQ</name>
        <param>
          <type>const char *</type>
          <declname>lhs_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs_expression</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1869" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1869" bodyend="1882" declfile="lib/googletest/include/gtest/gtest.h" declline="1570" declcolumn="28"/>
        <references refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" compoundref="df/d5b/gtest_8cc" startline="1010" endline="1012">testing::AssertionSuccess</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" compoundref="df/d5b/gtest_8cc" startline="1312" endline="1343">testing::internal::EqFailure</references>
        <references refid="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" compoundref="d0/d6d/gtest-printers_8h" startline="980" endline="984">testing::PrintToString</references>
        <references refid="d0/dde/classtesting_1_1internal_1_1_string_1a911db0cff27e6663b2ff74014c05de35" compoundref="df/d5b/gtest_8cc" startline="1860" endline="1866">String::WideCStringEquals</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a93eb9d61cac7faf1faff6301ae5f4a46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> AssertionResult</type>
        <definition>GTEST_API_ AssertionResult testing::internal::CmpHelperSTREQ</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const char *s1, const char *s2)</argsstring>
        <name>CmpHelperSTREQ</name>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1537" column="28" declfile="lib/googletest/include/gtest/gtest.h" declline="1537" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a6b485231a046ff760844a0321c04870b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref> AssertionResult</type>
        <definition>GTEST_API_ AssertionResult testing::internal::CmpHelperSTRNE</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const char *s1, const char *s2)</argsstring>
        <name>CmpHelperSTRNE</name>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1553" column="28" declfile="lib/googletest/include/gtest/gtest.h" declline="1553" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a675759a40d2867bc51981f7594f6beca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult CmpHelperSTRNE</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const wchar_t *s1, const wchar_t *s2)</argsstring>
        <name>CmpHelperSTRNE</name>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1885" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1885" bodyend="1897" declfile="lib/googletest/include/gtest/gtest.h" declline="1578" declcolumn="28"/>
        <references refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" compoundref="df/d5b/gtest_8cc" startline="1015" endline="1017">testing::AssertionFailure</references>
        <references refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" compoundref="df/d5b/gtest_8cc" startline="1010" endline="1012">testing::AssertionSuccess</references>
        <references refid="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" compoundref="d0/d6d/gtest-printers_8h" startline="980" endline="984">testing::PrintToString</references>
        <references refid="d0/dde/classtesting_1_1internal_1_1_string_1a911db0cff27e6663b2ff74014c05de35" compoundref="df/d5b/gtest_8cc" startline="1860" endline="1866">String::WideCStringEquals</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1afc633c2faafd31f51fe686389a5a2de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult DoubleLE</definition>
        <argsstring>(const char *expr1, const char *expr2, double val1, double val2)</argsstring>
        <name>DoubleLE</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1428" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1428" bodyend="1431" declfile="lib/googletest/include/gtest/gtest.h" declline="2060" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a5059777ec92cd98da4c4159dee8201c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult DoubleNearPredFormat</definition>
        <argsstring>(const char *expr1, const char *expr2, const char *abs_error_expr, double val1, double val2, double abs_error)</argsstring>
        <name>DoubleNearPredFormat</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>abs_error_expr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>abs_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1362" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1362" bodyend="1379" declfile="lib/googletest/include/gtest/gtest.h" declline="1659" declcolumn="28"/>
        <references refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" compoundref="df/d5b/gtest_8cc" startline="1015" endline="1017">testing::AssertionFailure</references>
        <references refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" compoundref="df/d5b/gtest_8cc" startline="1010" endline="1012">testing::AssertionSuccess</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aef005b3a2875c4878ba5891db34f7734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult FloatLE</definition>
        <argsstring>(const char *expr1, const char *expr2, float val1, float val2)</argsstring>
        <name>FloatLE</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1421" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1421" bodyend="1424" declfile="lib/googletest/include/gtest/gtest.h" declline="2058" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>UnitTestImpl *</type>
        <definition>class UnitTestImpl * GetUnitTestImpl</definition>
        <argsstring>()</argsstring>
        <name>GetUnitTestImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-internal-inl.h" line="927" column="21" bodyfile="lib/googletest/src/gtest-internal-inl.h" bodystart="927" bodyend="929" declfile="lib/googletest/include/gtest/gtest.h" declline="163" declcolumn="20"/>
        <references refid="d7/d47/classtesting_1_1_unit_test_1ad200090b11104aca39f25043701886cf" compoundref="df/d5b/gtest_8cc" startline="3972" endline="3991">UnitTest::GetInstance</references>
        <references refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" compoundref="d8/d73/gtest_8h" startline="1287" endline="1287">UnitTest::impl</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a1ffce3a1491bc0de802157425b30f3a1" compoundref="df/d5b/gtest_8cc" startline="4973" endline="4978">testing::internal::GetCurrentOsStackTraceExceptTop</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1addb2ed165b92b74e25fe9ebe9e46b9f9" compoundref="df/d5b/gtest_8cc" startline="2410" endline="2460">testing::internal::HandleExceptionsInMethodIfSupported</referencedby>
        <referencedby refid="df/d69/classtesting_1_1_test_1a4f237fa994f623a704494cd821fb761f" compoundref="df/d5b/gtest_8cc" startline="2487" endline="2489">Test::HasFatalFailure</referencedby>
        <referencedby refid="d7/d43/classtesting_1_1internal_1_1_has_new_fatal_failure_helper_1a261bc4cd55c6bd4e33a90effb7c3b56c" compoundref="d3/dc2/gtest-test-part_8cc" startline="89" endline="94">HasNewFatalFailureHelper::HasNewFatalFailureHelper</referencedby>
        <referencedby refid="df/d69/classtesting_1_1_test_1a015d02d8208675a344c7fc42c14838b7" compoundref="df/d5b/gtest_8cc" startline="2492" endline="2495">Test::HasNonfatalFailure</referencedby>
        <referencedby refid="df/d69/classtesting_1_1_test_1a33853de09fa3a19530ef4db93e81d4a9" compoundref="df/d5b/gtest_8cc" startline="2269" endline="2328">Test::HasSameFixtureClass</referencedby>
        <referencedby refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1a1e3b6d38df0786ccf7f938d60e386aae" compoundref="df/d5b/gtest_8cc" startline="580" endline="589">ScopedFakeTestPartResultReporter::Init</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ac3c6fa93391768aa91c6238b31aaeeb5" compoundref="df/d5b/gtest_8cc" startline="5344" endline="5357">testing::internal::InitGoogleTestImpl</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a616199437436015fde76f09d80c6d5e7" compoundref="df/d5b/gtest_8cc" startline="2543" endline="2558">testing::internal::MakeAndRegisterTestInfo</referencedby>
        <referencedby refid="df/d69/classtesting_1_1_test_1aa3eca255b6be227d7d901cc2a72017a5" compoundref="df/d5b/gtest_8cc" startline="2465" endline="2484">Test::Run</referencedby>
        <referencedby refid="d1/d79/classtesting_1_1_test_info_1aa3eca255b6be227d7d901cc2a72017a5" compoundref="df/d5b/gtest_8cc" startline="2630" endline="2672">TestInfo::Run</referencedby>
        <referencedby refid="d0/dfa/classtesting_1_1_test_case_1aa3eca255b6be227d7d901cc2a72017a5" compoundref="df/d5b/gtest_8cc" startline="2759" endline="2784">TestCase::Run</referencedby>
        <referencedby refid="d7/d43/classtesting_1_1internal_1_1_has_new_fatal_failure_helper_1ad686cd16900a0b971427c790c1375ef7" compoundref="d3/dc2/gtest-test-part_8cc" startline="96" endline="99">HasNewFatalFailureHelper::~HasNewFatalFailureHelper</referencedby>
        <referencedby refid="d2/db7/classtesting_1_1_scoped_fake_test_part_result_reporter_1ad424dbca5099cec78b6aa2ca4c3aac75" compoundref="df/d5b/gtest_8cc" startline="593" endline="600">ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4c08ba9fcb0581c61e25968e520efa48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(also_run_disabled_tests)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>also_run_disabled_tests</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="88" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="88" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a5868c3980b2f69f511fc8c3de7cdfc17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(break_on_failure)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>break_on_failure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="91" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="91" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ab6f1777f7b740f31e41f7da017447b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(catch_exceptions)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>catch_exceptions</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="95" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="95" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af2cd3595c571ca408afc337bc4bb2619" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(list_tests)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>list_tests</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="108" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="108" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aeccefd463a0942da24750e1bbee76041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(print_time)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>print_time</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="116" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="116" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af37b9206b938bb8b7d398a1379eb7482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(show_internal_stack_frames)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>show_internal_stack_frames</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="127" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="127" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a6d87f7374e105483905a305328856f4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(shuffle)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>shuffle</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="130" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="130" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ac69f2aeeb84dc5f49bd3d040a6f32d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(throw_on_failure)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>throw_on_failure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="139" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="139" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ae754999b59509808254d39e3a3cf38e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_int32_</definition>
        <argsstring>(random_seed)</argsstring>
        <name>GTEST_DECLARE_int32_</name>
        <param>
          <type>random_seed</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="119" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="119" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a315ef0647e4f2795bf1705de8e9c9659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_int32_</definition>
        <argsstring>(repeat)</argsstring>
        <name>GTEST_DECLARE_int32_</name>
        <param>
          <type>repeat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="123" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="123" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1adba6f8afa0f8695956d0134f1629a10b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_int32_</definition>
        <argsstring>(stack_trace_depth)</argsstring>
        <name>GTEST_DECLARE_int32_</name>
        <param>
          <type>stack_trace_depth</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="134" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="134" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a0f658c915a1e60996a2ab00a06612723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(color)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>color</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="100" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="100" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a20d69860ce843142c7f740262e6b0c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(filter)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>filter</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="104" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="104" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a3fe54dd551f1c36cfdd1b36cd6881a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(output)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>output</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="112" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="112" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ad4d1ea63037fc21018dbe997cb0041d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(stream_result_to)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>stream_result_to</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="144" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="144" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1af969886067930ce70f6405cd5aa8b06b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_CMP_HELPER_</definition>
        <argsstring>(GE, &gt;=)</argsstring>
        <name>GTEST_IMPL_CMP_HELPER_</name>
        <param>
          <type>GE</type>
        </param>
        <param>
          <type>&gt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1528" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="1528" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a7fdb4fc164db83c51dfad17640bfeae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_CMP_HELPER_</definition>
        <argsstring>(GT, &gt;)</argsstring>
        <name>GTEST_IMPL_CMP_HELPER_</name>
        <param>
          <type>GT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1530" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="1530" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ade60646b18728043fff84d7b4125de2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_CMP_HELPER_</definition>
        <argsstring>(LE,&lt;=)</argsstring>
        <name>GTEST_IMPL_CMP_HELPER_</name>
        <param>
          <type>LE</type>
        </param>
        <param>
          <type>&lt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1524" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="1524" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1aabcbff15eac496f8487699d19f42c274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_CMP_HELPER_</definition>
        <argsstring>(LT,&lt;)</argsstring>
        <name>GTEST_IMPL_CMP_HELPER_</name>
        <param>
          <type>LT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1526" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="1526" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1aace9bb29e075d3cc3c4e689de03f0e71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GTEST_IMPL_CMP_HELPER_</definition>
        <argsstring>(NE, !=) GTEST_IMPL_CMP_HELPER_(LE</argsstring>
        <name>GTEST_IMPL_CMP_HELPER_</name>
        <param>
          <type>NE</type>
        </param>
        <param>
          <type>!</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1470" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="1522" declcolumn="1"/>
        <references refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" compoundref="df/d5b/gtest_8cc" startline="1010" endline="1012">testing::AssertionSuccess</references>
        <references refid="d0/dde/classtesting_1_1internal_1_1_string_1ac1abc71678dbb1323757df95de3c5a46" compoundref="df/d5b/gtest_8cc" startline="894" endline="900">String::CStringEquals</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" compoundref="df/d5b/gtest_8cc" startline="1312" endline="1343">testing::internal::EqFailure</references>
        <references refid="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" compoundref="d0/d6d/gtest-printers_8h" startline="980" endline="984">testing::PrintToString</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aefed8296a2dd394336ae59e0737ba4c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>GTEST_API_ void InitGoogleTest</definition>
        <argsstring>(int *argc, char **argv)</argsstring>
        <name>InitGoogleTest</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5370" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="5370" bodyend="5376" declfile="lib/googletest/include/gtest/gtest.h" declline="1363" declcolumn="17"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1ac3c6fa93391768aa91c6238b31aaeeb5" compoundref="df/d5b/gtest_8cc" startline="5344" endline="5357">testing::internal::InitGoogleTestImpl</references>
        <referencedby refid="d3/d3a/gtest__main_8cc_1a7f83bdc516d2cb86e20235d94ddf055a" compoundref="d3/d3a/gtest__main_8cc" startline="34" endline="38">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a1e9668bd7ea1c9158eca20c9864866f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>GTEST_API_ void InitGoogleTest</definition>
        <argsstring>(int *argc, wchar_t **argv)</argsstring>
        <name>InitGoogleTest</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>wchar_t **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5380" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="5380" bodyend="5386" declfile="lib/googletest/include/gtest/gtest.h" declline="1367" declcolumn="17"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1ac3c6fa93391768aa91c6238b31aaeeb5" compoundref="df/d5b/gtest_8cc" startline="5344" endline="5357">testing::internal::InitGoogleTestImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a44cfeea3cff1ac9e2082efd5ab7b9f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const ::std::string &amp;needle, const ::std::string &amp;haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1636" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1636" bodyend="1640" declfile="lib/googletest/include/gtest/gtest.h" declline="1608" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4c722362b584ab9565021fd68f2d0003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const char *needle, const char *haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1618" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1618" bodyend="1622" declfile="lib/googletest/include/gtest/gtest.h" declline="1599" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a5aa234189c2ad81a9536db01de639003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const wchar_t *needle, const wchar_t *haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1624" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1624" bodyend="1628" declfile="lib/googletest/include/gtest/gtest.h" declline="1602" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a3963e5134ee631c3e0da79c4f168ae3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const ::std::string &amp;needle, const ::std::string &amp;haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1630" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1630" bodyend="1634" declfile="lib/googletest/include/gtest/gtest.h" declline="1605" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af769ba85b7dc1c49d49594f195b442cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const char *needle, const char *haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1606" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1606" bodyend="1610" declfile="lib/googletest/include/gtest/gtest.h" declline="1593" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8e18e316d8175f0f5928fca6afe122e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>GTEST_API_ AssertionResult IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const wchar_t *needle, const wchar_t *haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1612" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1612" bodyend="1616" declfile="lib/googletest/include/gtest/gtest.h" declline="1596" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a4fdfe94b1ad045e6e66e6227dd0d130d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ReportFailureInUnknownLocation</definition>
        <argsstring>(TestPartResult::Type result_type, const std::string &amp;message)</argsstring>
        <name>ReportFailureInUnknownLocation</name>
        <param>
          <type>TestPartResult::Type</type>
          <declname>result_type</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2250" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="2250" bodyend="2260" declfile="lib/googletest/include/gtest/gtest.h" declline="164" declcolumn="6"/>
        <references refid="d7/d47/classtesting_1_1_unit_test_1ac9d74c9edbbc9f363be7633138e7ab7f" compoundref="df/d5b/gtest_8cc" startline="4108" endline="4168">UnitTest::AddTestPartResult</references>
        <references refid="d7/d47/classtesting_1_1_unit_test_1ad200090b11104aca39f25043701886cf" compoundref="df/d5b/gtest_8cc" startline="3972" endline="3991">UnitTest::GetInstance</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1addb2ed165b92b74e25fe9ebe9e46b9f9" compoundref="df/d5b/gtest_8cc" startline="2410" endline="2460">testing::internal::HandleExceptionsInMethodIfSupported</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ac5293b438139ef7ed05cb7fcaaf63545" compoundref="df/d5b/gtest_8cc" startline="2383" endline="2404">testing::internal::HandleSehExceptionsInMethodIfSupported</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d73/gtest_8h_1a853a3792807489591d3d4a2f2ff9359f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int RUN_ALL_TESTS</definition>
        <argsstring>() GTEST_MUST_USE_RESULT_</argsstring>
        <name>RUN_ALL_TESTS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2232" column="12" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2232" bodyend="2234" declfile="lib/googletest/include/gtest/gtest.h" declline="2230" declcolumn="5"/>
        <referencedby refid="d3/d3a/gtest__main_8cc_1a7f83bdc516d2cb86e20235d94ddf055a" compoundref="d3/d3a/gtest__main_8cc" startline="34" endline="38">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a661e70fc6afeb5c085eed3716aa45059" prot="package" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::StaticAssertTypeEq</definition>
        <argsstring>()</argsstring>
        <name>StaticAssertTypeEq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2150" column="6" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2150" bodyend="2153"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2005,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Google<sp/>C++<sp/>Testing<sp/>Framework<sp/>(Google<sp/>Test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>header<sp/>file<sp/>defines<sp/>the<sp/>public<sp/>API<sp/>for<sp/>Google<sp/>Test.<sp/><sp/>It<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>included<sp/>by<sp/>any<sp/>test<sp/>program<sp/>that<sp/>uses<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IMPORTANT<sp/>NOTE:<sp/>Due<sp/>to<sp/>limitation<sp/>of<sp/>the<sp/>C++<sp/>language,<sp/>we<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>leave<sp/>some<sp/>internal<sp/>implementation<sp/>details<sp/>in<sp/>this<sp/>header<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>They<sp/>are<sp/>clearly<sp/>marked<sp/>by<sp/>comments<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Such<sp/>code<sp/>is<sp/>NOT<sp/>meant<sp/>to<sp/>be<sp/>used<sp/>by<sp/>a<sp/>user<sp/>directly,<sp/>and<sp/>is<sp/>subject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>CHANGE<sp/>WITHOUT<sp/>NOTICE.<sp/><sp/>Therefore<sp/>DO<sp/>NOT<sp/>DEPEND<sp/>ON<sp/>IT<sp/>in<sp/>a<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>program!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Acknowledgment:<sp/>Google<sp/>Test<sp/>borrowed<sp/>the<sp/>idea<sp/>of<sp/>automatic<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>registration<sp/>from<sp/>Barthelemy<sp/>Dagenais&apos;<sp/>(barthelemy@prologique.com)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>easyUnit<sp/>framework.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_INCLUDE_GTEST_GTEST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INCLUDE_GTEST_GTEST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/limits" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">limits</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">ostream</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">vector</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d5/da1/gtest-internal_8h" kindref="compound">gtest/internal/gtest-internal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d0/d45/gtest-string_8h" kindref="compound">gtest/internal/gtest-string.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d59/gtest-death-test_8h" kindref="compound">gtest/gtest-death-test.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d6/da4/gtest-message_8h" kindref="compound">gtest/gtest-message.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d0/d31/gtest-param-test_8h" kindref="compound">gtest/gtest-param-test.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d0/d6d/gtest-printers_8h" kindref="compound">gtest/gtest-printers.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/db1/gtest__prod_8h" kindref="compound">gtest/gtest_prod.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/d01/gtest-test-part_8h" kindref="compound">gtest/gtest-test-part.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="de/dce/gtest-typed-test_8h" kindref="compound">gtest/gtest-typed-test.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Depending<sp/>on<sp/>the<sp/>platform,<sp/>different<sp/>string<sp/>classes<sp/>are<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>Linux,<sp/>in<sp/>addition<sp/>to<sp/>::std::string,<sp/>Google<sp/>also<sp/>makes<sp/>use<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>::string,<sp/>which<sp/>has<sp/>the<sp/>same<sp/>interface<sp/>as<sp/>::std::string,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>has<sp/>a<sp/>different<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>define<sp/>GTEST_HAS_GLOBAL_STRING<sp/>to<sp/>1<sp/>to<sp/>indicate<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::string<sp/>is<sp/>available<sp/>AND<sp/>is<sp/>a<sp/>distinct<sp/>type<sp/>to<sp/>::std::string,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>define<sp/>it<sp/>to<sp/>0<sp/>to<sp/>indicate<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>::std::string<sp/>and<sp/>::string<sp/>are<sp/>the<sp/>same<sp/>class<sp/>on<sp/>your<sp/>platform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>due<sp/>to<sp/>aliasing,<sp/>you<sp/>should<sp/>define<sp/>GTEST_HAS_GLOBAL_STRING<sp/>to<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>do<sp/>not<sp/>define<sp/>GTEST_HAS_GLOBAL_STRING,<sp/>it<sp/>is<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>heuristically.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d0/d75/namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Declares<sp/>the<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>temporary<sp/>enables<sp/>the<sp/>disabled<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="d0/d75/namespacetesting_1a4c08ba9fcb0581c61e25968e520efa48" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a534f0743e7c42c55d27dcd0dd3d38f18" kindref="member">GTEST_DECLARE_bool_</ref>(also_run_disabled_tests);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>brings<sp/>the<sp/>debugger<sp/>on<sp/>an<sp/>assertion<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="d0/d75/namespacetesting_1a5868c3980b2f69f511fc8c3de7cdfc17" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a534f0743e7c42c55d27dcd0dd3d38f18" kindref="member">GTEST_DECLARE_bool_</ref>(break_on_failure);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>controls<sp/>whether<sp/>Google<sp/>Test<sp/>catches<sp/>all<sp/>test-thrown<sp/>exceptions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>logs<sp/>them<sp/>as<sp/>failures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="d0/d75/namespacetesting_1ab6f1777f7b740f31e41f7da017447b58" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a534f0743e7c42c55d27dcd0dd3d38f18" kindref="member">GTEST_DECLARE_bool_</ref>(catch_exceptions);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>enables<sp/>using<sp/>colors<sp/>in<sp/>terminal<sp/>output.<sp/>Available<sp/>values<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;yes&quot;<sp/>to<sp/>enable<sp/>colors,<sp/>&quot;no&quot;<sp/>(disable<sp/>colors),<sp/>or<sp/>&quot;auto&quot;<sp/>(the<sp/>default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>let<sp/>Google<sp/>Test<sp/>decide.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="d0/d75/namespacetesting_1a0f658c915a1e60996a2ab00a06612723" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a37b7e87f0a5f502c6918f37d1768c1f3" kindref="member">GTEST_DECLARE_string_</ref>(color);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>sets<sp/>up<sp/>the<sp/>filter<sp/>to<sp/>select<sp/>by<sp/>name<sp/>using<sp/>a<sp/>glob<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>tests<sp/>to<sp/>run.<sp/>If<sp/>the<sp/>filter<sp/>is<sp/>not<sp/>given<sp/>all<sp/>tests<sp/>are<sp/>executed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="d0/d75/namespacetesting_1a20d69860ce843142c7f740262e6b0c9a" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a37b7e87f0a5f502c6918f37d1768c1f3" kindref="member">GTEST_DECLARE_string_</ref>(filter);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>causes<sp/>the<sp/>Google<sp/>Test<sp/>to<sp/>list<sp/>tests.<sp/>None<sp/>of<sp/>the<sp/>tests<sp/>listed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>actually<sp/>run<sp/>if<sp/>the<sp/>flag<sp/>is<sp/>provided.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="d0/d75/namespacetesting_1af2cd3595c571ca408afc337bc4bb2619" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a534f0743e7c42c55d27dcd0dd3d38f18" kindref="member">GTEST_DECLARE_bool_</ref>(list_tests);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>controls<sp/>whether<sp/>Google<sp/>Test<sp/>emits<sp/>a<sp/>detailed<sp/>XML<sp/>report<sp/>to<sp/>a<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>addition<sp/>to<sp/>its<sp/>normal<sp/>textual<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="d0/d75/namespacetesting_1a3fe54dd551f1c36cfdd1b36cd6881a44" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a37b7e87f0a5f502c6918f37d1768c1f3" kindref="member">GTEST_DECLARE_string_</ref>(output);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flags<sp/>control<sp/>whether<sp/>Google<sp/>Test<sp/>prints<sp/>the<sp/>elapsed<sp/>time<sp/>for<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="d0/d75/namespacetesting_1aeccefd463a0942da24750e1bbee76041" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a534f0743e7c42c55d27dcd0dd3d38f18" kindref="member">GTEST_DECLARE_bool_</ref>(print_time);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>specifies<sp/>the<sp/>random<sp/>number<sp/>seed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="d0/d75/namespacetesting_1ae754999b59509808254d39e3a3cf38e0" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1ae754999b59509808254d39e3a3cf38e0" kindref="member">GTEST_DECLARE_int32_</ref>(random_seed);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>sets<sp/>how<sp/>many<sp/>times<sp/>the<sp/>tests<sp/>are<sp/>repeated.<sp/>The<sp/>default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>1.<sp/>If<sp/>the<sp/>value<sp/>is<sp/>-1<sp/>the<sp/>tests<sp/>are<sp/>repeating<sp/>forever.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="d0/d75/namespacetesting_1a315ef0647e4f2795bf1705de8e9c9659" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1ae754999b59509808254d39e3a3cf38e0" kindref="member">GTEST_DECLARE_int32_</ref>(repeat);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>controls<sp/>whether<sp/>Google<sp/>Test<sp/>includes<sp/>Google<sp/>Test<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stack<sp/>frames<sp/>in<sp/>failure<sp/>stack<sp/>traces.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="d0/d75/namespacetesting_1af37b9206b938bb8b7d398a1379eb7482" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a534f0743e7c42c55d27dcd0dd3d38f18" kindref="member">GTEST_DECLARE_bool_</ref>(show_internal_stack_frames);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>this<sp/>flag<sp/>is<sp/>specified,<sp/>tests&apos;<sp/>order<sp/>is<sp/>randomized<sp/>on<sp/>every<sp/>iteration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="d0/d75/namespacetesting_1a6d87f7374e105483905a305328856f4b" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a534f0743e7c42c55d27dcd0dd3d38f18" kindref="member">GTEST_DECLARE_bool_</ref>(shuffle);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>specifies<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>stack<sp/>frames<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>printed<sp/>in<sp/>a<sp/>failure<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="d0/d75/namespacetesting_1adba6f8afa0f8695956d0134f1629a10b" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1ae754999b59509808254d39e3a3cf38e0" kindref="member">GTEST_DECLARE_int32_</ref>(stack_trace_depth);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>this<sp/>flag<sp/>is<sp/>specified,<sp/>a<sp/>failed<sp/>assertion<sp/>will<sp/>throw<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exception<sp/>if<sp/>exceptions<sp/>are<sp/>enabled,<sp/>or<sp/>exit<sp/>the<sp/>program<sp/>with<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-zero<sp/>code<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="d0/d75/namespacetesting_1ac69f2aeeb84dc5f49bd3d040a6f32d17" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a534f0743e7c42c55d27dcd0dd3d38f18" kindref="member">GTEST_DECLARE_bool_</ref>(throw_on_failure);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>this<sp/>flag<sp/>is<sp/>set<sp/>with<sp/>a<sp/>&quot;host:port&quot;<sp/>string,<sp/>on<sp/>supported</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>platforms<sp/>test<sp/>results<sp/>are<sp/>streamed<sp/>to<sp/>the<sp/>specified<sp/>port<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>specified<sp/>host<sp/>machine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="d0/d75/namespacetesting_1ad4d1ea63037fc21018dbe997cb0041d1" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a37b7e87f0a5f502c6918f37d1768c1f3" kindref="member">GTEST_DECLARE_string_</ref>(stream_result_to);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>upper<sp/>limit<sp/>for<sp/>valid<sp/>stack<sp/>trace<sp/>depths.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="d0/d75/namespacetesting_1af923b7f5ce597d321ccd3f7e62afb270" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1af923b7f5ce597d321ccd3f7e62afb270" kindref="member">kMaxStackTraceDepth</ref><sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AssertHelper;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DefaultGlobalTestPartResultReporter;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExecDeathTest;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NoExecDeathTest;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FinalSuccessChecker;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTestFlagSaver;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StreamingListenerTest;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestResultAccessor;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestEventListenersAccessor;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestEventRepeater;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnitTestRecordPropertyTestHelper;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">WindowsDeathTest;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnitTestImpl*<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" kindref="member">GetUnitTestImpl</ref>();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4fdfe94b1ad045e6e66e6227dd0d130d" kindref="member">ReportFailureInUnknownLocation</ref>(<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">TestPartResult::Type</ref><sp/>result_type,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>message);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>friend<sp/>relationship<sp/>of<sp/>some<sp/>of<sp/>these<sp/>classes<sp/>is<sp/>cyclic.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>don&apos;t<sp/>forward<sp/>declare<sp/>them<sp/>the<sp/>compiler<sp/>might<sp/>confuse<sp/>the<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>friendship<sp/>clauses<sp/>with<sp/>same<sp/>named<sp/>classes<sp/>on<sp/>the<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Test;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestCase;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestInfo;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnitTest;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>class<sp/>for<sp/>indicating<sp/>whether<sp/>an<sp/>assertion<sp/>was<sp/>successful.<sp/><sp/>When</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>assertion<sp/>wasn&apos;t<sp/>successful,<sp/>the<sp/>AssertionResult<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>remembers<sp/>a<sp/>non-empty<sp/>message<sp/>that<sp/>describes<sp/>how<sp/>it<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>create<sp/>an<sp/>instance<sp/>of<sp/>this<sp/>class,<sp/>use<sp/>one<sp/>of<sp/>the<sp/>factory<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(AssertionSuccess()<sp/>and<sp/>AssertionFailure()).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>is<sp/>useful<sp/>for<sp/>two<sp/>purposes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>Defining<sp/>predicate<sp/>functions<sp/>to<sp/>be<sp/>used<sp/>with<sp/>Boolean<sp/>test<sp/>assertions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE/EXPECT_FALSE<sp/>and<sp/>their<sp/>ASSERT_<sp/>counterparts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>Defining<sp/>predicate-format<sp/>functions<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>with<sp/>predicate<sp/>assertions<sp/>(ASSERT_PRED_FORMAT*,<sp/>etc).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>if<sp/>you<sp/>define<sp/>IsEven<sp/>predicate:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>testing::AssertionResult<sp/>IsEven(int<sp/>n)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>((n<sp/>%<sp/>2)<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>testing::AssertionSuccess();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>testing::AssertionFailure()<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&quot;<sp/>is<sp/>odd&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Then<sp/>the<sp/>failed<sp/>expectation<sp/>EXPECT_TRUE(IsEven(Fib(5)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>print<sp/>the<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Value<sp/>of:<sp/>IsEven(Fib(5))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Actual:<sp/>false<sp/>(5<sp/>is<sp/>odd)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Expected:<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instead<sp/>of<sp/>a<sp/>more<sp/>opaque</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Value<sp/>of:<sp/>IsEven(Fib(5))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Actual:<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Expected:<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>IsEven<sp/>is<sp/>a<sp/>simple<sp/>Boolean<sp/>predicate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>expect<sp/>your<sp/>predicate<sp/>to<sp/>be<sp/>reused<sp/>and<sp/>want<sp/>to<sp/>support<sp/>informative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>messages<sp/>in<sp/>EXPECT_FALSE<sp/>and<sp/>ASSERT_FALSE<sp/>(negative<sp/>assertions<sp/>show<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>about<sp/>half<sp/>as<sp/>often<sp/>as<sp/>positive<sp/>ones<sp/>in<sp/>our<sp/>tests),<sp/>supply<sp/>messages<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>both<sp/>success<sp/>and<sp/>failure<sp/>cases:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>testing::AssertionResult<sp/>IsEven(int<sp/>n)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>((n<sp/>%<sp/>2)<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>testing::AssertionSuccess()<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&quot;<sp/>is<sp/>even&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>testing::AssertionFailure()<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&quot;<sp/>is<sp/>odd&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Then<sp/>a<sp/>statement<sp/>EXPECT_FALSE(IsEven(Fib(6)))<sp/>will<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Value<sp/>of:<sp/>IsEven(Fib(6))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Actual:<sp/>true<sp/>(8<sp/>is<sp/>even)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Expected:<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NB:<sp/>Predicates<sp/>that<sp/>support<sp/>negative<sp/>Boolean<sp/>assertions<sp/>have<sp/>reduced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>performance<sp/>in<sp/>positive<sp/>ones<sp/>so<sp/>be<sp/>careful<sp/>not<sp/>to<sp/>use<sp/>them<sp/>in<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>have<sp/>lots<sp/>(tens<sp/>of<sp/>thousands)<sp/>of<sp/>positive<sp/>Boolean<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>use<sp/>this<sp/>class<sp/>with<sp/>EXPECT_PRED_FORMAT<sp/>assertions<sp/>such<sp/>as:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Verifies<sp/>that<sp/>Foo()<sp/>returns<sp/>an<sp/>even<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_PRED_FORMAT1(IsEven,<sp/>Foo());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>need<sp/>to<sp/>define:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>testing::AssertionResult<sp/>IsEven(const<sp/>char*<sp/>expr,<sp/>int<sp/>n)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>((n<sp/>%<sp/>2)<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>testing::AssertionSuccess();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>testing::AssertionFailure()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;Expected:<sp/>&quot;<sp/>&lt;&lt;<sp/>expr<sp/>&lt;&lt;<sp/>&quot;<sp/>is<sp/>even\n<sp/><sp/>Actual:<sp/>it&apos;s<sp/>&quot;<sp/>&lt;&lt;<sp/>n;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>Foo()<sp/>returns<sp/>5,<sp/>you<sp/>will<sp/>see<sp/>the<sp/>following<sp/>message:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Expected:<sp/>Foo()<sp/>is<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Actual:<sp/>it&apos;s<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="d5/dec/classtesting_1_1_assertion_result" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>in<sp/>EXPECT_TRUE/FALSE(assertion_result).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="d5/dec/classtesting_1_1_assertion_result_1aac1fab16d9b80876e6e0c76a1a02e1c7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result_1aac1fab16d9b80876e6e0c76a1a02e1c7" kindref="member">GTEST_DISABLE_MSC_WARNINGS_PUSH_</ref>(4800<sp/></highlight><highlight class="comment">/*<sp/>forcing<sp/>value<sp/>to<sp/>bool<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>in<sp/>the<sp/>EXPECT_TRUE/FALSE(bool_expression).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>must<sp/>be<sp/>contextually<sp/>convertible<sp/>to<sp/>bool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>second<sp/>parameter<sp/>prevents<sp/>this<sp/>overload<sp/>from<sp/>being<sp/>considered<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>argument<sp/>is<sp/>implicitly<sp/>convertible<sp/>to<sp/>AssertionResult.<sp/>In<sp/>that<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>want<sp/>AssertionResult&apos;s<sp/>copy<sp/>constructor<sp/>to<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>explicit<sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref>(</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>T&amp;<sp/>success,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>internal::EnableIf&lt;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!internal::ImplicitlyConvertible&lt;T,<sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref>&gt;::value&gt;::type*</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*enabler*/</highlight><highlight class="normal"><sp/>=<sp/>NULL)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>success_(success)<sp/>{}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1ab4c44546d6d9aced68993b87b608fc06" kindref="member">GTEST_DISABLE_MSC_WARNINGS_POP_</ref>()</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assignment<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref>&amp;<sp/>operator=(<ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>swap(other);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>assertion<sp/>succeeded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success_;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>assertion&apos;s<sp/>negation.<sp/>Used<sp/>with<sp/>EXPECT/ASSERT_FALSE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>AssertionResult<sp/>operator!()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>text<sp/>streamed<sp/>into<sp/>this<sp/>AssertionResult.<sp/>Test<sp/>assertions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>it<sp/>when<sp/>they<sp/>fail<sp/>(i.e.,<sp/>the<sp/>predicate&apos;s<sp/>outcome<sp/>doesn&apos;t<sp/>match<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assertion&apos;s<sp/>expectation).<sp/>When<sp/>nothing<sp/>has<sp/>been<sp/>streamed<sp/>into<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>object,<sp/>returns<sp/>an<sp/>empty<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="d5/dec/classtesting_1_1_assertion_result_1af8f4390dff5acafd3c7e50f76c55687a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d5/dec/classtesting_1_1_assertion_result_1af8f4390dff5acafd3c7e50f76c55687a" kindref="member">message</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message_.get()<sp/>!=<sp/>NULL<sp/>?<sp/><sp/>message_-&gt;c_str()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vladl@google.com):<sp/>Remove<sp/>this<sp/>after<sp/>making<sp/>sure<sp/>no<sp/>clients<sp/>use<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deprecated;<sp/>please<sp/>use<sp/>message()<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="d5/dec/classtesting_1_1_assertion_result_1aa7fa27aa50f9a3821317724d7e318c1f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d5/dec/classtesting_1_1_assertion_result_1aa7fa27aa50f9a3821317724d7e318c1f" kindref="member">failure_message</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message();<sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streams<sp/>a<sp/>custom<sp/>failure<sp/>message<sp/>into<sp/>this<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="d5/dec/classtesting_1_1_assertion_result_1aba40d0b5bf8bfa326fc5c841f292aca4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref>&amp;<sp/><ref refid="d5/dec/classtesting_1_1_assertion_result_1aba40d0b5bf8bfa326fc5c841f292aca4" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>AppendMessage(<ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/>value);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allows<sp/>streaming<sp/>basic<sp/>output<sp/>manipulators<sp/>such<sp/>as<sp/>endl<sp/>or<sp/>flush<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="d5/dec/classtesting_1_1_assertion_result_1a5363ebd66dbf2d1f2226032c470def13" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref>&amp;<sp/><ref refid="d5/dec/classtesting_1_1_assertion_result_1a5363ebd66dbf2d1f2226032c470def13" kindref="member">operator&lt;&lt;</ref>(</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>&amp;<sp/>(*basic_manipulator)(::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>&amp;<sp/>stream))<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>AppendMessage(<ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/>basic_manipulator);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Appends<sp/>the<sp/>contents<sp/>of<sp/>message<sp/>to<sp/>message_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="d5/dec/classtesting_1_1_assertion_result_1af5a0f627b22e44c51dbfd428ade27d76" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result_1af5a0f627b22e44c51dbfd428ade27d76" kindref="member">AppendMessage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/>a_message)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message_.get()<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message_.reset(<ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">new ::std::string</ref>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>message_-&gt;append(a_message.<ref refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" kindref="member">GetString</ref>().<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Swap<sp/>the<sp/>contents<sp/>of<sp/>this<sp/>AssertionResult<sp/>with<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stores<sp/>result<sp/>of<sp/>the<sp/>assertion<sp/>predicate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="d5/dec/classtesting_1_1_assertion_result_1af269425d62c74663296db74fb636833d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result_1af269425d62c74663296db74fb636833d" kindref="member">success_</ref>;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stores<sp/>the<sp/>message<sp/>describing<sp/>the<sp/>condition<sp/>in<sp/>case<sp/>the<sp/>expectation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>is<sp/>not<sp/>satisfied<sp/>with<sp/>the<sp/>predicate&apos;s<sp/>outcome.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Referenced<sp/>via<sp/>a<sp/>pointer<sp/>to<sp/>avoid<sp/>taking<sp/>too<sp/>much<sp/>stack<sp/>frame<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>test<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="d5/dec/classtesting_1_1_assertion_result_1ac17bccd2dad5bc487c676baa7c53d104" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="de/d6a/classtesting_1_1internal_1_1scoped__ptr" kindref="compound">internal::scoped_ptr&lt; ::std::string&gt;</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result_1ac17bccd2dad5bc487c676baa7c53d104" kindref="member">message_</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">};</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>a<sp/>successful<sp/>assertion<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>a<sp/>failed<sp/>assertion<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" kindref="member">AssertionFailure</ref>();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>a<sp/>failed<sp/>assertion<sp/>result<sp/>with<sp/>the<sp/>given<sp/>failure<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deprecated;<sp/>use<sp/>AssertionFailure()<sp/>&lt;&lt;<sp/>msg.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" kindref="member">AssertionFailure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>abstract<sp/>class<sp/>that<sp/>all<sp/>tests<sp/>inherit<sp/>from.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>Google<sp/>Test,<sp/>a<sp/>unit<sp/>test<sp/>program<sp/>contains<sp/>one<sp/>or<sp/>many<sp/>TestCases,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>each<sp/>TestCase<sp/>contains<sp/>one<sp/>or<sp/>many<sp/>Tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>you<sp/>define<sp/>a<sp/>test<sp/>using<sp/>the<sp/>TEST<sp/>macro,<sp/>you<sp/>don&apos;t<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>explicitly<sp/>derive<sp/>from<sp/>Test<sp/>-<sp/>the<sp/>TEST<sp/>macro<sp/>automatically<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>for<sp/>you.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>only<sp/>time<sp/>you<sp/>derive<sp/>from<sp/>Test<sp/>is<sp/>when<sp/>defining<sp/>a<sp/>test<sp/>fixture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>used<sp/>a<sp/>TEST_F.<sp/><sp/>For<sp/>example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>class<sp/>FooTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>protected:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>void<sp/>SetUp()<sp/>override<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>void<sp/>TearDown()<sp/>override<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TEST_F(FooTest,<sp/>Bar)<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TEST_F(FooTest,<sp/>Baz)<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>is<sp/>not<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="df/d69/classtesting_1_1_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="df/d69/classtesting_1_1_test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="373" refid="df/d69/classtesting_1_1_test_1a4c49c2cdb6c328e6b709b4542f23de3c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Defines<sp/>types<sp/>for<sp/>pointers<sp/>to<sp/>functions<sp/>that<sp/>set<sp/>up<sp/>and<sp/>tear<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="df/d69/classtesting_1_1_test_1ab6f3c269fc46c9c1c0f81b3431240138" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa56a971a29fe8459940b46db38d3000f" kindref="member">internal::SetUpTestCaseFunc</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa56a971a29fe8459940b46db38d3000f" kindref="member">SetUpTestCaseFunc</ref>;</highlight></codeline>
<codeline lineno="378" refid="df/d69/classtesting_1_1_test_1ae31ac69c75bb42f47c8d6a7cde4937c6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a7b4a46c5927d126f2df2d955d98e3b8a" kindref="member">internal::TearDownTestCaseFunc</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a7b4a46c5927d126f2df2d955d98e3b8a" kindref="member">TearDownTestCaseFunc</ref>;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>d&apos;tor<sp/>is<sp/>virtual<sp/>as<sp/>we<sp/>intend<sp/>to<sp/>inherit<sp/>from<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="df/d69/classtesting_1_1_test" kindref="compound">Test</ref>();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>up<sp/>the<sp/>stuff<sp/>shared<sp/>by<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>will<sp/>call<sp/>Foo::SetUpTestCase()<sp/>before<sp/>running<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>in<sp/>test<sp/>case<sp/>Foo.<sp/><sp/>Hence<sp/>a<sp/>sub-class<sp/>can<sp/>define<sp/>its<sp/>own</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SetUpTestCase()<sp/>method<sp/>to<sp/>shadow<sp/>the<sp/>one<sp/>defined<sp/>in<sp/>the<sp/>super</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="df/d69/classtesting_1_1_test_1aad8181b222f27240e9f07dcb6e620fa3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/d69/classtesting_1_1_test_1aad8181b222f27240e9f07dcb6e620fa3" kindref="member">SetUpTestCase</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tears<sp/>down<sp/>the<sp/>stuff<sp/>shared<sp/>by<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>will<sp/>call<sp/>Foo::TearDownTestCase()<sp/>after<sp/>running<sp/>the<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>in<sp/>test<sp/>case<sp/>Foo.<sp/><sp/>Hence<sp/>a<sp/>sub-class<sp/>can<sp/>define<sp/>its<sp/>own</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TearDownTestCase()<sp/>method<sp/>to<sp/>shadow<sp/>the<sp/>one<sp/>defined<sp/>in<sp/>the<sp/>super</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="df/d69/classtesting_1_1_test_1aaff0dc66f57f643a49ad3dd6bcb56916" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/d69/classtesting_1_1_test_1aaff0dc66f57f643a49ad3dd6bcb56916" kindref="member">TearDownTestCase</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>current<sp/>test<sp/>has<sp/>a<sp/>fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasFatalFailure();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>current<sp/>test<sp/>has<sp/>a<sp/>non-fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasNonfatalFailure();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>current<sp/>test<sp/>has<sp/>a<sp/>(either<sp/>fatal<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>non-fatal)<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="df/d69/classtesting_1_1_test_1a627f8999d1cd6075cf76329d5470a666" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="df/d69/classtesting_1_1_test_1a627f8999d1cd6075cf76329d5470a666" kindref="member">HasFailure</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HasFatalFailure()<sp/>||<sp/>HasNonfatalFailure();<sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Logs<sp/>a<sp/>property<sp/>for<sp/>the<sp/>current<sp/>test,<sp/>test<sp/>case,<sp/>or<sp/>for<sp/>the<sp/>entire</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>invocation<sp/>of<sp/>the<sp/>test<sp/>program<sp/>when<sp/>used<sp/>outside<sp/>of<sp/>the<sp/>context<sp/>of<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>case.<sp/><sp/>Only<sp/>the<sp/>last<sp/>value<sp/>for<sp/>a<sp/>given<sp/>key<sp/>is<sp/>remembered.<sp/><sp/>These</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>public<sp/>static<sp/>so<sp/>they<sp/>can<sp/>be<sp/>called<sp/>from<sp/>utility<sp/>functions<sp/>that<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>members<sp/>of<sp/>the<sp/>test<sp/>fixture.<sp/><sp/>Calls<sp/>to<sp/>RecordProperty<sp/>made<sp/>during</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lifespan<sp/>of<sp/>the<sp/>test<sp/>(from<sp/>the<sp/>moment<sp/>its<sp/>constructor<sp/>starts<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>moment<sp/>its<sp/>destructor<sp/>finishes)<sp/>will<sp/>be<sp/>output<sp/>in<sp/>XML<sp/>as<sp/>attributes<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>&lt;testcase&gt;<sp/>element.<sp/><sp/>Properties<sp/>recorded<sp/>from<sp/>fixture&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SetUpTestCase<sp/>or<sp/>TearDownTestCase<sp/>are<sp/>logged<sp/>as<sp/>attributes<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>corresponding<sp/>&lt;testsuite&gt;<sp/>element.<sp/><sp/>Calls<sp/>to<sp/>RecordProperty<sp/>made<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>global<sp/>context<sp/>(before<sp/>or<sp/>after<sp/>invocation<sp/>of<sp/>RUN_ALL_TESTS<sp/>and<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SetUp/TearDown<sp/>method<sp/>of<sp/>Environment<sp/>objects<sp/>registered<sp/>with<sp/>Google</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test)<sp/>will<sp/>be<sp/>output<sp/>as<sp/>attributes<sp/>of<sp/>the<sp/>&lt;testsuites&gt;<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecordProperty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>value);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecordProperty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Test<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><ref refid="df/d69/classtesting_1_1_test" kindref="compound">Test</ref>();</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>up<sp/>the<sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tears<sp/>down<sp/>the<sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>current<sp/>test<sp/>has<sp/>the<sp/>same<sp/>fixture<sp/>class<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>test<sp/>in<sp/>the<sp/>current<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasSameFixtureClass();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>the<sp/>test<sp/>after<sp/>the<sp/>test<sp/>fixture<sp/>has<sp/>been<sp/>set<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>sub-class<sp/>must<sp/>implement<sp/>this<sp/>to<sp/>define<sp/>the<sp/>test<sp/>logic.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DO<sp/>NOT<sp/>OVERRIDE<sp/>THIS<sp/>FUNCTION<sp/>DIRECTLY<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Instead,<sp/>use<sp/>the<sp/>TEST<sp/>or<sp/>TEST_F<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="df/d69/classtesting_1_1_test_1a925baf8f1ea1e3ff5421bf2dbfa9a778" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/d69/classtesting_1_1_test_1a925baf8f1ea1e3ff5421bf2dbfa9a778" kindref="member">TestBody</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>up,<sp/>executes,<sp/>and<sp/>tears<sp/>down<sp/>the<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deletes<sp/>self.<sp/><sp/>We<sp/>deliberately<sp/>pick<sp/>an<sp/>unusual<sp/>name<sp/>for<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>internal<sp/>method<sp/>to<sp/>avoid<sp/>clashing<sp/>with<sp/>names<sp/>used<sp/>in<sp/>user<sp/>TESTs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453" refid="df/d69/classtesting_1_1_test_1a596a17de4388a65184028210bc5bbecb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/d69/classtesting_1_1_test_1a596a17de4388a65184028210bc5bbecb" kindref="member">DeleteSelf_</ref>()<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="df/d69/classtesting_1_1_test_1acb405321a5c6ae16fef21290649f2666" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d6a/classtesting_1_1internal_1_1scoped__ptr" kindref="compound">internal::scoped_ptr&lt; GTEST_FLAG_SAVER_ &gt;</ref><sp/>gtest_flag_saver_;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Often<sp/>a<sp/>user<sp/>misspells<sp/>SetUp()<sp/>as<sp/>Setup()<sp/>and<sp/>spends<sp/>a<sp/>long<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wondering<sp/>why<sp/>it<sp/>is<sp/>never<sp/>called<sp/>by<sp/>Google<sp/>Test.<sp/><sp/>The<sp/>declaration<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>method<sp/>is<sp/>solely<sp/>for<sp/>catching<sp/>such<sp/>an<sp/>error<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compile<sp/>time:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>The<sp/>return<sp/>type<sp/>is<sp/>deliberately<sp/>chosen<sp/>to<sp/>be<sp/>not<sp/>void,<sp/>so<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>will<sp/>be<sp/>a<sp/>conflict<sp/>if<sp/>void<sp/>Setup()<sp/>is<sp/>declared<sp/>in<sp/>the<sp/>user&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>This<sp/>method<sp/>is<sp/>private,<sp/>so<sp/>it<sp/>will<sp/>be<sp/>another<sp/>compiler<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>the<sp/>method<sp/>is<sp/>called<sp/>from<sp/>the<sp/>user&apos;s<sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DO<sp/>NOT<sp/>OVERRIDE<sp/>THIS<sp/>FUNCTION.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>see<sp/>an<sp/>error<sp/>about<sp/>overriding<sp/>the<sp/>following<sp/>function<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>about<sp/>it<sp/>being<sp/>private,<sp/>you<sp/>have<sp/>mis-spelled<sp/>SetUp()<sp/>as<sp/>Setup().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="df/dfe/structtesting_1_1_test_1_1_setup__should__be__spelled___set_up" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="df/dfe/structtesting_1_1_test_1_1_setup__should__be__spelled___set_up" kindref="compound">Setup_should_be_spelled_SetUp</ref><sp/>{};</highlight></codeline>
<codeline lineno="474" refid="df/d69/classtesting_1_1_test_1adf12eafecf227c1587f58f90f1a221c3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="df/dfe/structtesting_1_1_test_1_1_setup__should__be__spelled___set_up" kindref="compound">Setup_should_be_spelled_SetUp</ref>*<sp/><ref refid="df/d69/classtesting_1_1_test_1adf12eafecf227c1587f58f90f1a221c3" kindref="member">Setup</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>disallow<sp/>copying<sp/>Tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477" refid="df/d69/classtesting_1_1_test_1a75c6d865199f4e27bab851e43470669d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="df/d69/classtesting_1_1_test_1a75c6d865199f4e27bab851e43470669d" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="df/d69/classtesting_1_1_test" kindref="compound">Test</ref>);</highlight></codeline>
<codeline lineno="478"><highlight class="normal">};</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480" refid="d0/d75/namespacetesting_1ab6f3c269fc46c9c1c0f81b3431240138" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">internal::TimeInMillis</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref>;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>copyable<sp/>object<sp/>representing<sp/>a<sp/>user<sp/>specified<sp/>test<sp/>property<sp/>which<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output<sp/>as<sp/>a<sp/>key/value<sp/>string<sp/>pair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>inherit<sp/>from<sp/>TestProperty<sp/>as<sp/>its<sp/>destructor<sp/>is<sp/>not<sp/>virtual.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486" refid="d0/d27/classtesting_1_1_test_property" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d0/d27/classtesting_1_1_test_property" kindref="compound">TestProperty</ref><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>C&apos;tor.<sp/><sp/>TestProperty<sp/>does<sp/>NOT<sp/>have<sp/>a<sp/>default<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Always<sp/>use<sp/>this<sp/>constructor<sp/>(with<sp/>parameters)<sp/>to<sp/>create<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TestProperty<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="d0/d27/classtesting_1_1_test_property_1a7477257eedaef74ffe84159333199b24" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d0/d27/classtesting_1_1_test_property_1a7477257eedaef74ffe84159333199b24" kindref="member">TestProperty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>a_key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>a_value)<sp/>:</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d27/classtesting_1_1_test_property_1a2434a1611d16a59c5df79a27f35c9135" kindref="member">key_</ref>(a_key),<sp/><ref refid="d0/d27/classtesting_1_1_test_property_1ad84db3d1db4de4af9935d2d361626bdb" kindref="member">value_</ref>(a_value)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>user<sp/>supplied<sp/>key.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496" refid="d0/d27/classtesting_1_1_test_property_1a632effa7314f67301c9442f7ac19ac06" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d0/d27/classtesting_1_1_test_property_1a632effa7314f67301c9442f7ac19ac06" kindref="member">key</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d27/classtesting_1_1_test_property_1a2434a1611d16a59c5df79a27f35c9135" kindref="member">key_</ref>.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>();</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>user<sp/>supplied<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501" refid="d0/d27/classtesting_1_1_test_property_1a8157d07e22fc254a2e845aa73e0ac33f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d0/d27/classtesting_1_1_test_property_1a8157d07e22fc254a2e845aa73e0ac33f" kindref="member">value</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d27/classtesting_1_1_test_property_1ad84db3d1db4de4af9935d2d361626bdb" kindref="member">value_</ref>.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>a<sp/>new<sp/>value,<sp/>overriding<sp/>the<sp/>one<sp/>supplied<sp/>in<sp/>the<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506" refid="d0/d27/classtesting_1_1_test_property_1a00ae2c5c5279ddf7209770fd0190142d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/d27/classtesting_1_1_test_property_1a00ae2c5c5279ddf7209770fd0190142d" kindref="member">SetValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>new_value)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d27/classtesting_1_1_test_property_1ad84db3d1db4de4af9935d2d361626bdb" kindref="member">value_</ref><sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>key<sp/>supplied<sp/>by<sp/>the<sp/>user.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512" refid="d0/d27/classtesting_1_1_test_property_1a2434a1611d16a59c5df79a27f35c9135" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/d27/classtesting_1_1_test_property_1a2434a1611d16a59c5df79a27f35c9135" kindref="member">key_</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>supplied<sp/>by<sp/>the<sp/>user.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514" refid="d0/d27/classtesting_1_1_test_property_1ad84db3d1db4de4af9935d2d361626bdb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/d27/classtesting_1_1_test_property_1ad84db3d1db4de4af9935d2d361626bdb" kindref="member">value_</ref>;</highlight></codeline>
<codeline lineno="515"><highlight class="normal">};</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>result<sp/>of<sp/>a<sp/>single<sp/>Test.<sp/><sp/>This<sp/>includes<sp/>a<sp/>list<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TestPartResults,<sp/>a<sp/>list<sp/>of<sp/>TestProperties,<sp/>a<sp/>count<sp/>of<sp/>how<sp/>many</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>death<sp/>tests<sp/>there<sp/>are<sp/>in<sp/>the<sp/>Test,<sp/>and<sp/>how<sp/>much<sp/>time<sp/>it<sp/>took<sp/>to<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TestResult<sp/>is<sp/>not<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523" refid="d1/d69/classtesting_1_1_test_result" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d1/d69/classtesting_1_1_test_result" kindref="compound">TestResult</ref><sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>empty<sp/>TestResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><ref refid="d1/d69/classtesting_1_1_test_result" kindref="compound">TestResult</ref>();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>D&apos;tor.<sp/><sp/>Do<sp/>not<sp/>inherit<sp/>from<sp/>TestResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>~<ref refid="d1/d69/classtesting_1_1_test_result" kindref="compound">TestResult</ref>();</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>test<sp/>parts.<sp/><sp/>This<sp/>is<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>successful<sp/>test<sp/>parts<sp/>and<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>test<sp/>parts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_part_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>the<sp/>test<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_property_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>passed<sp/>(i.e.<sp/>no<sp/>test<sp/>part<sp/>failed).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539" refid="d1/d69/classtesting_1_1_test_result_1aad2f13a7fb077e9e26c761dea838c160" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1aad2f13a7fb077e9e26c761dea838c160" kindref="member">Passed</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!Failed();<sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Failed()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>fatally<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasFatalFailure()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>has<sp/>a<sp/>non-fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasNonfatalFailure()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>elapsed<sp/>time,<sp/>in<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="d1/d69/classtesting_1_1_test_result_1afc30650e1ab3e777836e49831149f429" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1afc30650e1ab3e777836e49831149f429" kindref="member">elapsed_time</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elapsed_time_;<sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>i-th<sp/>test<sp/>part<sp/>result<sp/>among<sp/>all<sp/>the<sp/>results.<sp/>i<sp/>can<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>0<sp/>to<sp/>test_property_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>aborts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>GetTestPartResult(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>i-th<sp/>test<sp/>property.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test_property_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>aborts<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d27/classtesting_1_1_test_property" kindref="compound">TestProperty</ref>&amp;<sp/>GetTestProperty(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="564" refid="d1/d69/classtesting_1_1_test_result_1a4c49c2cdb6c328e6b709b4542f23de3c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>;</highlight></codeline>
<codeline lineno="565" refid="d1/d69/classtesting_1_1_test_result_1aff779e55b06adfa7c0088bd10253f0f0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>;</highlight></codeline>
<codeline lineno="566" refid="d1/d69/classtesting_1_1_test_result_1a832b4d233efee1a32feb0f4190b30d39" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>;</highlight></codeline>
<codeline lineno="567" refid="d1/d69/classtesting_1_1_test_result_1abae39633da9932847b41cb80efd62115" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d5/d5b/classtesting_1_1internal_1_1_default_global_test_part_result_reporter" kindref="compound">internal::DefaultGlobalTestPartResultReporter</ref>;</highlight></codeline>
<codeline lineno="568" refid="d1/d69/classtesting_1_1_test_result_1adf5553cae6aea6f8648d47e299237e34" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">internal::ExecDeathTest;</highlight></codeline>
<codeline lineno="569" refid="d1/d69/classtesting_1_1_test_result_1ae762da04e74a0d3b0daded3c5bd4a8e8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/d42/classtesting_1_1internal_1_1_test_result_accessor" kindref="compound">internal::TestResultAccessor</ref>;</highlight></codeline>
<codeline lineno="570" refid="d1/d69/classtesting_1_1_test_result_1acc0a5e7573fd6ae7ad1878613bb86853" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">internal::UnitTestImpl</ref>;</highlight></codeline>
<codeline lineno="571" refid="d1/d69/classtesting_1_1_test_result_1a6aeedc04a0590fcc1b3c5f687dbb0f9f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">internal::WindowsDeathTest;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>vector<sp/>of<sp/>TestPartResults.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574" refid="d1/d69/classtesting_1_1_test_result_1a76bc658c5f7aec71d10eb6f62e2ef878" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;TestPartResult&gt;</ref>&amp;<sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a76bc658c5f7aec71d10eb6f62e2ef878" kindref="member">test_part_results</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_part_results_;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>vector<sp/>of<sp/>TestProperties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579" refid="d1/d69/classtesting_1_1_test_result_1a9e66881a8dd13ceeaa0bd2e99eb2f84d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;TestProperty&gt;</ref>&amp;<sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a9e66881a8dd13ceeaa0bd2e99eb2f84d" kindref="member">test_properties</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_properties_;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>elapsed<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="d1/d69/classtesting_1_1_test_result_1a0ca28ac81670a01fff5c6660e78065bb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a0ca28ac81670a01fff5c6660e78065bb" kindref="member">set_elapsed_time</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref><sp/>elapsed)<sp/>{<sp/>elapsed_time_<sp/>=<sp/>elapsed;<sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>test<sp/>property<sp/>to<sp/>the<sp/>list.<sp/>The<sp/>property<sp/>is<sp/>validated<sp/>and<sp/>may<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>non-fatal<sp/>failure<sp/>if<sp/>invalid<sp/>(e.g.,<sp/>if<sp/>it<sp/>conflicts<sp/>with<sp/>reserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>key<sp/>names).<sp/>If<sp/>a<sp/>property<sp/>is<sp/>already<sp/>recorded<sp/>for<sp/>the<sp/>same<sp/>key,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>will<sp/>be<sp/>updated,<sp/>rather<sp/>than<sp/>storing<sp/>multiple<sp/>values<sp/>for<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>key.<sp/><sp/>xml_element<sp/>specifies<sp/>the<sp/>element<sp/>for<sp/>which<sp/>the<sp/>property<sp/>is<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>recorded<sp/>and<sp/>is<sp/>used<sp/>for<sp/>validation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecordProperty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>xml_element,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d27/classtesting_1_1_test_property" kindref="compound">TestProperty</ref>&amp;<sp/>test_property);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>failure<sp/>if<sp/>the<sp/>key<sp/>is<sp/>a<sp/>reserved<sp/>attribute<sp/>of<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>testcase<sp/>tags.<sp/><sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>property<sp/>is<sp/>valid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(russr):<sp/>Validate<sp/>attribute<sp/>names<sp/>are<sp/>legal<sp/>and<sp/>human<sp/>readable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ValidateTestProperty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>xml_element,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d27/classtesting_1_1_test_property" kindref="compound">TestProperty</ref>&amp;<sp/>test_property);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>test<sp/>part<sp/>result<sp/>to<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddTestPartResult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>test_part_result);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>death<sp/>test<sp/>count.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605" refid="d1/d69/classtesting_1_1_test_result_1a4271dd8393de05d407985b6ecd5aa5fc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a4271dd8393de05d407985b6ecd5aa5fc" kindref="member">death_test_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>death_test_count_;<sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Increments<sp/>the<sp/>death<sp/>test<sp/>count,<sp/>returning<sp/>the<sp/>new<sp/>count.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608" refid="d1/d69/classtesting_1_1_test_result_1ab32dced99547d83699c327dc67d45f96" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1ab32dced99547d83699c327dc67d45f96" kindref="member">increment_death_test_count</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>++death_test_count_;<sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clears<sp/>the<sp/>test<sp/>part<sp/>results.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ClearTestPartResults();</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clears<sp/>the<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Clear();</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Protects<sp/>mutable<sp/>state<sp/>of<sp/>the<sp/>property<sp/>vector<sp/>and<sp/>of<sp/>owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>properties,<sp/>whose<sp/>values<sp/>may<sp/>be<sp/>updated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618" refid="d1/d69/classtesting_1_1_test_result_1ae28fd07e38c889d9a31c99a2c9bfccc2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d8/d77/classtesting_1_1internal_1_1_mutex" kindref="compound">internal::Mutex</ref><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1ae28fd07e38c889d9a31c99a2c9bfccc2" kindref="member">test_properites_mutex_</ref>;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>of<sp/>TestPartResults</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621" refid="d1/d69/classtesting_1_1_test_result_1a85f429b80a248eba0578516afbb38a23" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;TestPartResult&gt;</ref><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a85f429b80a248eba0578516afbb38a23" kindref="member">test_part_results_</ref>;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>of<sp/>TestProperties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623" refid="d1/d69/classtesting_1_1_test_result_1a928efe9e715fd5ec9e84c206fe051d16" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;TestProperty&gt;</ref><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a928efe9e715fd5ec9e84c206fe051d16" kindref="member">test_properties_</ref>;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Running<sp/>count<sp/>of<sp/>death<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625" refid="d1/d69/classtesting_1_1_test_result_1aa8b0cbfd87e7104bed9e7713972d0f8f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1aa8b0cbfd87e7104bed9e7713972d0f8f" kindref="member">death_test_count_</ref>;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>elapsed<sp/>time,<sp/>in<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627" refid="d1/d69/classtesting_1_1_test_result_1a97b9c166ebee95ae4c9ef26cf3155617" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a97b9c166ebee95ae4c9ef26cf3155617" kindref="member">elapsed_time_</ref>;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>disallow<sp/>copying<sp/>TestResult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630" refid="d1/d69/classtesting_1_1_test_result_1a7efb1b6292dd7621bbc29cee95b17f4c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d1/d69/classtesting_1_1_test_result_1a7efb1b6292dd7621bbc29cee95b17f4c" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="d1/d69/classtesting_1_1_test_result" kindref="compound">TestResult</ref>);</highlight></codeline>
<codeline lineno="631"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>TestResult</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>TestInfo<sp/>object<sp/>stores<sp/>the<sp/>following<sp/>information<sp/>about<sp/>a<sp/>test:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Test<sp/>case<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Test<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Whether<sp/>the<sp/>test<sp/>should<sp/>be<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>A<sp/>function<sp/>pointer<sp/>that<sp/>creates<sp/>the<sp/>test<sp/>object<sp/>when<sp/>invoked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Test<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>constructor<sp/>of<sp/>TestInfo<sp/>registers<sp/>itself<sp/>with<sp/>the<sp/>UnitTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="comment">//<sp/>singleton<sp/>such<sp/>that<sp/>the<sp/>RUN_ALL_TESTS()<sp/>macro<sp/>knows<sp/>which<sp/>tests<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="comment">//<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644" refid="d1/d79/classtesting_1_1_test_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Destructs<sp/>a<sp/>TestInfo<sp/>object.<sp/><sp/>This<sp/>function<sp/>is<sp/>not<sp/>virtual,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>inherit<sp/>from<sp/>TestInfo.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>~<ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>();</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>test<sp/>case<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651" refid="d1/d79/classtesting_1_1_test_info_1a36f45ddad070bbd6e8f06d3923934dba" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d1/d79/classtesting_1_1_test_info_1a36f45ddad070bbd6e8f06d3923934dba" kindref="member">test_case_name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_case_name_.c_str();<sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>test<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654" refid="d1/d79/classtesting_1_1_test_info_1a8c4da4b626748f746b1f9fdbe885edfb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d1/d79/classtesting_1_1_test_info_1a8c4da4b626748f746b1f9fdbe885edfb" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name_.c_str();<sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>name<sp/>of<sp/>the<sp/>parameter<sp/>type,<sp/>or<sp/>NULL<sp/>if<sp/>this<sp/>is<sp/>not<sp/>a<sp/>typed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>a<sp/>type-parameterized<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658" refid="d1/d79/classtesting_1_1_test_info_1a699abee960ad215748fa6408da345f84" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d1/d79/classtesting_1_1_test_info_1a699abee960ad215748fa6408da345f84" kindref="member">type_param</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_param_.get()<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_param_-&gt;c_str();</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>text<sp/>representation<sp/>of<sp/>the<sp/>value<sp/>parameter,<sp/>or<sp/>NULL<sp/>if<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>a<sp/>value-parameterized<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666" refid="d1/d79/classtesting_1_1_test_info_1aaeb9de7e7f182d99fda5b070b1c1f677" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d1/d79/classtesting_1_1_test_info_1aaeb9de7e7f182d99fda5b070b1c1f677" kindref="member">value_param</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_param_.get()<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_param_-&gt;c_str();</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>file<sp/>name<sp/>where<sp/>this<sp/>test<sp/>is<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673" refid="d1/d79/classtesting_1_1_test_info_1a52b0302c5f6eaab4acdc3c95e392db25" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d1/d79/classtesting_1_1_test_info_1a52b0302c5f6eaab4acdc3c95e392db25" kindref="member">file</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>location_.file.c_str();<sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>line<sp/>where<sp/>this<sp/>test<sp/>is<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676" refid="d1/d79/classtesting_1_1_test_info_1a9834cd1b21362a1c8b503e9eab45c406" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1a9834cd1b21362a1c8b503e9eab45c406" kindref="member">line</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>location_.line;<sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>this<sp/>test<sp/>should<sp/>run,<sp/>that<sp/>is<sp/>if<sp/>the<sp/>test<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>disabled<sp/>(or<sp/>it<sp/>is<sp/>disabled<sp/>but<sp/>the<sp/>also_run_disabled_tests<sp/>flag<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>been<sp/>specified)<sp/>and<sp/>its<sp/>full<sp/>name<sp/>matches<sp/>the<sp/>user-specified<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>filter<sp/>the<sp/>tests<sp/>by<sp/>their<sp/>full<sp/>names.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>full<sp/>name<sp/>of<sp/>a<sp/>test<sp/>Bar<sp/>in<sp/>test<sp/>case<sp/>Foo<sp/>is<sp/>defined<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Foo.Bar&quot;.<sp/><sp/>Only<sp/>the<sp/>tests<sp/>that<sp/>match<sp/>the<sp/>filter<sp/>will<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>filter<sp/>is<sp/>a<sp/>colon-separated<sp/>list<sp/>of<sp/>glob<sp/>(not<sp/>regex)<sp/>patterns,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optionally<sp/>followed<sp/>by<sp/>a<sp/>&apos;-&apos;<sp/>and<sp/>a<sp/>colon-separated<sp/>list<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>negative<sp/>patterns<sp/>(tests<sp/>to<sp/>exclude).<sp/><sp/>A<sp/>test<sp/>is<sp/>run<sp/>if<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matches<sp/>one<sp/>of<sp/>the<sp/>positive<sp/>patterns<sp/>and<sp/>does<sp/>not<sp/>match<sp/>any<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>negative<sp/>patterns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>*A*:Foo.*<sp/>is<sp/>a<sp/>filter<sp/>that<sp/>matches<sp/>any<sp/>string<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>contains<sp/>the<sp/>character<sp/>&apos;A&apos;<sp/>or<sp/>starts<sp/>with<sp/>&quot;Foo.&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694" refid="d1/d79/classtesting_1_1_test_info_1a80b7dba9dc7b6b640c8ba46897c8e181" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1a80b7dba9dc7b6b640c8ba46897c8e181" kindref="member">should_run</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>should_run_;<sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>test<sp/>will<sp/>appear<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697" refid="d1/d79/classtesting_1_1_test_info_1a2bda7f5b5e6c4149215ee073f7ec6e7b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1a2bda7f5b5e6c4149215ee073f7ec6e7b" kindref="member">is_reportable</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>now,<sp/>the<sp/>XML<sp/>report<sp/>includes<sp/>all<sp/>tests<sp/>matching<sp/>the<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>future,<sp/>we<sp/>may<sp/>trim<sp/>tests<sp/>that<sp/>are<sp/>excluded<sp/>because<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sharding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matches_filter_;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>the<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705" refid="d1/d79/classtesting_1_1_test_info_1af9eee0a44c398bf857c0ab4f961c2bd7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result" kindref="compound">TestResult</ref>*<sp/><ref refid="d1/d79/classtesting_1_1_test_info_1af9eee0a44c398bf857c0ab4f961c2bd7" kindref="member">result</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;result_;<sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">internal::DefaultDeathTestFactory;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711" refid="d1/d79/classtesting_1_1_test_info_1a5b78b1c2e1fa07ffed92da365593eaa4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="df/d69/classtesting_1_1_test" kindref="compound">Test</ref>;</highlight></codeline>
<codeline lineno="712" refid="d1/d79/classtesting_1_1_test_info_1aff779e55b06adfa7c0088bd10253f0f0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>;</highlight></codeline>
<codeline lineno="713" refid="d1/d79/classtesting_1_1_test_info_1acc0a5e7573fd6ae7ad1878613bb86853" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">internal::UnitTestImpl</ref>;</highlight></codeline>
<codeline lineno="714" refid="d1/d79/classtesting_1_1_test_info_1adc037d188dab349a94868991955c9cd4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">internal::StreamingListenerTest;</highlight></codeline>
<codeline lineno="715" refid="d1/d79/classtesting_1_1_test_info_1ab6f3c269fc46c9c1c0f81b3431240138" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a616199437436015fde76f09d80c6d5e7" kindref="member">internal::MakeAndRegisterTestInfo</ref>(</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_name,</highlight></codeline>
<codeline lineno="717" refid="d1/d79/classtesting_1_1_test_info_1a8f8f80d37794cde9472343e4487ba3eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,</highlight></codeline>
<codeline lineno="718" refid="d1/d79/classtesting_1_1_test_info_1af7c235854a4f2716ffe707d712673772" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>type_param,</highlight></codeline>
<codeline lineno="719" refid="d1/d79/classtesting_1_1_test_info_1af89b13e99f07353bc39ca99ce8086553" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value_param,</highlight></codeline>
<codeline lineno="720" refid="d1/d79/classtesting_1_1_test_info_1a044b30d8201075e1768dfa54a41b6cec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/d69/structtesting_1_1internal_1_1_code_location" kindref="compound">internal::CodeLocation</ref><sp/>code_location,</highlight></codeline>
<codeline lineno="721" refid="d1/d79/classtesting_1_1_test_info_1a60bc411a1fc7ef1688ffbb4d2cb14dca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac535957ba2fde769ce297f9b23db057d" kindref="member">internal::TypeId</ref><sp/>fixture_class_id,</highlight></codeline>
<codeline lineno="722" refid="d1/d79/classtesting_1_1_test_info_1abe7404e708c56f0506bb1c5d606198b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa56a971a29fe8459940b46db38d3000f" kindref="member">Test::SetUpTestCaseFunc</ref><sp/>set_up_tc,</highlight></codeline>
<codeline lineno="723" refid="d1/d79/classtesting_1_1_test_info_1ad28d1fececc3f6e1c20d8663f1b35e06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a7b4a46c5927d126f2df2d955d98e3b8a" kindref="member">Test::TearDownTestCaseFunc</ref><sp/>tear_down_tc,</highlight></codeline>
<codeline lineno="724" refid="d1/d79/classtesting_1_1_test_info_1ad7d58637c850478235d4ddeb9119c0f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base" kindref="compound">internal::TestFactoryBase</ref>*<sp/>factory);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>TestInfo<sp/>object.<sp/>The<sp/>newly<sp/>constructed<sp/>instance<sp/>assumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ownership<sp/>of<sp/>the<sp/>factory<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>test_case_name,</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_type_param,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL<sp/>if<sp/>not<sp/>a<sp/>type-parameterized<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_value_param,<sp/><sp/></highlight><highlight class="comment">//<sp/>NULL<sp/>if<sp/>not<sp/>a<sp/>value-parameterized<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/d69/structtesting_1_1internal_1_1_code_location" kindref="compound">internal::CodeLocation</ref><sp/>a_code_location,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac535957ba2fde769ce297f9b23db057d" kindref="member">internal::TypeId</ref><sp/>fixture_class_id,</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base" kindref="compound">internal::TestFactoryBase</ref>*<sp/>factory);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Increments<sp/>the<sp/>number<sp/>of<sp/>death<sp/>tests<sp/>encountered<sp/>in<sp/>this<sp/>test<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>far.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738" refid="d1/d79/classtesting_1_1_test_info_1ab32dced99547d83699c327dc67d45f96" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1ab32dced99547d83699c327dc67d45f96" kindref="member">increment_death_test_count</ref>()<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result_.increment_death_test_count();</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>the<sp/>test<sp/>object,<sp/>runs<sp/>it,<sp/>records<sp/>its<sp/>result,<sp/>and<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>deletes<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run();</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="d1/d79/classtesting_1_1_test_info_1a2230ddd76d3cfef898ecb4f8fb722f35" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1a2230ddd76d3cfef898ecb4f8fb722f35" kindref="member">ClearTestResult</ref>(<ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1afb2ec6cf0ab3f3e57bc2304e0df97c29" kindref="member">result_</ref>.<ref refid="d1/d69/classtesting_1_1_test_result_1aa71d36872f416feaa853788a7a7a7ef8" kindref="member">Clear</ref>();</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>fields<sp/>are<sp/>immutable<sp/>properties<sp/>of<sp/>the<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751" refid="d1/d79/classtesting_1_1_test_info_1a01e1936a2c4b36dcf45ea5697f75a335" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1a01e1936a2c4b36dcf45ea5697f75a335" kindref="member">test_case_name_</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>case<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752" refid="d1/d79/classtesting_1_1_test_info_1a723d30392e2c4f36252de0528a1b246d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1a723d30392e2c4f36252de0528a1b246d" kindref="member">name_</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Name<sp/>of<sp/>the<sp/>parameter<sp/>type,<sp/>or<sp/>NULL<sp/>if<sp/>this<sp/>is<sp/>not<sp/>a<sp/>typed<sp/>or<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>type-parameterized<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755" refid="d1/d79/classtesting_1_1_test_info_1ae31ac69c75bb42f47c8d6a7cde4937c6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d6a/classtesting_1_1internal_1_1scoped__ptr" kindref="compound">internal::scoped_ptr&lt;const ::std::string&gt;</ref><sp/>type_param_;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Text<sp/>representation<sp/>of<sp/>the<sp/>value<sp/>parameter,<sp/>or<sp/>NULL<sp/>if<sp/>this<sp/>is<sp/>not<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value-parameterized<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758" refid="d1/d79/classtesting_1_1_test_info_1acb405321a5c6ae16fef21290649f2666" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d6a/classtesting_1_1internal_1_1scoped__ptr" kindref="compound">internal::scoped_ptr&lt;const ::std::string&gt;</ref><sp/>value_param_;</highlight></codeline>
<codeline lineno="759" refid="d1/d79/classtesting_1_1_test_info_1af2e1ae4069955510c0f07853a45ce22a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d7/d69/structtesting_1_1internal_1_1_code_location" kindref="compound">internal::CodeLocation</ref><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1af2e1ae4069955510c0f07853a45ce22a" kindref="member">location_</ref>;</highlight></codeline>
<codeline lineno="760" refid="d1/d79/classtesting_1_1_test_info_1aa6f626203c740423c9dfcbbe727f90b4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ac535957ba2fde769ce297f9b23db057d" kindref="member">internal::TypeId</ref><sp/>fixture_class_id_;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID<sp/>of<sp/>the<sp/>test<sp/>fixture<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761" refid="d1/d79/classtesting_1_1_test_info_1ade0e3d581d82aaeaf7263d575564cb40" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1ade0e3d581d82aaeaf7263d575564cb40" kindref="member">should_run_</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>iff<sp/>this<sp/>test<sp/>should<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762" refid="d1/d79/classtesting_1_1_test_info_1a461785b0a586f2fa2c146f1599293015" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1a461785b0a586f2fa2c146f1599293015" kindref="member">is_disabled_</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>iff<sp/>this<sp/>test<sp/>is<sp/>disabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763" refid="d1/d79/classtesting_1_1_test_info_1aff50a5d6360f8193a19682c01593b42b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1aff50a5d6360f8193a19682c01593b42b" kindref="member">matches_filter_</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>if<sp/>this<sp/>test<sp/>matches<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>user-specified<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765" refid="d1/d79/classtesting_1_1_test_info_1a5350444f72fd50e09ca9807dbbd20d39" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d8/d8b/classtesting_1_1internal_1_1_test_factory_base" kindref="compound">internal::TestFactoryBase</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1a5350444f72fd50e09ca9807dbbd20d39" kindref="member">factory_</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>factory<sp/>that<sp/>creates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>test<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>field<sp/>is<sp/>mutable<sp/>and<sp/>needs<sp/>to<sp/>be<sp/>reset<sp/>before<sp/>running<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>for<sp/>the<sp/>second<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770" refid="d1/d79/classtesting_1_1_test_info_1afb2ec6cf0ab3f3e57bc2304e0df97c29" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d1/d69/classtesting_1_1_test_result" kindref="compound">TestResult</ref><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1afb2ec6cf0ab3f3e57bc2304e0df97c29" kindref="member">result_</ref>;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772" refid="d1/d79/classtesting_1_1_test_info_1a93f1c5c860fc105e82b2bde1468e126c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d1/d79/classtesting_1_1_test_info_1a93f1c5c860fc105e82b2bde1468e126c" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>);</highlight></codeline>
<codeline lineno="773"><highlight class="normal">};</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>case,<sp/>which<sp/>consists<sp/>of<sp/>a<sp/>vector<sp/>of<sp/>TestInfos.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TestCase<sp/>is<sp/>not<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778" refid="d0/dfa/classtesting_1_1_test_case" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>TestCase<sp/>with<sp/>the<sp/>given<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TestCase<sp/>does<sp/>NOT<sp/>have<sp/>a<sp/>default<sp/>constructor.<sp/><sp/>Always<sp/>use<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>constructor<sp/>to<sp/>create<sp/>a<sp/>TestCase<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Arguments:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>of<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>a_type_param:<sp/>the<sp/>name<sp/>of<sp/>the<sp/>test&apos;s<sp/>type<sp/>parameter,<sp/>or<sp/>NULL<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>is<sp/>not<sp/>a<sp/>type-parameterized<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>set_up_tc:<sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>sets<sp/>up<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>tear_down_tc:<sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>tears<sp/>down<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_type_param,</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa56a971a29fe8459940b46db38d3000f" kindref="member">Test::SetUpTestCaseFunc</ref><sp/>set_up_tc,</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a7b4a46c5927d126f2df2d955d98e3b8a" kindref="member">Test::TearDownTestCaseFunc</ref><sp/>tear_down_tc);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Destructor<sp/>of<sp/>TestCase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>();</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>name<sp/>of<sp/>the<sp/>TestCase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800" refid="d0/dfa/classtesting_1_1_test_case_1a8c4da4b626748f746b1f9fdbe885edfb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a8c4da4b626748f746b1f9fdbe885edfb" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name_.c_str();<sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>name<sp/>of<sp/>the<sp/>parameter<sp/>type,<sp/>or<sp/>NULL<sp/>if<sp/>this<sp/>is<sp/>not<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>type-parameterized<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804" refid="d0/dfa/classtesting_1_1_test_case_1a699abee960ad215748fa6408da345f84" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a699abee960ad215748fa6408da345f84" kindref="member">type_param</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_param_.get()<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_param_-&gt;c_str();</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>any<sp/>test<sp/>in<sp/>this<sp/>test<sp/>case<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811" refid="d0/dfa/classtesting_1_1_test_case_1a80b7dba9dc7b6b640c8ba46897c8e181" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a80b7dba9dc7b6b640c8ba46897c8e181" kindref="member">should_run</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>should_run_;<sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>successful<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>successful_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failed_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests<sp/>that<sp/>will<sp/>be<sp/>reported<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reportable_disabled_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>disabled_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>to<sp/>be<sp/>printed<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reportable_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_to_run_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>case<sp/>passed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835" refid="d0/dfa/classtesting_1_1_test_case_1aad2f13a7fb077e9e26c761dea838c160" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1aad2f13a7fb077e9e26c761dea838c160" kindref="member">Passed</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!Failed();<sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>case<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838" refid="d0/dfa/classtesting_1_1_test_case_1a365c0e4f912940e9cf7d844d06986445" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a365c0e4f912940e9cf7d844d06986445" kindref="member">Failed</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failed_test_count()<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>elapsed<sp/>time,<sp/>in<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841" refid="d0/dfa/classtesting_1_1_test_case_1afc30650e1ab3e777836e49831149f429" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1afc30650e1ab3e777836e49831149f429" kindref="member">elapsed_time</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elapsed_time_;<sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>i-th<sp/>test<sp/>among<sp/>all<sp/>the<sp/>tests.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>total_test_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/>GetTestInfo(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestResult<sp/>that<sp/>holds<sp/>test<sp/>properties<sp/>recorded<sp/>during</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>execution<sp/>of<sp/>SetUpTestCase<sp/>and<sp/>TearDownTestCase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849" refid="d0/dfa/classtesting_1_1_test_case_1a0f8738e1646472a8dd4061aff7b58d6b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result" kindref="compound">TestResult</ref>&amp;<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a0f8738e1646472a8dd4061aff7b58d6b" kindref="member">ad_hoc_test_result</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ad_hoc_test_result_;<sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="852" refid="d0/dfa/classtesting_1_1_test_case_1a5b78b1c2e1fa07ffed92da365593eaa4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="df/d69/classtesting_1_1_test" kindref="compound">Test</ref>;</highlight></codeline>
<codeline lineno="853" refid="d0/dfa/classtesting_1_1_test_case_1acc0a5e7573fd6ae7ad1878613bb86853" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">internal::UnitTestImpl</ref>;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>(mutable)<sp/>vector<sp/>of<sp/>TestInfos<sp/>in<sp/>this<sp/>TestCase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856" refid="d0/dfa/classtesting_1_1_test_case_1aaa94fcfd7f8161d39504f535fa995c2d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;TestInfo*&gt;</ref>&amp;<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1aaa94fcfd7f8161d39504f535fa995c2d" kindref="member">test_info_list</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_info_list_;<sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>(immutable)<sp/>vector<sp/>of<sp/>TestInfos<sp/>in<sp/>this<sp/>TestCase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859" refid="d0/dfa/classtesting_1_1_test_case_1a62861b2c9a27f75d621f343a17cb8e61" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;TestInfo*&gt;</ref>&amp;<sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a62861b2c9a27f75d621f343a17cb8e61" kindref="member">test_info_list</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_info_list_;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>i-th<sp/>test<sp/>among<sp/>all<sp/>the<sp/>tests.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>total_test_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/>GetMutableTestInfo(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>should_run<sp/>member.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868" refid="d0/dfa/classtesting_1_1_test_case_1ab3f3dbe8ef52473f912aef44d04193d5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1ab3f3dbe8ef52473f912aef44d04193d5" kindref="member">set_should_run</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should)<sp/>{<sp/>should_run_<sp/>=<sp/>should;<sp/>}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>TestInfo<sp/>to<sp/>this<sp/>test<sp/>case.<sp/><sp/>Will<sp/>delete<sp/>the<sp/>TestInfo<sp/>upon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>destruction<sp/>of<sp/>the<sp/>TestCase<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddTestInfo(<ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref><sp/>*<sp/>test_info);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clears<sp/>the<sp/>results<sp/>of<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ClearResult();</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clears<sp/>the<sp/>results<sp/>of<sp/>all<sp/>tests<sp/>in<sp/>the<sp/>given<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878" refid="d0/dfa/classtesting_1_1_test_case_1ad1d1fd605ca6c25a6f71b40c5216a8e0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1ad1d1fd605ca6c25a6f71b40c5216a8e0" kindref="member">ClearTestCaseResult</ref>(<ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/>test_case)<sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>test_case-&gt;<ref refid="d0/dfa/classtesting_1_1_test_case_1a566dca6156477ed747aa781f341d13d5" kindref="member">ClearResult</ref>();</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>every<sp/>test<sp/>in<sp/>this<sp/>TestCase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Run();</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>SetUpTestCase()<sp/>for<sp/>this<sp/>TestCase.<sp/><sp/>This<sp/>wrapper<sp/>is<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>catching<sp/>exceptions<sp/>thrown<sp/>from<sp/>SetUpTestCase().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887" refid="d0/dfa/classtesting_1_1_test_case_1a0a9185d58f27f485506f4c0dedaab124" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a0a9185d58f27f485506f4c0dedaab124" kindref="member">RunSetUpTestCase</ref>()<sp/>{<sp/>(*set_up_tc_)();<sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>TearDownTestCase()<sp/>for<sp/>this<sp/>TestCase.<sp/><sp/>This<sp/>wrapper<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>needed<sp/>for<sp/>catching<sp/>exceptions<sp/>thrown<sp/>from<sp/>TearDownTestCase().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891" refid="d0/dfa/classtesting_1_1_test_case_1a68c2b3492b96c37271344d40a79caa84" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a68c2b3492b96c37271344d40a79caa84" kindref="member">RunTearDownTestCase</ref>()<sp/>{<sp/>(*tear_down_tc_)();<sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>test<sp/>passed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894" refid="d0/dfa/classtesting_1_1_test_case_1a90cec168fde1398dfc3b1db6e1a797a4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a90cec168fde1398dfc3b1db6e1a797a4" kindref="member">TestPassed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1a80b7dba9dc7b6b640c8ba46897c8e181" kindref="member">should_run</ref>()<sp/>&amp;&amp;<sp/>test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1af9eee0a44c398bf857c0ab4f961c2bd7" kindref="member">result</ref>()-&gt;<ref refid="d1/d69/classtesting_1_1_test_result_1aad2f13a7fb077e9e26c761dea838c160" kindref="member">Passed</ref>();</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>test<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899" refid="d0/dfa/classtesting_1_1_test_case_1a34e1cd8d648d9df54eedbb17f02587a4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a34e1cd8d648d9df54eedbb17f02587a4" kindref="member">TestFailed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1a80b7dba9dc7b6b640c8ba46897c8e181" kindref="member">should_run</ref>()<sp/>&amp;&amp;<sp/>test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1af9eee0a44c398bf857c0ab4f961c2bd7" kindref="member">result</ref>()-&gt;<ref refid="d1/d69/classtesting_1_1_test_result_1a365c0e4f912940e9cf7d844d06986445" kindref="member">Failed</ref>();</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>is<sp/>disabled<sp/>and<sp/>will<sp/>be<sp/>reported<sp/>in<sp/>the<sp/>XML</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905" refid="d0/dfa/classtesting_1_1_test_case_1aee5d98a0807fdd67250534a4b491e3d0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1aee5d98a0807fdd67250534a4b491e3d0" kindref="member">TestReportableDisabled</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1a2bda7f5b5e6c4149215ee073f7ec6e7b" kindref="member">is_reportable</ref>()<sp/>&amp;&amp;<sp/>test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1a461785b0a586f2fa2c146f1599293015" kindref="member">is_disabled_</ref>;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>test<sp/>is<sp/>disabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910" refid="d0/dfa/classtesting_1_1_test_case_1a8cab09cdd57af464aec68c4dc9f45e96" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a8cab09cdd57af464aec68c4dc9f45e96" kindref="member">TestDisabled</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1a461785b0a586f2fa2c146f1599293015" kindref="member">is_disabled_</ref>;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>test<sp/>will<sp/>appear<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915" refid="d0/dfa/classtesting_1_1_test_case_1a9862daa78e71563f6f5785afc36ca972" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a9862daa78e71563f6f5785afc36ca972" kindref="member">TestReportable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1a2bda7f5b5e6c4149215ee073f7ec6e7b" kindref="member">is_reportable</ref>();</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>given<sp/>test<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920" refid="d0/dfa/classtesting_1_1_test_case_1a8fdbfd24fea404421eb50c2450382e1d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a8fdbfd24fea404421eb50c2450382e1d" kindref="member">ShouldRunTest</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/>test_info)<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_info-&gt;<ref refid="d1/d79/classtesting_1_1_test_info_1a80b7dba9dc7b6b640c8ba46897c8e181" kindref="member">should_run</ref>();</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shuffles<sp/>the<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShuffleTests(<ref refid="db/da2/classtesting_1_1internal_1_1_random" kindref="compound">internal::Random</ref>*<sp/>random);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>test<sp/>order<sp/>to<sp/>before<sp/>the<sp/>first<sp/>shuffle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnshuffleTests();</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Name<sp/>of<sp/>the<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931" refid="d0/dfa/classtesting_1_1_test_case_1a4d739cc5d335052eb9f5b2ca559b81d1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Name<sp/>of<sp/>the<sp/>parameter<sp/>type,<sp/>or<sp/>NULL<sp/>if<sp/>this<sp/>is<sp/>not<sp/>a<sp/>typed<sp/>or<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>type-parameterized<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934" refid="d0/dfa/classtesting_1_1_test_case_1ab6f3c269fc46c9c1c0f81b3431240138" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d6a/classtesting_1_1internal_1_1scoped__ptr" kindref="compound">internal::scoped_ptr&lt;const ::std::string&gt;</ref><sp/>type_param_;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>of<sp/>TestInfos<sp/>in<sp/>their<sp/>original<sp/>order.<sp/><sp/>It<sp/>owns<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>elements<sp/>in<sp/>the<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937" refid="d0/dfa/classtesting_1_1_test_case_1a4d199a11867ccd8361fadf635dbcfa74" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;TestInfo*&gt;</ref><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a4d199a11867ccd8361fadf635dbcfa74" kindref="member">test_info_list_</ref>;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Provides<sp/>a<sp/>level<sp/>of<sp/>indirection<sp/>for<sp/>the<sp/>test<sp/>list<sp/>to<sp/>allow<sp/>easy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>shuffling<sp/>and<sp/>restoring<sp/>the<sp/>test<sp/>order.<sp/><sp/>The<sp/>i-th<sp/>element<sp/>in<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>vector<sp/>is<sp/>the<sp/>index<sp/>of<sp/>the<sp/>i-th<sp/>test<sp/>in<sp/>the<sp/>shuffled<sp/>test<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941" refid="d0/dfa/classtesting_1_1_test_case_1afc1c050e38b1462e084907bfbac4d480" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;int&gt;</ref><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1afc1c050e38b1462e084907bfbac4d480" kindref="member">test_indices_</ref>;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>sets<sp/>up<sp/>the<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943" refid="d0/dfa/classtesting_1_1_test_case_1a168acfe04861100ab0d0175d14b1fce7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa56a971a29fe8459940b46db38d3000f" kindref="member">Test::SetUpTestCaseFunc</ref><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a168acfe04861100ab0d0175d14b1fce7" kindref="member">set_up_tc_</ref>;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>tears<sp/>down<sp/>the<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945" refid="d0/dfa/classtesting_1_1_test_case_1a152e0eba7294d5301d205822b0eae136" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a7b4a46c5927d126f2df2d955d98e3b8a" kindref="member">Test::TearDownTestCaseFunc</ref><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a152e0eba7294d5301d205822b0eae136" kindref="member">tear_down_tc_</ref>;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>iff<sp/>any<sp/>test<sp/>in<sp/>this<sp/>test<sp/>case<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947" refid="d0/dfa/classtesting_1_1_test_case_1ade0e3d581d82aaeaf7263d575564cb40" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1ade0e3d581d82aaeaf7263d575564cb40" kindref="member">should_run_</ref>;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Elapsed<sp/>time,<sp/>in<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949" refid="d0/dfa/classtesting_1_1_test_case_1a97b9c166ebee95ae4c9ef26cf3155617" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a97b9c166ebee95ae4c9ef26cf3155617" kindref="member">elapsed_time_</ref>;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Holds<sp/>test<sp/>properties<sp/>recorded<sp/>during<sp/>execution<sp/>of<sp/>SetUpTestCase<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TearDownTestCase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952" refid="d0/dfa/classtesting_1_1_test_case_1ae5fbed6752ae31d54b7db28c8a84df0a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d1/d69/classtesting_1_1_test_result" kindref="compound">TestResult</ref><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1ae5fbed6752ae31d54b7db28c8a84df0a" kindref="member">ad_hoc_test_result_</ref>;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>disallow<sp/>copying<sp/>TestCases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955" refid="d0/dfa/classtesting_1_1_test_case_1a589179a7edfbdc3809f75a5bd7090dee" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d0/dfa/classtesting_1_1_test_case_1a589179a7edfbdc3809f75a5bd7090dee" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>);</highlight></codeline>
<codeline lineno="956"><highlight class="normal">};</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>Environment<sp/>object<sp/>is<sp/>capable<sp/>of<sp/>setting<sp/>up<sp/>and<sp/>tearing<sp/>down<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="comment">//<sp/>environment.<sp/><sp/>You<sp/>should<sp/>subclass<sp/>this<sp/>to<sp/>define<sp/>your<sp/>own</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="comment">//<sp/>environment(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>Environment<sp/>object<sp/>does<sp/>the<sp/>set-up<sp/>and<sp/>tear-down<sp/>in<sp/>virtual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="comment">//<sp/>methods<sp/>SetUp()<sp/>and<sp/>TearDown()<sp/>instead<sp/>of<sp/>the<sp/>constructor<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="comment">//<sp/>destructor,<sp/>as:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>You<sp/>cannot<sp/>safely<sp/>throw<sp/>from<sp/>a<sp/>destructor.<sp/><sp/>This<sp/>is<sp/>a<sp/>problem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>in<sp/>some<sp/>cases<sp/>Google<sp/>Test<sp/>is<sp/>used<sp/>where<sp/>exceptions<sp/>are<sp/>enabled,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>we<sp/>may<sp/>want<sp/>to<sp/>implement<sp/>ASSERT_*<sp/>using<sp/>exceptions<sp/>where<sp/>they<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>You<sp/>cannot<sp/>use<sp/>ASSERT_*<sp/>directly<sp/>in<sp/>a<sp/>constructor<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972" refid="d6/d91/classtesting_1_1_environment" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d6/d91/classtesting_1_1_environment" kindref="compound">Environment</ref><sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>d&apos;tor<sp/>is<sp/>virtual<sp/>as<sp/>we<sp/>need<sp/>to<sp/>subclass<sp/>Environment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975" refid="d6/d91/classtesting_1_1_environment_1a6b8b9677be18dad35b3af83e77d1b339" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="d6/d91/classtesting_1_1_environment_1a6b8b9677be18dad35b3af83e77d1b339" kindref="member">~Environment</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Override<sp/>this<sp/>to<sp/>define<sp/>how<sp/>to<sp/>set<sp/>up<sp/>the<sp/>environment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978" refid="d6/d91/classtesting_1_1_environment_1a901706a587f9ae84df8b2395fbe759cb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d91/classtesting_1_1_environment_1a901706a587f9ae84df8b2395fbe759cb" kindref="member">SetUp</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Override<sp/>this<sp/>to<sp/>define<sp/>how<sp/>to<sp/>tear<sp/>down<sp/>the<sp/>environment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981" refid="d6/d91/classtesting_1_1_environment_1a870a092058305911f3d42df45dd657e5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d91/classtesting_1_1_environment_1a870a092058305911f3d42df45dd657e5" kindref="member">TearDown</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>see<sp/>an<sp/>error<sp/>about<sp/>overriding<sp/>the<sp/>following<sp/>function<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>about<sp/>it<sp/>being<sp/>private,<sp/>you<sp/>have<sp/>mis-spelled<sp/>SetUp()<sp/>as<sp/>Setup().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985" refid="d4/d63/structtesting_1_1_environment_1_1_setup__should__be__spelled___set_up" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d4/d63/structtesting_1_1_environment_1_1_setup__should__be__spelled___set_up" kindref="compound">Setup_should_be_spelled_SetUp</ref><sp/>{};</highlight></codeline>
<codeline lineno="986" refid="d6/d91/classtesting_1_1_environment_1adf12eafecf227c1587f58f90f1a221c3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="d4/d63/structtesting_1_1_environment_1_1_setup__should__be__spelled___set_up" kindref="compound">Setup_should_be_spelled_SetUp</ref>*<sp/><ref refid="d6/d91/classtesting_1_1_environment_1adf12eafecf227c1587f58f90f1a221c3" kindref="member">Setup</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal">};</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>interface<sp/>for<sp/>tracing<sp/>execution<sp/>of<sp/>tests.<sp/>The<sp/>methods<sp/>are<sp/>organized<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>order<sp/>the<sp/>corresponding<sp/>events<sp/>are<sp/>fired.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991" refid="d1/d46/classtesting_1_1_test_event_listener" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref><sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="993" refid="d1/d46/classtesting_1_1_test_event_listener_1aa248195927071de64a72a5557296497f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener_1aa248195927071de64a72a5557296497f" kindref="member">~TestEventListener</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fired<sp/>before<sp/>any<sp/>test<sp/>activity<sp/>starts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996" refid="d1/d46/classtesting_1_1_test_event_listener_1a1dceff89a70d9e37ca025e8db3674eac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener_1a1dceff89a70d9e37ca025e8db3674eac" kindref="member">OnTestProgramStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fired<sp/>before<sp/>each<sp/>iteration<sp/>of<sp/>tests<sp/>starts.<sp/><sp/>There<sp/>may<sp/>be<sp/>more<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>iteration<sp/>if<sp/>GTEST_FLAG(repeat)<sp/>is<sp/>set.<sp/>iteration<sp/>is<sp/>the<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>index,<sp/>starting<sp/>from<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001" refid="d1/d46/classtesting_1_1_test_event_listener_1ac7cacc17e8a9b6e18d7c6031df762608" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener_1ac7cacc17e8a9b6e18d7c6031df762608" kindref="member">OnTestIterationStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fired<sp/>before<sp/>environment<sp/>set-up<sp/>for<sp/>each<sp/>iteration<sp/>of<sp/>tests<sp/>starts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005" refid="d1/d46/classtesting_1_1_test_event_listener_1a070798921b8d09f891e02762287ee5b0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener_1a070798921b8d09f891e02762287ee5b0" kindref="member">OnEnvironmentsSetUpStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fired<sp/>after<sp/>environment<sp/>set-up<sp/>for<sp/>each<sp/>iteration<sp/>of<sp/>tests<sp/>ends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008" refid="d1/d46/classtesting_1_1_test_event_listener_1a9ff0d48e0f7c64dea5cb0a607498d6f6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener_1a9ff0d48e0f7c64dea5cb0a607498d6f6" kindref="member">OnEnvironmentsSetUpEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fired<sp/>before<sp/>the<sp/>test<sp/>case<sp/>starts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011" refid="d1/d46/classtesting_1_1_test_event_listener_1aaf531e12c423fe117b7a4c6d2217dcf7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener_1aaf531e12c423fe117b7a4c6d2217dcf7" kindref="member">OnTestCaseStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/>test_case)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fired<sp/>before<sp/>the<sp/>test<sp/>starts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014" refid="d1/d46/classtesting_1_1_test_event_listener_1a02f601dff022b7d252f54f559acaf3f7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener_1a02f601dff022b7d252f54f559acaf3f7" kindref="member">OnTestStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fired<sp/>after<sp/>a<sp/>failed<sp/>assertion<sp/>or<sp/>a<sp/>SUCCEED()<sp/>invocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017" refid="d1/d46/classtesting_1_1_test_event_listener_1a6897200761af7db2d3212d5d3c1571d9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener_1a6897200761af7db2d3212d5d3c1571d9" kindref="member">OnTestPartResult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/>test_part_result)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fired<sp/>after<sp/>the<sp/>test<sp/>ends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020" refid="d1/d46/classtesting_1_1_test_event_listener_1a48d3993f2b69de40ecca5476ff940e24" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener_1a48d3993f2b69de40ecca5476ff940e24" kindref="member">OnTestEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/>test_info)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fired<sp/>after<sp/>the<sp/>test<sp/>case<sp/>ends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023" refid="d1/d46/classtesting_1_1_test_event_listener_1ab92df2852da3e002303be838d8550c76" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener_1ab92df2852da3e002303be838d8550c76" kindref="member">OnTestCaseEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/>test_case)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fired<sp/>before<sp/>environment<sp/>tear-down<sp/>for<sp/>each<sp/>iteration<sp/>of<sp/>tests<sp/>starts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026" refid="d1/d46/classtesting_1_1_test_event_listener_1a1246b8fa84a0807afeffa6e986254ee8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener_1a1246b8fa84a0807afeffa6e986254ee8" kindref="member">OnEnvironmentsTearDownStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fired<sp/>after<sp/>environment<sp/>tear-down<sp/>for<sp/>each<sp/>iteration<sp/>of<sp/>tests<sp/>ends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029" refid="d1/d46/classtesting_1_1_test_event_listener_1a9cc8d7ef2c9e722a301ec4cee20633e2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener_1a9cc8d7ef2c9e722a301ec4cee20633e2" kindref="member">OnEnvironmentsTearDownEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fired<sp/>after<sp/>each<sp/>iteration<sp/>of<sp/>tests<sp/>finishes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032" refid="d1/d46/classtesting_1_1_test_event_listener_1a7e35fec33b744e6a410f10e2fa090015" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener_1a7e35fec33b744e6a410f10e2fa090015" kindref="member">OnTestIterationEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test,</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fired<sp/>after<sp/>all<sp/>test<sp/>activities<sp/>have<sp/>ended.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036" refid="d1/d46/classtesting_1_1_test_event_listener_1a543233908c4fd972550c7198c31c895a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener_1a543233908c4fd972550c7198c31c895a" kindref="member">OnTestProgramEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/>unit_test)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>convenience<sp/>class<sp/>for<sp/>users<sp/>who<sp/>need<sp/>to<sp/>override<sp/>just<sp/>one<sp/>or<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="comment">//<sp/>methods<sp/>and<sp/>are<sp/>not<sp/>concerned<sp/>that<sp/>a<sp/>possible<sp/>change<sp/>to<sp/>a<sp/>signature<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>methods<sp/>they<sp/>override<sp/>will<sp/>not<sp/>be<sp/>caught<sp/>during<sp/>the<sp/>build.<sp/><sp/>For</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="comment">//<sp/>comments<sp/>about<sp/>each<sp/>method<sp/>please<sp/>see<sp/>the<sp/>definition<sp/>of<sp/>TestEventListener</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment">//<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044" refid="dd/dff/classtesting_1_1_empty_test_event_listener" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="dd/dff/classtesting_1_1_empty_test_event_listener" kindref="compound">EmptyTestEventListener</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref><sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1046" refid="dd/dff/classtesting_1_1_empty_test_event_listener_1a9d43d6e5c4c37ade824998de2d83bd20" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/dff/classtesting_1_1_empty_test_event_listener_1a9d43d6e5c4c37ade824998de2d83bd20" kindref="member">OnTestProgramStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1047" refid="dd/dff/classtesting_1_1_empty_test_event_listener_1abd0cb3cd389369f180bed8a9f855d30f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/dff/classtesting_1_1_empty_test_event_listener_1abd0cb3cd389369f180bed8a9f855d30f" kindref="member">OnTestIterationStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*iteration*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1049" refid="dd/dff/classtesting_1_1_empty_test_event_listener_1a960b8082afebb8b336547c3dc6bd079f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/dff/classtesting_1_1_empty_test_event_listener_1a960b8082afebb8b336547c3dc6bd079f" kindref="member">OnEnvironmentsSetUpStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1050" refid="dd/dff/classtesting_1_1_empty_test_event_listener_1a4ab2823e779a053ad65cf7f01bb76b54" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/dff/classtesting_1_1_empty_test_event_listener_1a4ab2823e779a053ad65cf7f01bb76b54" kindref="member">OnEnvironmentsSetUpEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1051" refid="dd/dff/classtesting_1_1_empty_test_event_listener_1ad458fc9c991a0888807d241e90da098e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/dff/classtesting_1_1_empty_test_event_listener_1ad458fc9c991a0888807d241e90da098e" kindref="member">OnTestCaseStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/></highlight><highlight class="comment">/*test_case*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1052" refid="dd/dff/classtesting_1_1_empty_test_event_listener_1a4ee6b680b188b358efdd3705aaa67c66" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/dff/classtesting_1_1_empty_test_event_listener_1a4ee6b680b188b358efdd3705aaa67c66" kindref="member">OnTestStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/></highlight><highlight class="comment">/*test_info*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1053" refid="dd/dff/classtesting_1_1_empty_test_event_listener_1af67393a10ad8d397e2c981f9d7aff7a6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/dff/classtesting_1_1_empty_test_event_listener_1af67393a10ad8d397e2c981f9d7aff7a6" kindref="member">OnTestPartResult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref>&amp;<sp/></highlight><highlight class="comment">/*test_part_result*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1054" refid="dd/dff/classtesting_1_1_empty_test_event_listener_1afa42d87fd1a3c0377447be4791d472c9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/dff/classtesting_1_1_empty_test_event_listener_1afa42d87fd1a3c0377447be4791d472c9" kindref="member">OnTestEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>&amp;<sp/></highlight><highlight class="comment">/*test_info*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1055" refid="dd/dff/classtesting_1_1_empty_test_event_listener_1a764828afa3c4b25fe85e9f0668f37297" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/dff/classtesting_1_1_empty_test_event_listener_1a764828afa3c4b25fe85e9f0668f37297" kindref="member">OnTestCaseEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>&amp;<sp/></highlight><highlight class="comment">/*test_case*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1056" refid="dd/dff/classtesting_1_1_empty_test_event_listener_1a83a18f877ee8d1885a43667f00b51268" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/dff/classtesting_1_1_empty_test_event_listener_1a83a18f877ee8d1885a43667f00b51268" kindref="member">OnEnvironmentsTearDownStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1057" refid="dd/dff/classtesting_1_1_empty_test_event_listener_1af00cb6141021245e02c511782ce66b46" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/dff/classtesting_1_1_empty_test_event_listener_1af00cb6141021245e02c511782ce66b46" kindref="member">OnEnvironmentsTearDownEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1058" refid="dd/dff/classtesting_1_1_empty_test_event_listener_1ae2104e936a08019242b519d2274237eb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/dff/classtesting_1_1_empty_test_event_listener_1ae2104e936a08019242b519d2274237eb" kindref="member">OnTestIterationEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*iteration*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1060" refid="dd/dff/classtesting_1_1_empty_test_event_listener_1a79232f629150d6a1e560f6729271e729" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/dff/classtesting_1_1_empty_test_event_listener_1a79232f629150d6a1e560f6729271e729" kindref="member">OnTestProgramEnd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>&amp;<sp/></highlight><highlight class="comment">/*unit_test*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TestEventListeners<sp/>lets<sp/>users<sp/>add<sp/>listeners<sp/>to<sp/>track<sp/>events<sp/>in<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064" refid="df/dab/classtesting_1_1_test_event_listeners" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners" kindref="compound">TestEventListeners</ref><sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners" kindref="compound">TestEventListeners</ref>();</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>~<ref refid="df/dab/classtesting_1_1_test_event_listeners" kindref="compound">TestEventListeners</ref>();</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Appends<sp/>an<sp/>event<sp/>listener<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list.<sp/>Google<sp/>Test<sp/>assumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>ownership<sp/>of<sp/>the<sp/>listener<sp/>(i.e.<sp/>it<sp/>will<sp/>delete<sp/>the<sp/>listener<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>test<sp/>program<sp/>finishes).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Append(<ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/>listener);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Removes<sp/>the<sp/>given<sp/>event<sp/>listener<sp/>from<sp/>the<sp/>list<sp/>and<sp/>returns<sp/>it.<sp/><sp/>It<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>becomes<sp/>the<sp/>caller&apos;s<sp/>responsibility<sp/>to<sp/>delete<sp/>the<sp/>listener.<sp/>Returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL<sp/>if<sp/>the<sp/>listener<sp/>is<sp/>not<sp/>found<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/>Release(<ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/>listener);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>standard<sp/>listener<sp/>responsible<sp/>for<sp/>the<sp/>default<sp/>console</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output.<sp/><sp/>Can<sp/>be<sp/>removed<sp/>from<sp/>the<sp/>listeners<sp/>list<sp/>to<sp/>shut<sp/>down<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>console<sp/>output.<sp/><sp/>Note<sp/>that<sp/>removing<sp/>this<sp/>object<sp/>from<sp/>the<sp/>listener<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>Release<sp/>transfers<sp/>its<sp/>ownership<sp/>to<sp/>the<sp/>caller<sp/>and<sp/>makes<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>return<sp/>NULL<sp/>the<sp/>next<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084" refid="df/dab/classtesting_1_1_test_event_listeners_1aaaf7f5a0c10bec956cc47fcfdfefc12e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1aaaf7f5a0c10bec956cc47fcfdfefc12e" kindref="member">default_result_printer</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_result_printer_;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>standard<sp/>listener<sp/>responsible<sp/>for<sp/>the<sp/>default<sp/>XML<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>controlled<sp/>by<sp/>the<sp/>--gtest_output=xml<sp/>flag.<sp/><sp/>Can<sp/>be<sp/>removed<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>listeners<sp/>list<sp/>by<sp/>users<sp/>who<sp/>want<sp/>to<sp/>shut<sp/>down<sp/>the<sp/>default<sp/>XML<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>controlled<sp/>by<sp/>this<sp/>flag<sp/>and<sp/>substitute<sp/>it<sp/>with<sp/>custom<sp/>one.<sp/><sp/>Note<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>removing<sp/>this<sp/>object<sp/>from<sp/>the<sp/>listener<sp/>list<sp/>with<sp/>Release<sp/>transfers<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ownership<sp/>to<sp/>the<sp/>caller<sp/>and<sp/>makes<sp/>this<sp/>function<sp/>return<sp/>NULL<sp/>the<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095" refid="df/dab/classtesting_1_1_test_event_listeners_1a74f956cd1986dff7afd81b062e26564b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a74f956cd1986dff7afd81b062e26564b" kindref="member">default_xml_generator</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_xml_generator_;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1100" refid="df/dab/classtesting_1_1_test_event_listeners_1aff779e55b06adfa7c0088bd10253f0f0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>;</highlight></codeline>
<codeline lineno="1101" refid="df/dab/classtesting_1_1_test_event_listeners_1a4c49c2cdb6c328e6b709b4542f23de3c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>;</highlight></codeline>
<codeline lineno="1102" refid="df/dab/classtesting_1_1_test_event_listeners_1abae39633da9932847b41cb80efd62115" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d5/d5b/classtesting_1_1internal_1_1_default_global_test_part_result_reporter" kindref="compound">internal::DefaultGlobalTestPartResultReporter</ref>;</highlight></codeline>
<codeline lineno="1103" refid="df/dab/classtesting_1_1_test_event_listeners_1afddba49fdf3f493532b4d5efb9814f4e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">internal::NoExecDeathTest;</highlight></codeline>
<codeline lineno="1104" refid="df/dab/classtesting_1_1_test_event_listeners_1addbc107b6b445617c880182bd4f44cf9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">internal::TestEventListenersAccessor;</highlight></codeline>
<codeline lineno="1105" refid="df/dab/classtesting_1_1_test_event_listeners_1acc0a5e7573fd6ae7ad1878613bb86853" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">internal::UnitTestImpl</ref>;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>repeater<sp/>that<sp/>broadcasts<sp/>the<sp/>TestEventListener<sp/>events<sp/>to<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>subscribers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/>repeater();</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>default_result_printer<sp/>attribute<sp/>to<sp/>the<sp/>provided<sp/>listener.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>listener<sp/>is<sp/>also<sp/>added<sp/>to<sp/>the<sp/>listener<sp/>list<sp/>and<sp/>previous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>default_result_printer<sp/>is<sp/>removed<sp/>from<sp/>it<sp/>and<sp/>deleted.<sp/>The<sp/>listener<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>be<sp/>NULL<sp/>in<sp/>which<sp/>case<sp/>it<sp/>will<sp/>not<sp/>be<sp/>added<sp/>to<sp/>the<sp/>list.<sp/>Does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>if<sp/>the<sp/>previous<sp/>and<sp/>the<sp/>current<sp/>listener<sp/>objects<sp/>are<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetDefaultResultPrinter(<ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/>listener);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>default_xml_generator<sp/>attribute<sp/>to<sp/>the<sp/>provided<sp/>listener.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>listener<sp/>is<sp/>also<sp/>added<sp/>to<sp/>the<sp/>listener<sp/>list<sp/>and<sp/>previous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>default_xml_generator<sp/>is<sp/>removed<sp/>from<sp/>it<sp/>and<sp/>deleted.<sp/>The<sp/>listener<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>be<sp/>NULL<sp/>in<sp/>which<sp/>case<sp/>it<sp/>will<sp/>not<sp/>be<sp/>added<sp/>to<sp/>the<sp/>list.<sp/>Does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>if<sp/>the<sp/>previous<sp/>and<sp/>the<sp/>current<sp/>listener<sp/>objects<sp/>are<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetDefaultXmlGenerator(<ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/>listener);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Controls<sp/>whether<sp/>events<sp/>will<sp/>be<sp/>forwarded<sp/>by<sp/>the<sp/>repeater<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>listeners<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EventForwardingEnabled()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SuppressEventForwarding();</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>actual<sp/>list<sp/>of<sp/>listeners.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131" refid="df/dab/classtesting_1_1_test_event_listeners_1a214e13f255aec851b01f01cadce19ded" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d2/d7d/classtesting_1_1internal_1_1_test_event_repeater" kindref="compound">internal::TestEventRepeater</ref>*<sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a214e13f255aec851b01f01cadce19ded" kindref="member">repeater_</ref>;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Listener<sp/>responsible<sp/>for<sp/>the<sp/>standard<sp/>result<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133" refid="df/dab/classtesting_1_1_test_event_listeners_1a4ea1a52addfc6ead892cff75c59a3648" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a4ea1a52addfc6ead892cff75c59a3648" kindref="member">default_result_printer_</ref>;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Listener<sp/>responsible<sp/>for<sp/>the<sp/>creation<sp/>of<sp/>the<sp/>XML<sp/>output<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135" refid="df/dab/classtesting_1_1_test_event_listeners_1a949bfbb24b7248c7713bee3f303f07f7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d1/d46/classtesting_1_1_test_event_listener" kindref="compound">TestEventListener</ref>*<sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1a949bfbb24b7248c7713bee3f303f07f7" kindref="member">default_xml_generator_</ref>;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>disallow<sp/>copying<sp/>TestEventListeners.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138" refid="df/dab/classtesting_1_1_test_event_listeners_1aecf7d23aa2bc0314afc3ab35cfbbb50a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners_1aecf7d23aa2bc0314afc3ab35cfbbb50a" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="df/dab/classtesting_1_1_test_event_listeners" kindref="compound">TestEventListeners</ref>);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>UnitTest<sp/>consists<sp/>of<sp/>a<sp/>vector<sp/>of<sp/>TestCases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>singleton<sp/>class.<sp/><sp/>The<sp/>only<sp/>instance<sp/>of<sp/>UnitTest<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>created<sp/>when<sp/>UnitTest::GetInstance()<sp/>is<sp/>first<sp/>called.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instance<sp/>is<sp/>never<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnitTest<sp/>is<sp/>not<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>is<sp/>thread-safe<sp/>as<sp/>long<sp/>as<sp/>the<sp/>methods<sp/>are<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>according<sp/>to<sp/>their<sp/>specification.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151" refid="d7/d47/classtesting_1_1_unit_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref><sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>singleton<sp/>UnitTest<sp/>object.<sp/><sp/>The<sp/>first<sp/>time<sp/>this<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>called,<sp/>a<sp/>UnitTest<sp/>object<sp/>is<sp/>constructed<sp/>and<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Consecutive<sp/>calls<sp/>will<sp/>return<sp/>the<sp/>same<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>*<sp/>GetInstance();</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>UnitTest<sp/>object<sp/>and<sp/>prints<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>0<sp/>if<sp/>successful,<sp/>or<sp/>1<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>can<sp/>only<sp/>be<sp/>called<sp/>from<sp/>the<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Run()<sp/><ref refid="d3/dc9/gtest-port_8h_1a8e5aab8276b2645f64f41c9e3021b935" kindref="member">GTEST_MUST_USE_RESULT_</ref>;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>working<sp/>directory<sp/>when<sp/>the<sp/>first<sp/>TEST()<sp/>or<sp/>TEST_F()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>was<sp/>executed.<sp/><sp/>The<sp/>UnitTest<sp/>object<sp/>owns<sp/>the<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>original_working_dir()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestCase<sp/>object<sp/>for<sp/>the<sp/>test<sp/>that&apos;s<sp/>currently<sp/>running,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>NULL<sp/>if<sp/>no<sp/>test<sp/>is<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/>current_test_case()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a69abff5a4efdd07bd5faebe3dd318d06" kindref="member">GTEST_LOCK_EXCLUDED_</ref>(mutex_);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestInfo<sp/>object<sp/>for<sp/>the<sp/>test<sp/>that&apos;s<sp/>currently<sp/>running,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>NULL<sp/>if<sp/>no<sp/>test<sp/>is<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d79/classtesting_1_1_test_info" kindref="compound">TestInfo</ref>*<sp/>current_test_info()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a69abff5a4efdd07bd5faebe3dd318d06" kindref="member">GTEST_LOCK_EXCLUDED_</ref>(mutex_);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>random<sp/>seed<sp/>used<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the<sp/>current<sp/>test<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>random_seed()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>ParameterizedTestCaseRegistry<sp/>object<sp/>used<sp/>to<sp/>keep<sp/>track<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value-parameterized<sp/>tests<sp/>and<sp/>instantiate<sp/>and<sp/>register<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/>internal::ParameterizedTestCaseRegistry&amp;<sp/>parameterized_test_registry()</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a69abff5a4efdd07bd5faebe3dd318d06" kindref="member">GTEST_LOCK_EXCLUDED_</ref>(mutex_);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>successful<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>successful_test_case_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failed_test_case_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_test_case_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>test<sp/>cases<sp/>that<sp/>contain<sp/>at<sp/>least<sp/>one<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_case_to_run_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>successful<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>successful_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failed_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests<sp/>that<sp/>will<sp/>be<sp/>reported<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reportable_disabled_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>disabled_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>to<sp/>be<sp/>printed<sp/>in<sp/>the<sp/>XML<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reportable_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>all<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_test_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>number<sp/>of<sp/>tests<sp/>that<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_to_run_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>time<sp/>of<sp/>the<sp/>test<sp/>program<sp/>start,<sp/>in<sp/>ms<sp/>from<sp/>the<sp/>start<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>UNIX<sp/>epoch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref><sp/>start_timestamp()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>elapsed<sp/>time,<sp/>in<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a29b6fe63f9ae18fa0976951bde86e4c9" kindref="member">TimeInMillis</ref><sp/>elapsed_time()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>unit<sp/>test<sp/>passed<sp/>(i.e.<sp/>all<sp/>test<sp/>cases<sp/>passed).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Passed()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>unit<sp/>test<sp/>failed<sp/>(i.e.<sp/>some<sp/>test<sp/>case<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>something<sp/>outside<sp/>of<sp/>all<sp/>tests<sp/>failed).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Failed()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>i-th<sp/>test<sp/>case<sp/>among<sp/>all<sp/>the<sp/>test<sp/>cases.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>total_test_case_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/>GetTestCase(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestResult<sp/>containing<sp/>information<sp/>on<sp/>test<sp/>failures<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>properties<sp/>logged<sp/>outside<sp/>of<sp/>individual<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d69/classtesting_1_1_test_result" kindref="compound">TestResult</ref>&amp;<sp/>ad_hoc_test_result()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>list<sp/>of<sp/>event<sp/>listeners<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>track<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>inside<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><ref refid="df/dab/classtesting_1_1_test_event_listeners" kindref="compound">TestEventListeners</ref>&amp;<sp/>listeners();</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Registers<sp/>and<sp/>returns<sp/>a<sp/>global<sp/>test<sp/>environment.<sp/><sp/>When<sp/>a<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>is<sp/>run,<sp/>all<sp/>global<sp/>test<sp/>environments<sp/>will<sp/>be<sp/>set-up<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>order<sp/>they<sp/>were<sp/>registered.<sp/><sp/>After<sp/>all<sp/>tests<sp/>in<sp/>the<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>finished,<sp/>all<sp/>global<sp/>test<sp/>environments<sp/>will<sp/>be<sp/>torn-down<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>*reverse*<sp/>order<sp/>they<sp/>were<sp/>registered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>UnitTest<sp/>object<sp/>takes<sp/>ownership<sp/>of<sp/>the<sp/>given<sp/>environment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>can<sp/>only<sp/>be<sp/>called<sp/>from<sp/>the<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><ref refid="d6/d91/classtesting_1_1_environment" kindref="compound">Environment</ref>*<sp/>AddEnvironment(<ref refid="d6/d91/classtesting_1_1_environment" kindref="compound">Environment</ref>*<sp/>env);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>TestPartResult<sp/>to<sp/>the<sp/>current<sp/>TestResult<sp/>object.<sp/><sp/>All</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>assertion<sp/>macros<sp/>(e.g.<sp/>ASSERT_TRUE,<sp/>EXPECT_EQ,<sp/>etc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>eventually<sp/>call<sp/>this<sp/>to<sp/>report<sp/>their<sp/>results.<sp/><sp/>The<sp/>user<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>use<sp/>the<sp/>assertion<sp/>macros<sp/>instead<sp/>of<sp/>calling<sp/>this<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddTestPartResult(<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">TestPartResult::Type</ref><sp/>result_type,</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file_name,</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_number,</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>message,</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>os_stack_trace)</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a69abff5a4efdd07bd5faebe3dd318d06" kindref="member">GTEST_LOCK_EXCLUDED_</ref>(mutex_);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>TestProperty<sp/>to<sp/>the<sp/>current<sp/>TestResult<sp/>object<sp/>when<sp/>invoked<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>inside<sp/>a<sp/>test,<sp/>to<sp/>current<sp/>TestCase&apos;s<sp/>ad_hoc_test_result_<sp/>when<sp/>invoked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>SetUpTestCase<sp/>or<sp/>TearDownTestCase,<sp/>or<sp/>to<sp/>the<sp/>global<sp/>property<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>invoked<sp/>elsewhere.<sp/><sp/>If<sp/>the<sp/>result<sp/>already<sp/>contains<sp/>a<sp/>property<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>key,<sp/>the<sp/>value<sp/>will<sp/>be<sp/>updated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecordProperty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>value);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>i-th<sp/>test<sp/>case<sp/>among<sp/>all<sp/>the<sp/>test<sp/>cases.<sp/>i<sp/>can<sp/>range<sp/>from<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>total_test_case_count()<sp/>-<sp/>1.<sp/>If<sp/>i<sp/>is<sp/>not<sp/>in<sp/>that<sp/>range,<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><ref refid="d0/dfa/classtesting_1_1_test_case" kindref="compound">TestCase</ref>*<sp/>GetMutableTestCase(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Accessors<sp/>for<sp/>the<sp/>implementation<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287" refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">internal::UnitTestImpl</ref>*<sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1a7fc0e26510d98598fc6632b7e66a281d" kindref="member">impl</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_;<sp/>}</highlight></codeline>
<codeline lineno="1288" refid="d7/d47/classtesting_1_1_unit_test_1ab6f3c269fc46c9c1c0f81b3431240138" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">internal::UnitTestImpl</ref>*<sp/>impl()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_;<sp/>}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>classes<sp/>and<sp/>funcions<sp/>are<sp/>friends<sp/>as<sp/>they<sp/>need<sp/>to<sp/>access<sp/>private</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>members<sp/>of<sp/>UnitTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292" refid="d7/d47/classtesting_1_1_unit_test_1a5b78b1c2e1fa07ffed92da365593eaa4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="df/d69/classtesting_1_1_test" kindref="compound">Test</ref>;</highlight></codeline>
<codeline lineno="1293" refid="d7/d47/classtesting_1_1_unit_test_1a183151aa061362c87572e743fe233db1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="dc/dae/classtesting_1_1internal_1_1_assert_helper" kindref="compound">internal::AssertHelper</ref>;</highlight></codeline>
<codeline lineno="1294" refid="d7/d47/classtesting_1_1_unit_test_1afa3927576c08d7b1e197ba16b2b3dcb7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d9/d53/classtesting_1_1internal_1_1_scoped_trace" kindref="compound">internal::ScopedTrace</ref>;</highlight></codeline>
<codeline lineno="1295" refid="d7/d47/classtesting_1_1_unit_test_1adc037d188dab349a94868991955c9cd4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">internal::StreamingListenerTest;</highlight></codeline>
<codeline lineno="1296" refid="d7/d47/classtesting_1_1_unit_test_1ae970f89a9f477a349fe5778be85ef42e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">internal::UnitTestRecordPropertyTestHelper;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="d6/d91/classtesting_1_1_environment" kindref="compound">Environment</ref>*<sp/><ref refid="d0/d75/namespacetesting_1a460d7b998622e332392c1e00be3a60d5" kindref="member">AddGlobalTestEnvironment</ref>(<ref refid="d6/d91/classtesting_1_1_environment" kindref="compound">Environment</ref>*<sp/>env);</highlight></codeline>
<codeline lineno="1298" refid="d7/d47/classtesting_1_1_unit_test_1ae31ac69c75bb42f47c8d6a7cde4937c6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="d7/dda/classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">internal::UnitTestImpl</ref>*<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad104a3ca418dd1726ea22240b5d77258" kindref="member">internal::GetUnitTestImpl</ref>();</highlight></codeline>
<codeline lineno="1299" refid="d7/d47/classtesting_1_1_unit_test_1acb405321a5c6ae16fef21290649f2666" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4fdfe94b1ad045e6e66e6227dd0d130d" kindref="member">internal::ReportFailureInUnknownLocation</ref>(</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">TestPartResult::Type</ref><sp/>result_type,</highlight></codeline>
<codeline lineno="1301" refid="d7/d47/classtesting_1_1_unit_test_1af8b12390a53e83d3d406d32df53a1b55" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>message);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>empty<sp/>UnitTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>();</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>D&apos;tor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>();</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pushes<sp/>a<sp/>trace<sp/>defined<sp/>by<sp/>SCOPED_TRACE()<sp/>on<sp/>to<sp/>the<sp/>per-thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>trace<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PushGTestTrace(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/deb/structtesting_1_1internal_1_1_trace_info" kindref="compound">internal::TraceInfo</ref>&amp;<sp/>trace)</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a69abff5a4efdd07bd5faebe3dd318d06" kindref="member">GTEST_LOCK_EXCLUDED_</ref>(mutex_);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pops<sp/>a<sp/>trace<sp/>from<sp/>the<sp/>per-thread<sp/>Google<sp/>Test<sp/>trace<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PopGTestTrace()</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a69abff5a4efdd07bd5faebe3dd318d06" kindref="member">GTEST_LOCK_EXCLUDED_</ref>(mutex_);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Protects<sp/>mutable<sp/>state<sp/>in<sp/>*impl_.<sp/><sp/>This<sp/>is<sp/>mutable<sp/>as<sp/>some<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>methods<sp/>need<sp/>to<sp/>lock<sp/>it<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320" refid="d7/d47/classtesting_1_1_unit_test_1ac9dde2076fedd43264499dc77faea627" refkind="member"><highlight class="normal"><sp/><sp/>mutable<sp/>internal::Mutex<sp/>mutex_;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Opaque<sp/>implementation<sp/>object.<sp/><sp/>This<sp/>field<sp/>is<sp/>never<sp/>changed<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>object<sp/>is<sp/>constructed.<sp/><sp/>We<sp/>don&apos;t<sp/>mark<sp/>it<sp/>as<sp/>const<sp/>here,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>doing<sp/>so<sp/>will<sp/>cause<sp/>a<sp/>warning<sp/>in<sp/>the<sp/>constructor<sp/>of<sp/>UnitTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mutable<sp/>state<sp/>in<sp/>*impl_<sp/>is<sp/>protected<sp/>by<sp/>mutex_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326" refid="d7/d47/classtesting_1_1_unit_test_1a8e19d41ff9252d813d764bfa3c078689" refkind="member"><highlight class="normal"><sp/><sp/>internal::UnitTestImpl*<sp/>impl_;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>disallow<sp/>copying<sp/>UnitTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329" refid="d7/d47/classtesting_1_1_unit_test_1ac289f1ec47dc2e475bff4e77364d5571" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1aed8c1888c32b588b0681e88b95031e29" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="d7/d47/classtesting_1_1_unit_test" kindref="compound">UnitTest</ref>);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>convenient<sp/>wrapper<sp/>for<sp/>adding<sp/>an<sp/>environment<sp/>for<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>call<sp/>this<sp/>before<sp/>RUN_ALL_TESTS()<sp/>is<sp/>called,<sp/>probably<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>main().<sp/><sp/>If<sp/>you<sp/>use<sp/>gtest_main,<sp/>you<sp/>need<sp/>to<sp/>call<sp/>this<sp/>before<sp/>main()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>starts<sp/>for<sp/>it<sp/>to<sp/>take<sp/>effect.<sp/><sp/>For<sp/>example,<sp/>you<sp/>can<sp/>define<sp/>a<sp/>global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variable<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>testing::Environment*<sp/>const<sp/>foo_env<sp/>=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::AddGlobalTestEnvironment(new<sp/>FooEnvironment);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>we<sp/>strongly<sp/>recommend<sp/>you<sp/>to<sp/>write<sp/>your<sp/>own<sp/>main()<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>call<sp/>AddGlobalTestEnvironment()<sp/>there,<sp/>as<sp/>relying<sp/>on<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>global<sp/>variables<sp/>makes<sp/>the<sp/>code<sp/>harder<sp/>to<sp/>read<sp/>and<sp/>may<sp/>cause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>problems<sp/>when<sp/>you<sp/>register<sp/>multiple<sp/>environments<sp/>from<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>translation<sp/>units<sp/>and<sp/>the<sp/>environments<sp/>have<sp/>dependencies<sp/>among<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(remember<sp/>that<sp/>the<sp/>compiler<sp/>doesn&apos;t<sp/>guarantee<sp/>the<sp/>order<sp/>in<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>global<sp/>variables<sp/>from<sp/>different<sp/>translation<sp/>units<sp/>are<sp/>initialized).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350" refid="d7/d47/classtesting_1_1_unit_test_1a5ec26e4c31220ff8e769cc09689a4d6d" refkind="member"><highlight class="normal">inline<sp/><ref refid="d6/d91/classtesting_1_1_environment" kindref="compound">Environment</ref>*<sp/><ref refid="d0/d75/namespacetesting_1a460d7b998622e332392c1e00be3a60d5" kindref="member">AddGlobalTestEnvironment</ref>(<ref refid="d6/d91/classtesting_1_1_environment" kindref="compound">Environment</ref>*<sp/>env)<sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d47/classtesting_1_1_unit_test_1ad200090b11104aca39f25043701886cf" kindref="member">UnitTest::GetInstance</ref>()-&gt;<ref refid="d7/d47/classtesting_1_1_unit_test_1a615f6515c254c5ddda5f695e25da3da3" kindref="member">AddEnvironment</ref>(env);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initializes<sp/>Google<sp/>Test.<sp/><sp/>This<sp/>must<sp/>be<sp/>called<sp/>before<sp/>calling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RUN_ALL_TESTS().<sp/><sp/>In<sp/>particular,<sp/>it<sp/>parses<sp/>a<sp/>command<sp/>line<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>flags<sp/>that<sp/>Google<sp/>Test<sp/>recognizes.<sp/><sp/>Whenever<sp/>a<sp/>Google<sp/>Test<sp/>flag<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>seen,<sp/>it<sp/>is<sp/>removed<sp/>from<sp/>argv,<sp/>and<sp/>*argc<sp/>is<sp/>decremented.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>No<sp/>value<sp/>is<sp/>returned.<sp/><sp/>Instead,<sp/>the<sp/>Google<sp/>Test<sp/>flag<sp/>variables<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>updated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calling<sp/>the<sp/>function<sp/>for<sp/>the<sp/>second<sp/>time<sp/>has<sp/>no<sp/>user-visible<sp/>effect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1aefed8296a2dd394336ae59e0737ba4c1" kindref="member">InitGoogleTest</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>overloaded<sp/>version<sp/>can<sp/>be<sp/>used<sp/>in<sp/>Windows<sp/>programs<sp/>compiled<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UNICODE<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1aefed8296a2dd394336ae59e0737ba4c1" kindref="member">InitGoogleTest</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">**<sp/>argv);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Separate<sp/>the<sp/>error<sp/>generating<sp/>code<sp/>from<sp/>the<sp/>code<sp/>path<sp/>to<sp/>reduce<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>frame<sp/>size<sp/>of<sp/>CmpHelperEQ.<sp/>This<sp/>helps<sp/>reduce<sp/>the<sp/>overhead<sp/>of<sp/>some<sp/>sanitizers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>calling<sp/>EXPECT_*<sp/>in<sp/>a<sp/>tight<sp/>loop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1375" refid="d0/da7/namespacetesting_1_1internal_1a1def8ec9393360a1b34a20528703e7f7" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1def8ec9393360a1b34a20528703e7f7" kindref="member">CmpHelperEQFailure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs_expression,</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" kindref="member">EqFailure</ref>(lhs_expression,</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a91ab078f10adc669f09b7f604975c518" kindref="member">FormatForComparisonFailureMessage</ref>(lhs,<sp/>rhs),</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a91ab078f10adc669f09b7f604975c518" kindref="member">FormatForComparisonFailureMessage</ref>(rhs,<sp/>lhs),</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_EQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1387" refid="d0/da7/namespacetesting_1_1internal_1a4638c74d9b32e971f9b321af6fafc2f1" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4638c74d9b32e971f9b321af6fafc2f1" kindref="member">CmpHelperEQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs_expression,</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1a86994cc68e844d8b82089c70408dfc61" kindref="member">GTEST_DISABLE_MSC_WARNINGS_PUSH_</ref>(4389<sp/></highlight><highlight class="comment">/*<sp/>signed/unsigned<sp/>mismatch<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs<sp/>==<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1ab4c44546d6d9aced68993b87b608fc06" kindref="member">GTEST_DISABLE_MSC_WARNINGS_POP_</ref>()</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1def8ec9393360a1b34a20528703e7f7" kindref="member">CmpHelperEQFailure</ref>(lhs_expression,<sp/>rhs_expression,<sp/>lhs,<sp/>rhs);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>With<sp/>this<sp/>overloaded<sp/>version,<sp/>we<sp/>allow<sp/>anonymous<sp/>enums<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>{ASSERT|EXPECT}_EQ<sp/>when<sp/>compiled<sp/>with<sp/>gcc<sp/>4,<sp/>as<sp/>anonymous<sp/>enums</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>implicitly<sp/>cast<sp/>to<sp/>BiggestInt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4638c74d9b32e971f9b321af6fafc2f1" kindref="member">CmpHelperEQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs_expression,</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae8f73370150f905887720532fa9f572e" kindref="member">BiggestInt</ref><sp/>lhs,</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae8f73370150f905887720532fa9f572e" kindref="member">BiggestInt</ref><sp/>rhs);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>class<sp/>for<sp/>{ASSERT|EXPECT}_EQ.<sp/><sp/>The<sp/>template<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lhs_is_null_literal<sp/>is<sp/>true<sp/>iff<sp/>the<sp/>first<sp/>argument<sp/>to<sp/>ASSERT_EQ()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>null<sp/>pointer<sp/>literal.<sp/><sp/>The<sp/>following<sp/>default<sp/>implementation<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>lhs_is_null_literal<sp/>being<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lhs_is_null_literal&gt;</highlight></codeline>
<codeline lineno="1413" refid="d2/d1a/classtesting_1_1internal_1_1_eq_helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d2/d1a/classtesting_1_1internal_1_1_eq_helper" kindref="compound">EqHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>templatized<sp/>version<sp/>is<sp/>for<sp/>the<sp/>general<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1417" refid="d2/d1a/classtesting_1_1internal_1_1_eq_helper_1aadb9e81165711a2583f885a937d8bdf1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d2/d1a/classtesting_1_1internal_1_1_eq_helper_1aadb9e81165711a2583f885a937d8bdf1" kindref="member">Compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs_expression,</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4638c74d9b32e971f9b321af6fafc2f1" kindref="member">CmpHelperEQ</ref>(lhs_expression,<sp/>rhs_expression,<sp/>lhs,<sp/>rhs);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>With<sp/>this<sp/>overloaded<sp/>version,<sp/>we<sp/>allow<sp/>anonymous<sp/>enums<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>{ASSERT|EXPECT}_EQ<sp/>when<sp/>compiled<sp/>with<sp/>gcc<sp/>4,<sp/>as<sp/>anonymous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>enums<sp/>can<sp/>be<sp/>implicitly<sp/>cast<sp/>to<sp/>BiggestInt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Even<sp/>though<sp/>its<sp/>body<sp/>looks<sp/>the<sp/>same<sp/>as<sp/>the<sp/>above<sp/>version,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>merge<sp/>the<sp/>two,<sp/>as<sp/>it<sp/>will<sp/>make<sp/>anonymous<sp/>enums<sp/>unhappy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430" refid="d2/d1a/classtesting_1_1internal_1_1_eq_helper_1af8ac2a681c46179a791aeec7443c7b7a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d2/d1a/classtesting_1_1internal_1_1_eq_helper_1af8ac2a681c46179a791aeec7443c7b7a" kindref="member">Compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs_expression,</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae8f73370150f905887720532fa9f572e" kindref="member">BiggestInt</ref><sp/>lhs,</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae8f73370150f905887720532fa9f572e" kindref="member">BiggestInt</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4638c74d9b32e971f9b321af6fafc2f1" kindref="member">CmpHelperEQ</ref>(lhs_expression,<sp/>rhs_expression,<sp/>lhs,<sp/>rhs);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>specialization<sp/>is<sp/>used<sp/>when<sp/>the<sp/>first<sp/>argument<sp/>to<sp/>ASSERT_EQ()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>null<sp/>pointer<sp/>literal,<sp/>like<sp/>NULL,<sp/>false,<sp/>or<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1441" refid="d1/db2/classtesting_1_1internal_1_1_eq_helper_3_01true_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d2/d1a/classtesting_1_1internal_1_1_eq_helper" kindref="compound">EqHelper</ref>&lt;true&gt;<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>define<sp/>two<sp/>overloaded<sp/>versions<sp/>of<sp/>Compare().<sp/><sp/>The<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>version<sp/>will<sp/>be<sp/>picked<sp/>when<sp/>the<sp/>second<sp/>argument<sp/>to<sp/>ASSERT_EQ()<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOT<sp/>a<sp/>pointer,<sp/>e.g.<sp/>ASSERT_EQ(0,<sp/>AnIntFunction())<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_EQ(false,<sp/>a_bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1448" refid="d1/db2/classtesting_1_1internal_1_1_eq_helper_3_01true_01_4_1afba0180482bf5eea37970e15625a9888" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d1/db2/classtesting_1_1internal_1_1_eq_helper_3_01true_01_4_1afba0180482bf5eea37970e15625a9888" kindref="member">Compare</ref>(</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs_expression,</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>rhs,</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>line<sp/>prevents<sp/>this<sp/>overload<sp/>from<sp/>being<sp/>considered<sp/>if<sp/>T2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>a<sp/>pointer<sp/>type.<sp/><sp/>We<sp/>need<sp/>this<sp/>because<sp/>ASSERT_EQ(NULL,<sp/>my_ptr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expands<sp/>to<sp/>Compare(&quot;&quot;,<sp/>&quot;&quot;,<sp/>NULL,<sp/>my_ptr),<sp/>which<sp/>requires<sp/>a<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>match<sp/>the<sp/>Secret*<sp/>in<sp/>the<sp/>other<sp/>overload,<sp/>which<sp/>would<sp/>otherwise<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>template<sp/>match<sp/>better.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d6/d3b/structtesting_1_1internal_1_1_enable_if" kindref="compound">EnableIf</ref>&lt;!<ref refid="de/d83/structtesting_1_1internal_1_1is__pointer" kindref="compound">is_pointer&lt;T2&gt;::value</ref>&gt;::type*<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4638c74d9b32e971f9b321af6fafc2f1" kindref="member">CmpHelperEQ</ref>(lhs_expression,<sp/>rhs_expression,<sp/>lhs,<sp/>rhs);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>version<sp/>will<sp/>be<sp/>picked<sp/>when<sp/>the<sp/>second<sp/>argument<sp/>to<sp/>ASSERT_EQ()<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer,<sp/>e.g.<sp/>ASSERT_EQ(NULL,<sp/>a_pointer).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1465" refid="d1/db2/classtesting_1_1internal_1_1_eq_helper_3_01true_01_4_1a1778fe4a9830e9a0acf0afe2277e69ce" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d1/db2/classtesting_1_1internal_1_1_eq_helper_3_01true_01_4_1a1778fe4a9830e9a0acf0afe2277e69ce" kindref="member">Compare</ref>(</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs_expression,</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>used<sp/>to<sp/>have<sp/>a<sp/>second<sp/>template<sp/>parameter<sp/>instead<sp/>of<sp/>Secret*.<sp/><sp/>That</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>template<sp/>parameter<sp/>would<sp/>deduce<sp/>to<sp/>&apos;long&apos;,<sp/>making<sp/>this<sp/>a<sp/>better<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>the<sp/>first<sp/>overload<sp/>even<sp/>without<sp/>the<sp/>first<sp/>overload&apos;s<sp/>EnableIf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unfortunately,<sp/>gcc<sp/>with<sp/>-Wconversion-null<sp/>warns<sp/>when<sp/>&quot;passing<sp/>NULL<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-pointer<sp/>argument&quot;<sp/>(even<sp/>a<sp/>deduced<sp/>integral<sp/>argument),<sp/>so<sp/>the<sp/>old</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>implementation<sp/>caused<sp/>warnings<sp/>in<sp/>user<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Secret*<sp/></highlight><highlight class="comment">/*<sp/>lhs<sp/>(NULL)<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>already<sp/>know<sp/>that<sp/>&apos;lhs&apos;<sp/>is<sp/>a<sp/>null<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a4638c74d9b32e971f9b321af6fafc2f1" kindref="member">CmpHelperEQ</ref>(lhs_expression,<sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(NULL),<sp/>rhs);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Separate<sp/>the<sp/>error<sp/>generating<sp/>code<sp/>from<sp/>the<sp/>code<sp/>path<sp/>to<sp/>reduce<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="comment">//<sp/>frame<sp/>size<sp/>of<sp/>CmpHelperOP.<sp/>This<sp/>helps<sp/>reduce<sp/>the<sp/>overhead<sp/>of<sp/>some<sp/>sanitizers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>calling<sp/>EXPECT_OP<sp/>in<sp/>a<sp/>tight<sp/>loop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1486" refid="d0/da7/namespacetesting_1_1internal_1a894ffccd936d78fd555f490020c27f0a" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a894ffccd936d78fd555f490020c27f0a" kindref="member">CmpHelperOpFailure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr2,</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>val2,</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a8a25612ce946e4ffc6c9b911e7ff6a09" kindref="member">AssertionFailure</ref>()</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expr1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>op<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expr2</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>actual:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a91ab078f10adc669f09b7f604975c518" kindref="member">FormatForComparisonFailureMessage</ref>(val1,<sp/>val2)</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>vs<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a91ab078f10adc669f09b7f604975c518" kindref="member">FormatForComparisonFailureMessage</ref>(val2,<sp/>val1);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>macro<sp/>for<sp/>implementing<sp/>the<sp/>helper<sp/>functions<sp/>needed<sp/>to<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ASSERT_??<sp/>and<sp/>EXPECT_??.<sp/><sp/>It<sp/>is<sp/>here<sp/>just<sp/>to<sp/>avoid<sp/>copy-and-paste</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>similar<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>templatized<sp/>helper<sp/>function,<sp/>we<sp/>also<sp/>define<sp/>an<sp/>overloaded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>version<sp/>for<sp/>BiggestInt<sp/>in<sp/>order<sp/>to<sp/>reduce<sp/>code<sp/>bloat<sp/>and<sp/>allow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>anonymous<sp/>enums<sp/>to<sp/>be<sp/>used<sp/>with<sp/>{ASSERT|EXPECT}_??<sp/>when<sp/>compiled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>gcc<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506" refid="d8/d73/gtest_8h_1a4a5b6fbde5dd05e05dd6846ac5e5c18e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_IMPL_CMP_HELPER_(op_name,<sp/>op)\</highlight></codeline>
<codeline lineno="1507"><highlight class="preprocessor">template<sp/>&lt;typename<sp/>T1,<sp/>typename<sp/>T2&gt;\</highlight></codeline>
<codeline lineno="1508"><highlight class="preprocessor">AssertionResult<sp/>CmpHelper##op_name(const<sp/>char*<sp/>expr1,<sp/>const<sp/>char*<sp/>expr2,<sp/>\</highlight></codeline>
<codeline lineno="1509"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>T1&amp;<sp/>val1,<sp/>const<sp/>T2&amp;<sp/>val2)<sp/>{\</highlight></codeline>
<codeline lineno="1510"><highlight class="preprocessor"><sp/><sp/>if<sp/>(val1<sp/>op<sp/>val2)<sp/>{\</highlight></codeline>
<codeline lineno="1511"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>AssertionSuccess();\</highlight></codeline>
<codeline lineno="1512"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="1513"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>CmpHelperOpFailure(expr1,<sp/>expr2,<sp/>val1,<sp/>val2,<sp/>#op);\</highlight></codeline>
<codeline lineno="1514"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1515"><highlight class="preprocessor">}\</highlight></codeline>
<codeline lineno="1516"><highlight class="preprocessor">GTEST_API_<sp/>AssertionResult<sp/>CmpHelper##op_name(\</highlight></codeline>
<codeline lineno="1517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>expr1,<sp/>const<sp/>char*<sp/>expr2,<sp/>BiggestInt<sp/>val1,<sp/>BiggestInt<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_NE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><ref refid="d8/d73/gtest_8h_1a4a5b6fbde5dd05e05dd6846ac5e5c18e" kindref="member">GTEST_IMPL_CMP_HELPER_</ref>(NE,<sp/>!=);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_LE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1524" refid="d0/da7/namespacetesting_1_1internal_1ade60646b18728043fff84d7b4125de2c" refkind="member"><highlight class="normal"><ref refid="d8/d73/gtest_8h_1a4a5b6fbde5dd05e05dd6846ac5e5c18e" kindref="member">GTEST_IMPL_CMP_HELPER_</ref>(LE,<sp/>&lt;=);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_LT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526" refid="d0/da7/namespacetesting_1_1internal_1aabcbff15eac496f8487699d19f42c274" refkind="member"><highlight class="normal"><ref refid="d8/d73/gtest_8h_1a4a5b6fbde5dd05e05dd6846ac5e5c18e" kindref="member">GTEST_IMPL_CMP_HELPER_</ref>(LT,<sp/>&lt;);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_GE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528" refid="d0/da7/namespacetesting_1_1internal_1af969886067930ce70f6405cd5aa8b06b" refkind="member"><highlight class="normal"><ref refid="d8/d73/gtest_8h_1a4a5b6fbde5dd05e05dd6846ac5e5c18e" kindref="member">GTEST_IMPL_CMP_HELPER_</ref>(GE,<sp/>&gt;=);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_GT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530" refid="d0/da7/namespacetesting_1_1internal_1a7fdb4fc164db83c51dfad17640bfeae9" refkind="member"><highlight class="normal"><ref refid="d8/d73/gtest_8h_1a4a5b6fbde5dd05e05dd6846ac5e5c18e" kindref="member">GTEST_IMPL_CMP_HELPER_</ref>(GT,<sp/>&gt;);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_IMPL_CMP_HELPER_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_STREQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537" refid="d0/da7/namespacetesting_1_1internal_1a93eb9d61cac7faf1faff6301ae5f4a46" refkind="member"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a93eb9d61cac7faf1faff6301ae5f4a46" kindref="member">CmpHelperSTREQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1_expression,</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2_expression,</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_STRCASEEQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545" refid="d0/da7/namespacetesting_1_1internal_1a00c3d012df6173622ef558a131bfb95d" refkind="member"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a00c3d012df6173622ef558a131bfb95d" kindref="member">CmpHelperSTRCASEEQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1_expression,</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2_expression,</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_STRNE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553" refid="d0/da7/namespacetesting_1_1internal_1a6b485231a046ff760844a0321c04870b" refkind="member"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a6b485231a046ff760844a0321c04870b" kindref="member">CmpHelperSTRNE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1_expression,</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2_expression,</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_STRCASENE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561" refid="d0/da7/namespacetesting_1_1internal_1a5f74b933606b0a742cd5a8ad2d7087e0" refkind="member"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a5f74b933606b0a742cd5a8ad2d7087e0" kindref="member">CmpHelperSTRCASENE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1_expression,</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2_expression,</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>*_STREQ<sp/>on<sp/>wide<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a93eb9d61cac7faf1faff6301ae5f4a46" kindref="member">CmpHelperSTREQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1_expression,</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2_expression,</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s1,</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s2);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>*_STRNE<sp/>on<sp/>wide<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a6b485231a046ff760844a0321c04870b" kindref="member">CmpHelperSTRNE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1_expression,</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2_expression,</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s1,</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s2);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSubstring()<sp/>and<sp/>IsNotSubstring()<sp/>are<sp/>intended<sp/>to<sp/>be<sp/>used<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>first<sp/>argument<sp/>to<sp/>{EXPECT,ASSERT}_PRED_FORMAT2(),<sp/>not<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>themselves.<sp/><sp/>They<sp/>check<sp/>whether<sp/>needle<sp/>is<sp/>a<sp/>substring<sp/>of<sp/>haystack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(NULL<sp/>is<sp/>considered<sp/>a<sp/>substring<sp/>of<sp/>itself<sp/>only),<sp/>and<sp/>return<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight><highlight class="comment">//<sp/>appropriate<sp/>error<sp/>message<sp/>when<sp/>they<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>{needle,haystack}_expr<sp/>arguments<sp/>are<sp/>the<sp/>stringified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expressions<sp/>that<sp/>generated<sp/>the<sp/>two<sp/>real<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1af769ba85b7dc1c49d49594f195b442cf" kindref="member">IsSubstring</ref>(</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1af769ba85b7dc1c49d49594f195b442cf" kindref="member">IsSubstring</ref>(</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>haystack);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1a4c722362b584ab9565021fd68f2d0003" kindref="member">IsNotSubstring</ref>(</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1a4c722362b584ab9565021fd68f2d0003" kindref="member">IsNotSubstring</ref>(</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>haystack);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1af769ba85b7dc1c49d49594f195b442cf" kindref="member">IsSubstring</ref>(</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">const ::std::string</ref>&amp;<sp/>needle,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">const ::std::string</ref>&amp;<sp/>haystack);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1a4c722362b584ab9565021fd68f2d0003" kindref="member">IsNotSubstring</ref>(</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">const ::std::string</ref>&amp;<sp/>needle,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a3641bb11325903fefdc4d22ab0b92fd6" kindref="member">const ::std::string</ref>&amp;<sp/>haystack);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1af769ba85b7dc1c49d49594f195b442cf" kindref="member">IsSubstring</ref>(</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af3c58f657eee885281edda1923f192b0" kindref="member">const ::std::wstring</ref>&amp;<sp/>needle,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af3c58f657eee885281edda1923f192b0" kindref="member">const ::std::wstring</ref>&amp;<sp/>haystack);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/d75/namespacetesting_1a4c722362b584ab9565021fd68f2d0003" kindref="member">IsNotSubstring</ref>(</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af3c58f657eee885281edda1923f192b0" kindref="member">const ::std::wstring</ref>&amp;<sp/>needle,<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1af3c58f657eee885281edda1923f192b0" kindref="member">const ::std::wstring</ref>&amp;<sp/>haystack);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>template<sp/>function<sp/>for<sp/>comparing<sp/>floating-points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Template<sp/>parameter:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>RawType:<sp/>the<sp/>raw<sp/>floating-point<sp/>type<sp/>(either<sp/>float<sp/>or<sp/>double)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RawType&gt;</highlight></codeline>
<codeline lineno="1631" refid="d0/da7/namespacetesting_1_1internal_1a98ce463e5dbe0c6120fa817e1f8f2944" refkind="member"><highlight class="normal"><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a98ce463e5dbe0c6120fa817e1f8f2944" kindref="member">CmpHelperFloatingPointEQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs_expression,</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RawType<sp/>lhs_value,</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RawType<sp/>rhs_value)<sp/>{</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classtesting_1_1internal_1_1_floating_point" kindref="compound">FloatingPoint&lt;RawType&gt;</ref><sp/>lhs(lhs_value),<sp/>rhs(rhs_value);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.AlmostEquals(rhs))<sp/>{</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a537d27ab3cdcde6857e3cc95878f8f4a" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_stringstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::stringstream</ref><sp/>lhs_ss;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/>lhs_ss<sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/setprecision" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::setprecision</ref>(<ref refid="cpp/types/numeric_limits" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::numeric_limits&lt;RawType&gt;::digits10</ref><sp/>+<sp/>2)</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>lhs_value;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_stringstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::stringstream</ref><sp/>rhs_ss;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/>rhs_ss<sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/setprecision" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::setprecision</ref>(<ref refid="cpp/types/numeric_limits" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::numeric_limits&lt;RawType&gt;::digits10</ref><sp/>+<sp/>2)</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>rhs_value;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a120b81c390ec6bf851e21ffb141871e5" kindref="member">EqFailure</ref>(lhs_expression,</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs_expression,</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a9743f1da2e8f7a4a8178ec9595a56112" kindref="member">StringStreamToString</ref>(&amp;lhs_ss),</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a9743f1da2e8f7a4a8178ec9595a56112" kindref="member">StringStreamToString</ref>(&amp;rhs_ss),</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>implementing<sp/>ASSERT_NEAR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d5/dec/classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a5059777ec92cd98da4c4159dee8201c2" kindref="member">DoubleNearPredFormat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr1,</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr2,</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>abs_error_expr,</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val1,</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val2,</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>abs_error);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>USER<sp/>CODE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>class<sp/>that<sp/>enables<sp/>one<sp/>to<sp/>stream<sp/>messages<sp/>to<sp/>assertion<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668" refid="dc/dae/classtesting_1_1internal_1_1_assert_helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="dc/dae/classtesting_1_1internal_1_1_assert_helper" kindref="compound">AssertHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><ref refid="dc/dae/classtesting_1_1internal_1_1_assert_helper" kindref="compound">AssertHelper</ref>(<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">TestPartResult::Type</ref><sp/>type,</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/>~<ref refid="dc/dae/classtesting_1_1internal_1_1_assert_helper" kindref="compound">AssertHelper</ref>();</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Message<sp/>assignment<sp/>is<sp/>a<sp/>semantic<sp/>trick<sp/>to<sp/>enable<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>streaming;<sp/>see<sp/>the<sp/>GTEST_MESSAGE_<sp/>macro<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/>message)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>put<sp/>our<sp/>data<sp/>in<sp/>a<sp/>struct<sp/>so<sp/>that<sp/>the<sp/>size<sp/>of<sp/>the<sp/>AssertHelper<sp/>class<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>as<sp/>small<sp/>as<sp/>possible.<sp/><sp/>This<sp/>is<sp/>important<sp/>because<sp/>gcc<sp/>is<sp/>incapable<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>re-using<sp/>stack<sp/>space<sp/>even<sp/>for<sp/>temporary<sp/>variables,<sp/>so<sp/>every<sp/>EXPECT_EQ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reserves<sp/>stack<sp/>space<sp/>for<sp/>another<sp/>AssertHelper.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686" refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data" kindref="compound">AssertHelperData</ref><sp/>{</highlight></codeline>
<codeline lineno="1687" refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data_1aa9297ff3be7e875e1cba3e44e0cbc536" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data_1aa9297ff3be7e875e1cba3e44e0cbc536" kindref="member">AssertHelperData</ref>(<ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">TestPartResult::Type</ref><sp/>t,</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>srcfile,</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_num,</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>msg)</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>type(t),<sp/>file(srcfile),<sp/>line(line_num),<sp/>message(msg)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693" refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data_1a411db9f4276ebb3fa7c47dd0ed5488ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4b/classtesting_1_1_test_part_result_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">TestPartResult::Type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data_1a411db9f4276ebb3fa7c47dd0ed5488ec" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="1694" refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data_1a2c690122f2da04a6559da85203823a34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data_1a2c690122f2da04a6559da85203823a34" kindref="member">file</ref>;</highlight></codeline>
<codeline lineno="1695" refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data_1ad42b220b1bf90b42fe461c4201c064a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data_1ad42b220b1bf90b42fe461c4201c064a5" kindref="member">line</ref>;</highlight></codeline>
<codeline lineno="1696" refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data_1a20ce7dc55ec7fade6ef81f7de11ce52d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data_1a20ce7dc55ec7fade6ef81f7de11ce52d" kindref="member">message</ref>;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1699" refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data_1ac6c57a5454222d979d108edc57889453" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data_1ac6c57a5454222d979d108edc57889453" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data" kindref="compound">AssertHelperData</ref>);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702" refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1af026cd80a199acc5b637eedf92f18221" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="de/d19/structtesting_1_1internal_1_1_assert_helper_1_1_assert_helper_data" kindref="compound">AssertHelperData</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1af026cd80a199acc5b637eedf92f18221" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704" refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1a37f75fff63325e9474ccc5e3d854c8ed" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="dc/dae/classtesting_1_1internal_1_1_assert_helper_1a37f75fff63325e9474ccc5e3d854c8ed" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="dc/dae/classtesting_1_1internal_1_1_assert_helper" kindref="compound">AssertHelper</ref>);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>pure<sp/>interface<sp/>class<sp/>that<sp/>all<sp/>value-parameterized<sp/>tests<sp/>inherit<sp/>from.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>value-parameterized<sp/>class<sp/>must<sp/>inherit<sp/>from<sp/>both<sp/>::testing::Test<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::testing::WithParamInterface.<sp/>In<sp/>most<sp/>cases<sp/>that<sp/>just<sp/>means<sp/>inheriting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>::testing::TestWithParam,<sp/>but<sp/>more<sp/>complicated<sp/>test<sp/>hierarchies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>need<sp/>to<sp/>inherit<sp/>from<sp/>Test<sp/>and<sp/>WithParamInterface<sp/>at<sp/>different<sp/>levels.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>interface<sp/>has<sp/>support<sp/>for<sp/>accessing<sp/>the<sp/>test<sp/>parameter<sp/>value<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>GetParam()<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>it<sp/>with<sp/>one<sp/>of<sp/>the<sp/>parameter<sp/>generator<sp/>defining<sp/>functions,<sp/>like<sp/>Range(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Values(),<sp/>ValuesIn(),<sp/>Bool(),<sp/>and<sp/>Combine().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>FooTest<sp/>:<sp/>public<sp/>::testing::TestWithParam&lt;int&gt;<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>protected:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>FooTest()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Can<sp/>use<sp/>GetParam()<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>virtual<sp/>~FooTest()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Can<sp/>use<sp/>GetParam()<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>virtual<sp/>void<sp/>SetUp()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Can<sp/>use<sp/>GetParam()<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>virtual<sp/>void<sp/>TearDown<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Can<sp/>use<sp/>GetParam()<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight><highlight class="comment">//<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TEST_P(FooTest,<sp/>DoesBar)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Can<sp/>use<sp/>GetParam()<sp/>method<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Foo<sp/>foo;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ASSERT_TRUE(foo.DoesBar(GetParam()));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INSTANTIATE_TEST_CASE_P(OneToTenRange,<sp/>FooTest,<sp/>::testing::Range(1,<sp/>10));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">WithParamInterface<sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>ParamType;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~WithParamInterface()<sp/>{}</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>current<sp/>parameter<sp/>value.<sp/>Is<sp/>also<sp/>available<sp/>in<sp/>the<sp/>test<sp/>fixture&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>constructor.<sp/>This<sp/>member<sp/>function<sp/>is<sp/>non-static,<sp/>even<sp/>though<sp/>it<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>references<sp/>static<sp/>data,<sp/>to<sp/>reduce<sp/>the<sp/>opportunity<sp/>for<sp/>incorrect<sp/>uses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>like<sp/>writing<sp/>&apos;WithParamInterface&lt;bool&gt;::GetParam()&apos;<sp/>for<sp/>a<sp/>test<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>uses<sp/>a<sp/>fixture<sp/>whose<sp/>parameter<sp/>type<sp/>is<sp/>int.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamType&amp;<sp/>GetParam()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1ab54343f0a36dc4cb0ce8a478dd7847b8" kindref="member">GTEST_CHECK_</ref>(parameter_<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GetParam()<sp/>can<sp/>only<sp/>be<sp/>called<sp/>inside<sp/>a<sp/>value-parameterized<sp/>test<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;--<sp/>did<sp/>you<sp/>intend<sp/>to<sp/>write<sp/>TEST_P<sp/>instead<sp/>of<sp/>TEST_F?&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*parameter_;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>parameter<sp/>value.<sp/>The<sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>making<sp/>sure<sp/>the<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remains<sp/>alive<sp/>and<sp/>unchanged<sp/>throughout<sp/>the<sp/>current<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetParam(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamType*<sp/>parameter)<sp/>{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/>parameter_<sp/>=<sp/>parameter;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>value<sp/>used<sp/>for<sp/>accessing<sp/>parameter<sp/>during<sp/>a<sp/>test<sp/>lifetime.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamType*<sp/>parameter_;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TestClass<sp/>must<sp/>be<sp/>a<sp/>subclass<sp/>of<sp/>WithParamInterface&lt;T&gt;<sp/>and<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TestClass&gt;<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">internal::ParameterizedTestFactory;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>WithParamInterface&lt;T&gt;::parameter_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Most<sp/>value-parameterized<sp/>classes<sp/>can<sp/>ignore<sp/>the<sp/>existence<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WithParamInterface,<sp/>and<sp/>can<sp/>just<sp/>inherit<sp/>from<sp/>::testing::TestWithParam.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestWithParam<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Test,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>WithParamInterface&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="1784"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_PARAM_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>for<sp/>indicating<sp/>success/failure<sp/>in<sp/>test<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ADD_FAILURE<sp/>unconditionally<sp/>adds<sp/>a<sp/>failure<sp/>to<sp/>the<sp/>current<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUCCEED<sp/>generates<sp/>a<sp/>success<sp/>-<sp/>it<sp/>doesn&apos;t<sp/>automatically<sp/>make<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight><highlight class="comment">//<sp/>current<sp/>test<sp/>successful,<sp/>as<sp/>a<sp/>test<sp/>is<sp/>only<sp/>successful<sp/>when<sp/>it<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXPECT_*<sp/>verifies<sp/>that<sp/>a<sp/>certain<sp/>condition<sp/>is<sp/>satisfied.<sp/><sp/>If<sp/>not,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>behaves<sp/>like<sp/>ADD_FAILURE.<sp/><sp/>In<sp/>particular:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_TRUE<sp/><sp/>verifies<sp/>that<sp/>a<sp/>Boolean<sp/>condition<sp/>is<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_FALSE<sp/>verifies<sp/>that<sp/>a<sp/>Boolean<sp/>condition<sp/>is<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FAIL<sp/>and<sp/>ASSERT_*<sp/>are<sp/>similar<sp/>to<sp/>ADD_FAILURE<sp/>and<sp/>EXPECT_*,<sp/>except</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>they<sp/>will<sp/>also<sp/>abort<sp/>the<sp/>current<sp/>function<sp/>on<sp/>failure.<sp/><sp/>People</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight><highlight class="comment">//<sp/>usually<sp/>want<sp/>the<sp/>fail-fast<sp/>behavior<sp/>of<sp/>FAIL<sp/>and<sp/>ASSERT_*,<sp/>but<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight><highlight class="comment">//<sp/>writing<sp/>data-driven<sp/>tests<sp/>often<sp/>find<sp/>themselves<sp/>using<sp/>ADD_FAILURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>EXPECT_*<sp/>more.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>nonfatal<sp/>failure<sp/>with<sp/>a<sp/>generic<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1808" refid="d8/d73/gtest_8h_1adc16b5b0a740c39084ea5c9e960e3063" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ADD_FAILURE()<sp/>GTEST_NONFATAL_FAILURE_(&quot;Failed&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>nonfatal<sp/>failure<sp/>at<sp/>the<sp/>given<sp/>source<sp/>file<sp/>location<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>generic<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812" refid="d8/d73/gtest_8h_1a448d7e5105b640e892fd8153fbee0b7f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ADD_FAILURE_AT(file,<sp/>line)<sp/>\</highlight></codeline>
<codeline lineno="1813"><highlight class="preprocessor"><sp/><sp/>GTEST_MESSAGE_AT_(file,<sp/>line,<sp/>&quot;Failed&quot;</highlight><highlight class="normal">,<sp/>\</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::TestPartResult::kNonFatalFailure)</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>fatal<sp/>failure<sp/>with<sp/>a<sp/>generic<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817" refid="d8/d73/gtest_8h_1a636231436707c30d6778f79ae96f5dc6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FAIL()<sp/>GTEST_FATAL_FAILURE_(&quot;Failed&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>this<sp/>macro<sp/>to<sp/>1<sp/>to<sp/>omit<sp/>the<sp/>definition<sp/>of<sp/>FAIL(),<sp/>which<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generic<sp/>name<sp/>and<sp/>clashes<sp/>with<sp/>some<sp/>other<sp/>libraries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_DONT_DEFINE_FAIL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822" refid="d8/d73/gtest_8h_1a3e26a8d27caa386ed0ea7ce9d5b7c4ed" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FAIL()<sp/>GTEST_FAIL()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>success<sp/>with<sp/>a<sp/>generic<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826" refid="d8/d73/gtest_8h_1a2690441c38202728f4159ac2462d9720" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_SUCCEED()<sp/>GTEST_SUCCESS_(&quot;Succeeded&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>this<sp/>macro<sp/>to<sp/>1<sp/>to<sp/>omit<sp/>the<sp/>definition<sp/>of<sp/>SUCCEED(),<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>generic<sp/>name<sp/>and<sp/>clashes<sp/>with<sp/>some<sp/>other<sp/>libraries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_DONT_DEFINE_SUCCEED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1831" refid="d8/d73/gtest_8h_1a75adcdf89f69b0b615e395daafc315af" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>SUCCEED()<sp/>GTEST_SUCCEED()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>for<sp/>testing<sp/>exceptions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_THROW(statement,<sp/>expected_exception):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>the<sp/>statement<sp/>throws<sp/>the<sp/>expected<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_NO_THROW(statement):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>the<sp/>statement<sp/>doesn&apos;t<sp/>throw<sp/>any<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_ANY_THROW(statement):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>the<sp/>statement<sp/>throws<sp/>an<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843" refid="d8/d73/gtest_8h_1a789842b4475eed948e6fd18390d5a859" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_THROW(statement,<sp/>expected_exception)<sp/>\</highlight></codeline>
<codeline lineno="1844"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_THROW_(statement,<sp/>expected_exception,<sp/>GTEST_NONFATAL_FAILURE_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845" refid="d8/d73/gtest_8h_1a2743a1438137ad857aa3f9fec3ff67ec" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_NO_THROW(statement)<sp/>\</highlight></codeline>
<codeline lineno="1846"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_NO_THROW_(statement,<sp/>GTEST_NONFATAL_FAILURE_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847" refid="d8/d73/gtest_8h_1a9be43f44d148e8a8d6a89c864bf4e461" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_ANY_THROW(statement)<sp/>\</highlight></codeline>
<codeline lineno="1848"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_ANY_THROW_(statement,<sp/>GTEST_NONFATAL_FAILURE_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849" refid="d8/d73/gtest_8h_1aedb1eddae6c2a2430b0e7b7e03b4f052" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_THROW(statement,<sp/>expected_exception)<sp/>\</highlight></codeline>
<codeline lineno="1850"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_THROW_(statement,<sp/>expected_exception,<sp/>GTEST_FATAL_FAILURE_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851" refid="d8/d73/gtest_8h_1a895c34d9b192cdc2ba46d2680623485d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_NO_THROW(statement)<sp/>\</highlight></codeline>
<codeline lineno="1852"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_NO_THROW_(statement,<sp/>GTEST_FATAL_FAILURE_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853" refid="d8/d73/gtest_8h_1affadeef9379fe5aabf6f28d9eab9d3c0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_ANY_THROW(statement)<sp/>\</highlight></codeline>
<codeline lineno="1854"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_ANY_THROW_(statement,<sp/>GTEST_FATAL_FAILURE_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Boolean<sp/>assertions.<sp/>Condition<sp/>can<sp/>be<sp/>either<sp/>a<sp/>Boolean<sp/>expression<sp/>or<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AssertionResult.<sp/>For<sp/>more<sp/>information<sp/>on<sp/>how<sp/>to<sp/>use<sp/>AssertionResult<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight><highlight class="comment">//<sp/>these<sp/>macros<sp/>see<sp/>comments<sp/>on<sp/>that<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859" refid="d8/d73/gtest_8h_1ac33e7cdfb5d44a7a0f0ab552eb5c3c6a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_TRUE(condition)<sp/>\</highlight></codeline>
<codeline lineno="1860"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_BOOLEAN_(condition,<sp/>#condition,<sp/>false,<sp/>true,<sp/>\</highlight></codeline>
<codeline lineno="1861"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_NONFATAL_FAILURE_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862" refid="d8/d73/gtest_8h_1aeb6c7ae89f440c90c1a1815951c836da" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_FALSE(condition)<sp/>\</highlight></codeline>
<codeline lineno="1863"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_BOOLEAN_(!(condition),<sp/>#condition,<sp/>true,<sp/>false,<sp/>\</highlight></codeline>
<codeline lineno="1864"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_NONFATAL_FAILURE_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865" refid="d8/d73/gtest_8h_1ae9244bfbda562e8b798789b001993fa5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_TRUE(condition)<sp/>\</highlight></codeline>
<codeline lineno="1866"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_BOOLEAN_(condition,<sp/>#condition,<sp/>false,<sp/>true,<sp/>\</highlight></codeline>
<codeline lineno="1867"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FATAL_FAILURE_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868" refid="d8/d73/gtest_8h_1a8197fa52f3538588d20d8af4834c9003" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_FALSE(condition)<sp/>\</highlight></codeline>
<codeline lineno="1869"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_BOOLEAN_(!(condition),<sp/>#condition,<sp/>true,<sp/>false,<sp/>\</highlight></codeline>
<codeline lineno="1870"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FATAL_FAILURE_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>the<sp/>auto-generated<sp/>header<sp/>that<sp/>implements<sp/>a<sp/>family<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generic<sp/>predicate<sp/>assertion<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="db/d6e/gtest__pred__impl_8h" kindref="compound">gtest/gtest_pred_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>for<sp/>testing<sp/>equalities<sp/>and<sp/>inequalities.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_EQ(v1,<sp/>v2):<sp/>Tests<sp/>that<sp/>v1<sp/>==<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_NE(v1,<sp/>v2):<sp/>Tests<sp/>that<sp/>v1<sp/>!=<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_LT(v1,<sp/>v2):<sp/>Tests<sp/>that<sp/>v1<sp/>&lt;<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_LE(v1,<sp/>v2):<sp/>Tests<sp/>that<sp/>v1<sp/>&lt;=<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_GT(v1,<sp/>v2):<sp/>Tests<sp/>that<sp/>v1<sp/>&gt;<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_GE(v1,<sp/>v2):<sp/>Tests<sp/>that<sp/>v1<sp/>&gt;=<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>they<sp/>are<sp/>not,<sp/>Google<sp/>Test<sp/>prints<sp/>both<sp/>the<sp/>tested<sp/>expressions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="comment">//<sp/>their<sp/>actual<sp/>values.<sp/><sp/>The<sp/>values<sp/>must<sp/>be<sp/>compatible<sp/>built-in<sp/>types,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>you<sp/>will<sp/>get<sp/>a<sp/>compiler<sp/>error.<sp/><sp/>By<sp/>&quot;compatible&quot;<sp/>we<sp/>mean<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight><highlight class="comment">//<sp/>values<sp/>can<sp/>be<sp/>compared<sp/>by<sp/>the<sp/>respective<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>It<sp/>is<sp/>possible<sp/>to<sp/>make<sp/>a<sp/>user-defined<sp/>type<sp/>work<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{ASSERT|EXPECT}_??(),<sp/>but<sp/>that<sp/>requires<sp/>overloading<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>comparison<sp/>operators<sp/>and<sp/>is<sp/>thus<sp/>discouraged<sp/>by<sp/>the<sp/>Google<sp/>C++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Usage<sp/>Guide.<sp/><sp/>Therefore,<sp/>you<sp/>are<sp/>advised<sp/>to<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{ASSERT|EXPECT}_TRUE()<sp/>macro<sp/>to<sp/>assert<sp/>that<sp/>two<sp/>objects<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>The<sp/>{ASSERT|EXPECT}_??()<sp/>macros<sp/>do<sp/>pointer<sp/>comparisons<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>pointers<sp/>(in<sp/>particular,<sp/>C<sp/>strings).<sp/><sp/>Therefore,<sp/>if<sp/>you<sp/>use<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>with<sp/>two<sp/>C<sp/>strings,<sp/>you<sp/>are<sp/>testing<sp/>how<sp/>their<sp/>locations<sp/>in<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>are<sp/>related,<sp/>not<sp/>how<sp/>their<sp/>content<sp/>is<sp/>related.<sp/><sp/>To<sp/>compare<sp/>two<sp/>C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>strings<sp/>by<sp/>content,<sp/>use<sp/>{ASSERT|EXPECT}_STR*().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>3.<sp/>{ASSERT|EXPECT}_EQ(v1,<sp/>v2)<sp/>is<sp/>preferred<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{ASSERT|EXPECT}_TRUE(v1<sp/>==<sp/>v2),<sp/>as<sp/>the<sp/>former<sp/>tells<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>what<sp/>the<sp/>actual<sp/>value<sp/>is<sp/>when<sp/>it<sp/>fails,<sp/>and<sp/>similarly<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>other<sp/>comparisons.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>4.<sp/>Do<sp/>not<sp/>depend<sp/>on<sp/>the<sp/>order<sp/>in<sp/>which<sp/>{ASSERT|EXPECT}_??()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>evaluate<sp/>their<sp/>arguments,<sp/>which<sp/>is<sp/>undefined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>5.<sp/>These<sp/>macros<sp/>evaluate<sp/>their<sp/>arguments<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Examples:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_NE(5,<sp/>Foo());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_EQ(NULL,<sp/>a_pointer);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ASSERT_LT(i,<sp/>array_size);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ASSERT_GT(records.size(),<sp/>0)<sp/>&lt;&lt;<sp/>&quot;There<sp/>is<sp/>no<sp/>record<sp/>left.&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922" refid="d8/d73/gtest_8h_1a4159019abda84f5366acdb7604ff220a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_EQ(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1923"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::<sp/>\</highlight></codeline>
<codeline lineno="1924"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqHelper&lt;GTEST_IS_NULL_LITERAL_(val1)&gt;::Compare,<sp/>\</highlight></codeline>
<codeline lineno="1925"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1926" refid="d8/d73/gtest_8h_1a6ae7443947f25abc58bfcfcfc56b0d75" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_NE(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1927"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperNE,<sp/>val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928" refid="d8/d73/gtest_8h_1ae0f265632323b4a07b585dcfde10f60a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_LE(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1929"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperLE,<sp/>val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1930" refid="d8/d73/gtest_8h_1af28c06b2b5e8dee151896f299f6610cf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_LT(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1931"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperLT,<sp/>val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1932" refid="d8/d73/gtest_8h_1ab7a0ff4bfa4d9b27baa118d8b0756ca0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_GE(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1933"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperGE,<sp/>val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1934" refid="d8/d73/gtest_8h_1aa8bc8320813e1abb0016129b636e3b27" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_GT(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1935"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperGT,<sp/>val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1937" refid="d8/d73/gtest_8h_1a8a7a47387090810cdfe78933d348182d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ASSERT_EQ(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1938"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::<sp/>\</highlight></codeline>
<codeline lineno="1939"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqHelper&lt;GTEST_IS_NULL_LITERAL_(val1)&gt;::Compare,<sp/>\</highlight></codeline>
<codeline lineno="1940"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1941" refid="d8/d73/gtest_8h_1a6fa9bb2b6731eba8f481e40e9e4931b3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ASSERT_NE(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1942"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperNE,<sp/>val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1943" refid="d8/d73/gtest_8h_1abef04dcd4a0259d378de7b3b3ffb6730" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ASSERT_LE(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1944"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperLE,<sp/>val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945" refid="d8/d73/gtest_8h_1a5a75667e637febd18e5f7d4f3abf55e8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ASSERT_LT(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1946"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperLT,<sp/>val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947" refid="d8/d73/gtest_8h_1a55373d99c079ff1b894e2eb5bcd15c5a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ASSERT_GE(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1948"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperGE,<sp/>val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1949" refid="d8/d73/gtest_8h_1a088b9056fd1c1f316b41c22f64deb33a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_ASSERT_GT(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1950"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperGT,<sp/>val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>macro<sp/>GTEST_DONT_DEFINE_ASSERT_XY<sp/>to<sp/>1<sp/>to<sp/>omit<sp/>the<sp/>definition<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ASSERT_XY(),<sp/>which<sp/>clashes<sp/>with<sp/>some<sp/>users&apos;<sp/>own<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_DONT_DEFINE_ASSERT_EQ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1956" refid="d8/d73/gtest_8h_1a1a6db8b1338ee7040329322b77779086" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>ASSERT_EQ(val1,<sp/>val2)<sp/>GTEST_ASSERT_EQ(val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_DONT_DEFINE_ASSERT_NE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1960" refid="d8/d73/gtest_8h_1aa866c8dece57912e6f51495ed3e8d8d5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>ASSERT_NE(val1,<sp/>val2)<sp/>GTEST_ASSERT_NE(val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_DONT_DEFINE_ASSERT_LE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1964" refid="d8/d73/gtest_8h_1a775643748feff0b490aae651d041e971" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>ASSERT_LE(val1,<sp/>val2)<sp/>GTEST_ASSERT_LE(val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_DONT_DEFINE_ASSERT_LT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1968" refid="d8/d73/gtest_8h_1affc4f9cae4c3aabfe60fced83737b42c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>ASSERT_LT(val1,<sp/>val2)<sp/>GTEST_ASSERT_LT(val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_DONT_DEFINE_ASSERT_GE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1972" refid="d8/d73/gtest_8h_1af4ff5dc71479fcb374b6bc2ed195bcc4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>ASSERT_GE(val1,<sp/>val2)<sp/>GTEST_ASSERT_GE(val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_DONT_DEFINE_ASSERT_GT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1976" refid="d8/d73/gtest_8h_1a16a882d4eafc9f8643867aea40879140" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>ASSERT_GT(val1,<sp/>val2)<sp/>GTEST_ASSERT_GT(val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C-string<sp/>Comparisons.<sp/><sp/>All<sp/>tests<sp/>treat<sp/>NULL<sp/>and<sp/>any<sp/>non-NULL<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>different.<sp/><sp/>Two<sp/>NULLs<sp/>are<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_STREQ(s1,<sp/>s2):<sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>s1<sp/>==<sp/>s2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_STRNE(s1,<sp/>s2):<sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>s1<sp/>!=<sp/>s2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_STRCASEEQ(s1,<sp/>s2):<sp/>Tests<sp/>that<sp/>s1<sp/>==<sp/>s2,<sp/>ignoring<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_STRCASENE(s1,<sp/>s2):<sp/>Tests<sp/>that<sp/>s1<sp/>!=<sp/>s2,<sp/>ignoring<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>wide<sp/>or<sp/>narrow<sp/>string<sp/>objects,<sp/>you<sp/>can<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{ASSERT|EXPECT}_??()<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>depend<sp/>on<sp/>the<sp/>order<sp/>in<sp/>which<sp/>the<sp/>arguments<sp/>are<sp/>evaluated,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>undefined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>macros<sp/>evaluate<sp/>their<sp/>arguments<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995" refid="d8/d73/gtest_8h_1ad20f7b94ac5081e16f0005b94e95f0c6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_STREQ(s1,<sp/>s2)<sp/>\</highlight></codeline>
<codeline lineno="1996"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTREQ,<sp/>s1,<sp/>s2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1997" refid="d8/d73/gtest_8h_1aee7e9c42f55549dbc0dfc42391eb9775" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_STRNE(s1,<sp/>s2)<sp/>\</highlight></codeline>
<codeline lineno="1998"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRNE,<sp/>s1,<sp/>s2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999" refid="d8/d73/gtest_8h_1a740cab7e3eec5c178a64b4f558bde66e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_STRCASEEQ(s1,<sp/>s2)<sp/>\</highlight></codeline>
<codeline lineno="2000"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASEEQ,<sp/>s1,<sp/>s2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2001" refid="d8/d73/gtest_8h_1a07d0b5cbd3b5f7c8b6f44c609046ff07" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_STRCASENE(s1,<sp/>s2)\</highlight></codeline>
<codeline lineno="2002"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASENE,<sp/>s1,<sp/>s2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight></codeline>
<codeline lineno="2004" refid="d8/d73/gtest_8h_1a74f4189ea570bab9a65d47104659ef9c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_STREQ(s1,<sp/>s2)<sp/>\</highlight></codeline>
<codeline lineno="2005"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTREQ,<sp/>s1,<sp/>s2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006" refid="d8/d73/gtest_8h_1a3d679660ac1b2f9f6e6c7608452af923" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_STRNE(s1,<sp/>s2)<sp/>\</highlight></codeline>
<codeline lineno="2007"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRNE,<sp/>s1,<sp/>s2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2008" refid="d8/d73/gtest_8h_1a58847dd696200a3268361401dfcd0fa0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_STRCASEEQ(s1,<sp/>s2)<sp/>\</highlight></codeline>
<codeline lineno="2009"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASEEQ,<sp/>s1,<sp/>s2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2010" refid="d8/d73/gtest_8h_1ac3d2c3836b103068a050f32585b2aaad" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_STRCASENE(s1,<sp/>s2)\</highlight></codeline>
<codeline lineno="2011"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASENE,<sp/>s1,<sp/>s2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>for<sp/>comparing<sp/>floating-point<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_FLOAT_EQ(val1,<sp/>val2):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>two<sp/>float<sp/>values<sp/>are<sp/>almost<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_DOUBLE_EQ(val1,<sp/>val2):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>two<sp/>double<sp/>values<sp/>are<sp/>almost<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_NEAR(v1,<sp/>v2,<sp/>abs_error):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>v1<sp/>and<sp/>v2<sp/>are<sp/>within<sp/>the<sp/>given<sp/>distance<sp/>to<sp/>each<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>uses<sp/>ULP-based<sp/>comparison<sp/>to<sp/>automatically<sp/>pick<sp/>a<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight><highlight class="comment">//<sp/>error<sp/>bound<sp/>that<sp/>is<sp/>appropriate<sp/>for<sp/>the<sp/>operands.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FloatingPoint<sp/>template<sp/>class<sp/>in<sp/>gtest-internal.h<sp/>if<sp/>you<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight><highlight class="comment">//<sp/>interested<sp/>in<sp/>the<sp/>implementation<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight></codeline>
<codeline lineno="2027" refid="d8/d73/gtest_8h_1a981e552322fb084042d02d6dfa9860ca" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_FLOAT_EQ(val1,<sp/>val2)\</highlight></codeline>
<codeline lineno="2028"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ&lt;float&gt;,<sp/>\</highlight></codeline>
<codeline lineno="2029"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight></codeline>
<codeline lineno="2031" refid="d8/d73/gtest_8h_1ab4852f9430cf656690256ea7fe6323b8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_DOUBLE_EQ(val1,<sp/>val2)\</highlight></codeline>
<codeline lineno="2032"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ&lt;double&gt;,<sp/>\</highlight></codeline>
<codeline lineno="2033"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight></codeline>
<codeline lineno="2035" refid="d8/d73/gtest_8h_1a4663ffbf844baa54bdb29f9148fd0f96" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_FLOAT_EQ(val1,<sp/>val2)\</highlight></codeline>
<codeline lineno="2036"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ&lt;float&gt;,<sp/>\</highlight></codeline>
<codeline lineno="2037"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight></codeline>
<codeline lineno="2039" refid="d8/d73/gtest_8h_1a6617da62e5ae5490995a3bfca1f331a9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_DOUBLE_EQ(val1,<sp/>val2)\</highlight></codeline>
<codeline lineno="2040"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ&lt;double&gt;,<sp/>\</highlight></codeline>
<codeline lineno="2041"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val1,<sp/>val2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043" refid="d8/d73/gtest_8h_1a88cd7978af0e7dbd42cd606dfabdcc6f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_NEAR(val1,<sp/>val2,<sp/>abs_error)\</highlight></codeline>
<codeline lineno="2044"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT3(::testing::internal::DoubleNearPredFormat,<sp/>\</highlight></codeline>
<codeline lineno="2045"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val1,<sp/>val2,<sp/>abs_error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight></codeline>
<codeline lineno="2047" refid="d8/d73/gtest_8h_1a73cce6b752d204f91a36bef2f8e663b3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_NEAR(val1,<sp/>val2,<sp/>abs_error)\</highlight></codeline>
<codeline lineno="2048"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT3(::testing::internal::DoubleNearPredFormat,<sp/>\</highlight></codeline>
<codeline lineno="2049"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val1,<sp/>val2,<sp/>abs_error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>predicate<sp/>format<sp/>functions<sp/>work<sp/>on<sp/>floating-point<sp/>values,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>used<sp/>in<sp/>{ASSERT|EXPECT}_PRED_FORMAT2*(),<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_PRED_FORMAT2(testing::DoubleLE,<sp/>Foo(),<sp/>5.0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Asserts<sp/>that<sp/>val1<sp/>is<sp/>less<sp/>than,<sp/>or<sp/>almost<sp/>equal<sp/>to,<sp/>val2.<sp/><sp/>Fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise.<sp/><sp/>In<sp/>particular,<sp/>it<sp/>fails<sp/>if<sp/>either<sp/>val1<sp/>or<sp/>val2<sp/>is<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/>AssertionResult<sp/><ref refid="d0/d75/namespacetesting_1aef005b3a2875c4878ba5891db34f7734" kindref="member">FloatLE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr2,</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val2);</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/>AssertionResult<sp/><ref refid="d0/d75/namespacetesting_1afc633c2faafd31f51fe686389a5a2de7" kindref="member">DoubleLE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr2,</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val2);</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>that<sp/>test<sp/>for<sp/>HRESULT<sp/>failure<sp/>and<sp/>success,<sp/>these<sp/>are<sp/>only<sp/>useful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>Windows,<sp/>and<sp/>rely<sp/>on<sp/>Windows<sp/>SDK<sp/>macros<sp/>and<sp/>APIs<sp/>to<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_HRESULT_{SUCCEEDED|FAILED}(expr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>expr<sp/>unexpectedly<sp/>fails<sp/>or<sp/>succeeds,<sp/>Google<sp/>Test<sp/>prints<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expected<sp/>result<sp/>and<sp/>the<sp/>actual<sp/>result<sp/>with<sp/>both<sp/>a<sp/>human-readable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight><highlight class="comment">//<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>error,<sp/>if<sp/>available,<sp/>as<sp/>well<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight><highlight class="comment">//<sp/>hex<sp/>result<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EXPECT_HRESULT_SUCCEEDED(expr)<sp/>\</highlight></codeline>
<codeline lineno="2076"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT1(::testing::internal::IsHRESULTSuccess,<sp/>(expr))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>ASSERT_HRESULT_SUCCEEDED(expr)<sp/>\</highlight></codeline>
<codeline lineno="2079"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT1(::testing::internal::IsHRESULTSuccess,<sp/>(expr))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>EXPECT_HRESULT_FAILED(expr)<sp/>\</highlight></codeline>
<codeline lineno="2082"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT1(::testing::internal::IsHRESULTFailure,<sp/>(expr))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>ASSERT_HRESULT_FAILED(expr)<sp/>\</highlight></codeline>
<codeline lineno="2085"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT1(::testing::internal::IsHRESULTFailure,<sp/>(expr))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>that<sp/>execute<sp/>statement<sp/>and<sp/>check<sp/>that<sp/>it<sp/>doesn&apos;t<sp/>generate<sp/>new<sp/>fatal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failures<sp/>in<sp/>the<sp/>current<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_NO_FATAL_FAILURE(statement);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Examples:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_NO_FATAL_FAILURE(Process());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ASSERT_NO_FATAL_FAILURE(Process())<sp/>&lt;&lt;<sp/>&quot;Process()<sp/>failed&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2099" refid="d8/d73/gtest_8h_1a5034fda3490aad5a93942ac83f4cea49" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_NO_FATAL_FAILURE(statement)<sp/>\</highlight></codeline>
<codeline lineno="2100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_TEST_NO_FATAL_FAILURE_(statement,<sp/>GTEST_FATAL_FAILURE_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2101" refid="d8/d73/gtest_8h_1a067c02ccaf3171d6e1781cd0f8cdcf74" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_NO_FATAL_FAILURE(statement)<sp/>\</highlight></codeline>
<codeline lineno="2102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_TEST_NO_FATAL_FAILURE_(statement,<sp/>GTEST_NONFATAL_FAILURE_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Causes<sp/>a<sp/>trace<sp/>(including<sp/>the<sp/>source<sp/>file<sp/>path,<sp/>the<sp/>current<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number,<sp/>and<sp/>the<sp/>given<sp/>message)<sp/>to<sp/>be<sp/>included<sp/>in<sp/>every<sp/>test<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>message<sp/>generated<sp/>by<sp/>code<sp/>in<sp/>the<sp/>current<sp/>scope.<sp/><sp/>The<sp/>effect<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>undone<sp/>when<sp/>the<sp/>control<sp/>leaves<sp/>the<sp/>current<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>message<sp/>argument<sp/>can<sp/>be<sp/>anything<sp/>streamable<sp/>to<sp/>std::ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>implementation,<sp/>we<sp/>include<sp/>the<sp/>current<sp/>line<sp/>number<sp/>as<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>dummy<sp/>variable<sp/>name,<sp/>thus<sp/>allowing<sp/>multiple<sp/>SCOPED_TRACE()s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>appear<sp/>in<sp/>the<sp/>same<sp/>block<sp/>-<sp/>as<sp/>long<sp/>as<sp/>they<sp/>are<sp/>on<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115" refid="d8/d73/gtest_8h_1a4dac08f15adc8cb1ee0e5c1bfb0f440d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCOPED_TRACE(message)<sp/>\</highlight></codeline>
<codeline lineno="2116"><highlight class="preprocessor"><sp/><sp/>::testing::internal::ScopedTrace<sp/>GTEST_CONCAT_TOKEN_(gtest_trace_,<sp/>__LINE__)(\</highlight></codeline>
<codeline lineno="2117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__FILE__,<sp/>__LINE__,<sp/>::testing::Message()<sp/>&lt;&lt;<sp/>(message))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compile-time<sp/>assertion<sp/>for<sp/>type<sp/>equality.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StaticAssertTypeEq&lt;type1,<sp/>type2&gt;()<sp/>compiles<sp/>iff<sp/>type1<sp/>and<sp/>type2<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>type.<sp/><sp/>The<sp/>value<sp/>it<sp/>returns<sp/>is<sp/>not<sp/>interesting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Instead<sp/>of<sp/>making<sp/>StaticAssertTypeEq<sp/>a<sp/>class<sp/>template,<sp/>we<sp/>make<sp/>it<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>template<sp/>that<sp/>invokes<sp/>a<sp/>helper<sp/>class<sp/>template.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>prevents<sp/>a<sp/>user<sp/>from<sp/>misusing<sp/>StaticAssertTypeEq&lt;T1,<sp/>T2&gt;<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defining<sp/>objects<sp/>of<sp/>that<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CAVEAT:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>used<sp/>inside<sp/>a<sp/>method<sp/>of<sp/>a<sp/>class<sp/>template,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StaticAssertTypeEq&lt;T1,<sp/>T2&gt;()<sp/>is<sp/>effective<sp/>ONLY<sp/>IF<sp/>the<sp/>method<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiated.<sp/><sp/>For<sp/>example,<sp/>given:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;<sp/>class<sp/>Foo<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>public:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>void<sp/>Bar()<sp/>{<sp/>testing::StaticAssertTypeEq&lt;int,<sp/>T&gt;();<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>code:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>Test1()<sp/>{<sp/>Foo&lt;bool&gt;<sp/>foo;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>NOT<sp/>generate<sp/>a<sp/>compiler<sp/>error,<sp/>as<sp/>Foo&lt;bool&gt;::Bar()<sp/>is<sp/>never</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>actually<sp/>instantiated.<sp/><sp/>Instead,<sp/>you<sp/>need:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>Test2()<sp/>{<sp/>Foo&lt;bool&gt;<sp/>foo;<sp/>foo.Bar();<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>cause<sp/>a<sp/>compiler<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="2150" refid="d0/d75/namespacetesting_1a661e70fc6afeb5c085eed3716aa45059" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a661e70fc6afeb5c085eed3716aa45059" kindref="member">StaticAssertTypeEq</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/>(void)<ref refid="da/d22/structtesting_1_1internal_1_1_static_assert_type_eq_helper" kindref="compound">internal::StaticAssertTypeEqHelper&lt;T1, T2&gt;</ref>();</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>a<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>parameter<sp/>is<sp/>the<sp/>name<sp/>of<sp/>the<sp/>test<sp/>case,<sp/>and<sp/>the<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameter<sp/>is<sp/>the<sp/>name<sp/>of<sp/>the<sp/>test<sp/>within<sp/>the<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>convention<sp/>is<sp/>to<sp/>end<sp/>the<sp/>test<sp/>case<sp/>name<sp/>with<sp/>&quot;Test&quot;.<sp/><sp/>For</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>example,<sp/>a<sp/>test<sp/>case<sp/>for<sp/>the<sp/>Foo<sp/>class<sp/>can<sp/>be<sp/>named<sp/>FooTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>code<sp/>should<sp/>appear<sp/>between<sp/>braces<sp/>after<sp/>an<sp/>invocation<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>macro.<sp/><sp/>Example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TEST(FooTest,<sp/>InitializesCorrectly)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Foo<sp/>foo;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(foo.StatusIsOK());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>we<sp/>call<sp/>GetTestTypeId()<sp/>instead<sp/>of<sp/>GetTypeId&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::testing::Test&gt;()<sp/>here<sp/>to<sp/>get<sp/>the<sp/>type<sp/>ID<sp/>of<sp/>testing::Test.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>to<sp/>work<sp/>around<sp/>a<sp/>suspected<sp/>linker<sp/>bug<sp/>when<sp/>using<sp/>Google<sp/>Test<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>framework<sp/>on<sp/>Mac<sp/>OS<sp/>X.<sp/><sp/>The<sp/>bug<sp/>causes<sp/>GetTypeId&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::testing::Test&gt;()<sp/>to<sp/>return<sp/>different<sp/>values<sp/>depending<sp/>on<sp/>whether</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>call<sp/>is<sp/>from<sp/>the<sp/>Google<sp/>Test<sp/>framework<sp/>itself<sp/>or<sp/>from<sp/>user<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code.<sp/><sp/>GetTestTypeId()<sp/>is<sp/>guaranteed<sp/>to<sp/>always<sp/>return<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value,<sp/>as<sp/>it<sp/>always<sp/>calls<sp/>GetTypeId&lt;&gt;()<sp/>from<sp/>the<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>framework.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180" refid="d8/d73/gtest_8h_1a725b565bedc3a34dc109901854214cc4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_TEST(test_case_name,<sp/>test_name)\</highlight></codeline>
<codeline lineno="2181"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_(test_case_name,<sp/>test_name,<sp/>\</highlight></codeline>
<codeline lineno="2182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Test,<sp/>::testing::internal::GetTestTypeId())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>this<sp/>macro<sp/>to<sp/>1<sp/>to<sp/>omit<sp/>the<sp/>definition<sp/>of<sp/>TEST(),<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>generic<sp/>name<sp/>and<sp/>clashes<sp/>with<sp/>some<sp/>other<sp/>libraries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_DONT_DEFINE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2187" refid="d8/d73/gtest_8h_1ad8b332753515c0ab8baada563c2547eb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>TEST(test_case_name,<sp/>test_name)<sp/>GTEST_TEST(test_case_name,<sp/>test_name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>a<sp/>test<sp/>that<sp/>uses<sp/>a<sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>parameter<sp/>is<sp/>the<sp/>name<sp/>of<sp/>the<sp/>test<sp/>fixture<sp/>class,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>also<sp/>doubles<sp/>as<sp/>the<sp/>test<sp/>case<sp/>name.<sp/><sp/>The<sp/>second<sp/>parameter<sp/>is<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>name<sp/>of<sp/>the<sp/>test<sp/>within<sp/>the<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>fixture<sp/>class<sp/>must<sp/>be<sp/>declared<sp/>earlier.<sp/><sp/>The<sp/>user<sp/>should<sp/>put</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>his<sp/>test<sp/>code<sp/>between<sp/>braces<sp/>after<sp/>using<sp/>this<sp/>macro.<sp/><sp/>Example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>class<sp/>FooTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>protected:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetUp()<sp/>{<sp/>b_.AddElement(3);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Foo<sp/>a_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Foo<sp/>b_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TEST_F(FooTest,<sp/>InitializesCorrectly)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(a_.StatusIsOK());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TEST_F(FooTest,<sp/>ReturnsElementCountCorrectly)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>a_.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>b_.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight></codeline>
<codeline lineno="2216" refid="d8/d73/gtest_8h_1a0ee66d464d1a06c20c1929cae09d8758" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_F(test_fixture,<sp/>test_name)\</highlight></codeline>
<codeline lineno="2217"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_(test_fixture,<sp/>test_name,<sp/>test_fixture,<sp/>\</highlight></codeline>
<codeline lineno="2218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::internal::GetTypeId&lt;test_fixture&gt;())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>this<sp/>function<sp/>in<sp/>main()<sp/>to<sp/>run<sp/>all<sp/>tests.<sp/><sp/>It<sp/>returns<sp/>0<sp/>if<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tests<sp/>are<sp/>successful,<sp/>or<sp/>1<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RUN_ALL_TESTS()<sp/>should<sp/>be<sp/>invoked<sp/>after<sp/>the<sp/>command<sp/>line<sp/>has<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parsed<sp/>by<sp/>InitGoogleTest().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>was<sp/>formerly<sp/>a<sp/>macro;<sp/>thus,<sp/>it<sp/>is<sp/>in<sp/>the<sp/>global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace<sp/>and<sp/>has<sp/>an<sp/>all-caps<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d8/d73/gtest_8h_1a853a3792807489591d3d4a2f2ff9359f" kindref="member">RUN_ALL_TESTS</ref>()<sp/><ref refid="d3/dc9/gtest-port_8h_1a8e5aab8276b2645f64f41c9e3021b935" kindref="member">GTEST_MUST_USE_RESULT_</ref>;</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232" refid="d8/d73/gtest_8h_1a853a3792807489591d3d4a2f2ff9359f" refkind="member"><highlight class="normal">inline<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d8/d73/gtest_8h_1a853a3792807489591d3d4a2f2ff9359f" kindref="member">RUN_ALL_TESTS</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/>return<sp/>::testing::UnitTest::GetInstance()-&gt;Run();</highlight></codeline>
<codeline lineno="2234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_INCLUDE_GTEST_GTEST_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/googletest/include/gtest/gtest.h"/>
  </compounddef>
</doxygen>
