<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d0/d8a/classleetcode_1_1_solutions" kind="class" language="C++" prot="public">
    <compoundname>leetcode::Solutions</compoundname>
    <includes refid="d2/d98/solutions_8h" local="no">solutions.h</includes>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d0/d8a/classleetcode_1_1_solutions_1adee95af37c768acd91ca8d5ff10e8128" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isPalindrome</definition>
        <argsstring>(std::string s)</argsstring>
        <name>isPalindrome</name>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leetcode_practice/src/solutions.h" line="14" column="10" bodyfile="leetcode_practice/src/solutions.cc" bodystart="5" bodyend="29"/>
        <references refid="d0/d8a/classleetcode_1_1_solutions_1a109efe39d5f565e82643209fe7afbd18" compoundref="d9/d25/solutions_8cc" startline="31" endline="34">Solutions::isValidChar</references>
        <references refid="cpp/string/basic_string/size_1">string::length</references>
        <referencedby refid="d0/d8a/classleetcode_1_1_solutions_1a5c9cb0761fff007d731583fcd56f63fe" compoundref="d9/d25/solutions_8cc" startline="98" endline="140">Solutions::minSwaps</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d8a/classleetcode_1_1_solutions_1a109efe39d5f565e82643209fe7afbd18" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isValidChar</definition>
        <argsstring>(char c)</argsstring>
        <name>isValidChar</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leetcode_practice/src/solutions.h" line="15" column="10" bodyfile="leetcode_practice/src/solutions.cc" bodystart="31" bodyend="34"/>
        <referencedby refid="d0/d8a/classleetcode_1_1_solutions_1adee95af37c768acd91ca8d5ff10e8128" compoundref="d9/d25/solutions_8cc" startline="5" endline="29">Solutions::isPalindrome</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d8a/classleetcode_1_1_solutions_1a84c40d3d4d89d92e2192f7b7985e1e4c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isValidString</definition>
        <argsstring>(std::string s)</argsstring>
        <name>isValidString</name>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leetcode_practice/src/solutions.h" line="16" column="10" bodyfile="leetcode_practice/src/solutions.cc" bodystart="36" bodyend="48"/>
        <references refid="cpp/io/manip/endl_1">std::endl</references>
        <referencedby refid="d0/d8a/classleetcode_1_1_solutions_1a5c9cb0761fff007d731583fcd56f63fe" compoundref="d9/d25/solutions_8cc" startline="98" endline="140">Solutions::minSwaps</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d0/d8a/classleetcode_1_1_solutions_1a1e18a492caa00dc950ccdb815ca6083b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int minDeletions</definition>
        <argsstring>(std::string s)</argsstring>
        <name>minDeletions</name>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Minimum Deletions to Make Character Frequencies Unique. </para>
        </briefdescription>
        <detaileddescription>
<para>A string s is called good if there are no two different characters in s that have the same frequency.</para>
<para>Given a string s, return the minimum number of characters you need to delete to make s good.</para>
<para>The frequency of a character in a string is the number of times it appears in the string.</para>
<para>For example, in the string &quot;aab&quot;, the frequency of &apos;a&apos; is 2, while the freqnency of &apos;b&apos; is 1. <simplesect kind="return"><para>the minmum number of characters you need tp delete to make s good </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leetcode_practice/src/solutions.h" line="24" column="9" bodyfile="leetcode_practice/src/solutions.cc" bodystart="61" bodyend="90"/>
        <references refid="cpp/container/map/rbegin_1">map&lt; K, T &gt;::rbegin</references>
        <references refid="cpp/container/map/rend_1">map&lt; K, T &gt;::rend</references>
      </memberdef>
      <memberdef kind="function" id="d0/d8a/classleetcode_1_1_solutions_1a5c9cb0761fff007d731583fcd56f63fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int minSwaps</definition>
        <argsstring>(std::string s)</argsstring>
        <name>minSwaps</name>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Minimum Adjacent Swaps to Make Palindrome. </para>
        </briefdescription>
        <detaileddescription>
<para>Given a string, what is the minimum number of adjacent swaps required to convert a string into a palindrome. If not possibl, return -1.</para>
<para><simplesect kind="return"><para>the minimum number of adjust required </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leetcode_practice/src/solutions.h" line="27" column="9" bodyfile="leetcode_practice/src/solutions.cc" bodystart="98" bodyend="140"/>
        <references refid="d0/d8a/classleetcode_1_1_solutions_1adee95af37c768acd91ca8d5ff10e8128" compoundref="d9/d25/solutions_8cc" startline="5" endline="29">Solutions::isPalindrome</references>
        <references refid="d0/d8a/classleetcode_1_1_solutions_1a84c40d3d4d89d92e2192f7b7985e1e4c" compoundref="d9/d25/solutions_8cc" startline="36" endline="48">Solutions::isValidString</references>
        <references refid="cpp/string/basic_string/size_1">string::length</references>
        <references refid="cpp/algorithm/min_1">std::min</references>
        <references refid="cpp/algorithm/swap_1">std::swap</references>
      </memberdef>
      <memberdef kind="function" id="d0/d8a/classleetcode_1_1_solutions_1a2ba0d78c77ecfe9fc178be8676b4f0f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Solutions</definition>
        <argsstring>()</argsstring>
        <name>Solutions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leetcode_practice/src/solutions.h" line="20" column="5" bodyfile="leetcode_practice/src/solutions.h" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="d0/d8a/classleetcode_1_1_solutions_1adb443c6ca1aab44c236d2ce98b45c983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; twoSum</definition>
        <argsstring>(std::vector&lt; int &gt; &amp;num, int target)</argsstring>
        <name>twoSum</name>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; int &gt; &amp;</type>
          <declname>num</declname>
        </param>
        <param>
          <type>int</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Two Sum. </para>
        </briefdescription>
        <detaileddescription>
<para>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</para>
<para><simplesect kind="return"><para>indices of the two numbers such that they add up to target </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leetcode_practice/src/solutions.h" line="30" column="17" bodyfile="leetcode_practice/src/solutions.cc" bodystart="148" bodyend="183"/>
        <references refid="cpp/container/vector/capacity_1">vector&lt; T &gt;::capacity</references>
        <references refid="cpp/container/map/clear_1">map&lt; K, T &gt;::clear</references>
        <references refid="cpp/container/vector/clear_1">vector&lt; T &gt;::clear</references>
        <references refid="cpp/container/map/count_1">map&lt; K, T &gt;::count</references>
        <references refid="cpp/container/map/insert_1">map&lt; K, T &gt;::insert</references>
        <references refid="cpp/container/vector/push_back_1">vector&lt; T &gt;::push_back</references>
      </memberdef>
      <memberdef kind="function" id="d0/d8a/classleetcode_1_1_solutions_1ab4cecc9ceb630676fb369aaa8b2453d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual ~Solutions</definition>
        <argsstring>()</argsstring>
        <name>~Solutions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leetcode_practice/src/solutions.h" line="21" column="13" bodyfile="leetcode_practice/src/solutions.h" bodystart="21" bodyend="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>Solutions</label>
        <link refid="d0/d8a/classleetcode_1_1_solutions"/>
      </node>
    </collaborationgraph>
    <location file="leetcode_practice/src/solutions.h" line="11" column="1" bodyfile="leetcode_practice/src/solutions.h" bodystart="12" bodyend="33"/>
    <listofallmembers>
      <member refid="d0/d8a/classleetcode_1_1_solutions_1adee95af37c768acd91ca8d5ff10e8128" prot="private" virt="non-virtual"><scope>leetcode::Solutions</scope><name>isPalindrome</name></member>
      <member refid="d0/d8a/classleetcode_1_1_solutions_1a109efe39d5f565e82643209fe7afbd18" prot="private" virt="non-virtual"><scope>leetcode::Solutions</scope><name>isValidChar</name></member>
      <member refid="d0/d8a/classleetcode_1_1_solutions_1a84c40d3d4d89d92e2192f7b7985e1e4c" prot="private" virt="non-virtual"><scope>leetcode::Solutions</scope><name>isValidString</name></member>
      <member refid="d0/d8a/classleetcode_1_1_solutions_1a1e18a492caa00dc950ccdb815ca6083b" prot="public" virt="non-virtual"><scope>leetcode::Solutions</scope><name>minDeletions</name></member>
      <member refid="d0/d8a/classleetcode_1_1_solutions_1a5c9cb0761fff007d731583fcd56f63fe" prot="public" virt="non-virtual"><scope>leetcode::Solutions</scope><name>minSwaps</name></member>
      <member refid="d0/d8a/classleetcode_1_1_solutions_1a2ba0d78c77ecfe9fc178be8676b4f0f2" prot="public" virt="non-virtual"><scope>leetcode::Solutions</scope><name>Solutions</name></member>
      <member refid="d0/d8a/classleetcode_1_1_solutions_1adb443c6ca1aab44c236d2ce98b45c983" prot="public" virt="non-virtual"><scope>leetcode::Solutions</scope><name>twoSum</name></member>
      <member refid="d0/d8a/classleetcode_1_1_solutions_1ab4cecc9ceb630676fb369aaa8b2453d5" prot="public" virt="virtual"><scope>leetcode::Solutions</scope><name>~Solutions</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
