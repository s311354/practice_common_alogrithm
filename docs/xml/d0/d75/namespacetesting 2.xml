<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d0/d75/namespacetesting" kind="namespace" language="C++">
    <compoundname>testing</compoundname>
    <innerclass refid="dd/d5f/classtesting_1_1AssertionResult" prot="public">testing::AssertionResult</innerclass>
    <innerclass refid="d6/d86/classtesting_1_1EmptyTestEventListener" prot="package">testing::EmptyTestEventListener</innerclass>
    <innerclass refid="dc/d71/classtesting_1_1Environment" prot="package">testing::Environment</innerclass>
    <innerclass refid="d3/d98/classtesting_1_1Message" prot="public">testing::Message</innerclass>
    <innerclass refid="df/d0c/classtesting_1_1ScopedFakeTestPartResultReporter" prot="public">testing::ScopedFakeTestPartResultReporter</innerclass>
    <innerclass refid="db/d9f/classtesting_1_1Test" prot="public">testing::Test</innerclass>
    <innerclass refid="d0/d9a/classtesting_1_1TestCase" prot="package">testing::TestCase</innerclass>
    <innerclass refid="d0/d51/classtesting_1_1TestEventListener" prot="package">testing::TestEventListener</innerclass>
    <innerclass refid="db/d70/classtesting_1_1TestEventListeners" prot="package">testing::TestEventListeners</innerclass>
    <innerclass refid="df/d65/classtesting_1_1TestInfo" prot="package">testing::TestInfo</innerclass>
    <innerclass refid="d9/d98/classtesting_1_1TestPartResult" prot="public">testing::TestPartResult</innerclass>
    <innerclass refid="dc/dce/classtesting_1_1TestPartResultArray" prot="public">testing::TestPartResultArray</innerclass>
    <innerclass refid="df/d70/classtesting_1_1TestPartResultReporterInterface" prot="public">testing::TestPartResultReporterInterface</innerclass>
    <innerclass refid="dd/dde/classtesting_1_1TestProperty" prot="package">testing::TestProperty</innerclass>
    <innerclass refid="d6/d6e/classtesting_1_1TestResult" prot="package">testing::TestResult</innerclass>
    <innerclass refid="d5/d21/classtesting_1_1UnitTest" prot="package">testing::UnitTest</innerclass>
    <innernamespace refid="d2/d38/namespacetesting_1_1anonymous__namespace_02gtest-printers_8cc_03">testing::anonymous_namespace{gtest-printers.cc}</innernamespace>
    <innernamespace refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03">testing::anonymous_namespace{gtest.cc}</innernamespace>
    <innernamespace refid="d0/da7/namespacetesting_1_1internal">testing::internal</innernamespace>
    <innernamespace refid="da/df7/namespacetesting_1_1internal2">testing::internal2</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d0/d75/namespacetesting_1aee868c7728386fadae30a11de067ca4e" prot="package" static="no" mutable="no">
        <type></type>
        <definition>testing::__pad0__</definition>
        <argsstring></argsstring>
        <name>__pad0__</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="480" column="1" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a23c33f4bfcc3c2e5e620eff31a98892d" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDeathTestCaseFilter[]</definition>
        <argsstring>[]</argsstring>
        <name>kDeathTestCaseFilter</name>
        <initializer>= &quot;*DeathTest:*DeathTest/*&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="165" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="165" bodyend="-1"/>
        <referencedby refid="d0/de3/classtesting_1_1internal_1_1UnitTestImpl_1ac5684d824a59e963cb3274c79d0b6df3" compoundref="df/d5b/gtest_8cc" startline="4502" endline="4535">testing::internal::UnitTestImpl::GetTestCase</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a317291240e750e2142a23cbd52bc5aec" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDefaultDeathTestStyle[]</definition>
        <argsstring>[]</argsstring>
        <name>kDefaultDeathTestStyle</name>
        <initializer>= &quot;fast&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-death-test.cc" line="84" column="19" bodyfile="lib/googletest/src/gtest-death-test.cc" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1aa5a002b5bb3784c830b1c99aa2688f27" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDefaultOutputFile[]</definition>
        <argsstring>[]</argsstring>
        <name>kDefaultOutputFile</name>
        <initializer>= &quot;test_detail.xml&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="171" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="171" bodyend="-1"/>
        <referencedby refid="d3/d9a/classtesting_1_1internal_1_1UnitTestOptions_1a993fb30ad66104158c8c0ac508daca3f" compoundref="df/d5b/gtest_8cc" startline="426" endline="455">testing::internal::UnitTestOptions::GetAbsolutePathToOutputFile</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a0a2a3239fb038e7ce83195d89941872d" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDisableTestFilter[]</definition>
        <argsstring>[]</argsstring>
        <name>kDisableTestFilter</name>
        <initializer>= &quot;DISABLED_*:*/DISABLED_*&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="160" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="160" bodyend="-1"/>
        <referencedby refid="d0/de3/classtesting_1_1internal_1_1UnitTestImpl_1abd47e447f0c2557ed528db0350671bed" compoundref="df/d5b/gtest_8cc" startline="4789" endline="4840">testing::internal::UnitTestImpl::FilterTests</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1ae605f2ccac04616bb7812ca72e517082" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int testing::kMaxStackTraceDepth</definition>
        <argsstring></argsstring>
        <name>kMaxStackTraceDepth</name>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="147" column="11" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1ae9689f28cd859736f734623b26c93d88" prot="public" static="yes" mutable="no">
        <type>const char *const</type>
        <definition>const char* const testing::kReservedTestCaseAttributes[]</definition>
        <argsstring>[]</argsstring>
        <name>kReservedTestCaseAttributes</name>
        <initializer>= {
  &quot;classname&quot;,
  &quot;name&quot;,
  &quot;status&quot;,
  &quot;time&quot;,
  &quot;type_param&quot;,
  &quot;value_param&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2098" column="25" bodyfile="lib/googletest/src/gtest.cc" bodystart="2098" bodyend="-1"/>
        <referencedby refid="d0/d75/namespacetesting_1acb3fdfadf475a3c2f5e22a3dae73532a" compoundref="df/d5b/gtest_8cc" startline="2112" endline="2125">GetReservedAttributesForElement</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1af44b2969928d37e9081145760f21e79a" prot="public" static="yes" mutable="no">
        <type>const char *const</type>
        <definition>const char* const testing::kReservedTestSuiteAttributes[]</definition>
        <argsstring>[]</argsstring>
        <name>kReservedTestSuiteAttributes</name>
        <initializer>= {
  &quot;disabled&quot;,
  &quot;errors&quot;,
  &quot;failures&quot;,
  &quot;name&quot;,
  &quot;tests&quot;,
  &quot;time&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2088" column="25" bodyfile="lib/googletest/src/gtest.cc" bodystart="2088" bodyend="-1"/>
        <referencedby refid="d0/d75/namespacetesting_1acb3fdfadf475a3c2f5e22a3dae73532a" compoundref="df/d5b/gtest_8cc" startline="2112" endline="2125">GetReservedAttributesForElement</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1afa194c15a2ac0e03029019b0f4029968" prot="public" static="yes" mutable="no">
        <type>const char *const</type>
        <definition>const char* const testing::kReservedTestSuitesAttributes[]</definition>
        <argsstring>[]</argsstring>
        <name>kReservedTestSuitesAttributes</name>
        <initializer>= {
  &quot;disabled&quot;,
  &quot;errors&quot;,
  &quot;failures&quot;,
  &quot;name&quot;,
  &quot;random_seed&quot;,
  &quot;tests&quot;,
  &quot;time&quot;,
  &quot;timestamp&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2075" column="25" bodyfile="lib/googletest/src/gtest.cc" bodystart="2075" bodyend="-1"/>
        <referencedby refid="d0/d75/namespacetesting_1acb3fdfadf475a3c2f5e22a3dae73532a" compoundref="df/d5b/gtest_8cc" startline="2112" endline="2125">GetReservedAttributesForElement</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a5f76dfdb8cb2664da54e320ecaba3643" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kTestShardIndex[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestShardIndex</name>
        <initializer>= &quot;GTEST_SHARD_INDEX&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="174" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="174" bodyend="-1"/>
        <referencedby refid="d0/de3/classtesting_1_1internal_1_1UnitTestImpl_1abd47e447f0c2557ed528db0350671bed" compoundref="df/d5b/gtest_8cc" startline="4789" endline="4840">testing::internal::UnitTestImpl::FilterTests</referencedby>
        <referencedby refid="d6/d49/classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_1abdba10a8c97e272ab4cee97cb652c957" compoundref="df/d5b/gtest_8cc" startline="3056" endline="3089">testing::internal::PrettyUnitTestResultPrinter::OnTestIterationStart</referencedby>
        <referencedby refid="d0/de3/classtesting_1_1internal_1_1UnitTestImpl_1a1fb6be9971f4768c4136a05aa9e7e375" compoundref="df/d5b/gtest_8cc" startline="4551" endline="4687">testing::internal::UnitTestImpl::RunAllTests</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a0fe41657b1d1ab7ec4e37ec07403ee6c" compoundref="df/d5b/gtest_8cc" startline="4715" endline="4755">testing::internal::ShouldShard</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a57d3eeb1e968b4f1efc4787b2d39fbfa" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kTestShardStatusFile[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestShardStatusFile</name>
        <initializer>= &quot;GTEST_SHARD_STATUS_FILE&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="178" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="178" bodyend="-1"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a19b35b39782d41e6ef76e1910a3a502e" compoundref="df/d5b/gtest_8cc" startline="4693" endline="4707">testing::internal::WriteToShardStatusFileIfNeeded</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a7542311baba200ebabd4065717606f6e" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kTestTotalShards[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestTotalShards</name>
        <initializer>= &quot;GTEST_TOTAL_SHARDS&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="176" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="176" bodyend="-1"/>
        <referencedby refid="d0/de3/classtesting_1_1internal_1_1UnitTestImpl_1abd47e447f0c2557ed528db0350671bed" compoundref="df/d5b/gtest_8cc" startline="4789" endline="4840">testing::internal::UnitTestImpl::FilterTests</referencedby>
        <referencedby refid="d6/d49/classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_1abdba10a8c97e272ab4cee97cb652c957" compoundref="df/d5b/gtest_8cc" startline="3056" endline="3089">testing::internal::PrettyUnitTestResultPrinter::OnTestIterationStart</referencedby>
        <referencedby refid="d0/de3/classtesting_1_1internal_1_1UnitTestImpl_1a1fb6be9971f4768c4136a05aa9e7e375" compoundref="df/d5b/gtest_8cc" startline="4551" endline="4687">testing::internal::UnitTestImpl::RunAllTests</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a0fe41657b1d1ab7ec4e37ec07403ee6c" compoundref="df/d5b/gtest_8cc" startline="4715" endline="4755">testing::internal::ShouldShard</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a236f8612e4b148d8d989a311a30a4557" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kUniversalFilter[]</definition>
        <argsstring>[]</argsstring>
        <name>kUniversalFilter</name>
        <initializer>= &quot;*&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="168" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="168" bodyend="-1"/>
        <referencedby refid="d3/d9a/classtesting_1_1internal_1_1UnitTestOptions_1a9975b59cece94874b303421697e3bca6" compoundref="df/d5b/gtest_8cc" startline="502" endline="528">testing::internal::UnitTestOptions::FilterMatchesTest</referencedby>
        <referencedby refid="d0/d75/namespacetesting_1a56fbc164c7dc53596c23e519d8f1ca3c" compoundref="df/d5b/gtest_8cc" startline="192" endline="200">GetDefaultFilter</referencedby>
        <referencedby refid="d6/d49/classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_1abdba10a8c97e272ab4cee97cb652c957" compoundref="df/d5b/gtest_8cc" startline="3056" endline="3089">testing::internal::PrettyUnitTestResultPrinter::OnTestIterationStart</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/d75/namespacetesting_1a460d7b998622e332392c1e00be3a60d5" prot="package" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/d71/classtesting_1_1Environment" kindref="compound">Environment</ref> *</type>
        <definition>Environment* testing::AddGlobalTestEnvironment</definition>
        <argsstring>(Environment *env)</argsstring>
        <name>AddGlobalTestEnvironment</name>
        <param>
          <type><ref refid="dc/d71/classtesting_1_1Environment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="1350" column="20" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="1350" bodyend="1352"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a956d4c522454fa6dfd75b5bbbefe8f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>kSize</declname>
            <defname>kSize</defname>
          </param>
        </templateparamlist>
        <type><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt;</type>
        <definition>std::vector&lt;std::string&gt; testing::ArrayAsVector</definition>
        <argsstring>(const char *const (&amp;array)[kSize])</argsstring>
        <name>ArrayAsVector</name>
        <param>
          <type>const char *const (&amp;)</type>
          <declname>array</declname>
          <array>[kSize]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2108" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="2108" bodyend="2110"/>
        <referencedby refid="d0/d75/namespacetesting_1acb3fdfadf475a3c2f5e22a3dae73532a" compoundref="df/d5b/gtest_8cc" startline="2112" endline="2125">GetReservedAttributesForElement</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a8d91083190a5914bfe8c5666e2dbca9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>GTEST_API_ AssertionResult testing::AssertionFailure</definition>
        <argsstring>()</argsstring>
        <name>AssertionFailure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1015" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1015" bodyend="1017" declfile="lib/googletest/include/gtest/gtest.h" declline="342" declcolumn="28"/>
        <referencedby refid="d0/d75/namespacetesting_1a37b4cce49a6850c1f06772de1940c28d" compoundref="df/d5b/gtest_8cc" startline="1021" endline="1023">AssertionFailure</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a41d32b74fac585ac04cc9ba037c9fed4" compoundref="db/d6e/gtest__pred__impl_8h" startline="87" endline="96">AssertPred1Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1aa21b5175030ef2d76837bde68459effe" compoundref="db/d6e/gtest__pred__impl_8h" startline="129" endline="142">AssertPred2Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1ae48a4ec033f85849b47bcbd2aa94baab" compoundref="db/d6e/gtest__pred__impl_8h" startline="178" endline="195">AssertPred3Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a22f4e27e6b18091281c45d4395c98517" compoundref="db/d6e/gtest__pred__impl_8h" startline="234" endline="255">AssertPred4Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a1012d0b317e600d13b1a74712f0d8a48" compoundref="db/d6e/gtest__pred__impl_8h" startline="297" endline="322">AssertPred5Helper</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a894ffccd936d78fd555f490020c27f0a" compoundref="d8/d73/gtest_8h" startline="1486" endline="1493">testing::internal::CmpHelperOpFailure</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a5f74b933606b0a742cd5a8ad2d7087e0" compoundref="df/d5b/gtest_8cc" startline="1533" endline="1545">testing::internal::CmpHelperSTRCASENE</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a6b485231a046ff760844a0321c04870b" compoundref="df/d5b/gtest_8cc" startline="1519" endline="1530">testing::internal::CmpHelperSTRNE</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1aea60207c4cedc8946a70ada62e38da8f" compoundref="df/d5b/gtest_8cc" startline="1362" endline="1379">testing::internal::DoubleNearPredFormat</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a290e3967783ec2de56981c8b1cec37de" compoundref="df/d5b/gtest_8cc" startline="1312" endline="1343">testing::internal::EqFailure</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a17b52b6b1f81f6dcad5cc4d12e5173a6" compoundref="df/d5b/gtest_8cc" startline="1384" endline="1415">testing::internal::FloatingPointLE</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a14ff02e6d151f45e998657674e9af88a" compoundref="df/d5b/gtest_8cc" startline="631" endline="665">testing::internal::HasOneFailure</referencedby>
        <referencedby refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a37b4cce49a6850c1f06772de1940c28d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>GTEST_API_ AssertionResult testing::AssertionFailure</definition>
        <argsstring>(const Message &amp;message)</argsstring>
        <name>AssertionFailure</name>
        <param>
          <type>const <ref refid="d3/d98/classtesting_1_1Message" kindref="compound">Message</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1021" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1021" bodyend="1023" declfile="lib/googletest/include/gtest/gtest.h" declline="346" declcolumn="28"/>
        <references refid="d0/d75/namespacetesting_1a8d91083190a5914bfe8c5666e2dbca9b" compoundref="df/d5b/gtest_8cc" startline="1015" endline="1017">AssertionFailure</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a74a3d26c1286bd4d7c189c5dff2483ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>GTEST_API_ AssertionResult testing::AssertionSuccess</definition>
        <argsstring>()</argsstring>
        <name>AssertionSuccess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1010" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1010" bodyend="1012" declfile="lib/googletest/include/gtest/gtest.h" declline="339" declcolumn="28"/>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a41d32b74fac585ac04cc9ba037c9fed4" compoundref="db/d6e/gtest__pred__impl_8h" startline="87" endline="96">AssertPred1Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1aa21b5175030ef2d76837bde68459effe" compoundref="db/d6e/gtest__pred__impl_8h" startline="129" endline="142">AssertPred2Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1ae48a4ec033f85849b47bcbd2aa94baab" compoundref="db/d6e/gtest__pred__impl_8h" startline="178" endline="195">AssertPred3Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a22f4e27e6b18091281c45d4395c98517" compoundref="db/d6e/gtest__pred__impl_8h" startline="234" endline="255">AssertPred4Helper</referencedby>
        <referencedby refid="db/d6e/gtest__pred__impl_8h_1a1012d0b317e600d13b1a74712f0d8a48" compoundref="db/d6e/gtest__pred__impl_8h" startline="297" endline="322">AssertPred5Helper</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a4638c74d9b32e971f9b321af6fafc2f1" compoundref="d8/d73/gtest_8h" startline="1387" endline="1398">testing::internal::CmpHelperEQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a98ce463e5dbe0c6120fa817e1f8f2944" compoundref="d8/d73/gtest_8h" startline="1631" endline="1654">testing::internal::CmpHelperFloatingPointEQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a898b1e47a9d978e99318b224f69a54e4" compoundref="df/d5b/gtest_8cc" startline="1503" endline="1516">testing::internal::CmpHelperSTRCASEEQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a5f74b933606b0a742cd5a8ad2d7087e0" compoundref="df/d5b/gtest_8cc" startline="1533" endline="1545">testing::internal::CmpHelperSTRCASENE</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a2863c85877728b2c223cf6ade4a530c1" compoundref="df/d5b/gtest_8cc" startline="1487" endline="1500">testing::internal::CmpHelperSTREQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a6b485231a046ff760844a0321c04870b" compoundref="df/d5b/gtest_8cc" startline="1519" endline="1530">testing::internal::CmpHelperSTRNE</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1aea60207c4cedc8946a70ada62e38da8f" compoundref="df/d5b/gtest_8cc" startline="1362" endline="1379">testing::internal::DoubleNearPredFormat</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a17b52b6b1f81f6dcad5cc4d12e5173a6" compoundref="df/d5b/gtest_8cc" startline="1384" endline="1415">testing::internal::FloatingPointLE</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a14ff02e6d151f45e998657674e9af88a" compoundref="df/d5b/gtest_8cc" startline="631" endline="665">testing::internal::HasOneFailure</referencedby>
        <referencedby refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a84c020b981d0eb4eabfb0feda155aaaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>GTEST_API_ AssertionResult testing::DoubleLE</definition>
        <argsstring>(const char *expr1, const char *expr2, double val1, double val2)</argsstring>
        <name>DoubleLE</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1428" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1428" bodyend="1431" declfile="lib/googletest/include/gtest/gtest.h" declline="2060" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a69106491c2e7f50e50da0ce5e8ae4374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>GTEST_API_ AssertionResult testing::FloatLE</definition>
        <argsstring>(const char *expr1, const char *expr2, float val1, float val2)</argsstring>
        <name>FloatLE</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1421" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1421" bodyend="1424" declfile="lib/googletest/include/gtest/gtest.h" declline="2058" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a33e070c3e994cb75f9017fa2a044d536" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>static std::string testing::FormatCountableNoun</definition>
        <argsstring>(int count, const char *singular_form, const char *plural_form)</argsstring>
        <name>FormatCountableNoun</name>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>singular_form</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>plural_form</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2809" column="20" bodyfile="lib/googletest/src/gtest.cc" bodystart="2809" bodyend="2814"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" compoundref="d6/da4/gtest-message_8h" startline="243" endline="245">testing::internal::StreamableToString</references>
        <referencedby refid="d0/d75/namespacetesting_1ab8cabb45f3d8c52d336372c1b62d75c5" compoundref="df/d5b/gtest_8cc" startline="2822" endline="2824">FormatTestCaseCount</referencedby>
        <referencedby refid="d0/d75/namespacetesting_1a7420a0eb48a02ba210e265afb75febdf" compoundref="df/d5b/gtest_8cc" startline="2817" endline="2819">FormatTestCount</referencedby>
        <referencedby refid="d6/d49/classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_1a7a62fe58fa6f6aace813eb62b31e5a51" compoundref="df/d5b/gtest_8cc" startline="3149" endline="3159">testing::internal::PrettyUnitTestResultPrinter::OnTestCaseEnd</referencedby>
        <referencedby refid="d6/d49/classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_1adcb68c729565d4bcdf8418a52902c3de" compoundref="df/d5b/gtest_8cc" startline="3098" endline="3109">testing::internal::PrettyUnitTestResultPrinter::OnTestCaseStart</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ab8cabb45f3d8c52d336372c1b62d75c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>static std::string testing::FormatTestCaseCount</definition>
        <argsstring>(int test_case_count)</argsstring>
        <name>FormatTestCaseCount</name>
        <param>
          <type>int</type>
          <declname>test_case_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2822" column="20" bodyfile="lib/googletest/src/gtest.cc" bodystart="2822" bodyend="2824"/>
        <references refid="d0/d75/namespacetesting_1a33e070c3e994cb75f9017fa2a044d536" compoundref="df/d5b/gtest_8cc" startline="2809" endline="2814">FormatCountableNoun</references>
        <referencedby refid="d6/d49/classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_1ac29b30216023baddda04ef5889f484ff" compoundref="df/d5b/gtest_8cc" startline="3193" endline="3229">testing::internal::PrettyUnitTestResultPrinter::OnTestIterationEnd</referencedby>
        <referencedby refid="d6/d49/classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_1abdba10a8c97e272ab4cee97cb652c957" compoundref="df/d5b/gtest_8cc" startline="3056" endline="3089">testing::internal::PrettyUnitTestResultPrinter::OnTestIterationStart</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7420a0eb48a02ba210e265afb75febdf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>static std::string testing::FormatTestCount</definition>
        <argsstring>(int test_count)</argsstring>
        <name>FormatTestCount</name>
        <param>
          <type>int</type>
          <declname>test_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2817" column="20" bodyfile="lib/googletest/src/gtest.cc" bodystart="2817" bodyend="2819"/>
        <references refid="d0/d75/namespacetesting_1a33e070c3e994cb75f9017fa2a044d536" compoundref="df/d5b/gtest_8cc" startline="2809" endline="2814">FormatCountableNoun</references>
        <referencedby refid="d6/d49/classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_1ac29b30216023baddda04ef5889f484ff" compoundref="df/d5b/gtest_8cc" startline="3193" endline="3229">testing::internal::PrettyUnitTestResultPrinter::OnTestIterationEnd</referencedby>
        <referencedby refid="d6/d49/classtesting_1_1internal_1_1PrettyUnitTestResultPrinter_1abdba10a8c97e272ab4cee97cb652c957" compoundref="df/d5b/gtest_8cc" startline="3056" endline="3089">testing::internal::PrettyUnitTestResultPrinter::OnTestIterationStart</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4354761948a5cf56fdf905418a0f78f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>static std::string testing::FormatWordList</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;words)</argsstring>
        <name>FormatWordList</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt; &amp;</type>
          <declname>words</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2127" column="20" bodyfile="lib/googletest/src/gtest.cc" bodystart="2127" bodyend="2139"/>
        <references refid="d3/d98/classtesting_1_1Message_1a2cdc4df62bdcc9df37651a1cf527704e" compoundref="df/d5b/gtest_8cc" startline="981" endline="983">testing::Message::GetString</references>
        <references refid="cpp/container/vector/size_1">std::vector&lt; T &gt;::size</references>
        <referencedby refid="d0/d75/namespacetesting_1a4c9bd414747bf0563bfdb32a2307dcdf" compoundref="df/d5b/gtest_8cc" startline="2141" endline="2151">ValidateTestPropertyName</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a56fbc164c7dc53596c23e519d8f1ca3c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* testing::GetDefaultFilter</definition>
        <argsstring>()</argsstring>
        <name>GetDefaultFilter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="192" column="19" bodyfile="lib/googletest/src/gtest.cc" bodystart="192" bodyend="200"/>
        <references refid="d0/d75/namespacetesting_1a236f8612e4b148d8d989a311a30a4557" compoundref="df/d5b/gtest_8cc" startline="168">kUniversalFilter</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1acb3fdfadf475a3c2f5e22a3dae73532a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt;</type>
        <definition>static std::vector&lt;std::string&gt; testing::GetReservedAttributesForElement</definition>
        <argsstring>(const std::string &amp;xml_element)</argsstring>
        <name>GetReservedAttributesForElement</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>xml_element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2112" column="20" bodyfile="lib/googletest/src/gtest.cc" bodystart="2112" bodyend="2125"/>
        <references refid="d0/d75/namespacetesting_1a956d4c522454fa6dfd75b5bbbefe8f9e" compoundref="df/d5b/gtest_8cc" startline="2108" endline="2110">ArrayAsVector</references>
        <references refid="d3/dc9/gtest-port_8h_1ab54343f0a36dc4cb0ce8a478dd7847b8" compoundref="d3/dc9/gtest-port_8h" startline="1295">GTEST_CHECK_</references>
        <references refid="d0/d75/namespacetesting_1ae9689f28cd859736f734623b26c93d88" compoundref="df/d5b/gtest_8cc" startline="2098">kReservedTestCaseAttributes</references>
        <references refid="d0/d75/namespacetesting_1af44b2969928d37e9081145760f21e79a" compoundref="df/d5b/gtest_8cc" startline="2088">kReservedTestSuiteAttributes</references>
        <references refid="d0/d75/namespacetesting_1afa194c15a2ac0e03029019b0f4029968" compoundref="df/d5b/gtest_8cc" startline="2075">kReservedTestSuitesAttributes</references>
        <referencedby refid="d6/de5/classtesting_1_1internal_1_1XmlUnitTestResultPrinter_1aa8ca7066de948d26d171597430c75839" compoundref="df/d5b/gtest_8cc" startline="3607" endline="3621">testing::internal::XmlUnitTestResultPrinter::OutputXmlAttribute</referencedby>
        <referencedby refid="d6/d6e/classtesting_1_1TestResult_1a818c06cd2bfc00d6c81b0cebca044cb1" compoundref="df/d5b/gtest_8cc" startline="2155" endline="2159">testing::TestResult::ValidateTestProperty</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4c08ba9fcb0581c61e25968e520efa48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(also_run_disabled_tests)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>also_run_disabled_tests</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="88" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="88" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a5868c3980b2f69f511fc8c3de7cdfc17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(break_on_failure)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>break_on_failure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="91" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="91" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ab6f1777f7b740f31e41f7da017447b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(catch_exceptions)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>catch_exceptions</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="95" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="95" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a534f0743e7c42c55d27dcd0dd3d38f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(death_test_use_fork)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>death_test_use_fork</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-internal-inl.h" line="80" column="1" declfile="lib/googletest/src/gtest-internal-inl.h" declline="80" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af2cd3595c571ca408afc337bc4bb2619" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(list_tests)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>list_tests</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="108" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="108" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aeccefd463a0942da24750e1bbee76041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(print_time)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>print_time</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="116" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="116" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af37b9206b938bb8b7d398a1379eb7482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(show_internal_stack_frames)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>show_internal_stack_frames</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="127" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="127" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a6d87f7374e105483905a305328856f4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(shuffle)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>shuffle</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="130" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="130" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ac69f2aeeb84dc5f49bd3d040a6f32d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(throw_on_failure)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>throw_on_failure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="139" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="139" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ae754999b59509808254d39e3a3cf38e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_int32_</definition>
        <argsstring>(random_seed)</argsstring>
        <name>GTEST_DECLARE_int32_</name>
        <param>
          <type>random_seed</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="119" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="119" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a315ef0647e4f2795bf1705de8e9c9659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_int32_</definition>
        <argsstring>(repeat)</argsstring>
        <name>GTEST_DECLARE_int32_</name>
        <param>
          <type>repeat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="123" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="123" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1adba6f8afa0f8695956d0134f1629a10b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_int32_</definition>
        <argsstring>(stack_trace_depth)</argsstring>
        <name>GTEST_DECLARE_int32_</name>
        <param>
          <type>stack_trace_depth</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="134" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="134" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a0f658c915a1e60996a2ab00a06612723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(color)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>color</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="100" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="100" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a37b7e87f0a5f502c6918f37d1768c1f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(death_test_style)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>death_test_style</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest-death-test.h" line="50" column="1" declfile="lib/googletest/include/gtest/gtest-death-test.h" declline="50" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a20d69860ce843142c7f740262e6b0c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(filter)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>filter</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="104" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="104" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a3fe54dd551f1c36cfdd1b36cd6881a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(output)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>output</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="112" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="112" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ad4d1ea63037fc21018dbe997cb0041d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(stream_result_to)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>stream_result_to</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="144" column="1" declfile="lib/googletest/include/gtest/gtest.h" declline="144" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ad72f215c805a46fba44cb09d717b01ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(also_run_disabled_tests, internal::BoolFromGTestEnv(&quot;also_run_disabled_tests&quot;, false), &quot;Run disabled tests too, in addition to the tests normally being run.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>also_run_disabled_tests</type>
        </param>
        <param>
          <type><ref refid="d0/da7/namespacetesting_1_1internal_1a1055088bb9b867e1b7b8f096f519d7c5" kindref="member">internal::BoolFromGTestEnv</ref>(&quot;also_run_disabled_tests&quot;, false)</type>
        </param>
        <param>
          <type>&quot;Run disabled tests</type>
          <declname>too</declname>
        </param>
        <param>
          <type>in addition to the tests normally being run.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="202" column="1" declfile="lib/googletest/src/gtest.cc" declline="202" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a5ab9e9cc2ee1addddfb2f4b43dd4e402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(break_on_failure, internal::BoolFromGTestEnv(&quot;break_on_failure&quot;, false), &quot;True iff a failed assertion should be a debugger break-point.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>break_on_failure</type>
        </param>
        <param>
          <type><ref refid="d0/da7/namespacetesting_1_1internal_1a1055088bb9b867e1b7b8f096f519d7c5" kindref="member">internal::BoolFromGTestEnv</ref>(&quot;break_on_failure&quot;, false)</type>
        </param>
        <param>
          <type>&quot;True iff a failed assertion should be a debugger break-point.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="207" column="1" declfile="lib/googletest/src/gtest.cc" declline="207" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a96c82869676822ec883043aefb6dd042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(catch_exceptions, internal::BoolFromGTestEnv(&quot;catch_exceptions&quot;, true), &quot;True iff &quot; GTEST_NAME_ &quot; should catch exceptions and treat them as test failures.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>catch_exceptions</type>
        </param>
        <param>
          <type><ref refid="d0/da7/namespacetesting_1_1internal_1a1055088bb9b867e1b7b8f096f519d7c5" kindref="member">internal::BoolFromGTestEnv</ref>(&quot;catch_exceptions&quot;, true)</type>
        </param>
        <param>
          <type>&quot;True iff &quot; GTEST_NAME_ &quot; should catch exceptions and treat them as test failures.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="212" column="1" declfile="lib/googletest/src/gtest.cc" declline="212" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a428e5944490e497df683cb8324ce4489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(death_test_use_fork, internal::BoolFromGTestEnv(&quot;death_test_use_fork&quot;, false), &quot;Instructs to use fork()/_exit() instead of clone() in death tests. &quot; &quot;Ignored and always uses fork() on POSIX systems where clone() is not &quot; &quot;implemented. Useful when running under valgrind or similar tools if &quot; &quot;those do not support clone(). Valgrind 3.3.1 will just fail if &quot; &quot;it sees an unsupported combination of clone() flags. &quot; &quot;It is not recommended to use this flag w/o valgrind though it will &quot; &quot;work in 99% of the cases. Once valgrind is fixed, this flag will &quot; &quot;most likely be removed.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>death_test_use_fork</type>
        </param>
        <param>
          <type><ref refid="d0/da7/namespacetesting_1_1internal_1a1055088bb9b867e1b7b8f096f519d7c5" kindref="member">internal::BoolFromGTestEnv</ref>(&quot;death_test_use_fork&quot;, false)</type>
        </param>
        <param>
          <type>&quot;Instructs to use fork()/_exit() instead of clone() in death tests. &quot; &quot;Ignored and always uses fork() on POSIX systems where clone() is not &quot; &quot;implemented. Useful when running under valgrind or similar tools if &quot; &quot;those do not support clone(). Valgrind 3.3.1 will just fail if &quot; &quot;it sees an unsupported combination of clone() flags. &quot; &quot;It is not recommended to use this flag w/o valgrind though it will &quot; &quot;work in 99% of the cases. Once valgrind is</type>
          <declname>fixed</declname>
        </param>
        <param>
          <type>this flag will &quot; &quot;most likely be removed.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-death-test.cc" line="95" column="1" declfile="lib/googletest/src/gtest-death-test.cc" declline="95" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a0fa31ecbf33c5e5970cca1d91c050153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(list_tests, false, &quot;List all tests without running them.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>list_tests</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <param>
          <type>&quot;List all tests without running them.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="235" column="1" declfile="lib/googletest/src/gtest.cc" declline="235" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a766fcba2ec951940e528276919a5d22f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(print_time, internal::BoolFromGTestEnv(&quot;print_time&quot;, true), &quot;True iff &quot; GTEST_NAME_ &quot; should display elapsed time in text output.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>print_time</type>
        </param>
        <param>
          <type><ref refid="d0/da7/namespacetesting_1_1internal_1a1055088bb9b867e1b7b8f096f519d7c5" kindref="member">internal::BoolFromGTestEnv</ref>(&quot;print_time&quot;, true)</type>
        </param>
        <param>
          <type>&quot;True iff &quot; GTEST_NAME_ &quot; should display elapsed time in text output.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="250" column="1" declfile="lib/googletest/src/gtest.cc" declline="250" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a60ef38aa9d1437f0d7818181897af8ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(show_internal_stack_frames, false, &quot;True iff &quot; GTEST_NAME_ &quot; should include internal stack frames when &quot; &quot;printing test failure stack traces.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>show_internal_stack_frames</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <param>
          <type>&quot;True iff &quot; GTEST_NAME_ &quot; should include internal stack frames when &quot; &quot;printing test failure stack traces.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="268" column="1" declfile="lib/googletest/src/gtest.cc" declline="268" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af95276e3deb9d243d729f3043eabd272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(shuffle, internal::BoolFromGTestEnv(&quot;shuffle&quot;, false), &quot;True iff &quot; GTEST_NAME_ &quot; should randomize tests&apos; order on every run.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>shuffle</type>
        </param>
        <param>
          <type><ref refid="d0/da7/namespacetesting_1_1internal_1a1055088bb9b867e1b7b8f096f519d7c5" kindref="member">internal::BoolFromGTestEnv</ref>(&quot;shuffle&quot;, false)</type>
        </param>
        <param>
          <type>&quot;True iff &quot; GTEST_NAME_ &quot; should randomize tests&apos; order on every run.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="273" column="1" declfile="lib/googletest/src/gtest.cc" declline="273" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7598962574c3fff25237b78f0de81aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(throw_on_failure, internal::BoolFromGTestEnv(&quot;throw_on_failure&quot;, false), &quot;When this flag is specified, a failed assertion will throw an exception &quot; &quot;if exceptions are enabled or exit the program with a non-zero code &quot; &quot;otherwise.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>throw_on_failure</type>
        </param>
        <param>
          <type><ref refid="d0/da7/namespacetesting_1_1internal_1a1055088bb9b867e1b7b8f096f519d7c5" kindref="member">internal::BoolFromGTestEnv</ref>(&quot;throw_on_failure&quot;, false)</type>
        </param>
        <param>
          <type>&quot;When this flag is</type>
          <declname>specified</declname>
        </param>
        <param>
          <type>a failed assertion will throw an exception &quot; &quot;if exceptions are enabled or exit the program with a non-zero code &quot; &quot;otherwise.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="292" column="1" declfile="lib/googletest/src/gtest.cc" declline="292" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a9900d8db2670a26999fbc2a9130f7185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_int32_</definition>
        <argsstring>(random_seed, internal::Int32FromGTestEnv(&quot;random_seed&quot;, 0), &quot;Random number seed to use when shuffling test orders.  Must be in range &quot; &quot;[1, 99999], or 0 to use a seed based on the current time.&quot;)</argsstring>
        <name>GTEST_DEFINE_int32_</name>
        <param>
          <type>random_seed</type>
        </param>
        <param>
          <type><ref refid="d0/da7/namespacetesting_1_1internal_1a2196f070b2d28bceb45c7ad3b565b9ba" kindref="member">internal::Int32FromGTestEnv</ref>(&quot;random_seed&quot;, 0)</type>
        </param>
        <param>
          <type>&quot;Random number seed to use when shuffling test orders. Must be in range &quot; &quot;</type>
          <array>[1, 99999]</array>
        </param>
        <param>
          <type>or 0 to use a seed based on the current time.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="256" column="1" declfile="lib/googletest/src/gtest.cc" declline="256" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aae6f1140f03d7bf24067df0f6628e9ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_int32_</definition>
        <argsstring>(repeat, internal::Int32FromGTestEnv(&quot;repeat&quot;, 1), &quot;How many times to repeat each test.  Specify a negative number &quot; &quot;for repeating forever.  Useful for shaking out flaky tests.&quot;)</argsstring>
        <name>GTEST_DEFINE_int32_</name>
        <param>
          <type>repeat</type>
        </param>
        <param>
          <type><ref refid="d0/da7/namespacetesting_1_1internal_1a2196f070b2d28bceb45c7ad3b565b9ba" kindref="member">internal::Int32FromGTestEnv</ref>(&quot;repeat&quot;, 1)</type>
        </param>
        <param>
          <type>&quot;How many times to repeat each test. Specify a negative number &quot; &quot;for repeating forever. Useful for shaking out flaky tests.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="262" column="1" declfile="lib/googletest/src/gtest.cc" declline="262" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a84af642630c9181f00fcf0a4a63e795e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_int32_</definition>
        <argsstring>(stack_trace_depth, internal::Int32FromGTestEnv(&quot;stack_trace_depth&quot;, kMaxStackTraceDepth), &quot;The maximum number of stack frames to print when an &quot; &quot;assertion fails.  The valid range is 0 through 100, inclusive.&quot;)</argsstring>
        <name>GTEST_DEFINE_int32_</name>
        <param>
          <type>stack_trace_depth</type>
        </param>
        <param>
          <type><ref refid="d0/da7/namespacetesting_1_1internal_1a2196f070b2d28bceb45c7ad3b565b9ba" kindref="member">internal::Int32FromGTestEnv</ref>(&quot;stack_trace_depth&quot;, kMaxStackTraceDepth)</type>
        </param>
        <param>
          <type>&quot;The maximum number of stack frames to print when an &quot; &quot;assertion fails. The valid range is 0 through</type>
          <declname>100</declname>
        </param>
        <param>
          <type>inclusive.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="279" column="1" declfile="lib/googletest/src/gtest.cc" declline="279" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a32f0280e95e7718835b0e3d2f7277269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(color, internal::StringFromGTestEnv(&quot;color&quot;, &quot;auto&quot;), &quot;Whether to use colors in the output.  Valid values: yes, no, &quot; &quot;and auto.  &apos;auto&apos; means to use colors if the output is &quot; &quot;being sent to a terminal and the TERM environment variable &quot; &quot;is set to a terminal type that supports colors.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>color</type>
        </param>
        <param>
          <type><ref refid="d0/da7/namespacetesting_1_1internal_1ab38c435530c97f10fd7a8008a76331f2" kindref="member">internal::StringFromGTestEnv</ref>(&quot;color&quot;, &quot;auto&quot;)</type>
        </param>
        <param>
          <type>&quot;Whether to use colors in the output. Valid values:</type>
          <declname>yes</declname>
        </param>
        <param>
          <type>no</type>
        </param>
        <param>
          <type>&quot; &quot;and auto. &apos;auto&apos; means to use colors if the output is &quot; &quot;being sent to a terminal and the TERM environment variable &quot; &quot;is set to a terminal type that supports colors.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="218" column="1" declfile="lib/googletest/src/gtest.cc" declline="218" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a62d8ec1eb3e20f20ed52604b0dfa3425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(death_test_style, internal::StringFromGTestEnv(&quot;death_test_style&quot;, kDefaultDeathTestStyle), &quot;Indicates how to run a death test in a forked child process: &quot; &quot;\&quot;threadsafe\&quot; (child process re-executes the test binary &quot; &quot;from the beginning, running only the specific death test) or &quot; &quot;\&quot;fast\&quot; (child process runs the death test immediately &quot; &quot;after forking).&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>death_test_style</type>
        </param>
        <param>
          <type><ref refid="d0/da7/namespacetesting_1_1internal_1ab38c435530c97f10fd7a8008a76331f2" kindref="member">internal::StringFromGTestEnv</ref>(&quot;death_test_style&quot;, kDefaultDeathTestStyle)</type>
        </param>
        <param>
          <type>&quot;Indicates how to run a death test in a forked child process: &quot; &quot;\&quot;threadsafe\&quot; (child process re-executes the test binary &quot; &quot;from the beginning, running only the specific death test) or &quot; &quot;\&quot;fast\&quot; (child process runs the death test immediately &quot; &quot;after forking).&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-death-test.cc" line="86" column="1" declfile="lib/googletest/src/gtest-death-test.cc" declline="86" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a2830ee1f2237233fa44aa580c5a919ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(filter, internal::StringFromGTestEnv(&quot;filter&quot;, GetDefaultFilter()), &quot;A colon-separated list of glob (not regex) patterns &quot; &quot;for filtering the tests to run, optionally followed by a &quot; &quot;&apos;-&apos; and a : separated list of negative patterns (tests to &quot; &quot;exclude).  A test is run if it matches one of the positive &quot; &quot;patterns and does not match any of the negative patterns.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>filter</type>
        </param>
        <param>
          <type><ref refid="d0/da7/namespacetesting_1_1internal_1ab38c435530c97f10fd7a8008a76331f2" kindref="member">internal::StringFromGTestEnv</ref>(&quot;filter&quot;, GetDefaultFilter())</type>
        </param>
        <param>
          <type>&quot;A colon-separated list of glob (not regex) patterns &quot; &quot;for filtering the tests to</type>
          <declname>run</declname>
        </param>
        <param>
          <type>optionally followed by a &quot; &quot;&apos;-&apos; and a :separated list of negative patterns(tests to &quot; &quot;exclude). A test is run if it matches one of the positive &quot; &quot;patterns and does not match any of the negative patterns.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="226" column="1" declfile="lib/googletest/src/gtest.cc" declline="226" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1afbe98005fe5c00ddbc23701a784d44db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(output, internal::StringFromGTestEnv(&quot;output&quot;, &quot;&quot;), &quot;A format (currently must be \&quot;xml\&quot;), optionally followed &quot; &quot;by a colon and an output file name or directory. A directory &quot; &quot;is indicated by a trailing pathname separator. &quot; &quot;Examples: \&quot;xml:filename.xml\&quot;, \&quot;xml::directoryname/\&quot;. &quot; &quot;If a directory is specified, output files will be created &quot; &quot;within that directory, with file-names based on the test &quot; &quot;executable&apos;s name and, if necessary, made unique by adding &quot; &quot;digits.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>output</type>
        </param>
        <param>
          <type><ref refid="d0/da7/namespacetesting_1_1internal_1ab38c435530c97f10fd7a8008a76331f2" kindref="member">internal::StringFromGTestEnv</ref>(&quot;output&quot;, &quot;&quot;)</type>
        </param>
        <param>
          <type>&quot;A format </type>
          <array>currently must be \&quot;xml\&quot;</array>
        </param>
        <param>
          <type>optionally followed &quot; &quot;by a colon and an output file name or directory. A directory &quot; &quot;is indicated by a trailing pathname separator. &quot; &quot;Examples:\&quot;xml:filename.xml\&quot;</type>
        </param>
        <param>
          <type>\&quot;xml::directoryname/\&quot;. &quot; &quot;If a directory is</type>
          <declname>specified</declname>
        </param>
        <param>
          <type>output files will be created &quot; &quot;within that</type>
          <declname>directory</declname>
        </param>
        <param>
          <type>with file-names based on the test &quot; &quot;executable &apos;s name</type>
          <declname>and</declname>
        </param>
        <param>
          <type>if</type>
          <declname>necessary</declname>
        </param>
        <param>
          <type>made unique by adding &quot; &quot;digits.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="238" column="1" declfile="lib/googletest/src/gtest.cc" declline="238" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a5cfe9778e1cc8b5cf04bfe9e764ddff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(stream_result_to, internal::StringFromGTestEnv(&quot;stream_result_to&quot;, &quot;&quot;), &quot;This flag specifies the host name and the port number on which to stream &quot; &quot;test results. Example: \&quot;localhost:555\&quot;. The flag is effective only on &quot; &quot;Linux.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>stream_result_to</type>
        </param>
        <param>
          <type><ref refid="d0/da7/namespacetesting_1_1internal_1ab38c435530c97f10fd7a8008a76331f2" kindref="member">internal::StringFromGTestEnv</ref>(&quot;stream_result_to&quot;, &quot;&quot;)</type>
        </param>
        <param>
          <type>&quot;This flag specifies the host name and the port number on which to stream &quot; &quot;test results. Example: \&quot;localhost:555\&quot;. The flag is effective only on &quot; &quot;Linux.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="285" column="1" declfile="lib/googletest/src/gtest.cc" declline="285" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aee3f6f99df893f576f705f66c0559482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>GTEST_API_ void testing::InitGoogleTest</definition>
        <argsstring>(int *argc, char **argv)</argsstring>
        <name>InitGoogleTest</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5370" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="5370" bodyend="5376" declfile="lib/googletest/include/gtest/gtest.h" declline="1363" declcolumn="17"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1ac3c6fa93391768aa91c6238b31aaeeb5" compoundref="df/d5b/gtest_8cc" startline="5344" endline="5357">testing::internal::InitGoogleTestImpl</references>
        <referencedby refid="d3/d3a/gtest__main_8cc_1a7f83bdc516d2cb86e20235d94ddf055a" compoundref="d3/d3a/gtest__main_8cc" startline="34" endline="38">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a6e9d83553f1d10818d698d45689d8adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>GTEST_API_ void testing::InitGoogleTest</definition>
        <argsstring>(int *argc, wchar_t **argv)</argsstring>
        <name>InitGoogleTest</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>wchar_t **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="5380" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="5380" bodyend="5386" declfile="lib/googletest/include/gtest/gtest.h" declline="1367" declcolumn="17"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1ac3c6fa93391768aa91c6238b31aaeeb5" compoundref="df/d5b/gtest_8cc" startline="5344" endline="5357">testing::internal::InitGoogleTestImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a645d822e47dc64b9923e78c880807f12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>GTEST_API_ AssertionResult testing::IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const ::std::string &amp;needle, const ::std::string &amp;haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1636" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1636" bodyend="1640" declfile="lib/googletest/include/gtest/gtest.h" declline="1608" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1ab553b649b06ef2339cbd90f8dfa119f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>GTEST_API_ AssertionResult testing::IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const char *needle, const char *haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1618" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1618" bodyend="1622" declfile="lib/googletest/include/gtest/gtest.h" declline="1599" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a28868925c50d541c8568a540b6457e54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>GTEST_API_ AssertionResult testing::IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const wchar_t *needle, const wchar_t *haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1624" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1624" bodyend="1628" declfile="lib/googletest/include/gtest/gtest.h" declline="1602" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a32718fab95b2833ab5ffc9cfc9f5c8b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>GTEST_API_ AssertionResult testing::IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const ::std::string &amp;needle, const ::std::string &amp;haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1630" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1630" bodyend="1634" declfile="lib/googletest/include/gtest/gtest.h" declline="1605" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a5c90a86562b2470213c07742e0eeb0fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>GTEST_API_ AssertionResult testing::IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const char *needle, const char *haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1606" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1606" bodyend="1610" declfile="lib/googletest/include/gtest/gtest.h" declline="1593" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a08ce65847491b27a38cbac3ac15e3035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>GTEST_API_ AssertionResult testing::IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const wchar_t *needle, const wchar_t *haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1612" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1612" bodyend="1616" declfile="lib/googletest/include/gtest/gtest.h" declline="1596" declcolumn="28"/>
        <references refid="de/d18/namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="df/d5b/gtest_8cc" startline="1583" endline="1598">testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7b802e532fd68749765cb7dc156130db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; testing::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Message &amp;sb)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d98/classtesting_1_1Message" kindref="compound">Message</ref> &amp;</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest-message.h" line="232" column="8" bodyfile="lib/googletest/include/gtest/gtest-message.h" bodystart="232" bodyend="234"/>
        <references refid="d3/d98/classtesting_1_1Message_1a2cdc4df62bdcc9df37651a1cf527704e" compoundref="df/d5b/gtest_8cc" startline="981" endline="983">testing::Message::GetString</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7c88897836b9f492190fb2b9dfa3a327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; testing::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const TestPartResult &amp;result)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="d9/d98/classtesting_1_1TestPartResult" kindref="compound">TestPartResult</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-test-part.cc" line="58" column="1" bodyfile="lib/googletest/src/gtest-test-part.cc" bodystart="58" bodyend="65" declfile="lib/googletest/include/gtest/gtest-test-part.h" declline="120" declcolumn="1"/>
        <references refid="cpp/io/manip/endl_1">std::endl</references>
        <references refid="d9/d98/classtesting_1_1TestPartResult_1a0be40512f50a0086c4d3dc43938978aa" compoundref="d1/d01/gtest-test-part_8h" startline="76" endline="78">testing::TestPartResult::file_name</references>
        <references refid="d9/d98/classtesting_1_1TestPartResult_1a65ae656b33fdfdfffaf34858778a52d5ae1bf0b610b697a43fee97628cdab4ea1" compoundref="d1/d01/gtest-test-part_8h" startline="54">testing::TestPartResult::kFatalFailure</references>
        <references refid="d9/d98/classtesting_1_1TestPartResult_1a65ae656b33fdfdfffaf34858778a52d5a8fa3d06b2baad8bf7c1f17dea314983e" compoundref="d1/d01/gtest-test-part_8h" startline="52">testing::TestPartResult::kSuccess</references>
        <references refid="d9/d98/classtesting_1_1TestPartResult_1ad4c5da5f13245ac18cf256d0d9f3eda9" compoundref="d1/d01/gtest-test-part_8h" startline="82" endline="82">testing::TestPartResult::line_number</references>
        <references refid="d9/d98/classtesting_1_1TestPartResult_1a5019dc9d753aba5949777270de255d49" compoundref="d1/d01/gtest-test-part_8h" startline="88" endline="88">testing::TestPartResult::message</references>
        <references refid="d9/d98/classtesting_1_1TestPartResult_1aab92b225e8a472e78bd3889ca6df0d2a" compoundref="d1/d01/gtest-test-part_8h" startline="72" endline="72">testing::TestPartResult::type</references>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>::std::string testing::PrintToString</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>PrintToString</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest-printers.h" line="980" column="15" bodyfile="lib/googletest/include/gtest/gtest-printers.h" bodystart="980" bodyend="984" declfile="lib/googletest/include/gtest/internal/gtest-internal.h" declline="94" declcolumn="15"/>
        <references refid="d3/dae/classtesting_1_1internal_1_1UniversalTersePrinter_1a042249cdb42fdb77588c9ad54ea7ed54" compoundref="d0/d6d/gtest-printers_8h" startline="783" endline="785">testing::internal::UniversalTersePrinter&lt; T &gt;::Print</references>
        <references refid="cpp/io/basic_stringstream/str_1">std::stringstream::str</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a898b1e47a9d978e99318b224f69a54e4" compoundref="df/d5b/gtest_8cc" startline="1503" endline="1516">testing::internal::CmpHelperSTRCASEEQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a2863c85877728b2c223cf6ade4a530c1" compoundref="df/d5b/gtest_8cc" startline="1487" endline="1500">testing::internal::CmpHelperSTREQ</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a6e700804399b6694d8d6157e3a141b17" compoundref="df/d5b/gtest_8cc" startline="1885" endline="1897">testing::internal::CmpHelperSTRNE</referencedby>
        <referencedby refid="d6/db1/classtesting_1_1internal_1_1FormatForComparison_1a2aeb688fc55b57abd3021d82eccad896" compoundref="d0/d6d/gtest-printers_8h" startline="275" endline="277">testing::internal::FormatForComparison&lt; ToPrint, OtherOperand &gt;::Format</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a661e70fc6afeb5c085eed3716aa45059" prot="package" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::StaticAssertTypeEq</definition>
        <argsstring>()</argsstring>
        <name>StaticAssertTypeEq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest.h" line="2150" column="6" bodyfile="lib/googletest/include/gtest/gtest.h" bodystart="2150" bodyend="2153"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a9f19442d566c7eaec0702b9fcf282b63" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::TestPartFatallyFailed</definition>
        <argsstring>(const TestPartResult &amp;result)</argsstring>
        <name>TestPartFatallyFailed</name>
        <param>
          <type>const <ref refid="d9/d98/classtesting_1_1TestPartResult" kindref="compound">TestPartResult</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2179" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="2179" bodyend="2181"/>
        <references refid="d9/d98/classtesting_1_1TestPartResult_1a77db157eff9531c3c00c2420502f9a89" compoundref="d1/d01/gtest-test-part_8h" startline="100" endline="100">testing::TestPartResult::fatally_failed</references>
        <referencedby refid="d6/d6e/classtesting_1_1TestResult_1a30e00d4076ae07fb5ad7b623d9dc1fe4" compoundref="df/d5b/gtest_8cc" startline="2184" endline="2186">testing::TestResult::HasFatalFailure</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1af256d104ca665115eb291f762bb659e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::TestPartNonfatallyFailed</definition>
        <argsstring>(const TestPartResult &amp;result)</argsstring>
        <name>TestPartNonfatallyFailed</name>
        <param>
          <type>const <ref refid="d9/d98/classtesting_1_1TestPartResult" kindref="compound">TestPartResult</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2189" column="13" bodyfile="lib/googletest/src/gtest.cc" bodystart="2189" bodyend="2191"/>
        <references refid="d9/d98/classtesting_1_1TestPartResult_1a6197c7f6672acc1cfdf580eb1f2183ac" compoundref="d1/d01/gtest-test-part_8h" startline="97" endline="97">testing::TestPartResult::nonfatally_failed</references>
        <referencedby refid="d6/d6e/classtesting_1_1TestResult_1a510564fa67b485ed4589a259f2a032d6" compoundref="df/d5b/gtest_8cc" startline="2194" endline="2196">testing::TestResult::HasNonfatalFailure</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4e9fdeef31f7e49afccfde0532f76864" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* testing::TestPartResultTypeToString</definition>
        <argsstring>(TestPartResult::Type type)</argsstring>
        <name>TestPartResultTypeToString</name>
        <param>
          <type><ref refid="d9/d98/classtesting_1_1TestPartResult_1a65ae656b33fdfdfffaf34858778a52d5" kindref="member">TestPartResult::Type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2830" column="20" bodyfile="lib/googletest/src/gtest.cc" bodystart="2830" bodyend="2845"/>
        <references refid="d9/d98/classtesting_1_1TestPartResult_1a65ae656b33fdfdfffaf34858778a52d5ae1bf0b610b697a43fee97628cdab4ea1" compoundref="d1/d01/gtest-test-part_8h" startline="54">testing::TestPartResult::kFatalFailure</references>
        <references refid="d9/d98/classtesting_1_1TestPartResult_1a65ae656b33fdfdfffaf34858778a52d5a00a755614f8ec3f78b2e951f8c91cd92" compoundref="d1/d01/gtest-test-part_8h" startline="53">testing::TestPartResult::kNonFatalFailure</references>
        <references refid="d9/d98/classtesting_1_1TestPartResult_1a65ae656b33fdfdfffaf34858778a52d5a8fa3d06b2baad8bf7c1f17dea314983e" compoundref="d1/d01/gtest-test-part_8h" startline="52">testing::TestPartResult::kSuccess</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ada13cbf91139f0809a5a31ea2594c1ad" compoundref="df/d5b/gtest_8cc" startline="2850" endline="2857">testing::internal::PrintTestPartResultToString</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a4c9bd414747bf0563bfdb32a2307dcdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::ValidateTestPropertyName</definition>
        <argsstring>(const std::string &amp;property_name, const std::vector&lt; std::string &gt; &amp;reserved_names)</argsstring>
        <name>ValidateTestPropertyName</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>property_name</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &gt; &amp;</type>
          <declname>reserved_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="2141" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="2141" bodyend="2151"/>
        <references refid="d8/d73/gtest_8h_1adc16b5b0a740c39084ea5c9e960e3063" compoundref="d8/d73/gtest_8h" startline="1808">ADD_FAILURE</references>
        <references refid="cpp/container/vector/begin_1">std::vector&lt; T &gt;::begin</references>
        <references refid="cpp/container/vector/end_1">std::vector&lt; T &gt;::end</references>
        <references refid="cpp/algorithm/find_1">std::find</references>
        <references refid="d0/d75/namespacetesting_1a4354761948a5cf56fdf905418a0f78f1" compoundref="df/d5b/gtest_8cc" startline="2127" endline="2139">FormatWordList</references>
        <references refid="d3/dc9/gtest-port_8h_1a13d98c217176bd8722c395b9225fc19d" compoundref="d3/dc9/gtest-port_8h" startline="289">GTEST_NAME_</references>
        <referencedby refid="d6/d6e/classtesting_1_1TestResult_1a818c06cd2bfc00d6c81b0cebca044cb1" compoundref="df/d5b/gtest_8cc" startline="2155" endline="2159">testing::TestResult::ValidateTestProperty</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="lib/googletest/src/gtest-death-test.cc" line="79" column="1"/>
  </compounddef>
</doxygen>
