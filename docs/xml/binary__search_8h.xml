<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="binary__search_8h" kind="file" language="C++">
    <compoundname>binary_search.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">queue</includes>
    <includedby refid="binary__search_8cc" local="yes">binary_search/binary_search.cc</includedby>
    <includedby refid="binary__search_2main_8cc" local="yes">binary_search/main.cc</includedby>
    <incdepgraph>
      <node id="4">
        <label>queue</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>binary_search/binary_search.h</label>
        <link refid="binary__search_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>binary_search/binary_search.h</label>
        <link refid="binary__search_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>binary_search/main.cc</label>
        <link refid="binary__search_2main_8cc"/>
      </node>
      <node id="2">
        <label>binary_search/binary_search.cc</label>
        <link refid="binary__search_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structcommon_1_1BSTNode" prot="public">common::BSTNode</innerclass>
    <innernamespace refid="namespacecommon">common</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>PROJECT_BINARY_SEARCH_TREE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PROJECT_BINARY_SEARCH_TREE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecommon" kindref="compound">common</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="structcommon_1_1BSTNode" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref><sp/>{</highlight></codeline>
<codeline lineno="10" refid="structcommon_1_1BSTNode_1abd25d73eeda629c89624edc808dbb8d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structcommon_1_1BSTNode_1abd25d73eeda629c89624edc808dbb8d2" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="11" refid="structcommon_1_1BSTNode_1a404c84b494cb19afc8101c08741ab978" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/><ref refid="structcommon_1_1BSTNode_1a404c84b494cb19afc8101c08741ab978" kindref="member">left</ref>;</highlight></codeline>
<codeline lineno="12" refid="structcommon_1_1BSTNode_1a6c53b106cde01d23e7f92b7366976b96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/><ref refid="structcommon_1_1BSTNode_1a6c53b106cde01d23e7f92b7366976b96" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>node<sp/>for<sp/>our<sp/>BST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/><ref refid="namespacecommon_1ad951d69f0988e985415d052a81bdf2e8" kindref="member">GetNewNode</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>node<sp/>with<sp/>insert<sp/>new<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/><ref refid="namespacecommon_1a5bb9cd37af9ee2f1b2339d77b4f7d1dd" kindref="member">Insert</ref>(<ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/>node,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>given<sp/>value<sp/>is<sp/>in<sp/>our<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecommon_1ada61a385661276f122db1a83f5ba573a" kindref="member">Search</ref>(<ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/>node,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>tree<sp/>is<sp/>binary<sp/>search<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecommon_1a8e5af17d7a58b5f61bb0d0d502c1dbcf" kindref="member">IsBinarySearchTree</ref>(<ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>all<sp/>items<sp/>in<sp/>the<sp/>given<sp/>tree<sp/>are<sp/>between<sp/>the<sp/>given<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecommon_1a84788ceb14c1733b313e3206fea5ff27" kindref="member">IsBetween</ref>(<ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/>node,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>minimum<sp/>node<sp/>stored<sp/>in<sp/>the<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/><ref refid="namespacecommon_1ab4370181a4bfa0106e48bf4a1e496e21" kindref="member">GetMinNode</ref>(<ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>minimum<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>tree<sp/>or<sp/>-1<sp/>if<sp/>tree<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacecommon_1a81b89f1174eaefd3a0fadca27d1817a4" kindref="member">GetMin</ref>(<ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>maximum<sp/>node<sp/>stored<sp/>in<sp/>the<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/><ref refid="namespacecommon_1a93f968329c924c63c79141ef711b4ccb" kindref="member">GetMaxNode</ref>(<ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>maximum<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>tree<sp/>or<sp/>-1<sp/>if<sp/>tree<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacecommon_1a32a5a9d7ba0bee5cacb2e72a93f3bc7b" kindref="member">GetMax</ref>(<ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>height<sp/>of<sp/>the<sp/>tree,<sp/>0<sp/>if<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacecommon_1a5a885592e59041938086a74bd43dd6ec" kindref="member">GetHeight</ref>(<ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Delete<sp/>a<sp/>specific<sp/>node<sp/>from<sp/>the<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/><ref refid="namespacecommon_1af0043524a2d186d2fdcbeeea9f6cdc06" kindref="member">DeleteValue</ref>(<ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/>node,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Frees<sp/>memory<sp/>allocated<sp/>for<sp/>the<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecommon_1a951a6c058a6a852e5a3906c70f7b602a" kindref="member">DeleteTree</ref>(<ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>out<sp/>the<sp/>items<sp/>in<sp/>the<sp/>tree<sp/>in<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecommon_1a25d561230f553fe7281397bf9a88c8ed" kindref="member">PrintInOrder</ref>(<ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>out<sp/>the<sp/>items<sp/>in<sp/>the<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecommon_1a9c6049ee02fd40aeb6cc7e4b5384f581" kindref="member">PrintBFS</ref>(<ref refid="structcommon_1_1BSTNode" kindref="compound">BSTNode</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ifndef<sp/>PROJECT_BINARY_SEARCH_TREE_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="binary_search/binary_search.h"/>
  </compounddef>
</doxygen>
