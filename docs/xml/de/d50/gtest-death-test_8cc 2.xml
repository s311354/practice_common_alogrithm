<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="de/d50/gtest-death-test_8cc" kind="file" language="C++">
    <compoundname>gtest-death-test.cc</compoundname>
    <includes refid="d4/d59/gtest-death-test_8h" local="yes">gtest/gtest-death-test.h</includes>
    <includes refid="d3/dc9/gtest-port_8h" local="yes">gtest/internal/gtest-port.h</includes>
    <includes refid="d2/d0e/internal_2custom_2gtest_8h" local="yes">gtest/internal/custom/gtest.h</includes>
    <includes refid="d6/da4/gtest-message_8h" local="yes">gtest/gtest-message.h</includes>
    <includes refid="d0/d45/gtest-string_8h" local="yes">gtest/internal/gtest-string.h</includes>
    <includes refid="d0/da1/gtest-internal-inl_8h" local="yes">src/gtest-internal-inl.h</includes>
    <includedby refid="d1/d8c/gtest-all_8cc" local="yes">lib/googletest/src/gtest-all.cc</includedby>
    <incdepgraph>
      <node id="12">
        <label>sys/stat.h</label>
      </node>
      <node id="41">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="dc/df2/gtest-param-util_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>gtest/gtest.h</label>
        <link refid="d8/d73/gtest_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>typeinfo</label>
        <link refid="cpp/header/typeinfo" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="36">
        <label>src/gtest-internal-inl.h</label>
        <link refid="d0/da1/gtest-internal-inl_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>assert.h</label>
      </node>
      <node id="26">
        <label>float.h</label>
      </node>
      <node id="48">
        <label>gtest/gtest_prod.h</label>
        <link refid="d4/db1/gtest__prod_8h"/>
      </node>
      <node id="19">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="d6/d76/gtest-port-arch_8h"/>
      </node>
      <node id="39">
        <label>ostream</label>
        <link refid="cpp/header/ostream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="33">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="dc/d79/gtest-filepath_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stdlib.h</label>
      </node>
      <node id="47">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="dc/db7/gtest-param-util-generated_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>errno.h</label>
      </node>
      <node id="27">
        <label>iomanip</label>
        <link refid="cpp/header/iomanip" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="30">
        <label>set</label>
        <link refid="cpp/header/set" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="32">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="d0/d45/gtest-string_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="d5/da1/gtest-internal_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gtest/gtest-death-test.h</label>
        <link refid="d4/d59/gtest-death-test_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>algorithm</label>
        <link refid="cpp/header/algorithm" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="25">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="d1/d63/gtest-tuple_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
      <node id="1">
        <label>lib/googletest/src/gtest-death-test.cc</label>
        <link refid="de/d50/gtest-death-test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>iosfwd</label>
        <link refid="cpp/header/iosfwd" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="34">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="d9/d97/gtest-type-util_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>vector</label>
        <link refid="cpp/header/vector" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="11">
        <label>sys/types.h</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="d3/dc9/gtest-port_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="de/dce/gtest-typed-test_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="da/db0/internal_2custom_2gtest-printers_8h"/>
      </node>
      <node id="21">
        <label>unistd.h</label>
      </node>
      <node id="28">
        <label>limits</label>
        <link refid="cpp/header/limits" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="17">
        <label>utility</label>
        <link refid="cpp/header/utility" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="3">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="d0/d1a/gtest-death-test-internal_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>string</label>
        <link refid="cpp/header/string" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="31">
        <label>gtest/gtest-message.h</label>
        <link refid="d6/da4/gtest-message_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>strings.h</label>
      </node>
      <node id="42">
        <label>iterator</label>
        <link refid="cpp/header/iterator" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="6">
        <label>ctype.h</label>
      </node>
      <node id="53">
        <label>gtest/gtest-spi.h</label>
        <link refid="dc/dbe/gtest-spi_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>iostream</label>
        <link refid="cpp/header/iostream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="52">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="db/d6e/gtest__pred__impl_8h"/>
      </node>
      <node id="35">
        <label>gtest/internal/custom/gtest.h</label>
        <link refid="d2/d0e/internal_2custom_2gtest_8h"/>
      </node>
      <node id="49">
        <label>gtest/gtest-test-part.h</label>
        <link refid="d1/d01/gtest-test-part_8h"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>gtest/gtest-param-test.h</label>
        <link refid="d0/d31/gtest-param-test_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>sstream</label>
        <link refid="cpp/header/sstream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="43">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="d0/d03/gtest-linked__ptr_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>regex.h</label>
      </node>
      <node id="20">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="d5/d66/custom_2gtest-port_8h"/>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="45">
        <label>gtest/gtest-printers.h</label>
        <link refid="d0/d6d/gtest-printers_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>map</label>
        <link refid="cpp/header/map" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>lib/googletest/src/gtest-all.cc</label>
        <link refid="d1/d8c/gtest-all_8cc"/>
      </node>
      <node id="1">
        <label>lib/googletest/src/gtest-death-test.cc</label>
        <link refid="de/d50/gtest-death-test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="d0/d75/namespacetesting">testing</innernamespace>
    <innernamespace refid="d0/da7/namespacetesting_1_1internal">testing::internal</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="de/d50/gtest-death-test_8cc_1a83bd232fd1077579fada92c31bb7469f" prot="public" static="no">
        <name>GTEST_IMPLEMENTATION_</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-death-test.cc" line="75" column="9" bodyfile="lib/googletest/src/gtest-death-test.cc" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d0/d75/namespacetesting_1a317291240e750e2142a23cbd52bc5aec" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDefaultDeathTestStyle[]</definition>
        <argsstring>[]</argsstring>
        <name>kDefaultDeathTestStyle</name>
        <initializer>= &quot;fast&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-death-test.cc" line="84" column="19" bodyfile="lib/googletest/src/gtest-death-test.cc" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/d75/namespacetesting_1a428e5944490e497df683cb8324ce4489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(death_test_use_fork, internal::BoolFromGTestEnv(&quot;death_test_use_fork&quot;, false), &quot;Instructs to use fork()/_exit() instead of clone() in death tests. &quot; &quot;Ignored and always uses fork() on POSIX systems where clone() is not &quot; &quot;implemented. Useful when running under valgrind or similar tools if &quot; &quot;those do not support clone(). Valgrind 3.3.1 will just fail if &quot; &quot;it sees an unsupported combination of clone() flags. &quot; &quot;It is not recommended to use this flag w/o valgrind though it will &quot; &quot;work in 99% of the cases. Once valgrind is fixed, this flag will &quot; &quot;most likely be removed.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>death_test_use_fork</type>
        </param>
        <param>
          <type>internal::BoolFromGTestEnv(&quot;death_test_use_fork&quot;, false)</type>
        </param>
        <param>
          <type>&quot;Instructs to use fork()/_exit() instead of clone() in death tests. &quot; &quot;Ignored and always uses fork() on POSIX systems where clone() is not &quot; &quot;implemented. Useful when running under valgrind or similar tools if &quot; &quot;those do not support clone(). Valgrind 3.3.1 will just fail if &quot; &quot;it sees an unsupported combination of clone() flags. &quot; &quot;It is not recommended to use this flag w/o valgrind though it will &quot; &quot;work in 99% of the cases. Once valgrind is</type>
          <declname>fixed</declname>
        </param>
        <param>
          <type>this flag will &quot; &quot;most likely be removed.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-death-test.cc" line="95" column="1" declfile="lib/googletest/src/gtest-death-test.cc" declline="95" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a62d8ec1eb3e20f20ed52604b0dfa3425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(death_test_style, internal::StringFromGTestEnv(&quot;death_test_style&quot;, kDefaultDeathTestStyle), &quot;Indicates how to run a death test in a forked child process: &quot; &quot;\&quot;threadsafe\&quot; (child process re-executes the test binary &quot; &quot;from the beginning, running only the specific death test) or &quot; &quot;\&quot;fast\&quot; (child process runs the death test immediately &quot; &quot;after forking).&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>death_test_style</type>
        </param>
        <param>
          <type>internal::StringFromGTestEnv(&quot;death_test_style&quot;, kDefaultDeathTestStyle)</type>
        </param>
        <param>
          <type>&quot;Indicates how to run a death test in a forked child process: &quot; &quot;\&quot;threadsafe\&quot; (child process re-executes the test binary &quot; &quot;from the beginning, running only the specific death test) or &quot; &quot;\&quot;fast\&quot; (child process runs the death test immediately &quot; &quot;after forking).&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-death-test.cc" line="86" column="1" declfile="lib/googletest/src/gtest-death-test.cc" declline="86" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a20bfd9d47d8dd167ffc1c37a4c9ff73e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_DEFINE_string_</definition>
        <argsstring>(internal_run_death_test, &quot;&quot;, &quot;Indicates the file, line number, temporal index of &quot; &quot;the single death test to run, and a file descriptor to &quot; &quot;which a success code may be sent, all separated by &quot; &quot;the &apos;|&apos; characters.  This flag is specified if and only if the current &quot; &quot;process is a sub-process launched for running a thread-safe &quot; &quot;death test.  FOR INTERNAL USE ONLY.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>internal_run_death_test</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
        </param>
        <param>
          <type>&quot;Indicates the</type>
          <declname>file</declname>
        </param>
        <param>
          <type>line</type>
          <declname>number</declname>
        </param>
        <param>
          <type>temporal index of &quot; &quot;the single death test to</type>
          <declname>run</declname>
        </param>
        <param>
          <type>and a file descriptor to &quot; &quot;which a success code may be</type>
          <declname>sent</declname>
        </param>
        <param>
          <type>all separated by &quot; &quot;the &apos;|&apos; characters. This flag is specified if and only if the current &quot; &quot;process is a sub-process launched for running a thread-safe &quot; &quot;death test. FOR INTERNAL USE ONLY.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-death-test.cc" line="108" column="1" declfile="lib/googletest/src/gtest-death-test.cc" declline="108" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2005,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan),<sp/>vladl@google.com<sp/>(Vlad<sp/>Losev)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>implements<sp/>death<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d59/gtest-death-test_8h" kindref="compound">gtest/gtest-death-test.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/dc9/gtest-port_8h" kindref="compound">gtest/internal/gtest-port.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d2/d0e/internal_2custom_2gtest_8h" kindref="compound">gtest/internal/custom/gtest.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;crt_externs.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;sys/wait.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;spawn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d6/da4/gtest-message_8h" kindref="compound">gtest/gtest-message.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d0/d45/gtest-string_8h" kindref="compound">gtest/internal/gtest-string.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Indicates<sp/>that<sp/>this<sp/>translation<sp/>unit<sp/>is<sp/>part<sp/>of<sp/>Google<sp/>Test&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation.<sp/><sp/>It<sp/>must<sp/>come<sp/>before<sp/>gtest-internal-inl.h<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>included,<sp/>or<sp/>there<sp/>will<sp/>be<sp/>a<sp/>compiler<sp/>error.<sp/><sp/>This<sp/>trick<sp/>exists<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>prevent<sp/>the<sp/>accidental<sp/>inclusion<sp/>of<sp/>gtest-internal-inl.h<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>user&apos;s<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="de/d50/gtest-death-test_8cc_1a83bd232fd1077579fada92c31bb7469f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_IMPLEMENTATION_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d0/da1/gtest-internal-inl_8h" kindref="compound">src/gtest-internal-inl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_IMPLEMENTATION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="d0/d75/namespacetesting" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d0/d75/namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constants.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>death<sp/>test<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="d0/d75/namespacetesting_1a317291240e750e2142a23cbd52bc5aec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d0/d75/namespacetesting_1a317291240e750e2142a23cbd52bc5aec" kindref="member">kDefaultDeathTestStyle</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="d0/d75/namespacetesting_1a62d8ec1eb3e20f20ed52604b0dfa3425" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a62d8ec1eb3e20f20ed52604b0dfa3425" kindref="member">GTEST_DEFINE_string_</ref>(</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>death_test_style,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ab38c435530c97f10fd7a8008a76331f2" kindref="member">internal::StringFromGTestEnv</ref>(</highlight><highlight class="stringliteral">&quot;death_test_style&quot;</highlight><highlight class="normal">,<sp/><ref refid="d0/d75/namespacetesting_1a317291240e750e2142a23cbd52bc5aec" kindref="member">kDefaultDeathTestStyle</ref>),</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Indicates<sp/>how<sp/>to<sp/>run<sp/>a<sp/>death<sp/>test<sp/>in<sp/>a<sp/>forked<sp/>child<sp/>process:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;threadsafe\&quot;<sp/>(child<sp/>process<sp/>re-executes<sp/>the<sp/>test<sp/>binary<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;from<sp/>the<sp/>beginning,<sp/>running<sp/>only<sp/>the<sp/>specific<sp/>death<sp/>test)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;fast\&quot;<sp/>(child<sp/>process<sp/>runs<sp/>the<sp/>death<sp/>test<sp/>immediately<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;after<sp/>forking).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="d0/d75/namespacetesting_1a428e5944490e497df683cb8324ce4489" refkind="member"><highlight class="normal"><ref refid="d0/d75/namespacetesting_1a428e5944490e497df683cb8324ce4489" kindref="member">GTEST_DEFINE_bool_</ref>(</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>death_test_use_fork,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a1055088bb9b867e1b7b8f096f519d7c5" kindref="member">internal::BoolFromGTestEnv</ref>(</highlight><highlight class="stringliteral">&quot;death_test_use_fork&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Instructs<sp/>to<sp/>use<sp/>fork()/_exit()<sp/>instead<sp/>of<sp/>clone()<sp/>in<sp/>death<sp/>tests.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Ignored<sp/>and<sp/>always<sp/>uses<sp/>fork()<sp/>on<sp/>POSIX<sp/>systems<sp/>where<sp/>clone()<sp/>is<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;implemented.<sp/>Useful<sp/>when<sp/>running<sp/>under<sp/>valgrind<sp/>or<sp/>similar<sp/>tools<sp/>if<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;those<sp/>do<sp/>not<sp/>support<sp/>clone().<sp/>Valgrind<sp/>3.3.1<sp/>will<sp/>just<sp/>fail<sp/>if<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;it<sp/>sees<sp/>an<sp/>unsupported<sp/>combination<sp/>of<sp/>clone()<sp/>flags.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;It<sp/>is<sp/>not<sp/>recommended<sp/>to<sp/>use<sp/>this<sp/>flag<sp/>w/o<sp/>valgrind<sp/>though<sp/>it<sp/>will<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;work<sp/>in<sp/>99%<sp/>of<sp/>the<sp/>cases.<sp/>Once<sp/>valgrind<sp/>is<sp/>fixed,<sp/>this<sp/>flag<sp/>will<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;most<sp/>likely<sp/>be<sp/>removed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="d0/da7/namespacetesting_1_1internal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="108" refid="d0/da7/namespacetesting_1_1internal_1a20bfd9d47d8dd167ffc1c37a4c9ff73e" refkind="member"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a20bfd9d47d8dd167ffc1c37a4c9ff73e" kindref="member">GTEST_DEFINE_string_</ref>(</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_run_death_test,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Indicates<sp/>the<sp/>file,<sp/>line<sp/>number,<sp/>temporal<sp/>index<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>single<sp/>death<sp/>test<sp/>to<sp/>run,<sp/>and<sp/>a<sp/>file<sp/>descriptor<sp/>to<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>a<sp/>success<sp/>code<sp/>may<sp/>be<sp/>sent,<sp/>all<sp/>separated<sp/>by<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>&apos;|&apos;<sp/>characters.<sp/><sp/>This<sp/>flag<sp/>is<sp/>specified<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>current<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;process<sp/>is<sp/>a<sp/>sub-process<sp/>launched<sp/>for<sp/>running<sp/>a<sp/>thread-safe<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;death<sp/>test.<sp/><sp/>FOR<sp/>INTERNAL<sp/>USE<sp/>ONLY.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Valid<sp/>only<sp/>for<sp/>fast<sp/>death<sp/>tests.<sp/>Indicates<sp/>the<sp/>code<sp/>is<sp/>running<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>child<sp/>process<sp/>of<sp/>a<sp/>fast<sp/>style<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_in_fast_death_test_child<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>Boolean<sp/>value<sp/>indicating<sp/>whether<sp/>the<sp/>caller<sp/>is<sp/>currently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>executing<sp/>in<sp/>the<sp/>context<sp/>of<sp/>the<sp/>death<sp/>test<sp/>child<sp/>process.<sp/><sp/>Tools<sp/>such<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Valgrind<sp/>heap<sp/>checkers<sp/>may<sp/>need<sp/>this<sp/>to<sp/>modify<sp/>their<sp/>behavior<sp/>in<sp/>death</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tests.<sp/><sp/>IMPORTANT:<sp/>This<sp/>is<sp/>an<sp/>internal<sp/>utility.<sp/><sp/>Using<sp/>it<sp/>may<sp/>break<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation<sp/>of<sp/>death<sp/>tests.<sp/><sp/>User<sp/>code<sp/>MUST<sp/>NOT<sp/>use<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDeathTestChild()<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>Windows,<sp/>death<sp/>tests<sp/>are<sp/>thread-safe<sp/>regardless<sp/>of<sp/>the<sp/>value<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>death_test_style<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(internal_run_death_test).empty();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(death_test_style)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;threadsafe&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(internal_run_death_test).empty();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_in_fast_death_test_child;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ExitedWithCode<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">ExitedWithCode::ExitedWithCode(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exit_code)<sp/>:<sp/>exit_code_(exit_code)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ExitedWithCode<sp/>function-call<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ExitedWithCode::operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exit_status)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exit_status<sp/>==<sp/>exit_code_;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>WIFEXITED(exit_status)<sp/>&amp;&amp;<sp/>WEXITSTATUS(exit_status)<sp/>==<sp/>exit_code_;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KilledBySignal<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">KilledBySignal::KilledBySignal(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signum)<sp/>:<sp/>signum_(signum)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KilledBySignal<sp/>function-call<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>KilledBySignal::operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exit_status)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(GTEST_KILLED_BY_SIGNAL_OVERRIDE_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GTEST_KILLED_BY_SIGNAL_OVERRIDE_(signum_,<sp/>exit_status,<sp/>&amp;result))<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>defined(GTEST_KILLED_BY_SIGNAL_OVERRIDE_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>WIFSIGNALED(exit_status)<sp/>&amp;&amp;<sp/>WTERMSIG(exit_status)<sp/>==<sp/>signum_;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="cpp/io/manip/left" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">internal</ref><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utilities<sp/>needed<sp/>for<sp/>death<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>textual<sp/>description<sp/>of<sp/>a<sp/>given<sp/>exit<sp/>code,<sp/>in<sp/>the<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specified<sp/>by<sp/>wait(2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>ExitSummary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exit_code)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>Message<sp/>m;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Exited<sp/>with<sp/>exit<sp/>status<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>exit_code;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WIFEXITED(exit_code))<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Exited<sp/>with<sp/>exit<sp/>status<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>WEXITSTATUS(exit_code);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WIFSIGNALED(exit_code))<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Terminated<sp/>by<sp/>signal<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>WTERMSIG(exit_code);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>WCOREDUMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WCOREDUMP(exit_code))<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(core<sp/>dumped)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m.GetString();</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>exit_status<sp/>describes<sp/>a<sp/>process<sp/>that<sp/>was<sp/>terminated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>a<sp/>signal,<sp/>or<sp/>exited<sp/>normally<sp/>with<sp/>a<sp/>nonzero<sp/>exit<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ExitedUnsuccessfully(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exit_status)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!ExitedWithCode(0)(exit_status);</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>textual<sp/>failure<sp/>message<sp/>when<sp/>a<sp/>death<sp/>test<sp/>finds<sp/>more<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>one<sp/>thread<sp/>running,<sp/>or<sp/>cannot<sp/>determine<sp/>the<sp/>number<sp/>of<sp/>threads,<sp/>prior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>executing<sp/>the<sp/>given<sp/>statement.<sp/><sp/>It<sp/>is<sp/>the<sp/>responsibility<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>caller<sp/>not<sp/>to<sp/>pass<sp/>a<sp/>thread_count<sp/>of<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>DeathTestThreadWarning(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>thread_count)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>Message<sp/>msg;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Death<sp/>tests<sp/>use<sp/>fork(),<sp/>which<sp/>is<sp/>unsafe<sp/>particularly&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>a<sp/>threaded<sp/>context.<sp/>For<sp/>this<sp/>test,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d3/dc9/gtest-port_8h_1a13d98c217176bd8722c395b9225fc19d" kindref="member">GTEST_NAME_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_count<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>detect<sp/>the<sp/>number<sp/>of<sp/>threads.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;detected<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>thread_count<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>threads.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg.GetString();</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Flag<sp/>characters<sp/>for<sp/>reporting<sp/>a<sp/>death<sp/>test<sp/>that<sp/>did<sp/>not<sp/>die.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kDeathTestLived<sp/>=<sp/></highlight><highlight class="charliteral">&apos;L&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kDeathTestReturned<sp/>=<sp/></highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kDeathTestThrew<sp/>=<sp/></highlight><highlight class="charliteral">&apos;T&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kDeathTestInternalError<sp/>=<sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>enumeration<sp/>describing<sp/>all<sp/>of<sp/>the<sp/>possible<sp/>ways<sp/>that<sp/>a<sp/>death<sp/>test<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>conclude.<sp/><sp/>DIED<sp/>means<sp/>that<sp/>the<sp/>process<sp/>died<sp/>while<sp/>executing<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code;<sp/>LIVED<sp/>means<sp/>that<sp/>process<sp/>lived<sp/>beyond<sp/>the<sp/>end<sp/>of<sp/>the<sp/>test<sp/>code;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RETURNED<sp/>means<sp/>that<sp/>the<sp/>test<sp/>statement<sp/>attempted<sp/>to<sp/>execute<sp/>a<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>statement,<sp/>which<sp/>is<sp/>not<sp/>allowed;<sp/>THREW<sp/>means<sp/>that<sp/>the<sp/>test<sp/>statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returned<sp/>control<sp/>by<sp/>throwing<sp/>an<sp/>exception.<sp/><sp/>IN_PROGRESS<sp/>means<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>has<sp/>not<sp/>yet<sp/>concluded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(vladl@google.com):<sp/>Unify<sp/>names<sp/>and<sp/>possibly<sp/>values<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AbortReason,<sp/>DeathTestOutcome,<sp/>and<sp/>flag<sp/>characters<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>DeathTestOutcome<sp/>{<sp/>IN_PROGRESS,<sp/>DIED,<sp/>LIVED,<sp/>RETURNED,<sp/>THREW<sp/>};</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Routine<sp/>for<sp/>aborting<sp/>the<sp/>program<sp/>which<sp/>is<sp/>safe<sp/>to<sp/>call<sp/>from<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exec-style<sp/>death<sp/>test<sp/>child<sp/>process,<sp/>in<sp/>which<sp/>case<sp/>the<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>message<sp/>is<sp/>propagated<sp/>back<sp/>to<sp/>the<sp/>parent<sp/>process.<sp/><sp/>Otherwise,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>message<sp/>is<sp/>simply<sp/>printed<sp/>to<sp/>stderr.<sp/><sp/>In<sp/>either<sp/>case,<sp/>the<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>then<sp/>exits<sp/>with<sp/>status<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeathTestAbort(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>a<sp/>POSIX<sp/>system,<sp/>this<sp/>function<sp/>may<sp/>be<sp/>called<sp/>from<sp/>a<sp/>threadsafe-style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>death<sp/>test<sp/>child<sp/>process,<sp/>which<sp/>operates<sp/>on<sp/>a<sp/>very<sp/>small<sp/>stack.<sp/><sp/>Use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>heap<sp/>for<sp/>any<sp/>additional<sp/>non-minuscule<sp/>memory<sp/>requirements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InternalRunDeathTestFlag*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>flag<sp/>=</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a18ef697b64e28a78625c7a53cf28344c" kindref="member">GetUnitTestImpl</ref>()-&gt;internal_run_death_test_flag();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>parent<sp/>=<sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1af7c268eba32d5a718b36b6b3801302e0" kindref="member">posix::FDOpen</ref>(flag-&gt;write_fd(),<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/io/c/fputc" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">fputc</ref>(kDeathTestInternalError,<sp/>parent);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">fprintf</ref>(parent,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>message.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/io/c/fflush" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">fflush</ref>(parent);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>_exit(1);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">fprintf</ref>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>message.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/io/c/fflush" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">fflush</ref>(stderr);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a69b8278c59359dd6a6f941b4643db9fb" kindref="member">posix::Abort</ref>();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>replacement<sp/>for<sp/>CHECK<sp/>that<sp/>calls<sp/>DeathTestAbort<sp/>if<sp/>the<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fails.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_DEATH_TEST_CHECK_(expression)<sp/>\</highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!::testing::internal::IsTrue(expression))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>DeathTestAbort(<sp/>\</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::string(&quot;CHECK<sp/>failed:<sp/>File<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>__FILE__<sp/>+<sp/><sp/>&quot;,<sp/>line<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>::testing::internal::StreamableToString(__LINE__)<sp/>+<sp/>&quot;:<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>#expression);<sp/>\</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}<sp/>while<sp/>(::testing::internal::AlwaysFalse())</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>macro<sp/>is<sp/>similar<sp/>to<sp/>GTEST_DEATH_TEST_CHECK_,<sp/>but<sp/>it<sp/>is<sp/>meant<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluating<sp/>any<sp/>system<sp/>call<sp/>that<sp/>fulfills<sp/>two<sp/>conditions:<sp/>it<sp/>must<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-1<sp/>on<sp/>failure,<sp/>and<sp/>set<sp/>errno<sp/>to<sp/>EINTR<sp/>when<sp/>it<sp/>is<sp/>interrupted<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>tried<sp/>again.<sp/><sp/>The<sp/>macro<sp/>expands<sp/>to<sp/>a<sp/>loop<sp/>that<sp/>repeatedly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluates<sp/>the<sp/>expression<sp/>as<sp/>long<sp/>as<sp/>it<sp/>evaluates<sp/>to<sp/>-1<sp/>and<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>errno<sp/>to<sp/>EINTR.<sp/><sp/>If<sp/>the<sp/>expression<sp/>evaluates<sp/>to<sp/>-1<sp/>but<sp/>errno<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>something<sp/>other<sp/>than<sp/>EINTR,<sp/>DeathTestAbort<sp/>is<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(expression)<sp/>\</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>gtest_retval;<sp/>\</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="304"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>gtest_retval<sp/>=<sp/>(expression);<sp/>\</highlight></codeline>
<codeline lineno="305"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(gtest_retval<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>errno<sp/>==<sp/>EINTR);<sp/>\</highlight></codeline>
<codeline lineno="306"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(gtest_retval<sp/>==<sp/>-1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="307"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>DeathTestAbort(<sp/>\</highlight></codeline>
<codeline lineno="308"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::string(&quot;CHECK<sp/>failed:<sp/>File<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>__FILE__<sp/>+<sp/>&quot;,<sp/>line<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>::testing::internal::StreamableToString(__LINE__)<sp/>+<sp/>&quot;:<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>#expression<sp/>+<sp/>&quot;<sp/>!=<sp/>-1&quot;);<sp/>\</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}<sp/>while<sp/>(::testing::internal::AlwaysFalse())</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>message<sp/>describing<sp/>the<sp/>last<sp/>system<sp/>error<sp/>in<sp/>errno.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>GetLastErrnoDescription()<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errno<sp/>==<sp/>0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a4b77b14af6f4d18f83d303b98e9349c4" kindref="member">posix::StrError</ref>(errno);</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>called<sp/>from<sp/>a<sp/>death<sp/>test<sp/>parent<sp/>process<sp/>to<sp/>read<sp/>a<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>message<sp/>from<sp/>the<sp/>death<sp/>test<sp/>child<sp/>process<sp/>and<sp/>log<sp/>it<sp/>with<sp/>the<sp/>FATAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>severity.<sp/>On<sp/>Windows,<sp/>the<sp/>message<sp/>is<sp/>read<sp/>from<sp/>a<sp/>pipe<sp/>handle.<sp/>On<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>platforms,<sp/>it<sp/>is<sp/>read<sp/>from<sp/>a<sp/>file<sp/>descriptor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FailFromInternalError(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>Message<sp/>error;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_read;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((num_read<sp/>=<sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a3c6ab13e581a56f1b02f3eb7536c97fd" kindref="member">posix::Read</ref>(fd,<sp/>buffer,<sp/>255))<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer[num_read]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>&lt;&lt;<sp/>buffer;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_read<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>errno<sp/>==<sp/>EINTR);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_read<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a8ef4cb4c465db8c15464aecc6d9510ef" kindref="member">GTEST_LOG_</ref>(FATAL)<sp/>&lt;&lt;<sp/>error.GetString();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_error<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a8ef4cb4c465db8c15464aecc6d9510ef" kindref="member">GTEST_LOG_</ref>(FATAL)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>while<sp/>reading<sp/>death<sp/>test<sp/>internal:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>GetLastErrnoDescription()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>last_error<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Death<sp/>test<sp/>constructor.<sp/><sp/>Increments<sp/>the<sp/>running<sp/>death<sp/>test<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>current<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">DeathTest::DeathTest()<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>info<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a18ef697b64e28a78625c7a53cf28344c" kindref="member">GetUnitTestImpl</ref>()-&gt;<ref refid="d0/de3/classtesting_1_1internal_1_1UnitTestImpl_1a8d303ebdcf5989e96d3ed96fb7255102" kindref="member">current_test_info</ref>();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>run<sp/>a<sp/>death<sp/>test<sp/>outside<sp/>of<sp/>a<sp/>TEST<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TEST_F<sp/>construct&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>and<sp/>returns<sp/>a<sp/>death<sp/>test<sp/>by<sp/>dispatching<sp/>to<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>death<sp/>test<sp/>factory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DeathTest::Create(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>statement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>regex,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/>DeathTest**<sp/>test)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a18ef697b64e28a78625c7a53cf28344c" kindref="member">GetUnitTestImpl</ref>()-&gt;death_test_factory()-&gt;Create(</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>statement,<sp/>regex,<sp/>file,<sp/>line,<sp/>test);</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>DeathTest::LastMessage()<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>last_death_test_message_.c_str();</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeathTest::set_last_death_test_message(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>last_death_test_message_<sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>DeathTest::last_death_test_message_;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Provides<sp/>cross<sp/>platform<sp/>implementation<sp/>for<sp/>some<sp/>death<sp/>functionality.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DeathTestImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DeathTest<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>DeathTestImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_statement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>a_regex)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>statement_(a_statement),</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regex_(a_regex),</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawned_(false),</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_(-1),</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outcome_(IN_PROGRESS),</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_fd_(-1),</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_fd_(-1)<sp/>{}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read_fd_<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>closed<sp/>and<sp/>cleared<sp/>by<sp/>a<sp/>derived<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>~DeathTestImpl()<sp/>{<sp/>GTEST_DEATH_TEST_CHECK_(read_fd_<sp/>==<sp/>-1);<sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a69b8278c59359dd6a6f941b4643db9fb" kindref="member">Abort</ref>(AbortReason<sp/>reason);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Passed(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>status_ok);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>statement()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>statement_;<sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>regex()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>regex_;<sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>spawned()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spawned_;<sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_spawned(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_spawned)<sp/>{<sp/>spawned_<sp/>=<sp/>is_spawned;<sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cpp/experimental/fs/status" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">status</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status_;<sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_status(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_status)<sp/>{<sp/>status_<sp/>=<sp/>a_status;<sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>DeathTestOutcome<sp/>outcome()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>outcome_;<sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_outcome(DeathTestOutcome<sp/>an_outcome)<sp/>{<sp/>outcome_<sp/>=<sp/>an_outcome;<sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_fd()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>read_fd_;<sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_read_fd(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{<sp/>read_fd_<sp/>=<sp/>fd;<sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write_fd()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_fd_;<sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_write_fd(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{<sp/>write_fd_<sp/>=<sp/>fd;<sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Called<sp/>in<sp/>the<sp/>parent<sp/>process<sp/>only.<sp/>Reads<sp/>the<sp/>result<sp/>code<sp/>of<sp/>the<sp/>death</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>child<sp/>process<sp/>via<sp/>a<sp/>pipe,<sp/>interprets<sp/>it<sp/>to<sp/>set<sp/>the<sp/>outcome_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>member,<sp/>and<sp/>closes<sp/>read_fd_.<sp/><sp/>Outputs<sp/>diagnostics<sp/>and<sp/>terminates<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>of<sp/>unexpected<sp/>codes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReadAndInterpretStatusByte();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>textual<sp/>content<sp/>of<sp/>the<sp/>code<sp/>this<sp/>object<sp/>is<sp/>testing.<sp/><sp/>This<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>own<sp/>this<sp/>string<sp/>and<sp/>should<sp/>not<sp/>attempt<sp/>to<sp/>delete<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>statement_;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>regular<sp/>expression<sp/>which<sp/>test<sp/>output<sp/>must<sp/>match.<sp/><sp/>DeathTestImpl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>own<sp/>this<sp/>object<sp/>and<sp/>should<sp/>not<sp/>attempt<sp/>to<sp/>delete<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>regex_;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>if<sp/>the<sp/>death<sp/>test<sp/>child<sp/>process<sp/>has<sp/>been<sp/>successfully<sp/>spawned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>spawned_;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>exit<sp/>status<sp/>of<sp/>the<sp/>child<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status_;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>How<sp/>the<sp/>death<sp/>test<sp/>concluded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>DeathTestOutcome<sp/>outcome_;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Descriptor<sp/>to<sp/>the<sp/>read<sp/>end<sp/>of<sp/>the<sp/>pipe<sp/>to<sp/>the<sp/>child<sp/>process.<sp/><sp/>It<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>-1<sp/>in<sp/>the<sp/>child<sp/>process.<sp/><sp/>The<sp/>child<sp/>keeps<sp/>its<sp/>write<sp/>end<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pipe<sp/>in<sp/>write_fd_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_fd_;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Descriptor<sp/>to<sp/>the<sp/>child&apos;s<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe<sp/>to<sp/>the<sp/>parent<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>always<sp/>-1<sp/>in<sp/>the<sp/>parent<sp/>process.<sp/><sp/>The<sp/>parent<sp/>keeps<sp/>its<sp/>end<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pipe<sp/>in<sp/>read_fd_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write_fd_;</highlight></codeline>
<codeline lineno="430"><highlight class="normal">};</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Called<sp/>in<sp/>the<sp/>parent<sp/>process<sp/>only.<sp/>Reads<sp/>the<sp/>result<sp/>code<sp/>of<sp/>the<sp/>death</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>child<sp/>process<sp/>via<sp/>a<sp/>pipe,<sp/>interprets<sp/>it<sp/>to<sp/>set<sp/>the<sp/>outcome_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>member,<sp/>and<sp/>closes<sp/>read_fd_.<sp/><sp/>Outputs<sp/>diagnostics<sp/>and<sp/>terminates<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>case<sp/>of<sp/>unexpected<sp/>codes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeathTestImpl::ReadAndInterpretStatusByte()<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>flag;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_read;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>read()<sp/>here<sp/>blocks<sp/>until<sp/>data<sp/>is<sp/>available<sp/>(signifying<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>failure<sp/>of<sp/>the<sp/>death<sp/>test)<sp/>or<sp/>until<sp/>the<sp/>pipe<sp/>is<sp/>closed<sp/>(signifying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>its<sp/>success),<sp/>so<sp/>it&apos;s<sp/>okay<sp/>to<sp/>call<sp/>this<sp/>in<sp/>the<sp/>parent<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>child<sp/>process<sp/>has<sp/>exited.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes_read<sp/>=<sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a3c6ab13e581a56f1b02f3eb7536c97fd" kindref="member">posix::Read</ref>(read_fd(),<sp/>&amp;flag,<sp/>1);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bytes_read<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>errno<sp/>==<sp/>EINTR);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>set_outcome(DIED);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(flag)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kDeathTestReturned:</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_outcome(RETURNED);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kDeathTestThrew:</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_outcome(THREW);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kDeathTestLived:</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_outcome(LIVED);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kDeathTestInternalError:</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FailFromInternalError(read_fd());<sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>not<sp/>return.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a8ef4cb4c465db8c15464aecc6d9510ef" kindref="member">GTEST_LOG_</ref>(FATAL)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Death<sp/>test<sp/>child<sp/>process<sp/>reported<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>status<sp/>byte<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(flag)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a8ef4cb4c465db8c15464aecc6d9510ef" kindref="member">GTEST_LOG_</ref>(FATAL)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Read<sp/>from<sp/>death<sp/>test<sp/>child<sp/>process<sp/>failed:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>GetLastErrnoDescription();</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(<ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a15e5b8f2a535ef1b2529b85b861e4846" kindref="member">posix::Close</ref>(read_fd()));</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>set_read_fd(-1);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Signals<sp/>that<sp/>the<sp/>death<sp/>test<sp/>code<sp/>which<sp/>should<sp/>have<sp/>exited,<sp/>didn&apos;t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Should<sp/>be<sp/>called<sp/>only<sp/>in<sp/>a<sp/>death<sp/>test<sp/>child<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writes<sp/>a<sp/>status<sp/>byte<sp/>to<sp/>the<sp/>child&apos;s<sp/>status<sp/>file<sp/>descriptor,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>calls<sp/>_exit(1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a69b8278c59359dd6a6f941b4643db9fb" kindref="member">DeathTestImpl::Abort</ref>(AbortReason<sp/>reason)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>parent<sp/>process<sp/>considers<sp/>the<sp/>death<sp/>test<sp/>to<sp/>be<sp/>a<sp/>failure<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>finds<sp/>any<sp/>data<sp/>in<sp/>our<sp/>pipe.<sp/><sp/>So,<sp/>here<sp/>we<sp/>write<sp/>a<sp/>single<sp/>flag<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>pipe,<sp/>then<sp/>exit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>status_ch<sp/>=</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>==<sp/>TEST_DID_NOT_DIE<sp/>?<sp/>kDeathTestLived<sp/>:</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>==<sp/>TEST_THREW_EXCEPTION<sp/>?<sp/>kDeathTestThrew<sp/>:<sp/>kDeathTestReturned;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(<ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1af4acf9f78d55f815a18b43786511abef" kindref="member">posix::Write</ref>(write_fd(),<sp/>&amp;status_ch,<sp/>1));</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>leaking<sp/>the<sp/>descriptor<sp/>here<sp/>because<sp/>on<sp/>some<sp/>platforms<sp/>(i.e.,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>built<sp/>as<sp/>Windows<sp/>DLL),<sp/>destructors<sp/>of<sp/>global<sp/>objects<sp/>will<sp/>still</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>after<sp/>calling<sp/>_exit().<sp/>On<sp/>such<sp/>systems,<sp/>write_fd_<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>indirectly<sp/>closed<sp/>from<sp/>the<sp/>destructor<sp/>of<sp/>UnitTestImpl,<sp/>causing<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>close<sp/>if<sp/>it<sp/>is<sp/>also<sp/>closed<sp/>here.<sp/>On<sp/>debug<sp/>configurations,<sp/>double<sp/>close</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>assert.<sp/>As<sp/>there<sp/>are<sp/>no<sp/>in-process<sp/>buffers<sp/>to<sp/>flush<sp/>here,<sp/>we<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>relying<sp/>on<sp/>the<sp/>OS<sp/>to<sp/>close<sp/>the<sp/>descriptor<sp/>after<sp/>the<sp/>process<sp/>terminates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>the<sp/>destructors<sp/>are<sp/>not<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>_exit(1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Exits<sp/>w/o<sp/>any<sp/>normal<sp/>exit<sp/>hooks<sp/>(we<sp/>were<sp/>supposed<sp/>to<sp/>crash)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>indented<sp/>copy<sp/>of<sp/>stderr<sp/>output<sp/>for<sp/>a<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>makes<sp/>distinguishing<sp/>death<sp/>test<sp/>output<sp/>lines<sp/>from<sp/>regular<sp/>log<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>much<sp/>easier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><ref refid="d0/da7/namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">static ::std::string</ref><sp/>FormatDeathTestOutput(<ref refid="d0/da7/namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">const ::std::string</ref>&amp;<sp/>output)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::string</ref><sp/>ret;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>at<sp/>=<sp/>0;<sp/>;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>line_end<sp/>=<sp/>output.<ref refid="cpp/string/basic_string/find" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">find</ref>(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,<sp/>at);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>DEATH<sp/><sp/><sp/>]<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line_end<sp/>==<sp/>::std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>output.<ref refid="cpp/string/basic_string/substr" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">substr</ref>(at);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>output.<ref refid="cpp/string/basic_string/substr" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">substr</ref>(at,<sp/>line_end<sp/>+<sp/>1<sp/>-<sp/>at);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>at<sp/>=<sp/>line_end<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assesses<sp/>the<sp/>success<sp/>or<sp/>failure<sp/>of<sp/>a<sp/>death<sp/>test,<sp/>using<sp/>both<sp/>private</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="comment">//<sp/>members<sp/>which<sp/>have<sp/>previously<sp/>been<sp/>set,<sp/>and<sp/>one<sp/>argument:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Private<sp/>data<sp/>members:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>outcome:<sp/><sp/>An<sp/>enumeration<sp/>describing<sp/>how<sp/>the<sp/>death<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>concluded:<sp/>DIED,<sp/>LIVED,<sp/>THREW,<sp/>or<sp/>RETURNED.<sp/><sp/>The<sp/>death<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fails<sp/>in<sp/>the<sp/>latter<sp/>three<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>status:<sp/><sp/><sp/>The<sp/>exit<sp/>status<sp/>of<sp/>the<sp/>child<sp/>process.<sp/>On<sp/>*nix,<sp/>it<sp/>is<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>format<sp/>specified<sp/>by<sp/>wait(2).<sp/>On<sp/>Windows,<sp/>this<sp/>is<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>supplied<sp/>to<sp/>the<sp/>ExitProcess()<sp/>API<sp/>or<sp/>a<sp/>numeric<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>exception<sp/>that<sp/>terminated<sp/>the<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>regex:<sp/><sp/><sp/><sp/>A<sp/>regular<sp/>expression<sp/>object<sp/>to<sp/>be<sp/>applied<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>test&apos;s<sp/>captured<sp/>standard<sp/>error<sp/>output;<sp/>the<sp/>death<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fails<sp/>if<sp/>it<sp/>does<sp/>not<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Argument:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>status_ok:<sp/>true<sp/>if<sp/>exit_status<sp/>is<sp/>acceptable<sp/>in<sp/>the<sp/>context<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>particular<sp/>death<sp/>test,<sp/>which<sp/>fails<sp/>if<sp/>it<sp/>is<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>all<sp/>of<sp/>the<sp/>above<sp/>conditions<sp/>are<sp/>met.<sp/><sp/>Otherwise,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment">//<sp/>first<sp/>failing<sp/>condition,<sp/>in<sp/>the<sp/>order<sp/>given<sp/>above,<sp/>is<sp/>the<sp/>one<sp/>that<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reported.<sp/>Also<sp/>sets<sp/>the<sp/>last<sp/>death<sp/>test<sp/>message<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DeathTestImpl::Passed(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>status_ok)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spawned())</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>error_message<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a374156401da17704099d0c33fa53adfb" kindref="member">GetCapturedStderr</ref>();</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>Message<sp/>buffer;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>buffer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Death<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>statement()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(outcome())<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIVED:</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Result:<sp/>failed<sp/>to<sp/>die.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Error<sp/>msg:\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>FormatDeathTestOutput(error_message);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>THREW:</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Result:<sp/>threw<sp/>an<sp/>exception.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Error<sp/>msg:\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>FormatDeathTestOutput(error_message);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RETURNED:</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Result:<sp/>illegal<sp/>return<sp/>in<sp/>test<sp/>statement.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Error<sp/>msg:\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>FormatDeathTestOutput(error_message);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DIED:</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status_ok)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matched<sp/>=<sp/><ref refid="d0/d6d/classtesting_1_1internal_1_1RE_1a1e81f9a87211bdca645e025f8f0236c8" kindref="member">RE::PartialMatch</ref>(error_message.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>(),<sp/>*regex());</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matched)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Result:<sp/>died<sp/>but<sp/>not<sp/>with<sp/>expected<sp/>error.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>regex()-&gt;pattern()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Actual<sp/>msg:\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>FormatDeathTestOutput(error_message);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Result:<sp/>died<sp/>but<sp/>not<sp/>with<sp/>expected<sp/>exit<sp/>code:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ExitSummary(<ref refid="cpp/experimental/fs/status" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">status</ref>())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Actual<sp/>msg:\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>FormatDeathTestOutput(error_message);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IN_PROGRESS:</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a8ef4cb4c465db8c15464aecc6d9510ef" kindref="member">GTEST_LOG_</ref>(FATAL)</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;DeathTest::Passed<sp/>somehow<sp/>called<sp/>before<sp/>conclusion<sp/>of<sp/>test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>DeathTest::set_last_death_test_message(buffer.GetString());</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WindowsDeathTest<sp/>implements<sp/>death<sp/>tests<sp/>on<sp/>Windows.<sp/>Due<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specifics<sp/>of<sp/>starting<sp/>new<sp/>processes<sp/>on<sp/>Windows,<sp/>death<sp/>tests<sp/>there<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//<sp/>always<sp/>threadsafe,<sp/>and<sp/>Google<sp/>Test<sp/>considers<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--gtest_death_test_style=fast<sp/>setting<sp/>to<sp/>be<sp/>equivalent<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--gtest_death_test_style=threadsafe<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>few<sp/>implementation<sp/>notes:<sp/><sp/>Like<sp/>the<sp/>Linux<sp/>version,<sp/>the<sp/>Windows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation<sp/>uses<sp/>pipes<sp/>for<sp/>child-to-parent<sp/>communication.<sp/>But<sp/>due<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>specifics<sp/>of<sp/>pipes<sp/>on<sp/>Windows,<sp/>some<sp/>extra<sp/>steps<sp/>are<sp/>required:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/>The<sp/>parent<sp/>creates<sp/>a<sp/>communication<sp/>pipe<sp/>and<sp/>stores<sp/>handles<sp/>to<sp/>both</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>ends<sp/>of<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2.<sp/>The<sp/>parent<sp/>starts<sp/>the<sp/>child<sp/>and<sp/>provides<sp/>it<sp/>with<sp/>the<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>necessary<sp/>to<sp/>acquire<sp/>the<sp/>handle<sp/>to<sp/>the<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">//<sp/>3.<sp/>The<sp/>child<sp/>acquires<sp/>the<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe<sp/>and<sp/>signals<sp/>the<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>using<sp/>a<sp/>Windows<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>4.<sp/>Now<sp/>the<sp/>parent<sp/>can<sp/>release<sp/>the<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe<sp/>on<sp/>its<sp/>side.<sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>is<sp/>done<sp/>before<sp/>step<sp/>3,<sp/>the<sp/>object&apos;s<sp/>reference<sp/>count<sp/>goes<sp/>down<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>0<sp/>and<sp/>it<sp/>is<sp/>destroyed,<sp/>preventing<sp/>the<sp/>child<sp/>from<sp/>acquiring<sp/>it.<sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>parent<sp/>now<sp/>has<sp/>to<sp/>release<sp/>it,<sp/>or<sp/>read<sp/>operations<sp/>on<sp/>the<sp/>read<sp/>end<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>pipe<sp/>will<sp/>not<sp/>return<sp/>when<sp/>the<sp/>child<sp/>terminates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="comment">//<sp/>5.<sp/>The<sp/>parent<sp/>reads<sp/>child&apos;s<sp/>output<sp/>through<sp/>the<sp/>pipe<sp/>(outcome<sp/>code<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>any<sp/>possible<sp/>error<sp/>messages)<sp/>from<sp/>the<sp/>pipe,<sp/>and<sp/>its<sp/>stderr<sp/>and<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>determines<sp/>whether<sp/>to<sp/>fail<sp/>the<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>to<sp/>distinguish<sp/>Win32<sp/>API<sp/>calls<sp/>from<sp/>the<sp/>local<sp/>method<sp/>and<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//<sp/>calls,<sp/>the<sp/>former<sp/>are<sp/>explicitly<sp/>resolved<sp/>in<sp/>the<sp/>global<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">WindowsDeathTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DeathTestImpl<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>WindowsDeathTest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_statement,</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>a_regex,</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>DeathTestImpl(a_statement,<sp/>a_regex),<sp/>file_(file),<sp/>line_(line)<sp/>{}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>of<sp/>these<sp/>virtual<sp/>functions<sp/>are<sp/>inherited<sp/>from<sp/>DeathTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Wait();</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>TestRole<sp/>AssumeRole();</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>name<sp/>of<sp/>the<sp/>file<sp/>in<sp/>which<sp/>the<sp/>death<sp/>test<sp/>is<sp/>located.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>file_;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>number<sp/>on<sp/>which<sp/>the<sp/>death<sp/>test<sp/>is<sp/>located.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>to<sp/>the<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe<sp/>to<sp/>the<sp/>child<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>AutoHandle<sp/>write_handle_;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Child<sp/>process<sp/>handle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>AutoHandle<sp/>child_handle_;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Event<sp/>the<sp/>child<sp/>process<sp/>uses<sp/>to<sp/>signal<sp/>the<sp/>parent<sp/>that<sp/>it<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>acquired<sp/>the<sp/>handle<sp/>to<sp/>the<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe.<sp/>After<sp/>seeing<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>event<sp/>the<sp/>parent<sp/>can<sp/>release<sp/>its<sp/>own<sp/>handles<sp/>to<sp/>make<sp/>sure<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ReadFile()<sp/>calls<sp/>return<sp/>when<sp/>the<sp/>child<sp/>terminates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>AutoHandle<sp/>event_handle_;</highlight></codeline>
<codeline lineno="645"><highlight class="normal">};</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Waits<sp/>for<sp/>the<sp/>child<sp/>in<sp/>a<sp/>death<sp/>test<sp/>to<sp/>exit,<sp/>returning<sp/>its<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="comment">//<sp/>status,<sp/>or<sp/>0<sp/>if<sp/>no<sp/>child<sp/>process<sp/>exists.<sp/><sp/>As<sp/>a<sp/>side<sp/>effect,<sp/>sets<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="comment">//<sp/>outcome<sp/>data<sp/>member.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WindowsDeathTest::Wait()<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spawned())</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>until<sp/>the<sp/>child<sp/>either<sp/>signals<sp/>that<sp/>it<sp/>has<sp/>acquired<sp/>the<sp/>write<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>pipe<sp/>or<sp/>it<sp/>dies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HANDLE<sp/>wait_handles[2]<sp/>=<sp/>{<sp/>child_handle_.Get(),<sp/>event_handle_.Get()<sp/>};</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(::WaitForMultipleObjects(2,</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait_handles,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/></highlight><highlight class="comment">//<sp/>Waits<sp/>for<sp/>any<sp/>of<sp/>the<sp/>handles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INFINITE))<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WAIT_OBJECT_0:</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WAIT_OBJECT_0<sp/>+<sp/>1:</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_DEATH_TEST_CHECK_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>not<sp/>get<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>child<sp/>has<sp/>acquired<sp/>the<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe<sp/>or<sp/>exited.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>release<sp/>the<sp/>handle<sp/>on<sp/>our<sp/>side<sp/>and<sp/>continue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>write_handle_.Reset();</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>event_handle_.Reset();</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>ReadAndInterpretStatusByte();</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Waits<sp/>for<sp/>the<sp/>child<sp/>process<sp/>to<sp/>exit<sp/>if<sp/>it<sp/>haven&apos;t<sp/>already.<sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>immediately<sp/>if<sp/>the<sp/>child<sp/>has<sp/>already<sp/>exited,<sp/>regardless<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>whether<sp/>previous<sp/>calls<sp/>to<sp/>WaitForMultipleObjects<sp/>synchronized<sp/>on<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WAIT_OBJECT_0<sp/>==<sp/>::WaitForSingleObject(child_handle_.Get(),</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INFINITE));</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>DWORD<sp/>status_code;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::GetExitCodeProcess(child_handle_.Get(),<sp/>&amp;status_code)<sp/>!=<sp/>FALSE);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>child_handle_.Reset();</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>set_status(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(status_code));</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cpp/experimental/fs/status" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">status</ref>();</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>AssumeRole<sp/>process<sp/>for<sp/>a<sp/>Windows<sp/>death<sp/>test.<sp/><sp/>It<sp/>creates<sp/>a<sp/>child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>process<sp/>with<sp/>the<sp/>same<sp/>executable<sp/>as<sp/>the<sp/>current<sp/>process<sp/>to<sp/>run<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>death<sp/>test.<sp/><sp/>The<sp/>child<sp/>process<sp/>is<sp/>given<sp/>the<sp/>--gtest_filter<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--gtest_internal_run_death_test<sp/>flags<sp/>such<sp/>that<sp/>it<sp/>knows<sp/>to<sp/>run<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">//<sp/>current<sp/>death<sp/>test<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal">DeathTest::TestRole<sp/>WindowsDeathTest::AssumeRole()<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnitTestImpl*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a18ef697b64e28a78625c7a53cf28344c" kindref="member">GetUnitTestImpl</ref>();</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InternalRunDeathTestFlag*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>flag<sp/>=</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>impl-&gt;internal_run_death_test_flag();</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>info<sp/>=<sp/>impl-&gt;current_test_info();</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>death_test_index<sp/>=<sp/>info-&gt;result()-&gt;death_test_count();</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ParseInternalRunDeathTestFlag()<sp/>has<sp/>performed<sp/>all<sp/>the<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>set_write_fd(flag-&gt;write_fd());</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXECUTE_TEST;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>WindowsDeathTest<sp/>uses<sp/>an<sp/>anonymous<sp/>pipe<sp/>to<sp/>communicate<sp/>results<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>death<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>SECURITY_ATTRIBUTES<sp/>handles_are_inheritable<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(SECURITY_ATTRIBUTES),<sp/>NULL,<sp/>TRUE<sp/>};</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>HANDLE<sp/>read_handle,<sp/>write_handle;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::CreatePipe(&amp;read_handle,<sp/>&amp;write_handle,<sp/>&amp;handles_are_inheritable,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>buffer<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/>FALSE);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>set_read_fd(::_open_osfhandle(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">intptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(read_handle),</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>O_RDONLY));</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>write_handle_.Reset(write_handle);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>event_handle_.Reset(::CreateEvent(</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;handles_are_inheritable,</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TRUE,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>event<sp/>will<sp/>automatically<sp/>reset<sp/>to<sp/>non-signaled<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>initial<sp/>state<sp/>is<sp/>non-signalled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NULL));<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>even<sp/>is<sp/>unnamed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(event_handle_.Get()<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>filter_flag<sp/>=</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">std::string</ref>(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/>+<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8cb8ee7fe7659e6916a0108dffa2f7dc" kindref="member">kFilterFlag</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;test_case_name()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>info-&gt;name();</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>internal_flag<sp/>=</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">std::string</ref>(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/>+<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8572303d929880adf30db00952e1c45d" kindref="member">kInternalRunDeathTestFlag</ref><sp/>+</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"><sp/>+<sp/>file_<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(line_)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(death_test_index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(::GetCurrentProcessId()))<sp/>+</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>size_t<sp/>has<sp/>the<sp/>same<sp/>width<sp/>as<sp/>pointers<sp/>on<sp/>both<sp/>32-bit<sp/>and<sp/>64-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>platforms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>http://msdn.microsoft.com/en-us/library/tcxf1dw6.aspx.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(write_handle))<sp/>+</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(event_handle_.Get()));</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>executable_path[_MAX_PATH<sp/>+<sp/>1];<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_MAX_PATH<sp/>+<sp/>1<sp/>!=<sp/>::GetModuleFileNameA(NULL,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executable_path,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_MAX_PATH));</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>command_line<sp/>=</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">std::string</ref>(::GetCommandLineA())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>filter_flag<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal_flag<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>DeathTest::set_last_death_test_message(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8ec00d458d0d442bd64af7b5f9c22dda" kindref="member">CaptureStderr</ref>();</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>the<sp/>log<sp/>buffers<sp/>since<sp/>the<sp/>log<sp/>streams<sp/>are<sp/>shared<sp/>with<sp/>the<sp/>child.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2135f223bf6b527729aeaa651115183b" kindref="member">FlushInfoLog</ref>();</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>child<sp/>process<sp/>will<sp/>share<sp/>the<sp/>standard<sp/>handles<sp/>with<sp/>the<sp/>parent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>STARTUPINFOA<sp/>startup_info;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/byte/memset" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">memset</ref>(&amp;startup_info,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(STARTUPINFO));</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>startup_info.dwFlags<sp/>=<sp/>STARTF_USESTDHANDLES;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>startup_info.hStdInput<sp/>=<sp/>::GetStdHandle(STD_INPUT_HANDLE);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>startup_info.hStdOutput<sp/>=<sp/>::GetStdHandle(STD_OUTPUT_HANDLE);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>startup_info.hStdError<sp/>=<sp/>::GetStdHandle(STD_ERROR_HANDLE);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>PROCESS_INFORMATION<sp/>process_info;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(::CreateProcessA(</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>executable_path,</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(command_line.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>()),</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retuned<sp/>process<sp/>handle<sp/>is<sp/>not<sp/>inheritable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retuned<sp/>thread<sp/>handle<sp/>is<sp/>not<sp/>inheritable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TRUE,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Child<sp/>inherits<sp/>all<sp/>inheritable<sp/>handles<sp/>(for<sp/>write_handle_).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x0,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>creation<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inherit<sp/>the<sp/>parent&apos;s<sp/>environment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d21/classtesting_1_1UnitTest_1a24192400b70b3b946746954e9574fb8e" kindref="member">UnitTest::GetInstance</ref>()-&gt;<ref refid="d5/d21/classtesting_1_1UnitTest_1af6809b7747785c80f7a2f31f6b39b152" kindref="member">original_working_dir</ref>(),</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;startup_info,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;process_info)<sp/>!=<sp/>FALSE);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>child_handle_.Reset(process_info.hProcess);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>::CloseHandle(process_info.hThread);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>set_spawned(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OVERSEE_TEST;</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>not<sp/>on<sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ForkingDeathTest<sp/>provides<sp/>implementations<sp/>for<sp/>most<sp/>of<sp/>the<sp/>abstract</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="comment">//<sp/>methods<sp/>of<sp/>the<sp/>DeathTest<sp/>interface.<sp/><sp/>Only<sp/>the<sp/>AssumeRole<sp/>method<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">//<sp/>left<sp/>undefined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ForkingDeathTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DeathTestImpl<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>ForkingDeathTest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>statement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>regex);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>of<sp/>these<sp/>virtual<sp/>functions<sp/>are<sp/>inherited<sp/>from<sp/>DeathTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Wait();</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_child_pid(pid_t<sp/>child_pid)<sp/>{<sp/>child_pid_<sp/>=<sp/>child_pid;<sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>PID<sp/>of<sp/>child<sp/>process<sp/>during<sp/>death<sp/>test;<sp/>0<sp/>in<sp/>the<sp/>child<sp/>process<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>pid_t<sp/>child_pid_;</highlight></codeline>
<codeline lineno="800"><highlight class="normal">};</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>ForkingDeathTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal">ForkingDeathTest::ForkingDeathTest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_statement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>a_regex)</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>DeathTestImpl(a_statement,<sp/>a_regex),</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>child_pid_(-1)<sp/>{}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Waits<sp/>for<sp/>the<sp/>child<sp/>in<sp/>a<sp/>death<sp/>test<sp/>to<sp/>exit,<sp/>returning<sp/>its<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="comment">//<sp/>status,<sp/>or<sp/>0<sp/>if<sp/>no<sp/>child<sp/>process<sp/>exists.<sp/><sp/>As<sp/>a<sp/>side<sp/>effect,<sp/>sets<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="comment">//<sp/>outcome<sp/>data<sp/>member.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ForkingDeathTest::Wait()<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spawned())</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>ReadAndInterpretStatusByte();</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status_value;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(waitpid(child_pid_,<sp/>&amp;status_value,<sp/>0));</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>set_status(status_value);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status_value;</highlight></codeline>
<codeline lineno="820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>concrete<sp/>death<sp/>test<sp/>class<sp/>that<sp/>forks,<sp/>then<sp/>immediately<sp/>runs<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>child<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NoExecDeathTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ForkingDeathTest<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>NoExecDeathTest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_statement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>a_regex)<sp/>:</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ForkingDeathTest(a_statement,<sp/>a_regex)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>TestRole<sp/>AssumeRole();</highlight></codeline>
<codeline lineno="829"><highlight class="normal">};</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>AssumeRole<sp/>process<sp/>for<sp/>a<sp/>fork-and-run<sp/>death<sp/>test.<sp/><sp/>It<sp/>implements<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment">//<sp/>straightforward<sp/>fork,<sp/>with<sp/>a<sp/>simple<sp/>pipe<sp/>to<sp/>transmit<sp/>the<sp/>status<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal">DeathTest::TestRole<sp/>NoExecDeathTest::AssumeRole()<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>thread_count<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8cbd8bf820517923d7f3c4477b3af5fa" kindref="member">GetThreadCount</ref>();</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_count<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a8ef4cb4c465db8c15464aecc6d9510ef" kindref="member">GTEST_LOG_</ref>(WARNING)<sp/>&lt;&lt;<sp/>DeathTestThreadWarning(thread_count);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pipe_fd[2];</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(pipe(pipe_fd)<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>DeathTest::set_last_death_test_message(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8ec00d458d0d442bd64af7b5f9c22dda" kindref="member">CaptureStderr</ref>();</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>fork<sp/>the<sp/>process<sp/>below,<sp/>the<sp/>log<sp/>file<sp/>buffers<sp/>are<sp/>copied,<sp/>but<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>descriptors<sp/>are<sp/>shared.<sp/><sp/>We<sp/>flush<sp/>all<sp/>log<sp/>files<sp/>here<sp/>so<sp/>that<sp/>closing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>file<sp/>descriptors<sp/>in<sp/>the<sp/>child<sp/>process<sp/>doesn&apos;t<sp/>throw<sp/>off<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>synchronization<sp/>between<sp/>descriptors<sp/>and<sp/>buffers<sp/>in<sp/>the<sp/>parent<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>as<sp/>close<sp/>to<sp/>the<sp/>fork<sp/>as<sp/>possible<sp/>to<sp/>avoid<sp/>a<sp/>race<sp/>condition<sp/>in<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>are<sp/>multiple<sp/>threads<sp/>running<sp/>before<sp/>the<sp/>death<sp/>test,<sp/>and<sp/>another</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>thread<sp/>writes<sp/>to<sp/>the<sp/>log<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2135f223bf6b527729aeaa651115183b" kindref="member">FlushInfoLog</ref>();</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pid_t<sp/>child_pid<sp/>=<sp/>fork();</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(child_pid<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>set_child_pid(child_pid);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child_pid<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(close(pipe_fd[0]));</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>set_write_fd(pipe_fd[1]);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Redirects<sp/>all<sp/>logging<sp/>to<sp/>stderr<sp/>in<sp/>the<sp/>child<sp/>process<sp/>to<sp/>prevent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>concurrent<sp/>writes<sp/>to<sp/>the<sp/>log<sp/>files.<sp/><sp/>We<sp/>capture<sp/>stderr<sp/>in<sp/>the<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>and<sp/>append<sp/>the<sp/>child<sp/>process&apos;<sp/>output<sp/>to<sp/>a<sp/>log.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a06b1b20029fbd1dbeb59752f914fab84" kindref="member">LogToStderr</ref>();</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Event<sp/>forwarding<sp/>to<sp/>the<sp/>listeners<sp/>of<sp/>event<sp/>listener<sp/>API<sp/>mush<sp/>be<sp/>shut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>down<sp/>in<sp/>death<sp/>test<sp/>subprocesses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a18ef697b64e28a78625c7a53cf28344c" kindref="member">GetUnitTestImpl</ref>()-&gt;<ref refid="d0/de3/classtesting_1_1internal_1_1UnitTestImpl_1a67211f8475936f88d0e4d30f841c0da4" kindref="member">listeners</ref>()-&gt;<ref refid="db/d70/classtesting_1_1TestEventListeners_1a7132550dc1c50bb3399a6d6d3fc9be3d" kindref="member">SuppressEventForwarding</ref>();</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>g_in_fast_death_test_child<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXECUTE_TEST;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(close(pipe_fd[1]));</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>set_read_fd(pipe_fd[0]);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>set_spawned(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OVERSEE_TEST;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>concrete<sp/>death<sp/>test<sp/>class<sp/>that<sp/>forks<sp/>and<sp/>re-executes<sp/>the<sp/>main</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="comment">//<sp/>program<sp/>from<sp/>the<sp/>beginning,<sp/>with<sp/>command-line<sp/>flags<sp/>set<sp/>that<sp/>cause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>this<sp/>specific<sp/>death<sp/>test<sp/>to<sp/>be<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExecDeathTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ForkingDeathTest<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>ExecDeathTest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_statement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>a_regex,</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)<sp/>:</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ForkingDeathTest(a_statement,<sp/>a_regex),<sp/>file_(file),<sp/>line_(line)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>TestRole<sp/>AssumeRole();</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>static<sp/>::std::vector&lt;testing::internal::string&gt;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>GetArgvsForDeathTestChildProcess()<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::vector&lt;testing::internal::string&gt;</ref><sp/>args<sp/>=<sp/>GetInjectableArgvs();</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::vector&lt;testing::internal::string&gt;</ref><sp/>extra_args<sp/>=</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_();</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>args.<ref refid="cpp/container/vector/insert" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">insert</ref>(args.<ref refid="cpp/container/vector/end" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">end</ref>(),<sp/>extra_args.<ref refid="cpp/container/vector/begin" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">begin</ref>(),<sp/>extra_args.<ref refid="cpp/container/vector/end" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">end</ref>());</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>defined(GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>name<sp/>of<sp/>the<sp/>file<sp/>in<sp/>which<sp/>the<sp/>death<sp/>test<sp/>is<sp/>located.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>file_;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>number<sp/>on<sp/>which<sp/>the<sp/>death<sp/>test<sp/>is<sp/>located.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_;</highlight></codeline>
<codeline lineno="900"><highlight class="normal">};</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utility<sp/>class<sp/>for<sp/>accumulating<sp/>command-line<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Arguments<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>Arguments()<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>args_.<ref refid="cpp/container/vector/push_back" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">push_back</ref>(NULL);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>~Arguments()<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;char*&gt;::iterator</ref><sp/>i<sp/>=<sp/>args_.<ref refid="cpp/container/vector/begin" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">begin</ref>();<sp/>i<sp/>!=<sp/>args_.end();</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cpp/memory/c/free" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">free</ref>(*i);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddArgument(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argument)<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>args_.insert(args_.end()<sp/>-<sp/>1,<sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a8e352884793a65ae8be144676f1a9136" kindref="member">posix::StrDup</ref>(argument));</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Str&gt;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddArguments(const<sp/>::std::vector&lt;Str&gt;&amp;<sp/>arguments)<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(typename<sp/>::std::vector&lt;Str&gt;::const_iterator<sp/>i<sp/>=<sp/>arguments.begin();</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>!=<sp/>arguments.end();</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args_.insert(args_.end()<sp/>-<sp/>1,<sp/><ref refid="d0/d81/namespacetesting_1_1internal_1_1posix_1a8e352884793a65ae8be144676f1a9136" kindref="member">posix::StrDup</ref>(i-&gt;c_str()));</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>Argv()<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;args_[0];</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::vector&lt;char*&gt;</ref><sp/>args_;</highlight></codeline>
<codeline lineno="933"><highlight class="normal">};</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>struct<sp/>that<sp/>encompasses<sp/>the<sp/>arguments<sp/>to<sp/>the<sp/>child<sp/>process<sp/>of<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="comment">//<sp/>threadsafe-style<sp/>death<sp/>test<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ExecDeathTestArgs<sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>argv;<sp/><sp/></highlight><highlight class="comment">//<sp/>Command-line<sp/>arguments<sp/>for<sp/>the<sp/>child&apos;s<sp/>call<sp/>to<sp/>exec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>close_fd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>File<sp/>descriptor<sp/>to<sp/>close;<sp/>the<sp/>read<sp/>end<sp/>of<sp/>a<sp/>pipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal">};</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>GTEST_OS_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>GetEnviron()<sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>Google<sp/>Test<sp/>is<sp/>built<sp/>as<sp/>a<sp/>framework<sp/>on<sp/>MacOS<sp/>X,<sp/>the<sp/>environ<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>unavailable.<sp/>Apple&apos;s<sp/>documentation<sp/>(man<sp/>environ)<sp/>recommends<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>_NSGetEnviron()<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*_NSGetEnviron();</highlight></codeline>
<codeline lineno="948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>POSIX<sp/>platforms<sp/>expect<sp/>you<sp/>to<sp/>declare<sp/>environ.<sp/>extern<sp/>&quot;C&quot;<sp/>makes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>reside<sp/>in<sp/>the<sp/>global<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>environ;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>GetEnviron()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>environ;<sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>!GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>main<sp/>function<sp/>for<sp/>a<sp/>threadsafe-style<sp/>death<sp/>test<sp/>child<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>called<sp/>in<sp/>a<sp/>clone()-ed<sp/>process<sp/>and<sp/>thus<sp/>must<sp/>avoid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="comment">//<sp/>any<sp/>potentially<sp/>unsafe<sp/>operations<sp/>like<sp/>malloc<sp/>or<sp/>libc<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ExecDeathTestChildMain(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>child_arg)<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>ExecDeathTestArgs*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>args<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ExecDeathTestArgs*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(child_arg);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(close(args-&gt;close_fd));</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>execute<sp/>the<sp/>test<sp/>program<sp/>in<sp/>the<sp/>same<sp/>environment<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>was<sp/>originally<sp/>invoked.<sp/><sp/>Therefore<sp/>we<sp/>change<sp/>to<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>working<sp/>directory<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>original_dir<sp/>=</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d21/classtesting_1_1UnitTest_1a24192400b70b3b946746954e9574fb8e" kindref="member">UnitTest::GetInstance</ref>()-&gt;<ref refid="d5/d21/classtesting_1_1UnitTest_1af6809b7747785c80f7a2f31f6b39b152" kindref="member">original_working_dir</ref>();</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>safely<sp/>call<sp/>chdir()<sp/>as<sp/>it&apos;s<sp/>a<sp/>direct<sp/>system<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chdir(original_dir)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>(</highlight><highlight class="stringliteral">&quot;chdir(\&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>original_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;)<sp/>failed:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLastErrnoDescription());</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>safely<sp/>call<sp/>execve()<sp/>as<sp/>it&apos;s<sp/>a<sp/>direct<sp/>system<sp/>call.<sp/><sp/>We</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>use<sp/>execvp()<sp/>as<sp/>it&apos;s<sp/>a<sp/>libc<sp/>function<sp/>and<sp/>thus<sp/>potentially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unsafe.<sp/><sp/>Since<sp/>execve()<sp/>doesn&apos;t<sp/>search<sp/>the<sp/>PATH,<sp/>the<sp/>user<sp/>must</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>invoke<sp/>the<sp/>test<sp/>program<sp/>via<sp/>a<sp/>valid<sp/>path<sp/>that<sp/>contains<sp/>at<sp/>least</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>path<sp/>separator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>execve(args-&gt;argv[0],<sp/>args-&gt;argv,<sp/>GetEnviron());</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>DeathTestAbort(<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>(</highlight><highlight class="stringliteral">&quot;execve(&quot;</highlight><highlight class="normal">)<sp/>+<sp/>args-&gt;argv[0]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>...)<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>failed:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLastErrnoDescription());</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Two<sp/>utility<sp/>routines<sp/>that<sp/>together<sp/>determine<sp/>the<sp/>direction<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment">//<sp/>grows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>could<sp/>be<sp/>accomplished<sp/>more<sp/>elegantly<sp/>by<sp/>a<sp/>single<sp/>recursive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function,<sp/>but<sp/>we<sp/>want<sp/>to<sp/>guard<sp/>against<sp/>the<sp/>unlikely<sp/>possibility<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>smart<sp/>compiler<sp/>optimizing<sp/>the<sp/>recursion<sp/>away.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTEST_NO_INLINE_<sp/>is<sp/>required<sp/>to<sp/>prevent<sp/>GCC<sp/>4.6<sp/>from<sp/>inlining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StackLowerThanAddress<sp/>into<sp/>StackGrowsDown,<sp/>which<sp/>then<sp/>doesn&apos;t<sp/>give</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="comment">//<sp/>correct<sp/>answer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StackLowerThanAddress(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>result)<sp/><ref refid="d3/dc9/gtest-port_8h_1a9945cbd967fbccb15f8de711f58955c7" kindref="member">GTEST_NO_INLINE_</ref>;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StackLowerThanAddress(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>*result<sp/>=<sp/>(&amp;dummy<sp/>&lt;<sp/>ptr);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>AddressSanitizer<sp/>does<sp/>not<sp/>tamper<sp/>with<sp/>the<sp/>stack<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1af18b465f4ba6e36eea7a8d2d79521873" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_</ref></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StackGrowsDown()<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>StackLowerThanAddress(&amp;dummy,<sp/>&amp;result);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Spawns<sp/>a<sp/>child<sp/>process<sp/>with<sp/>the<sp/>same<sp/>executable<sp/>as<sp/>the<sp/>current<sp/>process<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>thread-safe<sp/>manner<sp/>and<sp/>instructs<sp/>it<sp/>to<sp/>run<sp/>the<sp/>death<sp/>test.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation<sp/>uses<sp/>fork(2)<sp/>+<sp/>exec.<sp/><sp/>On<sp/>systems<sp/>where<sp/>clone(2)<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>available,<sp/>it<sp/>is<sp/>used<sp/>instead,<sp/>being<sp/>slightly<sp/>more<sp/>thread-safe.<sp/><sp/>On<sp/>QNX,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fork<sp/>supports<sp/>only<sp/>single-threaded<sp/>environments,<sp/>so<sp/>this<sp/>function<sp/>uses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>spawn(2)<sp/>there<sp/>instead.<sp/><sp/>The<sp/>function<sp/>dies<sp/>with<sp/>an<sp/>error<sp/>message<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">//<sp/>anything<sp/>goes<sp/>wrong.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>pid_t<sp/>ExecDeathTestSpawnChild(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>argv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>close_fd)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>ExecDeathTestArgs<sp/>args<sp/>=<sp/>{<sp/>argv,<sp/>close_fd<sp/>};</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>pid_t<sp/>child_pid<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Obtains<sp/>the<sp/>current<sp/>directory<sp/>and<sp/>sets<sp/>it<sp/>to<sp/>be<sp/>closed<sp/>in<sp/>the<sp/>child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cwd_fd<sp/>=<sp/>open(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,<sp/>O_RDONLY);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(cwd_fd<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(fcntl(cwd_fd,<sp/>F_SETFD,<sp/>FD_CLOEXEC));</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>execute<sp/>the<sp/>test<sp/>program<sp/>in<sp/>the<sp/>same<sp/>environment<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>was<sp/>originally<sp/>invoked.<sp/><sp/>Therefore<sp/>we<sp/>change<sp/>to<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>working<sp/>directory<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>original_dir<sp/>=</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d21/classtesting_1_1UnitTest_1a24192400b70b3b946746954e9574fb8e" kindref="member">UnitTest::GetInstance</ref>()-&gt;<ref refid="d5/d21/classtesting_1_1UnitTest_1af6809b7747785c80f7a2f31f6b39b152" kindref="member">original_working_dir</ref>();</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>safely<sp/>call<sp/>chdir()<sp/>as<sp/>it&apos;s<sp/>a<sp/>direct<sp/>system<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chdir(original_dir)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>(</highlight><highlight class="stringliteral">&quot;chdir(\&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>original_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;)<sp/>failed:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLastErrnoDescription());</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd_flags;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>close_fd<sp/>to<sp/>be<sp/>closed<sp/>after<sp/>spawn.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(fd_flags<sp/>=<sp/>fcntl(close_fd,<sp/>F_GETFD));</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(fcntl(close_fd,<sp/>F_SETFD,</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd_flags<sp/>|<sp/>FD_CLOEXEC));</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">inheritance<sp/>inherit<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>spawn<sp/>is<sp/>a<sp/>system<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>child_pid<sp/>=<sp/>spawn(args.argv[0],<sp/>0,<sp/>NULL,<sp/>&amp;inherit,<sp/>args.argv,<sp/>GetEnviron());</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Restores<sp/>the<sp/>current<sp/>working<sp/>directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(fchdir(cwd_fd)<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(close(cwd_fd));</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>if<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>a<sp/>SIGPROF<sp/>signal<sp/>is<sp/>received<sp/>while<sp/>fork()<sp/>or<sp/>clone()<sp/>are<sp/>executing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>process<sp/>may<sp/>hang.<sp/>To<sp/>avoid<sp/>this,<sp/>we<sp/>ignore<sp/>SIGPROF<sp/>here<sp/>and<sp/>re-enable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>after<sp/>the<sp/>call<sp/>to<sp/>fork()/clone()<sp/>is<sp/>complete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>saved_sigprof_action;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>ignore_sigprof_action;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/byte/memset" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">memset</ref>(&amp;ignore_sigprof_action,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ignore_sigprof_action));</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>sigemptyset(&amp;ignore_sigprof_action.sa_mask);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>ignore_sigprof_action.sa_handler<sp/>=<sp/>SIG_IGN;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(sigaction(</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SIGPROF,<sp/>&amp;ignore_sigprof_action,<sp/>&amp;saved_sigprof_action));</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>if<sp/>GTEST_HAS_CLONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_fork<sp/>=<sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(death_test_use_fork);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!use_fork)<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stack_grows_down<sp/>=<sp/>StackGrowsDown();</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stack_size<sp/>=<sp/>getpagesize();</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMAP_ANONYMOUS<sp/>is<sp/>not<sp/>defined<sp/>on<sp/>Mac,<sp/>so<sp/>we<sp/>use<sp/>MAP_ANON<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>stack<sp/>=<sp/>mmap(NULL,<sp/>stack_size,<sp/>PROT_READ<sp/>|<sp/>PROT_WRITE,</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAP_ANON<sp/>|<sp/>MAP_PRIVATE,<sp/>-1,<sp/>0);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DEATH_TEST_CHECK_(stack<sp/>!=<sp/>MAP_FAILED);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>stack<sp/>alignment<sp/>in<sp/>bytes:<sp/><sp/>For<sp/>a<sp/>downward-growing<sp/>stack,<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>amount<sp/>is<sp/>subtracted<sp/>from<sp/>size<sp/>of<sp/>the<sp/>stack<sp/>space<sp/>to<sp/>get<sp/>an<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>within<sp/>the<sp/>stack<sp/>space<sp/>and<sp/>is<sp/>aligned<sp/>on<sp/>all<sp/>systems<sp/>we<sp/>care</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>about.<sp/><sp/>As<sp/>far<sp/>as<sp/>I<sp/>know<sp/>there<sp/>is<sp/>no<sp/>ABI<sp/>with<sp/>stack<sp/>alignment<sp/>greater</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>64.<sp/><sp/>We<sp/>assume<sp/>stack<sp/>and<sp/>stack_size<sp/>already<sp/>have<sp/>alignment<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kMaxStackAlignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kMaxStackAlignment<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>stack_top<sp/>=</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(stack)<sp/>+</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(stack_grows_down<sp/>?<sp/>stack_size<sp/>-<sp/>kMaxStackAlignment<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DEATH_TEST_CHECK_(stack_size<sp/>&gt;<sp/>kMaxStackAlignment<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">intptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(stack_top)<sp/>%<sp/>kMaxStackAlignment<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>child_pid<sp/>=<sp/>clone(&amp;ExecDeathTestChildMain,<sp/>stack_top,<sp/>SIGCHLD,<sp/>&amp;args);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DEATH_TEST_CHECK_(munmap(stack,<sp/>stack_size)<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_fork<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_CLONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_fork<sp/>&amp;&amp;<sp/>(child_pid<sp/>=<sp/>fork())<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExecDeathTestChildMain(&amp;args);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_exit(0);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_QNX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sigaction(SIGPROF,<sp/>&amp;saved_sigprof_action,<sp/>NULL));</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(child_pid<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>child_pid;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>AssumeRole<sp/>process<sp/>for<sp/>a<sp/>fork-and-exec<sp/>death<sp/>test.<sp/><sp/>It<sp/>re-executes<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>main<sp/>program<sp/>from<sp/>the<sp/>beginning,<sp/>setting<sp/>the<sp/>--gtest_filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>--gtest_internal_run_death_test<sp/>flags<sp/>to<sp/>cause<sp/>only<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>death<sp/>test<sp/>to<sp/>be<sp/>re-run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal">DeathTest::TestRole<sp/>ExecDeathTest::AssumeRole()<sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnitTestImpl*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a18ef697b64e28a78625c7a53cf28344c" kindref="member">GetUnitTestImpl</ref>();</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InternalRunDeathTestFlag*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>flag<sp/>=</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>impl-&gt;internal_run_death_test_flag();</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestInfo*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>info<sp/>=<sp/>impl-&gt;current_test_info();</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>death_test_index<sp/>=<sp/>info-&gt;result()-&gt;death_test_count();</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>set_write_fd(flag-&gt;write_fd());</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXECUTE_TEST;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pipe_fd[2];</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(pipe(pipe_fd)<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>close-on-exec<sp/>flag<sp/>on<sp/>the<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe,<sp/>lest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>be<sp/>closed<sp/>when<sp/>the<sp/>child<sp/>process<sp/>does<sp/>an<sp/>exec:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_(fcntl(pipe_fd[1],<sp/>F_SETFD,<sp/>0)<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>filter_flag<sp/>=</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">std::string</ref>(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/>+<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8cb8ee7fe7659e6916a0108dffa2f7dc" kindref="member">kFilterFlag</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>info-&gt;test_case_name()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>info-&gt;name();</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>internal_flag<sp/>=</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">std::string</ref>(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="d3/dc9/gtest-port_8h_1a088e84784c589ba9b1fc48602ad8eabf" kindref="member">GTEST_FLAG_PREFIX_</ref><sp/>+<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8572303d929880adf30db00952e1c45d" kindref="member">kInternalRunDeathTestFlag</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>file_<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(line_)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(death_test_index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(pipe_fd[1]);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/>Arguments<sp/>args;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>args.AddArguments(GetArgvsForDeathTestChildProcess());</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>args.AddArgument(filter_flag.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>args.AddArgument(internal_flag.<ref refid="cpp/string/basic_string/c_str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">c_str</ref>());</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>DeathTest::set_last_death_test_message(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8ec00d458d0d442bd64af7b5f9c22dda" kindref="member">CaptureStderr</ref>();</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>comment<sp/>in<sp/>NoExecDeathTest::AssumeRole<sp/>for<sp/>why<sp/>the<sp/>next<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a2135f223bf6b527729aeaa651115183b" kindref="member">FlushInfoLog</ref>();</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pid_t<sp/>child_pid<sp/>=<sp/>ExecDeathTestSpawnChild(args.Argv(),<sp/>pipe_fd[0]);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>GTEST_DEATH_TEST_CHECK_SYSCALL_(close(pipe_fd[1]));</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>set_child_pid(child_pid);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/>set_read_fd(pipe_fd[0]);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>set_spawned(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OVERSEE_TEST;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>!GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>concrete<sp/>DeathTest-derived<sp/>class<sp/>that<sp/>depends<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--gtest_death_test_style<sp/>flag,<sp/>and<sp/>sets<sp/>the<sp/>pointer<sp/>pointed<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>&quot;test&quot;<sp/>argument<sp/>to<sp/>its<sp/>address.<sp/><sp/>If<sp/>the<sp/>test<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>skipped,<sp/>sets<sp/>that<sp/>pointer<sp/>to<sp/>NULL.<sp/><sp/>Returns<sp/>true,<sp/>unless<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>flag<sp/>is<sp/>set<sp/>to<sp/>an<sp/>invalid<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DefaultDeathTestFactory::Create(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>statement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RE*<sp/>regex,</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeathTest**<sp/>test)<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>UnitTestImpl*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>impl<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a18ef697b64e28a78625c7a53cf28344c" kindref="member">GetUnitTestImpl</ref>();</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InternalRunDeathTestFlag*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>flag<sp/>=</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>impl-&gt;internal_run_death_test_flag();</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>death_test_index<sp/>=<sp/>impl-&gt;current_test_info()</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;increment_death_test_count();</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(death_test_index<sp/>&gt;<sp/>flag-&gt;index())<sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DeathTest::set_last_death_test_message(</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Death<sp/>test<sp/>count<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(death_test_index)</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>somehow<sp/>exceeded<sp/>expected<sp/>maximum<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(flag-&gt;index())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(flag-&gt;file()<sp/>==<sp/>file<sp/>&amp;&amp;<sp/>flag-&gt;line()<sp/>==<sp/>line<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag-&gt;index()<sp/>==<sp/>death_test_index))<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*test<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(death_test_style)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;threadsafe&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(death_test_style)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>*test<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>WindowsDeathTest(statement,<sp/>regex,<sp/>file,<sp/>line);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(death_test_style)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;threadsafe&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>*test<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ExecDeathTest(statement,<sp/>regex,<sp/>file,<sp/>line);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(death_test_style)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>*test<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NoExecDeathTest(statement,<sp/>regex);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT<sp/>-<sp/>this<sp/>is<sp/>more<sp/>readable<sp/>than<sp/>unbalanced<sp/>brackets<sp/>inside<sp/>#if.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTest::set_last_death_test_message(</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>death<sp/>test<sp/>style<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(death_test_style)</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>encountered&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Recreates<sp/>the<sp/>pipe<sp/>and<sp/>event<sp/>handles<sp/>from<sp/>the<sp/>provided<sp/>parameters,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>signals<sp/>the<sp/>event,<sp/>and<sp/>returns<sp/>a<sp/>file<sp/>descriptor<sp/>wrapped<sp/>around<sp/>the<sp/>pipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>handle.<sp/>This<sp/>function<sp/>is<sp/>called<sp/>in<sp/>the<sp/>child<sp/>process<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetStatusFileDescriptor(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parent_process_id,</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>write_handle_as_size_t,</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>event_handle_as_size_t)<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>AutoHandle<sp/>parent_process_handle(::OpenProcess(PROCESS_DUP_HANDLE,</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/></highlight><highlight class="comment">//<sp/>Non-inheritable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_process_id));</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent_process_handle.Get()<sp/>==<sp/>INVALID_HANDLE_VALUE)<sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>parent<sp/>process<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(parent_process_id));</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vladl@google.com):<sp/>Replace<sp/>the<sp/>following<sp/>check<sp/>with<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compile-time<sp/>assertion<sp/>when<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1ab54343f0a36dc4cb0ce8a478dd7847b8" kindref="member">GTEST_CHECK_</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(HANDLE)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HANDLE<sp/>write_handle<sp/>=</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">HANDLE</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(write_handle_as_size_t);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/>HANDLE<sp/>dup_write_handle;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>newly<sp/>initialized<sp/>handle<sp/>is<sp/>accessible<sp/>only<sp/>in<sp/>in<sp/>the<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>process.<sp/>To<sp/>obtain<sp/>one<sp/>accessible<sp/>within<sp/>the<sp/>child,<sp/>we<sp/>need<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DuplicateHandle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!::DuplicateHandle(parent_process_handle.Get(),<sp/>write_handle,</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::GetCurrentProcess(),<sp/>&amp;dup_write_handle,</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Requested<sp/>privileges<sp/>ignored<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DUPLICATE_SAME_ACCESS<sp/>is<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/></highlight><highlight class="comment">//<sp/>Request<sp/>non-inheritable<sp/>handler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUPLICATE_SAME_ACCESS))<sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>duplicate<sp/>the<sp/>pipe<sp/>handle<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(write_handle_as_size_t)<sp/>+</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>from<sp/>the<sp/>parent<sp/>process<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(parent_process_id));</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HANDLE<sp/>event_handle<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">HANDLE</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(event_handle_as_size_t);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/>HANDLE<sp/>dup_event_handle;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!::DuplicateHandle(parent_process_handle.Get(),<sp/>event_handle,</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::GetCurrentProcess(),<sp/>&amp;dup_event_handle,</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0,</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUPLICATE_SAME_ACCESS))<sp/>{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>duplicate<sp/>the<sp/>event<sp/>handle<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(event_handle_as_size_t)<sp/>+</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>from<sp/>the<sp/>parent<sp/>process<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(parent_process_id));</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write_fd<sp/>=</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::_open_osfhandle(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">intptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dup_write_handle),<sp/>O_APPEND);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_fd<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>convert<sp/>pipe<sp/>handle<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(write_handle_as_size_t)<sp/>+</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>a<sp/>file<sp/>descriptor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Signals<sp/>the<sp/>parent<sp/>that<sp/>the<sp/>write<sp/>end<sp/>of<sp/>the<sp/>pipe<sp/>has<sp/>been<sp/>acquired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>the<sp/>parent<sp/>can<sp/>release<sp/>its<sp/>own<sp/>write<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/>::SetEvent(dup_event_handle);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_fd;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>newly<sp/>created<sp/>InternalRunDeathTestFlag<sp/>object<sp/>with<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>initialized<sp/>from<sp/>the<sp/>GTEST_FLAG(internal_run_death_test)<sp/>flag<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>flag<sp/>is<sp/>specified;<sp/>otherwise<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal">InternalRunDeathTestFlag*<sp/>ParseInternalRunDeathTestFlag()<sp/>{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(internal_run_death_test)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST<sp/>implies<sp/>that<sp/>we<sp/>have<sp/>::std::string,<sp/>so<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>use<sp/>it<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::vector&lt; ::std::string&gt;</ref><sp/>fields;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8eb8eddf760375a490e007b20777ec56" kindref="member">SplitString</ref>(<ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(internal_run_death_test).c_str(),<sp/></highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">,<sp/>&amp;fields);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write_fd<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parent_process_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>write_handle_as_size_t<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>event_handle_as_size_t<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fields.<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>()<sp/>!=<sp/>6</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!ParseNaturalNumber(fields[1],<sp/>&amp;line)</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!ParseNaturalNumber(fields[2],<sp/>&amp;index)</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!ParseNaturalNumber(fields[3],<sp/>&amp;parent_process_id)</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!ParseNaturalNumber(fields[4],<sp/>&amp;write_handle_as_size_t)</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!ParseNaturalNumber(fields[5],<sp/>&amp;event_handle_as_size_t))<sp/>{</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(</highlight><highlight class="stringliteral">&quot;Bad<sp/>--gtest_internal_run_death_test<sp/>flag:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(internal_run_death_test));</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>write_fd<sp/>=<sp/>GetStatusFileDescriptor(parent_process_id,</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_handle_as_size_t,</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event_handle_as_size_t);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fields.<ref refid="cpp/container/vector/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">size</ref>()<sp/>!=<sp/>4</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!ParseNaturalNumber(fields[1],<sp/>&amp;line)</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!ParseNaturalNumber(fields[2],<sp/>&amp;index)</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!ParseNaturalNumber(fields[3],<sp/>&amp;write_fd))<sp/>{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>DeathTestAbort(</highlight><highlight class="stringliteral">&quot;Bad<sp/>--gtest_internal_run_death_test<sp/>flag:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="d3/dc9/gtest-port_8h_1a828f4e34a1c4b510da50ec1563e3562a" kindref="member">GTEST_FLAG</ref>(internal_run_death_test));</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>InternalRunDeathTestFlag(fields[0],<sp/>line,<sp/>index,<sp/>write_fd);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_DEATH_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/googletest/src/gtest-death-test.cc"/>
  </compounddef>
</doxygen>
