<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="de/d7b/md_priority_queue__r_e_a_d_m_e" kind="page">
    <compoundname>md_priority_queue_README</compoundname>
    <title>Overview of Priority Queues</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect3 id="de/d7b/md_priority_queue__r_e_a_d_m_e_1autotoc_md1">
<title>The concept of priority queue</title>
<para>In real life, we often encounter scenarios that involve queuing, such as standing in line at a gorcery store or at the movies. In these &quot;first come, first served&quot; situations, the first person to arrive is the first person served.</para>
<para>However, there are other scenarios where the first person to arrive is not hte first person served: when considering patients in an emergenct room, or when boarding an airplane... , etc. Here, the scenario is more of a &quot;first come, most-important served&quot; situation. Thus, we want to design a datatype that is tailored to support the following three operations as efficiently as possible:</para>
<para><itemizedlist>
<listitem>
<para>Add an item, with a given priority, into the data structure: key </para>
</listitem>
<listitem>
<para>Remove the most important item from the data structure </para>
</listitem>
<listitem>
<para>Giv the number of otems in the data structure </para>
</listitem>
</itemizedlist>
</para>
</sect3>
<sect3 id="de/d7b/md_priority_queue__r_e_a_d_m_e_1autotoc_md2">
<title>The concept of heap data structure</title>
<para>The heap is a specialized tree-based data structure which is essentially an almost complete tree that satisfies the heap property. And it is also one maximally efficient implementation of an abstract data type called a priority queue, and in fact, priority queues are often referred to ad &quot;heaps&quot;.</para>
</sect3>
<sect3 id="de/d7b/md_priority_queue__r_e_a_d_m_e_1autotoc_md3">
<title>The concept of heapify procedure</title>
<para>The heapify procedure can be thought of as building a heap from the bottom up by successively sifting downward to establish the heap property. An alternative version that builds the heap top-down and sifts upward may be simpler to understand. In this implementation, it adopts first method which&apos;s time complexity is O(n) that is less than the second method.</para>
</sect3>
<sect3 id="de/d7b/md_priority_queue__r_e_a_d_m_e_1autotoc_md4">
<title>Reference</title>
<para>[1] <ulink url="https://www.cplusplus.com/forum/general/146188/">cplusplus: priority queue</ulink></para>
<para>[2] <ulink url="https://stackoverflow.com/questions/34329942/siftup-and-siftdown-operation-in-heap-for-heapifying-an-array">stack overflow: siftUp and siftDown operation in heap for heapifying an array</ulink></para>
<para>[3] <ulink url="https://en.wikipedia.org/wiki/Heapsort">Wiki: Heapsort</ulink></para>
<para>[4] <ulink url="https://course.ccs.neu.edu/cs2510h/lecture29.html#%28part._.Heapsort%29">Northeastern.edu: Lecture 29: Priority Queues and Heapsort</ulink> </para>
</sect3>
    </detaileddescription>
    <location file="priority_queue/README.md"/>
  </compounddef>
</doxygen>
