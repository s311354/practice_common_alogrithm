<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="gtest-printers_8h" kind="file" language="C++">
    <compoundname>gtest-printers.h</compoundname>
    <includes local="no">ostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="gtest-port_8h" local="yes">gtest/internal/gtest-port.h</includes>
    <includes refid="gtest-internal_8h" local="yes">gtest/internal/gtest-internal.h</includes>
    <includes refid="internal_2custom_2gtest-printers_8h" local="yes">gtest/internal/custom/gtest-printers.h</includes>
    <includedby refid="gtest-printers_8cc" local="yes">lib/googletest/src/gtest-printers.cc</includedby>
    <includedby refid="gtest_8h" local="yes">lib/googletest/include/gtest/gtest.h</includedby>
    <includedby refid="gtest-param-util_8h" local="yes">lib/googletest/include/gtest/internal/gtest-param-util.h</includedby>
    <incdepgraph>
      <node id="14">
        <label>sys/stat.h</label>
      </node>
      <node id="22">
        <label>typeinfo</label>
        <link refid="cpp/header/typeinfo" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="25">
        <label>float.h</label>
      </node>
      <node id="17">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h"/>
      </node>
      <node id="2">
        <label>ostream</label>
        <link refid="cpp/header/ostream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="32">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>stdlib.h</label>
      </node>
      <node id="26">
        <label>iomanip</label>
        <link refid="cpp/header/iomanip" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="29">
        <label>set</label>
        <link refid="cpp/header/set" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="31">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>algorithm</label>
        <link refid="cpp/header/algorithm" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="23">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="gtest-tuple_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stddef.h</label>
      </node>
      <node id="33">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>vector</label>
        <link refid="cpp/header/vector" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="13">
        <label>sys/types.h</label>
      </node>
      <node id="12">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h"/>
      </node>
      <node id="19">
        <label>unistd.h</label>
      </node>
      <node id="27">
        <label>limits</label>
        <link refid="cpp/header/limits" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="5">
        <label>utility</label>
        <link refid="cpp/header/utility" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="4">
        <label>string</label>
        <link refid="cpp/header/string" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="30">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>strings.h</label>
      </node>
      <node id="8">
        <label>ctype.h</label>
      </node>
      <node id="16">
        <label>iostream</label>
        <link refid="cpp/header/iostream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="3">
        <label>sstream</label>
        <link refid="cpp/header/sstream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="21">
        <label>regex.h</label>
      </node>
      <node id="18">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h"/>
      </node>
      <node id="11">
        <label>stdio.h</label>
      </node>
      <node id="1">
        <label>lib/googletest/include/gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>map</label>
        <link refid="cpp/header/map" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="13">
        <label>lib/googletest/include/gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>lib/googletest/include/gtest/gtest.h</label>
        <link refid="gtest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>lib/googletest/src/gtest-internal-inl.h</label>
        <link refid="gtest-internal-inl_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>lib/googletest/include/gtest/internal/gtest-param-util-generated.h</label>
        <link refid="gtest-param-util-generated_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>lib/googletest/src/gtest-all.cc</label>
        <link refid="gtest-all_8cc"/>
      </node>
      <node id="2">
        <label>lib/googletest/src/gtest-printers.cc</label>
        <link refid="gtest-printers_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>lib/googletest/src/gtest-death-test.cc</label>
        <link refid="gtest-death-test_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>lib/googletest/src/gtest_main.cc</label>
        <link refid="gtest__main_8cc"/>
      </node>
      <node id="9">
        <label>lib/googletest/src/gtest.cc</label>
        <link refid="gtest_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>lib/googletest/src/gtest-typed-test.cc</label>
        <link refid="gtest-typed-test_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>lib/googletest/src/gtest-test-part.cc</label>
        <link refid="gtest-test-part_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>lib/googletest/src/gtest-port.cc</label>
        <link refid="gtest-port_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>lib/googletest/include/gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>lib/googletest/include/gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lib/googletest/include/gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classtesting_1_1internal_1_1FormatForComparison" prot="public">testing::internal::FormatForComparison</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1FormatForComparison_3_01ToPrint_0fN_0e_00_01OtherOperand_01_4" prot="public">testing::internal::FormatForComparison&lt; ToPrint[N], OtherOperand &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal2_1_1TypeWithoutFormatter" prot="public">testing::internal2::TypeWithoutFormatter</innerclass>
    <innerclass refid="classtesting_1_1internal2_1_1TypeWithoutFormatter_3_01T_00_01kConvertibleToInteger_01_4" prot="public">testing::internal2::TypeWithoutFormatter&lt; T, kConvertibleToInteger &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal2_1_1TypeWithoutFormatter_3_01T_00_01kProtobuf_01_4" prot="public">testing::internal2::TypeWithoutFormatter&lt; T, kProtobuf &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1UniversalPrinter" prot="public">testing::internal::UniversalPrinter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1UniversalPrinter_3_01T_01_6_01_4" prot="public">testing::internal::UniversalPrinter&lt; T &amp; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1UniversalPrinter_3_01T_0fN_0e_4" prot="public">testing::internal::UniversalPrinter&lt; T[N]&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1UniversalTersePrinter" prot="public">testing::internal::UniversalTersePrinter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01char_01_5_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; char * &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01const_01char_01_5_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; const char * &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01T_01_6_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; T &amp; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01T_0fN_0e_4" prot="public">testing::internal::UniversalTersePrinter&lt; T[N]&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01wchar__t_01_5_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; wchar_t * &gt;</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal2">testing::internal2</innernamespace>
    <innernamespace refid="namespacetesting__internal">testing_internal</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="gtest-printers_8h_1a79d4724b4bc2a1dd8493c366b5ca626a" prot="public" static="no">
        <name>GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</name>
        <param><defname>CharType</defname></param>
        <initializer>  template &lt;typename OtherOperand&gt;                                      \
  class FormatForComparison&lt;CharType*, OtherOperand&gt; {                  \
   public:                                                              \
    static ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> Format(CharType* value) {                      \
      return ::<ref refid="namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" kindref="member">testing::PrintToString</ref>(static_cast&lt;const void*&gt;(value)); \
    }                                                                   \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest-printers.h" line="292" column="9" bodyfile="lib/googletest/include/gtest/gtest-printers.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-printers_8h_1ad6102ed2a0571d5196e606a061c16a10" prot="public" static="no">
        <name>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</name>
        <param><defname>CharType</defname></param>
        <param><defname>OtherStringType</defname></param>
        <initializer>  template &lt;&gt;                                                           \
  class FormatForComparison&lt;CharType*, OtherStringType&gt; {               \
   public:                                                              \
    static ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> Format(CharType* value) {                      \
      return ::<ref refid="namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" kindref="member">testing::PrintToString</ref>(value);                           \
    }                                                                   \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest-printers.h" line="311" column="9" bodyfile="lib/googletest/include/gtest/gtest-printers.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>-<sp/>The<sp/>Google<sp/>C++<sp/>Testing<sp/>Framework</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>implements<sp/>a<sp/>universal<sp/>value<sp/>printer<sp/>that<sp/>can<sp/>print<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>of<sp/>any<sp/>type<sp/>T:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>::testing::internal::UniversalPrinter&lt;T&gt;::Print(value,<sp/>ostream_ptr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user<sp/>can<sp/>teach<sp/>this<sp/>function<sp/>how<sp/>to<sp/>print<sp/>a<sp/>class<sp/>type<sp/>T<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defining<sp/>either<sp/>operator&lt;&lt;()<sp/>or<sp/>PrintTo()<sp/>in<sp/>the<sp/>namespace<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defines<sp/>T.<sp/><sp/>More<sp/>specifically,<sp/>the<sp/>FIRST<sp/>defined<sp/>function<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>following<sp/>list<sp/>will<sp/>be<sp/>used<sp/>(assuming<sp/>T<sp/>is<sp/>defined<sp/>in<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>foo):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>foo::PrintTo(const<sp/>T&amp;,<sp/>ostream*)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>operator&lt;&lt;(ostream&amp;,<sp/>const<sp/>T&amp;)<sp/>defined<sp/>in<sp/>either<sp/>foo<sp/>or<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>global<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>none<sp/>of<sp/>the<sp/>above<sp/>is<sp/>defined,<sp/>it<sp/>will<sp/>print<sp/>the<sp/>debug<sp/>string<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>value<sp/>if<sp/>it<sp/>is<sp/>a<sp/>protocol<sp/>buffer,<sp/>or<sp/>print<sp/>the<sp/>raw<sp/>bytes<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>aid<sp/>debugging:<sp/>when<sp/>T<sp/>is<sp/>a<sp/>reference<sp/>type,<sp/>the<sp/>address<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>is<sp/>also<sp/>printed;<sp/>when<sp/>T<sp/>is<sp/>a<sp/>(const)<sp/>char<sp/>pointer,<sp/>both<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pointer<sp/>value<sp/>and<sp/>the<sp/>NUL-terminated<sp/>string<sp/>it<sp/>points<sp/>to<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>also<sp/>provide<sp/>some<sp/>convenient<sp/>wrappers:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Prints<sp/>a<sp/>value<sp/>to<sp/>a<sp/>string.<sp/><sp/>For<sp/>a<sp/>(const<sp/>or<sp/>not)<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>pointer,<sp/>the<sp/>NUL-terminated<sp/>string<sp/>(but<sp/>not<sp/>the<sp/>pointer)<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::string<sp/>::testing::PrintToString(const<sp/>T&amp;<sp/>value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Prints<sp/>a<sp/>value<sp/>tersely:<sp/>for<sp/>a<sp/>reference<sp/>type,<sp/>the<sp/>referenced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>value<sp/>(but<sp/>not<sp/>the<sp/>address)<sp/>is<sp/>printed;<sp/>for<sp/>a<sp/>(const<sp/>or<sp/>not)<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>pointer,<sp/>the<sp/>NUL-terminated<sp/>string<sp/>(but<sp/>not<sp/>the<sp/>pointer)<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>::testing::internal::UniversalTersePrint(const<sp/>T&amp;<sp/>value,<sp/>ostream*);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Prints<sp/>value<sp/>using<sp/>the<sp/>type<sp/>inferred<sp/>by<sp/>the<sp/>compiler.<sp/><sp/>The<sp/>difference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>from<sp/>UniversalTersePrint()<sp/>is<sp/>that<sp/>this<sp/>function<sp/>prints<sp/>both<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>pointer<sp/>and<sp/>the<sp/>NUL-terminated<sp/>string<sp/>for<sp/>a<sp/>(const<sp/>or<sp/>not)<sp/>char<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>::testing::internal::UniversalPrint(const<sp/>T&amp;<sp/>value,<sp/>ostream*);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Prints<sp/>the<sp/>fields<sp/>of<sp/>a<sp/>tuple<sp/>tersely<sp/>to<sp/>a<sp/>string<sp/>vector,<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>element<sp/>for<sp/>each<sp/>field.<sp/>Tuple<sp/>support<sp/>must<sp/>be<sp/>enabled<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>gtest-port.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::vector&lt;string&gt;<sp/>UniversalTersePrintTupleFieldsToStrings(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Tuple&amp;<sp/>value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Known<sp/>limitation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>print<sp/>primitives<sp/>print<sp/>the<sp/>elements<sp/>of<sp/>an<sp/>STL-style<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>the<sp/>compiler-inferred<sp/>type<sp/>of<sp/>*iter<sp/>where<sp/>iter<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const_iterator<sp/>of<sp/>the<sp/>container.<sp/><sp/>When<sp/>const_iterator<sp/>is<sp/>an<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>iterator<sp/>but<sp/>not<sp/>a<sp/>forward<sp/>iterator,<sp/>this<sp/>inferred<sp/>type<sp/>may<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>match<sp/>value_type,<sp/>and<sp/>the<sp/>print<sp/>output<sp/>may<sp/>be<sp/>incorrect.<sp/><sp/>In</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>practice,<sp/>this<sp/>is<sp/>rarely<sp/>a<sp/>problem<sp/>as<sp/>for<sp/>most<sp/>containers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const_iterator<sp/>is<sp/>a<sp/>forward<sp/>iterator.<sp/><sp/>We&apos;ll<sp/>fix<sp/>this<sp/>if<sp/>there&apos;s<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>actual<sp/>need<sp/>for<sp/>it.<sp/><sp/>Note<sp/>that<sp/>this<sp/>fix<sp/>cannot<sp/>rely<sp/>on<sp/>value_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>being<sp/>defined<sp/>as<sp/>many<sp/>user-defined<sp/>container<sp/>types<sp/>don&apos;t<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value_type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">ostream</ref>&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/sstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">sstream</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">string</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/utility" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">utility</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/vector" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">vector</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gtest-port_8h" kindref="compound">gtest/internal/gtest-port.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gtest-internal_8h" kindref="compound">gtest/internal/gtest-internal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_TUPLE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;<ref refid="cpp/header/tuple" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">tuple</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Definitions<sp/>in<sp/>the<sp/>&apos;internal&apos;<sp/>and<sp/>&apos;internal2&apos;<sp/>name<sp/>spaces<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>subject<sp/>to<sp/>change<sp/>without<sp/>notice.<sp/><sp/>DO<sp/>NOT<sp/>USE<sp/>THEM<sp/>IN<sp/>USER<sp/>CODE!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal2<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>given<sp/>number<sp/>of<sp/>bytes<sp/>in<sp/>the<sp/>given<sp/>object<sp/>to<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="namespacetesting_1_1internal2_1a9fbf8e07c0f94dc74d6ef5e56cd3c553" refkind="member"><highlight class="normal"><ref refid="gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal2_1abfb9aa80365f93b952e9a4bea09947a8" kindref="member">PrintBytesInObjectTo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>obj_bytes,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>selecting<sp/>which<sp/>printer<sp/>to<sp/>use<sp/>when<sp/>a<sp/>given<sp/>type<sp/>has<sp/>neither<sp/>&lt;&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>nor<sp/>PrintTo().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="namespacetesting_1_1internal2_1aeb8161b0b3ee503347b0662d7028fd57" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal2_1aeb8161b0b3ee503347b0662d7028fd57" kindref="member">TypeKind</ref><sp/>{</highlight></codeline>
<codeline lineno="125" refid="namespacetesting_1_1internal2_1aeb8161b0b3ee503347b0662d7028fd57a14aaf98a2547ecf43eef0868d54b1383" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal2_1aeb8161b0b3ee503347b0662d7028fd57a14aaf98a2547ecf43eef0868d54b1383" kindref="member">kProtobuf</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>protobuf<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="namespacetesting_1_1internal2_1aeb8161b0b3ee503347b0662d7028fd57a9bdcf3f1548f498b2b7f097306ea0224" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal2_1aeb8161b0b3ee503347b0662d7028fd57a9bdcf3f1548f498b2b7f097306ea0224" kindref="member">kConvertibleToInteger</ref>,<sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>type<sp/>implicitly<sp/>convertible<sp/>to<sp/>BiggestInt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(e.g.<sp/>a<sp/>named<sp/>or<sp/>unnamed<sp/>enum<sp/>type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal2_1aeb8161b0b3ee503347b0662d7028fd57abe8aaea44751d6ebd0cdf5bd94451db1" kindref="member">kOtherType</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>anything<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="namespacetesting_1_1internal2_1aeb8161b0b3ee503347b0662d7028fd57abe8aaea44751d6ebd0cdf5bd94451db1" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TypeWithoutFormatter&lt;T,<sp/>kTypeKind&gt;::PrintValue(value,<sp/>os)<sp/>is<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>universal<sp/>printer<sp/>to<sp/>print<sp/>a<sp/>value<sp/>of<sp/>type<sp/>T<sp/>when<sp/>neither</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator&lt;&lt;<sp/>nor<sp/>PrintTo()<sp/>is<sp/>defined<sp/>for<sp/>T,<sp/>where<sp/>kTypeKind<sp/>is<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;kind&quot;<sp/>of<sp/>T<sp/>as<sp/>defined<sp/>by<sp/>enum<sp/>TypeKind.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>TypeKind<sp/>kTypeKind&gt;</highlight></codeline>
<codeline lineno="136" refid="classtesting_1_1internal2_1_1TypeWithoutFormatter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal2_1_1TypeWithoutFormatter" kindref="compound">TypeWithoutFormatter</ref><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>default<sp/>version<sp/>is<sp/>called<sp/>when<sp/>kTypeKind<sp/>is<sp/>kOtherType.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="classtesting_1_1internal2_1_1TypeWithoutFormatter_1a6651f6f7be2c0f899729eeb6038f76d3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal2_1_1TypeWithoutFormatter_1a6651f6f7be2c0f899729eeb6038f76d3" kindref="member">PrintValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal2_1abfb9aa80365f93b952e9a4bea09947a8" kindref="member">PrintBytesInObjectTo</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;value),</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(value),<sp/>os);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>print<sp/>a<sp/>protobuf<sp/>using<sp/>its<sp/>ShortDebugString()<sp/>when<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>exceed<sp/>this<sp/>many<sp/>characters;<sp/>otherwise<sp/>we<sp/>print<sp/>it<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DebugString()<sp/>for<sp/>better<sp/>readability.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="namespacetesting_1_1internal2_1a140c8efd51e63a3def98445bff107518" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal2_1a140c8efd51e63a3def98445bff107518" kindref="member">kProtobufOneLinerMaxLength</ref><sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="151" refid="classtesting_1_1internal2_1_1TypeWithoutFormatter_3_01T_00_01kProtobuf_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal2_1_1TypeWithoutFormatter" kindref="compound">TypeWithoutFormatter</ref>&lt;T,<sp/><ref refid="namespacetesting_1_1internal2_1aeb8161b0b3ee503347b0662d7028fd57a14aaf98a2547ecf43eef0868d54b1383" kindref="member">kProtobuf</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="153" refid="classtesting_1_1internal2_1_1TypeWithoutFormatter_3_01T_00_01kProtobuf_01_4_1ac96fb775dc776f02da9a671ea0e04599" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal2_1_1TypeWithoutFormatter_3_01T_00_01kProtobuf_01_4_1ac96fb775dc776f02da9a671ea0e04599" kindref="member">PrintValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">const ::testing::internal::string</ref><sp/>short_str<sp/>=<sp/>value.ShortDebugString();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">const ::testing::internal::string</ref><sp/>pretty_str<sp/>=</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short_str.<ref refid="cpp/string/basic_string/size" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">length</ref>()<sp/>&lt;=<sp/><ref refid="namespacetesting_1_1internal2_1a140c8efd51e63a3def98445bff107518" kindref="member">kProtobufOneLinerMaxLength</ref><sp/>?</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short_str<sp/>:<sp/>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>value.DebugString());</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>pretty_str<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal">};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="163" refid="classtesting_1_1internal2_1_1TypeWithoutFormatter_3_01T_00_01kConvertibleToInteger_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal2_1_1TypeWithoutFormatter" kindref="compound">TypeWithoutFormatter</ref>&lt;T,<sp/><ref refid="namespacetesting_1_1internal2_1aeb8161b0b3ee503347b0662d7028fd57a9bdcf3f1548f498b2b7f097306ea0224" kindref="member">kConvertibleToInteger</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>T<sp/>has<sp/>no<sp/>&lt;&lt;<sp/>operator<sp/>or<sp/>PrintTo()<sp/>but<sp/>can<sp/>be<sp/>implicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>converted<sp/>to<sp/>BiggestInt,<sp/>we<sp/>print<sp/>it<sp/>as<sp/>a<sp/>BiggestInt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Most<sp/>likely<sp/>T<sp/>is<sp/>an<sp/>enum<sp/>type<sp/>(either<sp/>named<sp/>or<sp/>unnamed),<sp/>in<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>printing<sp/>it<sp/>as<sp/>an<sp/>integer<sp/>is<sp/>the<sp/>desired<sp/>behavior.<sp/><sp/>In<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>not<sp/>an<sp/>enum,<sp/>printing<sp/>it<sp/>as<sp/>an<sp/>integer<sp/>is<sp/>the<sp/>best<sp/>we<sp/>can<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>given<sp/>that<sp/>it<sp/>has<sp/>no<sp/>user-defined<sp/>printer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="classtesting_1_1internal2_1_1TypeWithoutFormatter_3_01T_00_01kConvertibleToInteger_01_4_1ab27a411afb608e730a57d232b3f4f486" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal2_1_1TypeWithoutFormatter_3_01T_00_01kConvertibleToInteger_01_4_1ab27a411afb608e730a57d232b3f4f486" kindref="member">PrintValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1a05c6bd9ede5ccdf25191a590d610dcc6" kindref="member">internal::BiggestInt</ref><sp/>kBigInt<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>kBigInt;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal">};</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>given<sp/>value<sp/>to<sp/>the<sp/>given<sp/>ostream.<sp/><sp/>If<sp/>the<sp/>value<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>protocol<sp/>message,<sp/>its<sp/>debug<sp/>string<sp/>is<sp/>printed;<sp/>if<sp/>it&apos;s<sp/>an<sp/>enum<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>a<sp/>type<sp/>implicitly<sp/>convertible<sp/>to<sp/>BiggestInt,<sp/>it&apos;s<sp/>printed<sp/>as<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>integer;<sp/>otherwise<sp/>the<sp/>bytes<sp/>in<sp/>the<sp/>value<sp/>are<sp/>printed.<sp/><sp/>This<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>what<sp/>UniversalPrinter&lt;T&gt;::Print()<sp/>does<sp/>when<sp/>it<sp/>knows<sp/>nothing<sp/>about</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>T<sp/>and<sp/>T<sp/>has<sp/>neither<sp/>&lt;&lt;<sp/>operator<sp/>nor<sp/>PrintTo().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user<sp/>can<sp/>override<sp/>this<sp/>behavior<sp/>for<sp/>a<sp/>class<sp/>type<sp/>Foo<sp/>by<sp/>defining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>&lt;&lt;<sp/>operator<sp/>in<sp/>the<sp/>namespace<sp/>where<sp/>Foo<sp/>is<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>put<sp/>this<sp/>operator<sp/>in<sp/>namespace<sp/>&apos;internal2&apos;<sp/>instead<sp/>of<sp/>&apos;internal&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>simplify<sp/>the<sp/>implementation,<sp/>as<sp/>much<sp/>code<sp/>in<sp/>&apos;internal&apos;<sp/>needs<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>&lt;&lt;<sp/>in<sp/>STL,<sp/>which<sp/>would<sp/>conflict<sp/>with<sp/>our<sp/>own<sp/>&lt;&lt;<sp/>were<sp/>it<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>&apos;internal&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>operator&lt;&lt;<sp/>takes<sp/>a<sp/>generic<sp/>std::basic_ostream&lt;Char,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CharTraits&gt;<sp/>type<sp/>instead<sp/>of<sp/>the<sp/>more<sp/>restricted<sp/>std::ostream.<sp/><sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>define<sp/>it<sp/>to<sp/>take<sp/>an<sp/>std::ostream<sp/>instead,<sp/>we&apos;ll<sp/>get<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;ambiguous<sp/>overloads&quot;<sp/>compiler<sp/>error<sp/>when<sp/>trying<sp/>to<sp/>print<sp/>a<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Foo<sp/>that<sp/>supports<sp/>streaming<sp/>to<sp/>std::basic_ostream&lt;Char,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CharTraits&gt;,<sp/>as<sp/>the<sp/>compiler<sp/>cannot<sp/>tell<sp/>whether</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator&lt;&lt;(std::ostream&amp;,<sp/>const<sp/>T&amp;)<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator&lt;&lt;(std::basic_stream&lt;Char,<sp/>CharTraits&gt;,<sp/>const<sp/>Foo&amp;)<sp/>is<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharTraits,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::basic_ostream&lt;Char, CharTraits&gt;</ref>&amp;<sp/><ref refid="namespacetesting_1_1internal2_1a07dbe129beb8952074f04b599dfce39b" kindref="member">operator&lt;&lt;</ref>(</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::basic_ostream&lt;Char, CharTraits&gt;</ref>&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>TypeWithoutFormatter&lt;T,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structtesting_1_1internal_1_1IsAProtocolMessage" kindref="compound">internal::IsAProtocolMessage&lt;T&gt;::value</ref><sp/>?<sp/><ref refid="namespacetesting_1_1internal2_1aeb8161b0b3ee503347b0662d7028fd57a14aaf98a2547ecf43eef0868d54b1383" kindref="member">kProtobuf</ref><sp/>:</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1ImplicitlyConvertible" kindref="compound">internal::ImplicitlyConvertible&lt;const T&amp;, internal::BiggestInt&gt;::value</ref><sp/>?</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal2_1aeb8161b0b3ee503347b0662d7028fd57a9bdcf3f1548f498b2b7f097306ea0224" kindref="member">kConvertibleToInteger</ref><sp/>:<sp/><ref refid="namespacetesting_1_1internal2_1aeb8161b0b3ee503347b0662d7028fd57abe8aaea44751d6ebd0cdf5bd94451db1" kindref="member">kOtherType</ref>)&gt;::PrintValue(x,<sp/>&amp;os);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>namespace<sp/>MUST<sp/>NOT<sp/>BE<sp/>NESTED<sp/>IN<sp/>::testing,<sp/>or<sp/>the<sp/>name<sp/>look-up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>magic<sp/>needed<sp/>for<sp/>implementing<sp/>UniversalPrinter<sp/>won&apos;t<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="namespacetesting__internal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesting__internal" kindref="compound">testing_internal</ref><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>to<sp/>print<sp/>a<sp/>value<sp/>that<sp/>is<sp/>not<sp/>an<sp/>STL-style<sp/>container<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>user<sp/>doesn&apos;t<sp/>define<sp/>PrintTo()<sp/>for<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="222" refid="namespacetesting__internal_1a3f49d3d0c996242f9d383c850097a656" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting__internal_1a3f49d3d0c996242f9d383c850097a656" kindref="member">DefaultPrintNonContainerTo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>With<sp/>the<sp/>following<sp/>statement,<sp/>during<sp/>unqualified<sp/>name<sp/>lookup,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>testing::internal2::operator&lt;&lt;<sp/>appears<sp/>as<sp/>if<sp/>it<sp/>was<sp/>declared<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>nearest<sp/>enclosing<sp/>namespace<sp/>that<sp/>contains<sp/>both</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>::testing_internal<sp/>and<sp/>::testing::internal2,<sp/>i.e.<sp/>the<sp/>global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace.<sp/><sp/>For<sp/>more<sp/>details,<sp/>refer<sp/>to<sp/>the<sp/>C++<sp/>Standard<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>7.3.4-1<sp/>[namespace.udir].<sp/><sp/>This<sp/>allows<sp/>us<sp/>to<sp/>fall<sp/>back<sp/>onto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>testing::internal2::operator&lt;&lt;<sp/>in<sp/>case<sp/>T<sp/>doesn&apos;t<sp/>come<sp/>with<sp/>a<sp/>&lt;&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>write<sp/>&apos;using<sp/>::testing::internal2::operator&lt;&lt;;&apos;,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gcc<sp/>3.3<sp/>fails<sp/>to<sp/>compile<sp/>due<sp/>to<sp/>a<sp/>compiler<sp/>bug.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">::<ref refid="namespacetesting_1_1internal2" kindref="compound">testing::internal2</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assuming<sp/>T<sp/>is<sp/>defined<sp/>in<sp/>namespace<sp/>foo,<sp/>in<sp/>the<sp/>next<sp/>statement,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>compiler<sp/>will<sp/>consider<sp/>all<sp/>of:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>foo::operator&lt;&lt;<sp/>(thanks<sp/>to<sp/>Koenig<sp/>look-up),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>::operator&lt;&lt;<sp/>(as<sp/>the<sp/>current<sp/>namespace<sp/>is<sp/>enclosed<sp/>in<sp/>::),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>3.<sp/>testing::internal2::operator&lt;&lt;<sp/>(thanks<sp/>to<sp/>the<sp/>using<sp/>statement<sp/>above).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>operator&lt;&lt;<sp/>whose<sp/>type<sp/>matches<sp/>T<sp/>best<sp/>will<sp/>be<sp/>picked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>deliberately<sp/>allow<sp/>#2<sp/>to<sp/>be<sp/>a<sp/>candidate,<sp/>as<sp/>sometimes<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>impossible<sp/>to<sp/>define<sp/>#1<sp/>(e.g.<sp/>when<sp/>foo<sp/>is<sp/>::std,<sp/>defining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>anything<sp/>in<sp/>it<sp/>is<sp/>undefined<sp/>behavior<sp/>unless<sp/>you<sp/>are<sp/>a<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>vendor.).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing_internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="cpp/io/manip/left" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">internal</ref><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FormatForComparison&lt;ToPrint,<sp/>OtherOperand&gt;::Format(value)<sp/>formats<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>of<sp/>type<sp/>ToPrint<sp/>that<sp/>is<sp/>an<sp/>operand<sp/>of<sp/>a<sp/>comparison<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(e.g.<sp/>ASSERT_EQ).<sp/><sp/>OtherOperand<sp/>is<sp/>the<sp/>type<sp/>of<sp/>the<sp/>other<sp/>operand<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>comparison,<sp/>and<sp/>is<sp/>used<sp/>to<sp/>help<sp/>determine<sp/>the<sp/>best<sp/>way<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>format<sp/>the<sp/>value.<sp/><sp/>In<sp/>particular,<sp/>when<sp/>the<sp/>value<sp/>is<sp/>a<sp/>C<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(char<sp/>pointer)<sp/>and<sp/>the<sp/>other<sp/>operand<sp/>is<sp/>an<sp/>STL<sp/>string<sp/>object,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>want<sp/>to<sp/>format<sp/>the<sp/>C<sp/>string<sp/>as<sp/>a<sp/>string,<sp/>since<sp/>we<sp/>know<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compared<sp/>by<sp/>value<sp/>with<sp/>the<sp/>string<sp/>object.<sp/><sp/>If<sp/>the<sp/>value<sp/>is<sp/>a<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pointer<sp/>but<sp/>the<sp/>other<sp/>operand<sp/>is<sp/>not<sp/>an<sp/>STL<sp/>string<sp/>object,<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>know<sp/>whether<sp/>the<sp/>pointer<sp/>is<sp/>supposed<sp/>to<sp/>point<sp/>to<sp/>a<sp/>NUL-terminated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>string,<sp/>and<sp/>thus<sp/>want<sp/>to<sp/>print<sp/>it<sp/>as<sp/>a<sp/>pointer<sp/>to<sp/>be<sp/>safe.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ToPr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OtherOperand&gt;</highlight></codeline>
<codeline lineno="273" refid="classtesting_1_1internal_1_1FormatForComparison" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1FormatForComparison" kindref="compound">FormatForComparison</ref><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="275" refid="classtesting_1_1internal_1_1FormatForComparison_1a2aeb688fc55b57abd3021d82eccad896" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">static ::std::string</ref><sp/><ref refid="classtesting_1_1internal_1_1FormatForComparison_1a2aeb688fc55b57abd3021d82eccad896" kindref="member">Format</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ToPrint&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" kindref="member">return ::testing::PrintToString</ref>(value);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal">};</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ToPr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OtherOperand&gt;</highlight></codeline>
<codeline lineno="282" refid="classtesting_1_1internal_1_1FormatForComparison_3_01ToPrint_0fN_0e_00_01OtherOperand_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1FormatForComparison" kindref="compound">FormatForComparison</ref>&lt;ToPrint[N],<sp/>OtherOperand&gt;<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="284" refid="classtesting_1_1internal_1_1FormatForComparison_3_01ToPrint_0fN_0e_00_01OtherOperand_01_4_1a76c526461c8fa7df75f7b32ab889b9e0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">static ::std::string</ref><sp/><ref refid="classtesting_1_1internal_1_1FormatForComparison_3_01ToPrint_0fN_0e_00_01OtherOperand_01_4_1a76c526461c8fa7df75f7b32ab889b9e0" kindref="member">Format</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ToPrint*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FormatForComparison_1a2aeb688fc55b57abd3021d82eccad896" kindref="member">FormatForComparison&lt;const ToPrint*, OtherOperand&gt;::Format</ref>(value);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal">};</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>print<sp/>C<sp/>string<sp/>as<sp/>pointers<sp/>to<sp/>be<sp/>safe,<sp/>as<sp/>we<sp/>don&apos;t<sp/>know</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>whether<sp/>they<sp/>actually<sp/>point<sp/>to<sp/>a<sp/>NUL-terminated<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="gtest-printers_8h_1a79d4724b4bc2a1dd8493c366b5ca626a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(CharType)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename<sp/>OtherOperand&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"><sp/><sp/>class<sp/>FormatForComparison&lt;CharType*,<sp/>OtherOperand&gt;<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="295"><highlight class="preprocessor"><sp/><sp/><sp/>public:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>::std::string<sp/>Format(CharType*<sp/>value)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="297"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::testing::PrintToString(static_cast&lt;const<sp/>void*&gt;(value));<sp/>\</highlight></codeline>
<codeline lineno="298"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="namespacetesting_1_1internal_1a3682f962ae0ec1c0eca6444ca0a09e91" refkind="member"><highlight class="normal"><ref refid="namespacetesting_1_1internal_1a3682f962ae0ec1c0eca6444ca0a09e91" kindref="member">GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><ref refid="namespacetesting_1_1internal_1a3682f962ae0ec1c0eca6444ca0a09e91" kindref="member">GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303" refid="namespacetesting_1_1internal_1a85e08f00d443221e529a0a85a90fbaeb" refkind="member"><highlight class="normal"><ref refid="namespacetesting_1_1internal_1a3682f962ae0ec1c0eca6444ca0a09e91" kindref="member">GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><ref refid="namespacetesting_1_1internal_1a3682f962ae0ec1c0eca6444ca0a09e91" kindref="member">GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>C<sp/>string<sp/>is<sp/>compared<sp/>with<sp/>an<sp/>STL<sp/>string<sp/>object,<sp/>we<sp/>know<sp/>it&apos;s<sp/>meant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>point<sp/>to<sp/>a<sp/>NUL-terminated<sp/>string,<sp/>and<sp/>thus<sp/>can<sp/>print<sp/>it<sp/>as<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="gtest-printers_8h_1ad6102ed2a0571d5196e606a061c16a10" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(CharType,<sp/>OtherStringType)<sp/>\</highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor"><sp/><sp/>class<sp/>FormatForComparison&lt;CharType*,<sp/>OtherStringType&gt;<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"><sp/><sp/><sp/>public:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="315"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>::std::string<sp/>Format(CharType*<sp/>value)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="316"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::testing::PrintToString(value);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="317"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="318"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="namespacetesting_1_1internal_1aeac30230dcc362221bdd07d61eaa4ec1" refkind="member"><highlight class="normal"><ref refid="namespacetesting_1_1internal_1aeac30230dcc362221bdd07d61eaa4ec1" kindref="member">GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><ref refid="namespacetesting_1_1internal_1aeac30230dcc362221bdd07d61eaa4ec1" kindref="member">GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><ref refid="namespacetesting_1_1internal_1aeac30230dcc362221bdd07d61eaa4ec1" kindref="member">GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><ref refid="namespacetesting_1_1internal_1aeac30230dcc362221bdd07d61eaa4ec1" kindref="member">GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><ref refid="namespacetesting_1_1internal_1aeac30230dcc362221bdd07d61eaa4ec1" kindref="member">GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">,<sp/>::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">wstring</ref>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><ref refid="namespacetesting_1_1internal_1aeac30230dcc362221bdd07d61eaa4ec1" kindref="member">GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">,<sp/>::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">wstring</ref>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><ref refid="namespacetesting_1_1internal_1aeac30230dcc362221bdd07d61eaa4ec1" kindref="member">GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">,<sp/>::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::wstring</ref>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><ref refid="namespacetesting_1_1internal_1aeac30230dcc362221bdd07d61eaa4ec1" kindref="member">GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">,<sp/>::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::wstring</ref>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>comparison<sp/>assertion<sp/>(e.g.<sp/>ASSERT_EQ,<sp/>EXPECT_LT,<sp/>and<sp/>etc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operand<sp/>to<sp/>be<sp/>used<sp/>in<sp/>a<sp/>failure<sp/>message.<sp/><sp/>The<sp/>type<sp/>(but<sp/>not<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>other<sp/>operand<sp/>may<sp/>affect<sp/>the<sp/>format.<sp/><sp/>This<sp/>allows<sp/>us<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>print<sp/>a<sp/>char*<sp/>as<sp/>a<sp/>raw<sp/>pointer<sp/>when<sp/>it<sp/>is<sp/>compared<sp/>against<sp/>another</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char*<sp/>or<sp/>void*,<sp/>and<sp/>print<sp/>it<sp/>as<sp/>a<sp/>C<sp/>string<sp/>when<sp/>it<sp/>is<sp/>compared</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>against<sp/>an<sp/>std::string<sp/>object,<sp/>for<sp/>example.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="349" refid="namespacetesting_1_1internal_1a91ab078f10adc669f09b7f604975c518" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="namespacetesting_1_1internal_1a91ab078f10adc669f09b7f604975c518" kindref="member">FormatForComparisonFailureMessage</ref>(</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/></highlight><highlight class="comment">/*<sp/>other_operand<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FormatForComparison_1a2aeb688fc55b57abd3021d82eccad896" kindref="member">FormatForComparison&lt;T1, T2&gt;::Format</ref>(value);</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UniversalPrinter&lt;T&gt;::Print(value,<sp/>ostream_ptr)<sp/>prints<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>to<sp/>the<sp/>given<sp/>ostream.<sp/><sp/>The<sp/>caller<sp/>must<sp/>ensure<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;ostream_ptr&apos;<sp/>is<sp/>not<sp/>NULL,<sp/>or<sp/>the<sp/>behavior<sp/>is<sp/>undefined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>define<sp/>UniversalPrinter<sp/>as<sp/>a<sp/>class<sp/>template<sp/>(as<sp/>opposed<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>template),<sp/>as<sp/>we<sp/>need<sp/>to<sp/>partially<sp/>specialize<sp/>it<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference<sp/>types,<sp/>which<sp/>cannot<sp/>be<sp/>done<sp/>with<sp/>function<sp/>templates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UniversalPrinter;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1a30708fa2bacf11895b03bdb21eb72309" kindref="member">UniversalPrint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>to<sp/>print<sp/>an<sp/>STL-style<sp/>container<sp/>when<sp/>the<sp/>user<sp/>doesn&apos;t<sp/>define</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>PrintTo()<sp/>for<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="370" refid="namespacetesting_1_1internal_1ac7dfe02c4c1cbfe89c23a93d873079c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1ac7dfe02c4c1cbfe89c23a93d873079c5" kindref="member">DefaultPrintTo</ref>(<ref refid="namespacetesting_1_1internal_1ad8f0c2883245f1df2a53618a49f0deb3" kindref="member">IsContainer</ref><sp/></highlight><highlight class="comment">/*<sp/>dummy<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">false_type</ref><sp/></highlight><highlight class="comment">/*<sp/>is<sp/>not<sp/>a<sp/>pointer<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>C&amp;<sp/>container,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kMaxCount<sp/>=<sp/>32;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>elements<sp/>to<sp/>print.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C::const_iterator<sp/>it<sp/>=<sp/>container.begin();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>container.end();<sp/>++it,<sp/>++count)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>kMaxCount)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Enough<sp/>has<sp/>been<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>...&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>call<sp/>PrintTo(*it,<sp/>os)<sp/>here<sp/>as<sp/>PrintTo()<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>*it<sp/>being<sp/>a<sp/>native<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1a30708fa2bacf11895b03bdb21eb72309" kindref="member">internal::UniversalPrint</ref>(*it,<sp/>os);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>to<sp/>print<sp/>a<sp/>pointer<sp/>that<sp/>is<sp/>neither<sp/>a<sp/>char<sp/>pointer<sp/>nor<sp/>a<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pointer,<sp/>when<sp/>the<sp/>user<sp/>doesn&apos;t<sp/>define<sp/>PrintTo()<sp/>for<sp/>it.<sp/><sp/>(A<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variable<sp/>pointer<sp/>or<sp/>member<sp/>function<sp/>pointer<sp/>doesn&apos;t<sp/>really<sp/>point<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>location<sp/>in<sp/>the<sp/>address<sp/>space.<sp/><sp/>Their<sp/>representation<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation-defined.<sp/><sp/>Therefore<sp/>they<sp/>will<sp/>be<sp/>printed<sp/>as<sp/>raw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bytes.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="404" refid="namespacetesting_1_1internal_1affa1f94e3ba8db8b964553c2871bf339" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1ac7dfe02c4c1cbfe89c23a93d873079c5" kindref="member">DefaultPrintTo</ref>(<ref refid="namespacetesting_1_1internal_1abf080521ce135deb510e0a7830fd3d33" kindref="member">IsNotContainer</ref><sp/></highlight><highlight class="comment">/*<sp/>dummy<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">true_type</ref><sp/></highlight><highlight class="comment">/*<sp/>is<sp/>a<sp/>pointer<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>p,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C++<sp/>doesn&apos;t<sp/>allow<sp/>casting<sp/>from<sp/>a<sp/>function<sp/>pointer<sp/>to<sp/>any<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IsTrue()<sp/>silences<sp/>warnings:<sp/>&quot;Condition<sp/>is<sp/>always<sp/>true&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;unreachable<sp/>code&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetesting_1_1internal_1ab2709373c78eb8b1c22a6ba30cceba52" kindref="member">IsTrue</ref>(<ref refid="classtesting_1_1internal_1_1ImplicitlyConvertible" kindref="compound">ImplicitlyConvertible&lt;T*, const void*&gt;::value</ref>))<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>not<sp/>a<sp/>function<sp/>type.<sp/><sp/>We<sp/>just<sp/>call<sp/>&lt;&lt;<sp/>to<sp/>print<sp/>p,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>relying<sp/>on<sp/>ADL<sp/>to<sp/>pick<sp/>up<sp/>user-defined<sp/>&lt;&lt;<sp/>for<sp/>their<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>types,<sp/>if<sp/>any.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>p;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>a<sp/>function<sp/>type,<sp/>so<sp/>&apos;*os<sp/>&lt;&lt;<sp/>p&apos;<sp/>doesn&apos;t<sp/>do<sp/>what<sp/>we<sp/>want</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(it<sp/>just<sp/>prints<sp/>p<sp/>as<sp/>bool).<sp/><sp/>We<sp/>want<sp/>to<sp/>print<sp/>p<sp/>as<sp/>a<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>void*.<sp/><sp/>However,<sp/>we<sp/>cannot<sp/>cast<sp/>it<sp/>to<sp/>const<sp/>void*<sp/>directly,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>even<sp/>using<sp/>reinterpret_cast,<sp/>as<sp/>earlier<sp/>versions<sp/>of<sp/>gcc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(e.g.<sp/>3.4.5)<sp/>cannot<sp/>compile<sp/>the<sp/>cast<sp/>when<sp/>p<sp/>is<sp/>a<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer.<sp/><sp/>Casting<sp/>to<sp/>UInt64<sp/>first<sp/>solves<sp/>the<sp/>problem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>reinterpret_cast&lt;const<sp/>void*&gt;(</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="namespacetesting_1_1internal_1aa6a1ac454e6d7e550fa4925c62c35caa" kindref="member">internal::UInt64</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p));</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>to<sp/>print<sp/>a<sp/>non-container,<sp/>non-pointer<sp/>value<sp/>when<sp/>the<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>define<sp/>PrintTo()<sp/>for<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="436" refid="namespacetesting_1_1internal_1a78e4937ba564f01dac2ff25f3eece0ec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1ac7dfe02c4c1cbfe89c23a93d873079c5" kindref="member">DefaultPrintTo</ref>(<ref refid="namespacetesting_1_1internal_1abf080521ce135deb510e0a7830fd3d33" kindref="member">IsNotContainer</ref><sp/></highlight><highlight class="comment">/*<sp/>dummy<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">false_type</ref><sp/></highlight><highlight class="comment">/*<sp/>is<sp/>not<sp/>a<sp/>pointer<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting__internal_1a3f49d3d0c996242f9d383c850097a656" kindref="member">::testing_internal::DefaultPrintNonContainerTo</ref>(value,<sp/>os);</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>given<sp/>value<sp/>using<sp/>the<sp/>&lt;&lt;<sp/>operator<sp/>if<sp/>it<sp/>has<sp/>one;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise<sp/>prints<sp/>the<sp/>bytes<sp/>in<sp/>it.<sp/><sp/>This<sp/>is<sp/>what</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UniversalPrinter&lt;T&gt;::Print()<sp/>does<sp/>when<sp/>PrintTo()<sp/>is<sp/>not<sp/>specialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>overloaded<sp/>for<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user<sp/>can<sp/>override<sp/>this<sp/>behavior<sp/>for<sp/>a<sp/>class<sp/>type<sp/>Foo<sp/>by<sp/>defining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>overload<sp/>of<sp/>PrintTo()<sp/>in<sp/>the<sp/>namespace<sp/>where<sp/>Foo<sp/>is<sp/>defined.<sp/><sp/>We</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>give<sp/>the<sp/>user<sp/>this<sp/>option<sp/>as<sp/>sometimes<sp/>defining<sp/>a<sp/>&lt;&lt;<sp/>operator<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Foo<sp/>is<sp/>not<sp/>desirable<sp/>(e.g.<sp/>the<sp/>coding<sp/>style<sp/>may<sp/>prevent<sp/>doing<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>there<sp/>is<sp/>already<sp/>a<sp/>&lt;&lt;<sp/>operator<sp/>but<sp/>it<sp/>doesn&apos;t<sp/>do<sp/>what<sp/>the<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wants).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="454" refid="namespacetesting_1_1internal_1adb3c27150dbe661db0e0c4be27533460" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DefaultPrintTo()<sp/>is<sp/>overloaded.<sp/><sp/>The<sp/>type<sp/>of<sp/>its<sp/>first<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>arguments<sp/>determine<sp/>which<sp/>version<sp/>will<sp/>be<sp/>picked.<sp/><sp/>If<sp/>T<sp/>is<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>STL-style<sp/>container,<sp/>the<sp/>version<sp/>for<sp/>container<sp/>will<sp/>be<sp/>called;<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>a<sp/>pointer,<sp/>the<sp/>pointer<sp/>version<sp/>will<sp/>be<sp/>called;<sp/>otherwise<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generic<sp/>version<sp/>will<sp/>be<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>we<sp/>check<sp/>for<sp/>container<sp/>types<sp/>here,<sp/>prior<sp/>to<sp/>we<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>protocol<sp/>message<sp/>types<sp/>in<sp/>our<sp/>operator&lt;&lt;.<sp/><sp/>The<sp/>rationale<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>protocol<sp/>messages,<sp/>we<sp/>want<sp/>to<sp/>give<sp/>people<sp/>a<sp/>chance<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>override<sp/>Google<sp/>Mock&apos;s<sp/>format<sp/>by<sp/>defining<sp/>a<sp/>PrintTo()<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>operator&lt;&lt;.<sp/><sp/>For<sp/>STL<sp/>containers,<sp/>other<sp/>formats<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>incompatible<sp/>with<sp/>Google<sp/>Mock&apos;s<sp/>format<sp/>for<sp/>the<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>elements;<sp/>therefore<sp/>we<sp/>check<sp/>for<sp/>container<sp/>types<sp/>here<sp/>to<sp/>ensure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>our<sp/>format<sp/>is<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>second<sp/>argument<sp/>of<sp/>DefaultPrintTo()<sp/>is<sp/>needed<sp/>to<sp/>bypass<sp/>a<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>Symbian&apos;s<sp/>C++<sp/>compiler<sp/>that<sp/>prevents<sp/>it<sp/>from<sp/>picking<sp/>the<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>overload<sp/>between:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>PrintTo(const<sp/>T&amp;<sp/>x,<sp/>...);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>PrintTo(T*<sp/>x,<sp/>...);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_1ac7dfe02c4c1cbfe89c23a93d873079c5" kindref="member">DefaultPrintTo</ref>(IsContainerTest&lt;T&gt;(0),<sp/><ref refid="structtesting_1_1internal_1_1is__pointer" kindref="compound">is_pointer&lt;T&gt;</ref>(),<sp/>value,<sp/>os);</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>list<sp/>of<sp/>PrintTo()<sp/>overloads<sp/>tells</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UniversalPrinter&lt;T&gt;::Print()<sp/>how<sp/>to<sp/>print<sp/>standard<sp/>types<sp/>(built-in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>types,<sp/>strings,<sp/>plain<sp/>arrays,<sp/>and<sp/>pointers).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overloads<sp/>for<sp/>various<sp/>char<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><ref refid="gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><ref refid="gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os);</highlight></codeline>
<codeline lineno="487" refid="namespacetesting_1_1internal_1a476bd3d411d4f129620aaf8999c257c0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>printing<sp/>a<sp/>plain<sp/>char,<sp/>we<sp/>always<sp/>treat<sp/>it<sp/>as<sp/>unsigned.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>way,<sp/>the<sp/>output<sp/>won&apos;t<sp/>be<sp/>affected<sp/>by<sp/>whether<sp/>the<sp/>compiler<sp/>thinks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>char<sp/>is<sp/>signed<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c),<sp/>os);</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overloads<sp/>for<sp/>other<sp/>simple<sp/>built-in<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495" refid="namespacetesting_1_1internal_1a2979ac1ad3e05c51dcd7dca2eb34e6ce" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>x,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/>(x<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overload<sp/>for<sp/>wchar_t<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>wchar_t<sp/>as<sp/>a<sp/>symbol<sp/>if<sp/>it<sp/>is<sp/>printable<sp/>or<sp/>as<sp/>its<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code<sp/>otherwise<sp/>and<sp/>also<sp/>as<sp/>its<sp/>decimal<sp/>code<sp/>(except<sp/>for<sp/>L&apos;\0&apos;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>L&apos;\0&apos;<sp/>char<sp/>is<sp/>printed<sp/>as<sp/>&quot;L&apos;\\0&apos;&quot;.<sp/>The<sp/>decimal<sp/>code<sp/>is<sp/>printed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>signed<sp/>integer<sp/>when<sp/>wchar_t<sp/>is<sp/>implemented<sp/>by<sp/>the<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>a<sp/>signed<sp/>type<sp/>and<sp/>is<sp/>printed<sp/>as<sp/>an<sp/>unsigned<sp/>integer<sp/>when<sp/>wchar_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>implemented<sp/>as<sp/>an<sp/>unsigned<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506" refid="namespacetesting_1_1internal_1a6c50fd437a2ae2ff6f182ccd6c2744dd" refkind="member"><highlight class="normal"><ref refid="gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>wc,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overloads<sp/>for<sp/>C<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="namespacetesting_1_1internal_1ac226053b96d7d61f9407e3b75bab07d9" refkind="member"><highlight class="normal"><ref refid="gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os);</highlight></codeline>
<codeline lineno="510" refid="namespacetesting_1_1internal_1a553eec7bb50de01c9e91cac4accc606f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(ImplicitCast_&lt;const<sp/>char*&gt;(s),<sp/>os);</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="comment">//<sp/>signed/unsigned<sp/>char<sp/>is<sp/>often<sp/>used<sp/>for<sp/>representing<sp/>binary<sp/>data,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>print<sp/>pointers<sp/>to<sp/>it<sp/>as<sp/>void*<sp/>to<sp/>be<sp/>safe.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516" refid="namespacetesting_1_1internal_1a792cc5665a34619ed7a6d54711433456" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(ImplicitCast_&lt;const<sp/>void*&gt;(s),<sp/>os);</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519" refid="namespacetesting_1_1internal_1a1320096b116f8cc4b688acbd5b783051" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(ImplicitCast_&lt;const<sp/>void*&gt;(s),<sp/>os);</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522" refid="namespacetesting_1_1internal_1a42c591f2164ad105b502a9262333aed2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(ImplicitCast_&lt;const<sp/>void*&gt;(s),<sp/>os);</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525" refid="namespacetesting_1_1internal_1a7fae797c500d66d0f5a9db4f205e3416" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(ImplicitCast_&lt;const<sp/>void*&gt;(s),<sp/>os);</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>can<sp/>be<sp/>configured<sp/>to<sp/>define<sp/>wchar_t<sp/>as<sp/>a<sp/>typedef<sp/>of<sp/>unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>short.<sp/><sp/>It<sp/>defines<sp/>_NATIVE_WCHAR_T_DEFINED<sp/>when<sp/>wchar_t<sp/>is<sp/>a<sp/>native</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type.<sp/><sp/>When<sp/>wchar_t<sp/>is<sp/>a<sp/>typedef,<sp/>defining<sp/>an<sp/>overload<sp/>for<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t*<sp/>would<sp/>cause<sp/>unsigned<sp/>short*<sp/>be<sp/>printed<sp/>as<sp/>a<sp/>wide<sp/>string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>possibly<sp/>causing<sp/>invalid<sp/>memory<sp/>accesses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_MSC_VER)<sp/>||<sp/>defined(_NATIVE_WCHAR_T_DEFINED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overloads<sp/>for<sp/>wide<sp/>C<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536" refid="namespacetesting_1_1internal_1afb038075e9e2166d1d9158a19e0eed23" refkind="member"><highlight class="normal"><ref refid="gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os);</highlight></codeline>
<codeline lineno="537" refid="namespacetesting_1_1internal_1a8d41baa371fad3eb5a3dbe1bbc02c290" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(ImplicitCast_&lt;const<sp/>wchar_t*&gt;(s),<sp/>os);</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overload<sp/>for<sp/>C<sp/>arrays.<sp/><sp/>Multi-dimensional<sp/>arrays<sp/>are<sp/>printed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">//<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>given<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>an<sp/>array,<sp/>without<sp/>printing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>curly<sp/>braces.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="548" refid="namespacetesting_1_1internal_1ad3013b6b4c825edee9fe18ff1d982faa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1ad3013b6b4c825edee9fe18ff1d982faa" kindref="member">PrintRawArrayTo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>a[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_1a30708fa2bacf11895b03bdb21eb72309" kindref="member">UniversalPrint</ref>(a[0],<sp/>os);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>!=<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1a30708fa2bacf11895b03bdb21eb72309" kindref="member">UniversalPrint</ref>(a[i],<sp/>os);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overloads<sp/>for<sp/>::string<sp/>and<sp/>::std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><ref refid="gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1ad609167d8d6792b0fb186539e0e159bd" kindref="member">PrintStringTo</ref>(<ref refid="namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">const ::string</ref>&amp;s,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(<ref refid="namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">const ::string</ref>&amp;<sp/>s,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_1ad609167d8d6792b0fb186539e0e159bd" kindref="member">PrintStringTo</ref>(s,<sp/>os);</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_GLOBAL_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564" refid="namespacetesting_1_1internal_1a8b53e46cea3f8bdfc9342057c4f6ba62" refkind="member"><highlight class="normal"><ref refid="gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1ad609167d8d6792b0fb186539e0e159bd" kindref="member">PrintStringTo</ref>(<ref refid="namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">const ::std::string</ref>&amp;s,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os);</highlight></codeline>
<codeline lineno="565" refid="namespacetesting_1_1internal_1af59b4f5d83276cd807c45063b14bad44" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(<ref refid="namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">const ::std::string</ref>&amp;<sp/>s,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_1ad609167d8d6792b0fb186539e0e159bd" kindref="member">PrintStringTo</ref>(s,<sp/>os);</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overloads<sp/>for<sp/>::wstring<sp/>and<sp/>::std::wstring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><ref refid="gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintWideStringTo(<ref refid="namespacetesting_1_1internal_1a3f543179329c353aee1d7b54a9a8e335" kindref="member">const ::wstring</ref>&amp;s,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(<ref refid="namespacetesting_1_1internal_1a3f543179329c353aee1d7b54a9a8e335" kindref="member">const ::wstring</ref>&amp;<sp/>s,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>PrintWideStringTo(s,<sp/>os);</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><ref refid="gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintWideStringTo(<ref refid="namespacetesting_1_1internal_1a3f543179329c353aee1d7b54a9a8e335" kindref="member">const ::std::wstring</ref>&amp;s,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(<ref refid="namespacetesting_1_1internal_1a3f543179329c353aee1d7b54a9a8e335" kindref="member">const ::std::wstring</ref>&amp;<sp/>s,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>PrintWideStringTo(s,<sp/>os);</highlight></codeline>
<codeline lineno="581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_TR1_TUPLE<sp/>||<sp/>GTEST_HAS_STD_TUPLE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>printing<sp/>a<sp/>tuple.<sp/><sp/>T<sp/>must<sp/>be<sp/>instantiated<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>tuple<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTupleTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_TR1_TUPLE<sp/>||<sp/>GTEST_HAS_STD_TUPLE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_TR1_TUPLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overload<sp/>for<sp/>::std::tr1::tuple.<sp/><sp/>Needed<sp/>for<sp/>printing<sp/>function<sp/>arguments,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>are<sp/>packed<sp/>as<sp/>tuples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overloaded<sp/>PrintTo()<sp/>for<sp/>tuples<sp/>of<sp/>various<sp/>arities.<sp/><sp/>We<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tuples<sp/>of<sp/>up-to<sp/>10<sp/>fields.<sp/><sp/>The<sp/>following<sp/>implementation<sp/>works</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regardless<sp/>of<sp/>whether<sp/>tr1::tuple<sp/>is<sp/>implemented<sp/>using<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-standard<sp/>variadic<sp/>template<sp/>feature<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(const<sp/>::std::tr1::tuple&lt;&gt;&amp;<sp/>t,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>PrintTupleTo(t,<sp/>os);</highlight></codeline>
<codeline lineno="602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(const<sp/>::std::tr1::tuple&lt;T1&gt;&amp;<sp/>t,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>PrintTupleTo(t,<sp/>os);</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(const<sp/>::std::tr1::tuple&lt;T1,<sp/>T2&gt;&amp;<sp/>t,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>PrintTupleTo(t,<sp/>os);</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(const<sp/>::std::tr1::tuple&lt;T1,<sp/>T2,<sp/>T3&gt;&amp;<sp/>t,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>PrintTupleTo(t,<sp/>os);</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4&gt;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(const<sp/>::std::tr1::tuple&lt;T1,<sp/>T2,<sp/>T3,<sp/>T4&gt;&amp;<sp/>t,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>PrintTupleTo(t,<sp/>os);</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T5&gt;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(const<sp/>::std::tr1::tuple&lt;T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5&gt;&amp;<sp/>t,</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>PrintTupleTo(t,<sp/>os);</highlight></codeline>
<codeline lineno="628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T5,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T6&gt;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(const<sp/>::std::tr1::tuple&lt;T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6&gt;&amp;<sp/>t,</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>PrintTupleTo(t,<sp/>os);</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T5,</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T6,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T7&gt;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(const<sp/>::std::tr1::tuple&lt;T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7&gt;&amp;<sp/>t,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>PrintTupleTo(t,<sp/>os);</highlight></codeline>
<codeline lineno="642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T5,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T6,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T7,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T8&gt;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(const<sp/>::std::tr1::tuple&lt;T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8&gt;&amp;<sp/>t,</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>PrintTupleTo(t,<sp/>os);</highlight></codeline>
<codeline lineno="649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T5,</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T6,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T7,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T8,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T9&gt;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(const<sp/>::std::tr1::tuple&lt;T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9&gt;&amp;<sp/>t,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>PrintTupleTo(t,<sp/>os);</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T5,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T6,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T7,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T8,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T9,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T10&gt;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>::std::tr1::tuple&lt;T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10&gt;&amp;<sp/>t,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>PrintTupleTo(t,<sp/>os);</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_TR1_TUPLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_TUPLE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Types&gt;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(const<sp/>::std::tuple&lt;Types...&gt;&amp;<sp/>t,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>PrintTupleTo(t,<sp/>os);</highlight></codeline>
<codeline lineno="671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_TUPLE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overload<sp/>for<sp/>std::pair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="676" refid="namespacetesting_1_1internal_1af2c33928facbf2edf7af564278724d98" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(const<sp/>::std::pair&lt;T1,<sp/>T2&gt;&amp;<sp/>value,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>use<sp/>UniversalPrint(value.first,<sp/>os)<sp/>here,<sp/>as<sp/>T1<sp/>may<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>reference<sp/>type.<sp/><sp/>The<sp/>same<sp/>for<sp/>printing<sp/>value.second.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1UniversalPrinter_1aecec021e1abbaa260b701e24e3fe33eb" kindref="member">UniversalPrinter&lt;T1&gt;::Print</ref>(value.first,<sp/>os);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1UniversalPrinter_1aecec021e1abbaa260b701e24e3fe33eb" kindref="member">UniversalPrinter&lt;T2&gt;::Print</ref>(value.second,<sp/>os);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>printing<sp/>a<sp/>non-reference<sp/>type<sp/>T<sp/>by<sp/>letting<sp/>the<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pick<sp/>the<sp/>right<sp/>overload<sp/>of<sp/>PrintTo()<sp/>for<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="689" refid="classtesting_1_1internal_1_1UniversalPrinter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1UniversalPrinter" kindref="compound">UniversalPrinter</ref><sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MSVC<sp/>warns<sp/>about<sp/>adding<sp/>const<sp/>to<sp/>a<sp/>function<sp/>type,<sp/>so<sp/>we<sp/>want<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>the<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><ref refid="gtest-port_8h_1a86994cc68e844d8b82089c70408dfc61" kindref="member">GTEST_DISABLE_MSC_WARNINGS_PUSH_</ref>(4180)</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>we<sp/>deliberately<sp/>don&apos;t<sp/>call<sp/>this<sp/>PrintTo(),<sp/>as<sp/>that<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>conflicts<sp/>with<sp/>::testing::internal::PrintTo<sp/>in<sp/>the<sp/>body<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698" refid="classtesting_1_1internal_1_1UniversalPrinter_1aecec021e1abbaa260b701e24e3fe33eb" refkind="member"><highlight class="normal"><sp/><sp/>static<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1UniversalPrinter_1aecec021e1abbaa260b701e24e3fe33eb" kindref="member">Print</ref>(const<sp/>T&amp;<sp/>value,<sp/>::<ref refid="namespacestd" kindref="compound">std</ref>::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>::testing::internal::PrintTo()<sp/>is<sp/>used<sp/>for<sp/>printing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Thanks<sp/>to<sp/>Koenig<sp/>look-up,<sp/>if<sp/>T<sp/>is<sp/>a<sp/>class<sp/>and<sp/>has<sp/>its<sp/>own</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PrintTo()<sp/>function<sp/>defined<sp/>in<sp/>its<sp/>namespace,<sp/>that<sp/>function<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>visible<sp/>here.<sp/><sp/>Since<sp/>it<sp/>is<sp/>more<sp/>specific<sp/>than<sp/>the<sp/>generic<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>::testing::internal,<sp/>it<sp/>will<sp/>be<sp/>picked<sp/>by<sp/>the<sp/>compiler<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>following<sp/>statement<sp/>-<sp/>exactly<sp/>what<sp/>we<sp/>want.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(value,<sp/>os);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><ref refid="gtest-port_8h_1ab4c44546d6d9aced68993b87b608fc06" kindref="member">GTEST_DISABLE_MSC_WARNINGS_POP_</ref>()</highlight></codeline>
<codeline lineno="711"><highlight class="normal">};</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UniversalPrintArray(begin,<sp/>len,<sp/>os)<sp/>prints<sp/>an<sp/>array<sp/>of<sp/>&apos;len&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="comment">//<sp/>elements,<sp/>starting<sp/>at<sp/>address<sp/>&apos;begin&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="716" refid="namespacetesting_1_1internal_1ad79d71c3110f8eb24ab352d68f29436a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1a070107e7a8205ad6ec4d538d52b15b38" kindref="member">UniversalPrintArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>begin,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kThreshold<sp/>=<sp/>18;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kChunkSize<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>array<sp/>has<sp/>more<sp/>than<sp/>kThreshold<sp/>elements,<sp/>we&apos;ll<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>omit<sp/>some<sp/>details<sp/>by<sp/>printing<sp/>only<sp/>the<sp/>first<sp/>and<sp/>the<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kChunkSize<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(wan@google.com):<sp/>let<sp/>the<sp/>user<sp/>control<sp/>the<sp/>threshold<sp/>using<sp/>a<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;=<sp/>kThreshold)<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1ad3013b6b4c825edee9fe18ff1d982faa" kindref="member">PrintRawArrayTo</ref>(begin,<sp/>len,<sp/>os);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1ad3013b6b4c825edee9fe18ff1d982faa" kindref="member">PrintRawArrayTo</ref>(begin,<sp/>kChunkSize,<sp/>os);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>...,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1ad3013b6b4c825edee9fe18ff1d982faa" kindref="member">PrintRawArrayTo</ref>(begin<sp/>+<sp/>len<sp/>-<sp/>kChunkSize,<sp/>kChunkSize,<sp/>os);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>overload<sp/>prints<sp/>a<sp/>(const)<sp/>char<sp/>array<sp/>compactly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738" refid="namespacetesting_1_1internal_1a72c997dbd2c562110b2cb56c359decfa" refkind="member"><highlight class="normal"><ref refid="gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1a070107e7a8205ad6ec4d538d52b15b38" kindref="member">UniversalPrintArray</ref>(</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>begin,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>overload<sp/>prints<sp/>a<sp/>(const)<sp/>wchar_t<sp/>array<sp/>compactly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742" refid="namespacetesting_1_1internal_1ae31e146c35fd75afc6a9cc73ae2692d1" refkind="member"><highlight class="normal"><ref refid="gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1a070107e7a8205ad6ec4d538d52b15b38" kindref="member">UniversalPrintArray</ref>(</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>begin,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>printing<sp/>an<sp/>array<sp/>type<sp/>T[N].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="747" refid="classtesting_1_1internal_1_1UniversalPrinter_3_01T_0fN_0e_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1UniversalPrinter" kindref="compound">UniversalPrinter</ref>&lt;T[N]&gt;<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>given<sp/>array,<sp/>omitting<sp/>some<sp/>elements<sp/>when<sp/>there<sp/>are<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>many.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751" refid="classtesting_1_1internal_1_1UniversalPrinter_3_01T_0fN_0e_4_1a1cf0e7c8db59c090f769116c6421b212" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1UniversalPrinter_3_01T_0fN_0e_4_1a1cf0e7c8db59c090f769116c6421b212" kindref="member">Print</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;a)[N],<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1a070107e7a8205ad6ec4d538d52b15b38" kindref="member">UniversalPrintArray</ref>(a,<sp/>N,<sp/>os);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal">};</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>printing<sp/>a<sp/>reference<sp/>type<sp/>T&amp;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="758" refid="classtesting_1_1internal_1_1UniversalPrinter_3_01T_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1UniversalPrinter" kindref="compound">UniversalPrinter</ref>&lt;T&amp;&gt;<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MSVC<sp/>warns<sp/>about<sp/>adding<sp/>const<sp/>to<sp/>a<sp/>function<sp/>type,<sp/>so<sp/>we<sp/>want<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>the<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><ref refid="gtest-port_8h_1a86994cc68e844d8b82089c70408dfc61" kindref="member">GTEST_DISABLE_MSC_WARNINGS_PUSH_</ref>(4180)</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764" refid="classtesting_1_1internal_1_1UniversalPrinter_3_01T_01_6_01_4_1a923a694be8aa66117848c1c5f57ede35" refkind="member"><highlight class="normal"><sp/><sp/>static<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Print(const<sp/>T&amp;<sp/>value,<sp/>::<ref refid="namespacestd" kindref="compound">std</ref>::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>address<sp/>of<sp/>the<sp/>value.<sp/><sp/>We<sp/>use<sp/>reinterpret_cast<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>static_cast<sp/>doesn&apos;t<sp/>compile<sp/>when<sp/>T<sp/>is<sp/>a<sp/>function<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;value)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>prints<sp/>the<sp/>value<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1a30708fa2bacf11895b03bdb21eb72309" kindref="member">UniversalPrint</ref>(value,<sp/>os);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><ref refid="gtest-port_8h_1ab4c44546d6d9aced68993b87b608fc06" kindref="member">GTEST_DISABLE_MSC_WARNINGS_POP_</ref>()</highlight></codeline>
<codeline lineno="774"><highlight class="normal">};</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>value<sp/>tersely:<sp/>for<sp/>a<sp/>reference<sp/>type,<sp/>the<sp/>referenced<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(but<sp/>not<sp/>the<sp/>address)<sp/>is<sp/>printed;<sp/>for<sp/>a<sp/>(const)<sp/>char<sp/>pointer,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NUL-terminated<sp/>string<sp/>(but<sp/>not<sp/>the<sp/>pointer)<sp/>is<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="781" refid="classtesting_1_1internal_1_1UniversalTersePrinter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1UniversalTersePrinter" kindref="compound">UniversalTersePrinter</ref><sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="783" refid="classtesting_1_1internal_1_1UniversalTersePrinter_1a042249cdb42fdb77588c9ad54ea7ed54" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1UniversalTersePrinter_1a042249cdb42fdb77588c9ad54ea7ed54" kindref="member">Print</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1a30708fa2bacf11895b03bdb21eb72309" kindref="member">UniversalPrint</ref>(value,<sp/>os);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal">};</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="788" refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01T_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1UniversalTersePrinter" kindref="compound">UniversalTersePrinter</ref>&lt;T&amp;&gt;<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="790" refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01T_01_6_01_4_1a931f93cc52a3046706c87d0a90640483" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01T_01_6_01_4_1a931f93cc52a3046706c87d0a90640483" kindref="member">Print</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1a30708fa2bacf11895b03bdb21eb72309" kindref="member">UniversalPrint</ref>(value,<sp/>os);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal">};</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="795" refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01T_0fN_0e_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1UniversalTersePrinter" kindref="compound">UniversalTersePrinter</ref>&lt;T[N]&gt;<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="797" refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01T_0fN_0e_4_1a9e0ceb62fda7dc46ebcf5f911e459a49" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01T_0fN_0e_4_1a9e0ceb62fda7dc46ebcf5f911e459a49" kindref="member">Print</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;value)[N],<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1UniversalPrinter_1aecec021e1abbaa260b701e24e3fe33eb" kindref="member">UniversalPrinter&lt;T[N]&gt;::Print</ref>(value,<sp/>os);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal">};</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="802" refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01const_01char_01_5_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1UniversalTersePrinter" kindref="compound">UniversalTersePrinter</ref>&lt;const<sp/>char*&gt;<sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="804" refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01const_01char_01_5_01_4_1a37a3be2d26dc07b24d16c2b5eb88ecda" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01const_01char_01_5_01_4_1a37a3be2d26dc07b24d16c2b5eb88ecda" kindref="member">Print</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1a30708fa2bacf11895b03bdb21eb72309" kindref="member">UniversalPrint</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(str),<sp/>os);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal">};</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="813" refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01char_01_5_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1UniversalTersePrinter" kindref="compound">UniversalTersePrinter</ref>&lt;char*&gt;<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="815" refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01char_01_5_01_4_1aa9ef95587c1461fe33e254af52401a43" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01char_01_5_01_4_1aa9ef95587c1461fe33e254af52401a43" kindref="member">Print</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1UniversalTersePrinter_1a042249cdb42fdb77588c9ad54ea7ed54" kindref="member">UniversalTersePrinter&lt;const char*&gt;::Print</ref>(str,<sp/>os);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal">};</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UniversalTersePrinter&lt;const<sp/>wchar_t*&gt;<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Print(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>str,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1a30708fa2bacf11895b03bdb21eb72309" kindref="member">UniversalPrint</ref>(::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::wstring</ref>(str),<sp/>os);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal">};</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="835" refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01wchar__t_01_5_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1UniversalTersePrinter" kindref="compound">UniversalTersePrinter</ref>&lt;wchar_t*&gt;<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="837" refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01wchar__t_01_5_01_4_1a9cdf673b44d19e6879253f30f11cd740" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1UniversalTersePrinter_3_01wchar__t_01_5_01_4_1a9cdf673b44d19e6879253f30f11cd740" kindref="member">Print</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>str,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1UniversalTersePrinter_1a042249cdb42fdb77588c9ad54ea7ed54" kindref="member">UniversalTersePrinter&lt;const wchar_t*&gt;::Print</ref>(str,<sp/>os);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal">};</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="843" refid="namespacetesting_1_1internal_1afa92f5a284929dc3723e654a25feb7b9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1afa92f5a284929dc3723e654a25feb7b9" kindref="member">UniversalTersePrint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1UniversalTersePrinter_1a042249cdb42fdb77588c9ad54ea7ed54" kindref="member">UniversalTersePrinter&lt;T&gt;::Print</ref>(value,<sp/>os);</highlight></codeline>
<codeline lineno="845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>value<sp/>using<sp/>the<sp/>type<sp/>inferred<sp/>by<sp/>the<sp/>compiler.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//<sp/>difference<sp/>between<sp/>this<sp/>and<sp/>UniversalTersePrint()<sp/>is<sp/>that<sp/>for<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(const)<sp/>char<sp/>pointer,<sp/>this<sp/>prints<sp/>both<sp/>the<sp/>pointer<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NUL-terminated<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="852" refid="namespacetesting_1_1internal_1a30708fa2bacf11895b03bdb21eb72309" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1a30708fa2bacf11895b03bdb21eb72309" kindref="member">UniversalPrint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>workarond<sp/>for<sp/>the<sp/>bug<sp/>in<sp/>VC++<sp/>7.1<sp/>that<sp/>prevents<sp/>us<sp/>from<sp/>instantiating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>UniversalPrinter<sp/>with<sp/>T<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>T1;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1UniversalPrinter_1aecec021e1abbaa260b701e24e3fe33eb" kindref="member">UniversalPrinter&lt;T1&gt;::Print</ref>(value,<sp/>os);</highlight></codeline>
<codeline lineno="857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859" refid="namespacetesting_1_1internal_1a7706b17f05f4b49e351b052ae4e05073" refkind="member"><highlight class="normal">typedef<sp/>::std::vector&lt;string&gt;<sp/><ref refid="namespacetesting_1_1internal_1a7706b17f05f4b49e351b052ae4e05073" kindref="member">Strings</ref>;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TuplePolicy&lt;TupleT&gt;<sp/>must<sp/>provide:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>tuple_size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>size<sp/>of<sp/>tuple<sp/>TupleT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>get&lt;size_t<sp/>I&gt;(const<sp/>TupleT&amp;<sp/>t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>static<sp/>function<sp/>extracting<sp/>element<sp/>I<sp/>of<sp/>tuple<sp/>TupleT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>tuple_element&lt;size_t<sp/>I&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>type<sp/>of<sp/>element<sp/>I<sp/>of<sp/>tuple<sp/>TupleT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TupleT&gt;</highlight></codeline>
<codeline lineno="869" refid="structtesting_1_1internal_1_1TuplePolicy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1TuplePolicy" kindref="compound">TuplePolicy</ref>;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_TR1_TUPLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TupleT&gt;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1TuplePolicy" kindref="compound">TuplePolicy</ref><sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>TupleT<sp/>Tuple;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tuple_size<sp/>=<sp/><ref refid="structstd_1_1tr1_1_1tuple__size" kindref="compound">::std::tr1::tuple_size&lt;Tuple&gt;::value</ref>;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tuple_element<sp/>:<sp/><ref refid="structstd_1_1tr1_1_1tuple__element" kindref="compound">::std::tr1::tuple_element</ref>&lt;I,<sp/>Tuple&gt;<sp/>{};</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1AddReference" kindref="compound">AddReference</ref>&lt;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>typename<sp/>::std::tr1::tuple_element&lt;I,<sp/>Tuple&gt;::type&gt;::type<sp/>get(</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple&amp;<sp/>tuple)<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::std::tr1::get&lt;I&gt;(tuple);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal">};</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TupleT&gt;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>TuplePolicy&lt;TupleT&gt;::tuple_size;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_TR1_TUPLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_TUPLE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Types&gt;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TuplePolicy&lt;<sp/>::<ref refid="cpp/utility/tuple" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::tuple</ref>&lt;Types...&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::tuple&lt;Types...&gt;<sp/>Tuple;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tuple_size<sp/>=<sp/>::std::tuple_size&lt;Tuple&gt;::value;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tuple_element<sp/>:<sp/>::std::tuple_element&lt;I,<sp/>Tuple&gt;<sp/>{};</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>typename<sp/>::std::tuple_element&lt;I,<sp/>Tuple&gt;::type&amp;<sp/>get(</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple&amp;<sp/>tuple)<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::std::get&lt;I&gt;(tuple);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal">};</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Types&gt;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>TuplePolicy&lt;<sp/><ref refid="cpp/utility/tuple" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::tuple</ref>&lt;Types...&gt;<sp/>&gt;::tuple_size;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_TUPLE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_TR1_TUPLE<sp/>||<sp/>GTEST_HAS_STD_TUPLE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>helper<sp/>template<sp/>allows<sp/>PrintTo()<sp/>for<sp/>tuples<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UniversalTersePrintTupleFieldsToStrings()<sp/>to<sp/>be<sp/>defined<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="comment">//<sp/>induction<sp/>on<sp/>the<sp/>number<sp/>of<sp/>tuple<sp/>fields.<sp/><sp/>The<sp/>idea<sp/>is<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TuplePrefixPrinter&lt;N&gt;::PrintPrefixTo(t,<sp/>os)<sp/>prints<sp/>the<sp/>first<sp/>N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fields<sp/>in<sp/>tuple<sp/>t,<sp/>and<sp/>can<sp/>be<sp/>defined<sp/>in<sp/>terms<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TuplePrefixPrinter&lt;N<sp/>-<sp/>1&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>inductive<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TuplePrefixPrinter<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>first<sp/>N<sp/>fields<sp/>of<sp/>a<sp/>tuple.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintPrefixTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple&amp;<sp/>t,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>TuplePrefixPrinter&lt;N<sp/>-<sp/>1&gt;::PrintPrefixTo(t,<sp/>os);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="gtest-port_8h_1a69b0cadb05bf2a1ef96151243c6b6241" kindref="member">GTEST_INTENTIONAL_CONST_COND_PUSH_</ref>()</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(N<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="gtest-port_8h_1ad115e2c466f7e8a32f1cf23ef2e5f220" kindref="member">GTEST_INTENTIONAL_CONST_COND_POP_</ref>()</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>UniversalPrinter&lt;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TuplePolicy&lt;Tuple&gt;::template<sp/>tuple_element&lt;N<sp/>-<sp/>1&gt;::type&gt;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Print(TuplePolicy&lt;Tuple&gt;::template<sp/>get&lt;N<sp/>-<sp/>1&gt;(t),<sp/>os);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tersely<sp/>prints<sp/>the<sp/>first<sp/>N<sp/>fields<sp/>of<sp/>a<sp/>tuple<sp/>to<sp/>a<sp/>string<sp/>vector,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>element<sp/>for<sp/>each<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TersePrintPrefixToStrings(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple&amp;<sp/>t,<sp/><ref refid="namespacetesting_1_1internal_1a7706b17f05f4b49e351b052ae4e05073" kindref="member">Strings</ref>*<sp/>strings)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>TuplePrefixPrinter&lt;N<sp/>-<sp/>1&gt;::TersePrintPrefixToStrings(t,<sp/>strings);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/io/basic_stringstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::stringstream</ref><sp/>ss;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1afa92f5a284929dc3723e654a25feb7b9" kindref="member">UniversalTersePrint</ref>(TuplePolicy&lt;Tuple&gt;::template<sp/>get&lt;N<sp/>-<sp/>1&gt;(t),<sp/>&amp;ss);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>strings-&gt;push_back(ss.<ref refid="cpp/io/basic_stringstream/str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">str</ref>());</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal">};</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TuplePrefixPrinter&lt;0&gt;<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintPrefixTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple&amp;,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*)<sp/>{}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TersePrintPrefixToStrings(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple&amp;,<sp/><ref refid="namespacetesting_1_1internal_1a7706b17f05f4b49e351b052ae4e05073" kindref="member">Strings</ref>*)<sp/>{}</highlight></codeline>
<codeline lineno="954"><highlight class="normal">};</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>printing<sp/>a<sp/>tuple.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tuple<sp/>must<sp/>be<sp/>either<sp/>std::tr1::tuple<sp/>or<sp/>std::tuple<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTupleTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple&amp;<sp/>t,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>TuplePrefixPrinter&lt;TuplePolicy&lt;Tuple&gt;::tuple_size&gt;::PrintPrefixTo(t,<sp/>os);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>fields<sp/>of<sp/>a<sp/>tuple<sp/>tersely<sp/>to<sp/>a<sp/>string<sp/>vector,<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="comment">//<sp/>element<sp/>for<sp/>each<sp/>field.<sp/><sp/>See<sp/>the<sp/>comment<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UniversalTersePrint()<sp/>for<sp/>how<sp/>we<sp/>define<sp/>&quot;tersely&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><ref refid="namespacetesting_1_1internal_1a7706b17f05f4b49e351b052ae4e05073" kindref="member">Strings</ref><sp/>UniversalTersePrintTupleFieldsToStrings(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_1a7706b17f05f4b49e351b052ae4e05073" kindref="member">Strings</ref><sp/>result;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>TuplePrefixPrinter&lt;TuplePolicy&lt;Tuple&gt;::tuple_size&gt;::</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TersePrintPrefixToStrings(value,<sp/>&amp;result);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_TR1_TUPLE<sp/>||<sp/>GTEST_HAS_STD_TUPLE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="980" refid="namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::string</ref><sp/><ref refid="namespacetesting_1aa5717bb1144edd1d262d310ba70c82ed" kindref="member">PrintToString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_stringstream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">::std::stringstream</ref><sp/>ss;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1UniversalTersePrinter_1a042249cdb42fdb77588c9ad54ea7ed54" kindref="member">internal::UniversalTersePrinter&lt;T&gt;::Print</ref>(value,<sp/>&amp;ss);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.<ref refid="cpp/io/basic_stringstream/str" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">str</ref>();</highlight></codeline>
<codeline lineno="984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Include<sp/>any<sp/>custom<sp/>printer<sp/>added<sp/>by<sp/>the<sp/>local<sp/>installation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>must<sp/>include<sp/>this<sp/>header<sp/>at<sp/>the<sp/>end<sp/>to<sp/>make<sp/>sure<sp/>it<sp/>can<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment">//<sp/>declarations<sp/>from<sp/>this<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="internal_2custom_2gtest-printers_8h" kindref="compound">gtest/internal/custom/gtest-printers.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/googletest/include/gtest/gtest-printers.h"/>
  </compounddef>
</doxygen>
