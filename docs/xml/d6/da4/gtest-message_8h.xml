<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d6/da4/gtest-message_8h" kind="file" language="C++">
    <compoundname>gtest-message.h</compoundname>
    <includes local="no">limits</includes>
    <includes refid="d3/dc9/gtest-port_8h" local="yes">gtest/internal/gtest-port.h</includes>
    <includedby refid="de/d50/gtest-death-test_8cc" local="yes">lib/googletest/src/gtest-death-test.cc</includedby>
    <includedby refid="dc/d20/gtest-filepath_8cc" local="yes">lib/googletest/src/gtest-filepath.cc</includedby>
    <includedby refid="df/d09/gtest-port_8cc" local="yes">lib/googletest/src/gtest-port.cc</includedby>
    <includedby refid="d8/d73/gtest_8h" local="yes">lib/googletest/include/gtest/gtest.h</includedby>
    <includedby refid="d5/da1/gtest-internal_8h" local="yes">lib/googletest/include/gtest/internal/gtest-internal.h</includedby>
    <incdepgraph>
      <node id="10">
        <label>sys/stat.h</label>
      </node>
      <node id="22">
        <label>typeinfo</label>
        <link refid="cpp/header/typeinfo" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="17">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="d6/d76/gtest-port-arch_8h"/>
      </node>
      <node id="6">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>algorithm</label>
        <link refid="cpp/header/algorithm" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="23">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="d1/d63/gtest-tuple_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="16">
        <label>vector</label>
        <link refid="cpp/header/vector" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="9">
        <label>sys/types.h</label>
      </node>
      <node id="8">
        <label>string.h</label>
      </node>
      <node id="3">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="d3/dc9/gtest-port_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>unistd.h</label>
      </node>
      <node id="2">
        <label>limits</label>
        <link refid="cpp/header/limits" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="15">
        <label>utility</label>
        <link refid="cpp/header/utility" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="14">
        <label>string</label>
        <link refid="cpp/header/string" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="1">
        <label>lib/googletest/include/gtest/gtest-message.h</label>
        <link refid="d6/da4/gtest-message_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>strings.h</label>
      </node>
      <node id="4">
        <label>ctype.h</label>
      </node>
      <node id="12">
        <label>iostream</label>
        <link refid="cpp/header/iostream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="13">
        <label>sstream</label>
        <link refid="cpp/header/sstream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="21">
        <label>regex.h</label>
      </node>
      <node id="18">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="d5/d66/custom_2gtest-port_8h"/>
      </node>
      <node id="7">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="18">
        <label>lib/googletest/include/gtest/internal/gtest-param-util.h</label>
        <link refid="dc/df2/gtest-param-util_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>lib/googletest/include/gtest/gtest.h</label>
        <link refid="d8/d73/gtest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>lib/googletest/src/gtest-internal-inl.h</label>
        <link refid="d0/da1/gtest-internal-inl_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>lib/googletest/include/gtest/internal/gtest-param-util-generated.h</label>
        <link refid="dc/db7/gtest-param-util-generated_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>lib/googletest/src/gtest-filepath.cc</label>
        <link refid="dc/d20/gtest-filepath_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>lib/googletest/include/gtest/internal/gtest-internal.h</label>
        <link refid="d5/da1/gtest-internal_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>lib/googletest/include/gtest/gtest-death-test.h</label>
        <link refid="d4/d59/gtest-death-test_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>lib/googletest/src/gtest-printers.cc</label>
        <link refid="db/d74/gtest-printers_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>lib/googletest/src/gtest-all.cc</label>
        <link refid="d1/d8c/gtest-all_8cc"/>
      </node>
      <node id="2">
        <label>lib/googletest/src/gtest-death-test.cc</label>
        <link refid="de/d50/gtest-death-test_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>lib/googletest/src/gtest_main.cc</label>
        <link refid="d3/d3a/gtest__main_8cc"/>
      </node>
      <node id="9">
        <label>lib/googletest/src/gtest.cc</label>
        <link refid="df/d5b/gtest_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>lib/googletest/src/gtest-typed-test.cc</label>
        <link refid="d9/d5a/gtest-typed-test_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>lib/googletest/src/gtest-test-part.cc</label>
        <link refid="d3/dc2/gtest-test-part_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>lib/googletest/src/gtest-port.cc</label>
        <link refid="df/d09/gtest-port_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>lib/googletest/include/gtest/internal/gtest-death-test-internal.h</label>
        <link refid="d0/d1a/gtest-death-test-internal_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lib/googletest/include/gtest/gtest-message.h</label>
        <link refid="d6/da4/gtest-message_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>lib/googletest/include/gtest/gtest-spi.h</label>
        <link refid="dc/dbe/gtest-spi_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>lib/googletest/include/gtest/gtest-test-part.h</label>
        <link refid="d1/d01/gtest-test-part_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>lib/googletest/include/gtest/gtest-param-test.h</label>
        <link refid="d0/d31/gtest-param-test_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>lib/googletest/include/gtest/gtest-printers.h</label>
        <link refid="d0/d6d/gtest-printers_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="d2/da9/classtesting_1_1_message" prot="public">testing::Message</innerclass>
    <innernamespace refid="d0/d75/namespacetesting">testing</innernamespace>
    <innernamespace refid="d0/da7/namespacetesting_1_1internal">testing::internal</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="d6/da4/gtest-message_8h_1ae8f0c86e5c506587b62315e24a918563" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void operator&lt;&lt;</definition>
        <argsstring>(const testing::internal::Secret &amp;, int)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const testing::internal::Secret &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest-message.h" line="55" column="1" declfile="lib/googletest/include/gtest/gtest-message.h" declline="55" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d75/namespacetesting_1a7b802e532fd68749765cb7dc156130db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; testing::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Message &amp;sb)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const Message &amp;</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest-message.h" line="232" column="8" bodyfile="lib/googletest/include/gtest/gtest-message.h" bodystart="232" bodyend="234"/>
        <references refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" compoundref="df/d5b/gtest_8cc" startline="981" endline="983">Message::GetString</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string testing::internal::StreamableToString</definition>
        <argsstring>(const T &amp;streamable)</argsstring>
        <name>StreamableToString</name>
        <param>
          <type>const T &amp;</type>
          <declname>streamable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/include/gtest/gtest-message.h" line="243" column="13" bodyfile="lib/googletest/include/gtest/gtest-message.h" bodystart="243" bodyend="245"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ae75f0742876f6d9ba86daf5603bf2448" compoundref="df/d09/gtest-port_8cc" startline="898" endline="906">testing::internal::FormatCompilerIndependentFileLocation</referencedby>
        <referencedby refid="d0/d75/namespacetesting_1a33e070c3e994cb75f9017fa2a044d536" compoundref="df/d5b/gtest_8cc" startline="2809" endline="2814">testing::FormatCountableNoun</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a779873280d17edf78c0a569a419432db" compoundref="df/d5b/gtest_8cc" startline="3574" endline="3585">testing::internal::FormatEpochTimeInMillisAsIso8601</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a6264f0605b7d7d0609eae663c58662c0" compoundref="df/d09/gtest-port_8cc" startline="880" endline="891">testing::internal::FormatFileLocation</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ac3c6fa93391768aa91c6238b31aaeeb5" compoundref="df/d5b/gtest_8cc" startline="5344" endline="5357">testing::internal::InitGoogleTestImpl</referencedby>
        <referencedby refid="de/d14/classtesting_1_1internal_1_1_file_path_1a56b8e4a3bdcf00693fb761b47689dd92" compoundref="dc/d20/gtest-filepath_8cc" startline="183" endline="195">FilePath::MakeFileName</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1adecad7fba2c2b8083a93a152046f06dd" compoundref="df/d5b/gtest_8cc" startline="3149" endline="3159">PrettyUnitTestResultPrinter::OnTestCaseEnd</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1a41824a58ecc1d0bf99a2b691cd865701" compoundref="df/d5b/gtest_8cc" startline="3130" endline="3147">PrettyUnitTestResultPrinter::OnTestEnd</referencedby>
        <referencedby refid="d7/d8b/classtesting_1_1internal_1_1_pretty_unit_test_result_printer_1aa21b349a51378e47877ee6d153c37116" compoundref="df/d5b/gtest_8cc" startline="3193" endline="3229">PrettyUnitTestResultPrinter::OnTestIterationEnd</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ae4c46ce8c3d016848fff52cc5133f2ac" compoundref="df/d5b/gtest_8cc" startline="5279" endline="5328">testing::internal::ParseGoogleTestFlagsOnlyImpl</referencedby>
        <referencedby refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1addf25742548aa0376bf180ed28187460" compoundref="df/d5b/gtest_8cc" startline="3675" endline="3698">XmlUnitTestResultPrinter::PrintXmlTestCase</referencedby>
        <referencedby refid="d3/dc6/classtesting_1_1internal_1_1_xml_unit_test_result_printer_1af053fc729d29be4c3de9c1e5e7585cdc" compoundref="df/d5b/gtest_8cc" startline="3701" endline="3737">XmlUnitTestResultPrinter::PrintXmlUnitTest</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2005,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Google<sp/>C++<sp/>Testing<sp/>Framework<sp/>(Google<sp/>Test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>header<sp/>file<sp/>defines<sp/>the<sp/>Message<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IMPORTANT<sp/>NOTE:<sp/>Due<sp/>to<sp/>limitation<sp/>of<sp/>the<sp/>C++<sp/>language,<sp/>we<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>leave<sp/>some<sp/>internal<sp/>implementation<sp/>details<sp/>in<sp/>this<sp/>header<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>They<sp/>are<sp/>clearly<sp/>marked<sp/>by<sp/>comments<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Such<sp/>code<sp/>is<sp/>NOT<sp/>meant<sp/>to<sp/>be<sp/>used<sp/>by<sp/>a<sp/>user<sp/>directly,<sp/>and<sp/>is<sp/>subject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>CHANGE<sp/>WITHOUT<sp/>NOTICE.<sp/><sp/>Therefore<sp/>DO<sp/>NOT<sp/>DEPEND<sp/>ON<sp/>IT<sp/>in<sp/>a<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>program!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/limits" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">limits</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/dc9/gtest-port_8h" kindref="compound">gtest/internal/gtest-port.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Ensures<sp/>that<sp/>there<sp/>is<sp/>at<sp/>least<sp/>one<sp/>operator&lt;&lt;<sp/>in<sp/>the<sp/>global<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>Message&amp;<sp/>operator&lt;&lt;(...)<sp/>below<sp/>for<sp/>why.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="d6/da4/gtest-message_8h_1ae8f0c86e5c506587b62315e24a918563" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/da4/gtest-message_8h_1ae8f0c86e5c506587b62315e24a918563" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>testing::internal::Secret&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d0/d75/namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Message<sp/>class<sp/>works<sp/>like<sp/>an<sp/>ostream<sp/>repeater.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Typical<sp/>usage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>You<sp/>stream<sp/>a<sp/>bunch<sp/>of<sp/>values<sp/>to<sp/>a<sp/>Message<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>will<sp/>remember<sp/>the<sp/>text<sp/>in<sp/>a<sp/>stringstream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>Then<sp/>you<sp/>stream<sp/>the<sp/>Message<sp/>object<sp/>to<sp/>an<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>causes<sp/>the<sp/>text<sp/>in<sp/>the<sp/>Message<sp/>to<sp/>be<sp/>streamed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>the<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>testing::Message<sp/>foo;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>foo<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>&quot;<sp/>!=<sp/>&quot;<sp/>&lt;&lt;<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>foo;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>print<sp/>&quot;1<sp/>!=<sp/>2&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Message<sp/>is<sp/>not<sp/>intended<sp/>to<sp/>be<sp/>inherited<sp/>from.<sp/><sp/>In<sp/>particular,<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>destructor<sp/>is<sp/>not<sp/>virtual.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>stringstream<sp/>behaves<sp/>differently<sp/>in<sp/>gcc<sp/>and<sp/>in<sp/>MSVC.<sp/><sp/>You</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>stream<sp/>a<sp/>NULL<sp/>char<sp/>pointer<sp/>to<sp/>it<sp/>in<sp/>the<sp/>former,<sp/>but<sp/>not<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>latter<sp/>(it<sp/>causes<sp/>an<sp/>access<sp/>violation<sp/>if<sp/>you<sp/>do).<sp/><sp/>The<sp/>Message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>hides<sp/>this<sp/>difference<sp/>by<sp/>treating<sp/>a<sp/>NULL<sp/>char<sp/>pointer<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;(null)&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="d2/da9/classtesting_1_1_message" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1aa73be6f0ba4a7456180a94904ce17790" kindref="member">GTEST_API_</ref><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>type<sp/>of<sp/>basic<sp/>IO<sp/>manipulators<sp/>(endl,<sp/>ends,<sp/>and<sp/>flush)<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>narrow<sp/>streams.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="d2/da9/classtesting_1_1_message_1a064c6e35374327a2ae72519264654874" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>&amp;<sp/>(*BasicNarrowIoManip)(<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>&amp;);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>an<sp/>empty<sp/>Message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="d2/da9/classtesting_1_1_message_1a88a351ea6cb0a42238744a6565ab665f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message_1a88a351ea6cb0a42238744a6565ab665f" kindref="member">Message</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/>msg)<sp/>:<sp/>ss_(new<sp/>::<ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>::stringstream)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>*ss_<sp/>&lt;&lt;<sp/>msg.<ref refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" kindref="member">GetString</ref>();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>Message<sp/>from<sp/>a<sp/>C-string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="d2/da9/classtesting_1_1_message_1ad39663bd5560bdd7033a30d085afd759" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message_1ad39663bd5560bdd7033a30d085afd759" kindref="member">Message</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>:<sp/>ss_(new<sp/>::<ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>::stringstream)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>*ss_<sp/>&lt;&lt;<sp/>str;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_SYMBIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streams<sp/>a<sp/>value<sp/>(either<sp/>a<sp/>pointer<sp/>or<sp/>not)<sp/>to<sp/>this<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/><ref refid="d0/d75/namespacetesting_1ae8b6df347210c0ebfe5ec995d03c7aed" kindref="member">operator &lt;&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>StreamHelper(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d3/d75/structtesting_1_1internal_1_1bool__constant" kindref="compound">internal::is_pointer&lt;T&gt;::type</ref>(),<sp/>value);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streams<sp/>a<sp/>non-pointer<sp/>value<sp/>to<sp/>this<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="115" refid="d2/da9/classtesting_1_1_message_1a173f6d370f2730877bbf104ceb93f461" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/><ref refid="d0/d75/namespacetesting_1ae8b6df347210c0ebfe5ec995d03c7aed" kindref="member">operator &lt;&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>libraries<sp/>overload<sp/>&lt;&lt;<sp/>for<sp/>STL<sp/>containers.<sp/><sp/>These</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overloads<sp/>are<sp/>defined<sp/>in<sp/>the<sp/>global<sp/>namespace<sp/>instead<sp/>of<sp/>::std.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C++&apos;s<sp/>symbol<sp/>lookup<sp/>rule<sp/>(i.e.<sp/>Koenig<sp/>lookup)<sp/>says<sp/>that<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overloads<sp/>are<sp/>visible<sp/>in<sp/>either<sp/>the<sp/>std<sp/>namespace<sp/>or<sp/>the<sp/>global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace,<sp/>but<sp/>not<sp/>other<sp/>namespaces,<sp/>including<sp/>the<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>which<sp/>Google<sp/>Test&apos;s<sp/>Message<sp/>class<sp/>is<sp/>in.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>allow<sp/>STL<sp/>containers<sp/>(and<sp/>other<sp/>types<sp/>that<sp/>has<sp/>a<sp/>&lt;&lt;<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>defined<sp/>in<sp/>the<sp/>global<sp/>namespace)<sp/>to<sp/>be<sp/>used<sp/>in<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assertions,<sp/>testing::Message<sp/>must<sp/>access<sp/>the<sp/>custom<sp/>&lt;&lt;<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>global<sp/>namespace.<sp/><sp/>With<sp/>this<sp/>using<sp/>declaration,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overloads<sp/>of<sp/>&lt;&lt;<sp/>defined<sp/>in<sp/>the<sp/>global<sp/>namespace<sp/>and<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>visible<sp/>via<sp/>Koenig<sp/>lookup<sp/>are<sp/>both<sp/>exposed<sp/>in<sp/>this<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>::operator<sp/>&lt;&lt;;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>*ss_<sp/>&lt;&lt;<sp/>val;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streams<sp/>a<sp/>pointer<sp/>value<sp/>to<sp/>this<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>an<sp/>overload<sp/>of<sp/>the<sp/>previous<sp/>one.<sp/><sp/>When<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stream<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>Message,<sp/>this<sp/>definition<sp/>will<sp/>be<sp/>used<sp/>as<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>more<sp/>specialized.<sp/><sp/>(The<sp/>C++<sp/>Standard,<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[temp.func.order].)<sp/><sp/>If<sp/>you<sp/>stream<sp/>a<sp/>non-pointer,<sp/>then<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>previous<sp/>definition<sp/>will<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>reason<sp/>for<sp/>this<sp/>overload<sp/>is<sp/>that<sp/>streaming<sp/>a<sp/>NULL<sp/>pointer<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ostream<sp/>is<sp/>undefined<sp/>behavior.<sp/><sp/>Depending<sp/>on<sp/>the<sp/>compiler,<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>get<sp/>&quot;0&quot;,<sp/>&quot;(nil)&quot;,<sp/>&quot;(null)&quot;,<sp/>or<sp/>an<sp/>access<sp/>violation.<sp/><sp/>To</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>consistent<sp/>result<sp/>across<sp/>compilers,<sp/>we<sp/>always<sp/>treat<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>&quot;(null)&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="149" refid="d2/da9/classtesting_1_1_message_1ae41772c43713f4bbc704c8b3f0648839" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/><ref refid="d0/d75/namespacetesting_1ae8b6df347210c0ebfe5ec995d03c7aed" kindref="member">operator &lt;&lt;</ref>(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>pointer)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pointer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ss_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ss_<sp/>&lt;&lt;<sp/>pointer;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_SYMBIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>the<sp/>basic<sp/>IO<sp/>manipulators<sp/>are<sp/>overloaded<sp/>for<sp/>both<sp/>narrow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>wide<sp/>streams,<sp/>we<sp/>have<sp/>to<sp/>provide<sp/>this<sp/>specialized<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>operator<sp/>&lt;&lt;,<sp/>even<sp/>though<sp/>its<sp/>body<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>templatized<sp/>version<sp/>above.<sp/><sp/>Without<sp/>this<sp/>definition,<sp/>streaming</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>endl<sp/>or<sp/>other<sp/>basic<sp/>IO<sp/>manipulators<sp/>to<sp/>Message<sp/>will<sp/>confuse<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compiler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="d2/da9/classtesting_1_1_message_1a2cf5e79015eff3c525bad5758bb7c873" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/><ref refid="d0/d75/namespacetesting_1ae8b6df347210c0ebfe5ec995d03c7aed" kindref="member">operator &lt;&lt;</ref>(BasicNarrowIoManip<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>*ss_<sp/>&lt;&lt;<sp/>val;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Instead<sp/>of<sp/>1/0,<sp/>we<sp/>want<sp/>to<sp/>see<sp/>true/false<sp/>for<sp/>bool<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="d2/da9/classtesting_1_1_message_1a905ea03f1daecb48aa6e89e7f2c61673" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/><ref refid="d0/d75/namespacetesting_1ae8b6df347210c0ebfe5ec995d03c7aed" kindref="member">operator &lt;&lt;</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(b<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>two<sp/>overloads<sp/>allow<sp/>streaming<sp/>a<sp/>wide<sp/>C<sp/>string<sp/>to<sp/>a<sp/>Message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>the<sp/>UTF-8<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/><ref refid="d0/d75/namespacetesting_1ae8b6df347210c0ebfe5ec995d03c7aed" kindref="member">operator &lt;&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>wide_c_str);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/><ref refid="d0/d75/namespacetesting_1ae8b6df347210c0ebfe5ec995d03c7aed" kindref="member">operator &lt;&lt;</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>wide_c_str);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>given<sp/>wide<sp/>string<sp/>to<sp/>a<sp/>narrow<sp/>string<sp/>using<sp/>the<sp/>UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>encoding,<sp/>and<sp/>streams<sp/>the<sp/>result<sp/>to<sp/>this<sp/>Message<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/><ref refid="d0/d75/namespacetesting_1ae8b6df347210c0ebfe5ec995d03c7aed" kindref="member">operator &lt;&lt;</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1af3c58f657eee885281edda1923f192b0" kindref="member">const ::std::wstring</ref>&amp;<sp/>wstr);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>given<sp/>wide<sp/>string<sp/>to<sp/>a<sp/>narrow<sp/>string<sp/>using<sp/>the<sp/>UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>encoding,<sp/>and<sp/>streams<sp/>the<sp/>result<sp/>to<sp/>this<sp/>Message<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/><ref refid="d0/d75/namespacetesting_1ae8b6df347210c0ebfe5ec995d03c7aed" kindref="member">operator &lt;&lt;</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1af3c58f657eee885281edda1923f192b0" kindref="member">const ::wstring</ref>&amp;<sp/>wstr);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>text<sp/>streamed<sp/>to<sp/>this<sp/>object<sp/>so<sp/>far<sp/>as<sp/>an<sp/>std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>&apos;\0&apos;<sp/>character<sp/>in<sp/>the<sp/>buffer<sp/>is<sp/>replaced<sp/>with<sp/>&quot;\\0&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>GetString()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_SYMBIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>needed<sp/>as<sp/>the<sp/>Nokia<sp/>Symbian<sp/>Compiler<sp/>cannot<sp/>decide<sp/>between</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>T&amp;<sp/>and<sp/>const<sp/>T*<sp/>in<sp/>a<sp/>function<sp/>template.<sp/>The<sp/>Nokia<sp/>compiler<sp/>_can_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>decide<sp/>between<sp/>class<sp/>template<sp/>specializations<sp/>for<sp/>T<sp/>and<sp/>T*,<sp/>so<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tr1::type_traits-like<sp/>is_pointer<sp/>works,<sp/>and<sp/>we<sp/>can<sp/>overload<sp/>on<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StreamHelper(<ref refid="d3/d75/structtesting_1_1internal_1_1bool__constant" kindref="compound">internal::true_type</ref><sp/></highlight><highlight class="comment">/*is_pointer*/</highlight><highlight class="normal">,<sp/>T*<sp/>pointer)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pointer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ss_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ss_<sp/>&lt;&lt;<sp/>pointer;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StreamHelper(<ref refid="d0/da7/namespacetesting_1_1internal_1ab61a3c5613617716022def8f91021337" kindref="member">internal::false_type</ref><sp/></highlight><highlight class="comment">/*is_pointer*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>comments<sp/>in<sp/>Message&amp;<sp/>operator<sp/>&lt;&lt;(const<sp/>T&amp;)<sp/>above<sp/>for<sp/>why</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>this<sp/>using<sp/>statement.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>::operator<sp/>&lt;&lt;;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>*ss_<sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_OS_SYMBIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ll<sp/>hold<sp/>the<sp/>text<sp/>streamed<sp/>to<sp/>this<sp/>object<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="d2/da9/classtesting_1_1_message_1ab6f3c269fc46c9c1c0f81b3431240138" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d6a/classtesting_1_1internal_1_1scoped__ptr" kindref="compound">internal::scoped_ptr&lt; ::std::stringstream&gt;</ref><sp/>ss_;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>declare<sp/>(but<sp/>don&apos;t<sp/>implement)<sp/>this<sp/>to<sp/>prevent<sp/>the<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>implementing<sp/>the<sp/>assignment<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="d2/da9/classtesting_1_1_message_1a88dc4315c7a87800e16ed76f3d278b08" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message_1a88dc4315c7a87800e16ed76f3d278b08" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;);</highlight></codeline>
<codeline lineno="229"><highlight class="normal">};</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Streams<sp/>a<sp/>Message<sp/>to<sp/>an<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="d0/d75/namespacetesting_1a7b802e532fd68749765cb7dc156130db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>&amp;<sp/><ref refid="d0/d75/namespacetesting_1ae8b6df347210c0ebfe5ec995d03c7aed" kindref="member">operator &lt;&lt;</ref>(<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>&amp;<sp/>sb)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>sb.<ref refid="d2/da9/classtesting_1_1_message_1a764f99b38cb3cd18ab87c5261321e063" kindref="member">GetString</ref>();</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>streamable<sp/>value<sp/>to<sp/>an<sp/>std::string.<sp/><sp/>A<sp/>NULL<sp/>pointer<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>converted<sp/>to<sp/>&quot;(null)&quot;.<sp/><sp/>When<sp/>the<sp/>input<sp/>value<sp/>is<sp/>a<sp/>::string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::std::string,<sp/>::wstring,<sp/>or<sp/>::std::wstring<sp/>object,<sp/>each<sp/>NUL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>character<sp/>in<sp/>it<sp/>is<sp/>replaced<sp/>with<sp/>&quot;\\0&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="243" refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" refkind="member"><highlight class="normal"><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aad4beed95d0846e6ffc5da0978ef3bb9" kindref="member">StreamableToString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>streamable)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d2/da9/classtesting_1_1_message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/>streamable).GetString();</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/googletest/include/gtest/gtest-message.h"/>
  </compounddef>
</doxygen>
