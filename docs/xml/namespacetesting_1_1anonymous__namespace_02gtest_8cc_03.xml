<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacetesting_1_1anonymous__namespace_02gtest_8cc_03" kind="namespace" language="C++">
    <compoundname>testing::anonymous_namespace{gtest.cc}</compoundname>
    <innerclass refid="classtesting_1_1anonymous__namespace_02gtest_8cc_03_1_1TestNameIs" prot="public">testing::anonymous_namespace{gtest.cc}::TestNameIs</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::anonymous_namespace{gtest.cc}::IsSubstringImpl</definition>
        <argsstring>(bool expected_to_be_substring, const char *needle_expr, const char *haystack_expr, const StringType &amp;needle, const StringType &amp;haystack)</argsstring>
        <name>IsSubstringImpl</name>
        <param>
          <type>bool</type>
          <declname>expected_to_be_substring</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const StringType &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const StringType &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1583" column="17" bodyfile="lib/googletest/src/gtest.cc" bodystart="1583" bodyend="1598"/>
        <references refid="namespacetesting_1a8d91083190a5914bfe8c5666e2dbca9b" compoundref="gtest_8cc" startline="1015" endline="1017">testing::AssertionFailure</references>
        <references refid="namespacetesting_1a74a3d26c1286bd4d7c189c5dff2483ab" compoundref="gtest_8cc" startline="1010" endline="1012">testing::AssertionSuccess</references>
        <references refid="namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a529b2b4b07a1d3085fc3ee11f65e6b0c" compoundref="gtest_8cc" startline="1573" endline="1576">IsSubstringPred</references>
        <referencedby refid="namespacetesting_1ab553b649b06ef2339cbd90f8dfa119f0" compoundref="gtest_8cc" startline="1618" endline="1622">testing::IsNotSubstring</referencedby>
        <referencedby refid="namespacetesting_1a5c90a86562b2470213c07742e0eeb0fe" compoundref="gtest_8cc" startline="1606" endline="1610">testing::IsSubstring</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1aa8f2626915e70ad4d628f8fb247e0b6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::anonymous_namespace{gtest.cc}::IsSubstringPred</definition>
        <argsstring>(const char *needle, const char *haystack)</argsstring>
        <name>IsSubstringPred</name>
        <param>
          <type>const char *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1557" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="1557" bodyend="1562"/>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a529b2b4b07a1d3085fc3ee11f65e6b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::anonymous_namespace{gtest.cc}::IsSubstringPred</definition>
        <argsstring>(const StringType &amp;needle, const StringType &amp;haystack)</argsstring>
        <name>IsSubstringPred</name>
        <param>
          <type>const StringType &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const StringType &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1573" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="1573" bodyend="1576"/>
        <referencedby refid="namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1a0e1cb1e2b03a87a9c893322e4caab670" compoundref="gtest_8cc" startline="1583" endline="1598">IsSubstringImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacetesting_1_1anonymous__namespace_02gtest_8cc_03_1ab0b38787cae43f83ad170e8d3260f425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::anonymous_namespace{gtest.cc}::IsSubstringPred</definition>
        <argsstring>(const wchar_t *needle, const wchar_t *haystack)</argsstring>
        <name>IsSubstringPred</name>
        <param>
          <type>const wchar_t *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest.cc" line="1564" column="6" bodyfile="lib/googletest/src/gtest.cc" bodystart="1564" bodyend="1569"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="lib/googletest/src/gtest.cc" line="1549" column="1"/>
  </compounddef>
</doxygen>
