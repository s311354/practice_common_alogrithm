<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="db/d74/gtest-printers_8cc" kind="file" language="C++">
    <compoundname>gtest-printers.cc</compoundname>
    <includes refid="d0/d6d/gtest-printers_8h" local="yes">gtest/gtest-printers.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">cwchar</includes>
    <includes local="no">ostream</includes>
    <includes local="no">string</includes>
    <includes refid="d3/dc9/gtest-port_8h" local="yes">gtest/internal/gtest-port.h</includes>
    <includedby refid="d1/d8c/gtest-all_8cc" local="yes">lib/googletest/src/gtest-all.cc</includedby>
    <incdepgraph>
      <node id="15">
        <label>sys/stat.h</label>
      </node>
      <node id="23">
        <label>typeinfo</label>
        <link refid="cpp/header/typeinfo" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="26">
        <label>float.h</label>
      </node>
      <node id="18">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="d6/d76/gtest-port-arch_8h"/>
      </node>
      <node id="3">
        <label>ostream</label>
        <link refid="cpp/header/ostream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="33">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="dc/d79/gtest-filepath_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>stdlib.h</label>
      </node>
      <node id="27">
        <label>iomanip</label>
        <link refid="cpp/header/iomanip" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="36">
        <label>cwchar</label>
        <link refid="cpp/header/cwchar" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="30">
        <label>set</label>
        <link refid="cpp/header/set" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="32">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="d0/d45/gtest-string_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="d5/da1/gtest-internal_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>algorithm</label>
        <link refid="cpp/header/algorithm" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="24">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="d1/d63/gtest-tuple_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>stddef.h</label>
      </node>
      <node id="1">
        <label>lib/googletest/src/gtest-printers.cc</label>
        <link refid="db/d74/gtest-printers_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="d9/d97/gtest-type-util_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>vector</label>
        <link refid="cpp/header/vector" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="14">
        <label>sys/types.h</label>
      </node>
      <node id="13">
        <label>string.h</label>
      </node>
      <node id="8">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="d3/dc9/gtest-port_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="da/db0/internal_2custom_2gtest-printers_8h"/>
      </node>
      <node id="20">
        <label>unistd.h</label>
      </node>
      <node id="28">
        <label>limits</label>
        <link refid="cpp/header/limits" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="6">
        <label>utility</label>
        <link refid="cpp/header/utility" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="5">
        <label>string</label>
        <link refid="cpp/header/string" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="31">
        <label>gtest/gtest-message.h</label>
        <link refid="d6/da4/gtest-message_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>strings.h</label>
      </node>
      <node id="9">
        <label>ctype.h</label>
      </node>
      <node id="17">
        <label>iostream</label>
        <link refid="cpp/header/iostream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="4">
        <label>sstream</label>
        <link refid="cpp/header/sstream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="22">
        <label>regex.h</label>
      </node>
      <node id="19">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="d5/d66/custom_2gtest-port_8h"/>
      </node>
      <node id="12">
        <label>stdio.h</label>
      </node>
      <node id="2">
        <label>gtest/gtest-printers.h</label>
        <link refid="d0/d6d/gtest-printers_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>map</label>
        <link refid="cpp/header/map" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>lib/googletest/src/gtest-all.cc</label>
        <link refid="d1/d8c/gtest-all_8cc"/>
      </node>
      <node id="1">
        <label>lib/googletest/src/gtest-printers.cc</label>
        <link refid="db/d74/gtest-printers_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="d0/d75/namespacetesting">testing</innernamespace>
    <innernamespace refid="d2/d38/namespacetesting_1_1anonymous__namespace_02gtest-printers_8cc_03">testing::anonymous_namespace{gtest-printers.cc}</innernamespace>
    <innernamespace refid="d0/da7/namespacetesting_1_1internal">testing::internal</innernamespace>
    <innernamespace refid="da/df7/namespacetesting_1_1internal2">testing::internal2</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793" prot="public" static="no" strong="no">
        <type></type>
        <name>CharFormat</name>
        <enumvalue id="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793af7038866be92e9978360b831e376ffaa" prot="public">
          <name>kAsIs</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793aebfa5293302338a8e8678744c103f113" prot="public">
          <name>kHexEscape</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793ae1211108e9f35f891d9951da64794d03" prot="public">
          <name>kSpecialEscape</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="128" column="1" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="128" bodyend="132"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a744a6dd74c12d1e2c16b3c03e14ed4d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsPrintableAscii</definition>
        <argsstring>(wchar_t c)</argsstring>
        <name>IsPrintableAscii</name>
        <param>
          <type>wchar_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="137" column="13" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="137" bodyend="139"/>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ab73d250fde6dfbf16111afb7a071dc3f" compoundref="db/d74/gtest-printers_8cc" startline="146" endline="188">testing::internal::PrintAsCharLiteralTo</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ab73d250fde6dfbf16111afb7a071dc3f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename UnsignedChar</type>
          </param>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>CharFormat</type>
        <definition>static CharFormat testing::internal::PrintAsCharLiteralTo</definition>
        <argsstring>(Char c, ostream *os)</argsstring>
        <name>PrintAsCharLiteralTo</name>
        <param>
          <type>Char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="146" column="19" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="146" bodyend="188"/>
        <references refid="d2/df8/classtesting_1_1internal_1_1String_1affe59102e49092fc0684388e9b0c5c1e" compoundref="df/d5b/gtest_8cc" startline="1966" endline="1970">testing::internal::String::FormatHexInt</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a744a6dd74c12d1e2c16b3c03e14ed4d4" compoundref="db/d74/gtest-printers_8cc" startline="137" endline="139">testing::internal::IsPrintableAscii</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793af7038866be92e9978360b831e376ffaa" compoundref="db/d74/gtest-printers_8cc" startline="129">testing::internal::kAsIs</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793aebfa5293302338a8e8678744c103f113" compoundref="db/d74/gtest-printers_8cc" startline="130">testing::internal::kHexEscape</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793ae1211108e9f35f891d9951da64794d03" compoundref="db/d74/gtest-printers_8cc" startline="131">testing::internal::kSpecialEscape</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a82e5b3cf45fd9c4603dbe14bc4cb38c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CharFormat</type>
        <definition>static CharFormat testing::internal::PrintAsStringLiteralTo</definition>
        <argsstring>(char c, ostream *os)</argsstring>
        <name>PrintAsStringLiteralTo</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="207" column="19" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="207" bodyend="210"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a8c5838995d7bb9e4232b69e6bcdb9ab8" compoundref="db/d74/gtest-printers_8cc" startline="192" endline="203">testing::internal::PrintAsStringLiteralTo</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a8c5838995d7bb9e4232b69e6bcdb9ab8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CharFormat</type>
        <definition>static CharFormat testing::internal::PrintAsStringLiteralTo</definition>
        <argsstring>(wchar_t c, ostream *os)</argsstring>
        <name>PrintAsStringLiteralTo</name>
        <param>
          <type>wchar_t</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="192" column="19" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="192" bodyend="203"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793af7038866be92e9978360b831e376ffaa" compoundref="db/d74/gtest-printers_8cc" startline="129">testing::internal::kAsIs</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793ae1211108e9f35f891d9951da64794d03" compoundref="db/d74/gtest-printers_8cc" startline="131">testing::internal::kSpecialEscape</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a82e5b3cf45fd9c4603dbe14bc4cb38c2" compoundref="db/d74/gtest-printers_8cc" startline="207" endline="210">testing::internal::PrintAsStringLiteralTo</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a0be71e6d7cb274131c559193f81c83e2" compoundref="db/d74/gtest-printers_8cc" startline="262" endline="278">testing::internal::PrintCharsAsStringTo</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d38/namespacetesting_1_1anonymous__namespace_02gtest-printers_8cc_03_1ad297ce40861f170a8269e26a7df2b826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dc9/gtest-port_8h_1a2a83dd79037e53814a509cc3f5702650" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_</ref> <ref refid="d3/dc9/gtest-port_8h_1af18b465f4ba6e36eea7a8d2d79521873" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_</ref> <ref refid="d3/dc9/gtest-port_8h_1abf30a6b1b3a12ecb2cc1bc1a6f5f9646" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_</ref> void</type>
        <definition>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ void testing::anonymous_namespace{gtest-printers.cc}::PrintByteSegmentInObjectTo</definition>
        <argsstring>(const unsigned char *obj_bytes, size_t start, size_t count, ostream *os)</argsstring>
        <name>PrintByteSegmentInObjectTo</name>
        <param>
          <type>const unsigned char *</type>
          <declname>obj_bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="63" column="6" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="63" bodyend="79"/>
        <references refid="d3/dc9/gtest-port_8h_1aed1cc8143222d7a845a1269448ec203e" compoundref="d3/dc9/gtest-port_8h" startline="2429">GTEST_SNPRINTF_</references>
        <referencedby refid="d2/d38/namespacetesting_1_1anonymous__namespace_02gtest-printers_8cc_03_1a7c3551691f3b4ab868eb5b8ceba41bde" compoundref="db/d74/gtest-printers_8cc" startline="82" endline="103">testing::anonymous_namespace{gtest-printers.cc}::PrintBytesInObjectToImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/df7/namespacetesting_1_1internal2_1abfb9aa80365f93b952e9a4bea09947a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal2::PrintBytesInObjectTo</definition>
        <argsstring>(const unsigned char *obj_bytes, size_t count, ostream *os)</argsstring>
        <name>PrintBytesInObjectTo</name>
        <param>
          <type>const unsigned char *</type>
          <declname>obj_bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="114" column="6" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="114" bodyend="117"/>
        <references refid="d2/d38/namespacetesting_1_1anonymous__namespace_02gtest-printers_8cc_03_1a7c3551691f3b4ab868eb5b8ceba41bde" compoundref="db/d74/gtest-printers_8cc" startline="82" endline="103">testing::anonymous_namespace{gtest-printers.cc}::PrintBytesInObjectToImpl</references>
        <referencedby refid="d7/de8/classtesting_1_1internal2_1_1TypeWithoutFormatter_1a6651f6f7be2c0f899729eeb6038f76d3" compoundref="d0/d6d/gtest-printers_8h" startline="139" endline="142">testing::internal2::TypeWithoutFormatter&lt; T, kTypeKind &gt;::PrintValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d38/namespacetesting_1_1anonymous__namespace_02gtest-printers_8cc_03_1a7c3551691f3b4ab868eb5b8ceba41bde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::anonymous_namespace{gtest-printers.cc}::PrintBytesInObjectToImpl</definition>
        <argsstring>(const unsigned char *obj_bytes, size_t count, ostream *os)</argsstring>
        <name>PrintBytesInObjectToImpl</name>
        <param>
          <type>const unsigned char *</type>
          <declname>obj_bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="82" column="6" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="82" bodyend="103"/>
        <references refid="d2/d38/namespacetesting_1_1anonymous__namespace_02gtest-printers_8cc_03_1ad297ce40861f170a8269e26a7df2b826" compoundref="db/d74/gtest-printers_8cc" startline="63" endline="79">testing::anonymous_namespace{gtest-printers.cc}::PrintByteSegmentInObjectTo</references>
        <referencedby refid="da/df7/namespacetesting_1_1internal2_1abfb9aa80365f93b952e9a4bea09947a8" compoundref="db/d74/gtest-printers_8cc" startline="114" endline="117">testing::internal2::PrintBytesInObjectTo</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a0c577e598e61d339ba45dd6643fb1969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename UnsignedChar</type>
          </param>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintCharAndCodeTo</definition>
        <argsstring>(Char c, ostream *os)</argsstring>
        <name>PrintCharAndCodeTo</name>
        <param>
          <type>Char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="217" column="6" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="217" bodyend="239"/>
        <references refid="d2/df8/classtesting_1_1internal_1_1String_1affe59102e49092fc0684388e9b0c5c1e" compoundref="df/d5b/gtest_8cc" startline="1966" endline="1970">testing::internal::String::FormatHexInt</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793aebfa5293302338a8e8678744c103f113" compoundref="db/d74/gtest-printers_8cc" startline="130">testing::internal::kHexEscape</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a0be71e6d7cb274131c559193f81c83e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d3/dc9/gtest-port_8h_1a2a83dd79037e53814a509cc3f5702650" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_</ref> <ref refid="d3/dc9/gtest-port_8h_1af18b465f4ba6e36eea7a8d2d79521873" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_</ref> static <ref refid="d3/dc9/gtest-port_8h_1abf30a6b1b3a12ecb2cc1bc1a6f5f9646" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_</ref> void</type>
        <definition>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ static GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ void testing::internal::PrintCharsAsStringTo</definition>
        <argsstring>(const CharType *begin, size_t len, ostream *os)</argsstring>
        <name>PrintCharsAsStringTo</name>
        <param>
          <type>const CharType *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="262" column="13" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="262" bodyend="278"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1aa234ef141278263fb143b616c74c86e7" compoundref="d3/dc9/gtest-port_8h" startline="2269" endline="2271">testing::internal::IsXDigit</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793aebfa5293302338a8e8678744c103f113" compoundref="db/d74/gtest-printers_8cc" startline="130">testing::internal::kHexEscape</references>
        <references refid="d0/da7/namespacetesting_1_1internal_1a8c5838995d7bb9e4232b69e6bcdb9ab8" compoundref="db/d74/gtest-printers_8cc" startline="192" endline="203">testing::internal::PrintAsStringLiteralTo</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ad609167d8d6792b0fb186539e0e159bd" compoundref="db/d74/gtest-printers_8cc" startline="354" endline="356">testing::internal::PrintStringTo</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1adc6c98306d40b53fd07be4e295102a0a" compoundref="db/d74/gtest-printers_8cc" startline="320" endline="327">testing::internal::PrintTo</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1ad896a4e4d9133ce43dc18b6038d95dc3" compoundref="db/d74/gtest-printers_8cc" startline="286" endline="306">testing::internal::UniversalPrintCharArray</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ad609167d8d6792b0fb186539e0e159bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintStringTo</definition>
        <argsstring>(const ::std::string &amp;s, ostream *os)</argsstring>
        <name>PrintStringTo</name>
        <param>
          <type>const ::<ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="354" column="6" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="354" bodyend="356"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a0be71e6d7cb274131c559193f81c83e2" compoundref="db/d74/gtest-printers_8cc" startline="262" endline="278">testing::internal::PrintCharsAsStringTo</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1af59b4f5d83276cd807c45063b14bad44" compoundref="d0/d6d/gtest-printers_8h" startline="565" endline="567">testing::internal::PrintTo</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1adc6c98306d40b53fd07be4e295102a0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const char *s, ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="320" column="6" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="320" bodyend="327"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a0be71e6d7cb274131c559193f81c83e2" compoundref="db/d74/gtest-printers_8cc" startline="262" endline="278">testing::internal::PrintCharsAsStringTo</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1afc20fb56b2547a8f91f9ff99650f2024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const wchar_t *s, ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>const wchar_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="337" column="6" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="337" bodyend="344"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a0be71e6d7cb274131c559193f81c83e2" compoundref="db/d74/gtest-printers_8cc" startline="262" endline="278">testing::internal::PrintCharsAsStringTo</references>
        <references refid="cpp/string/wide/wcslen_1">std::wcslen</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1abf6c518b437569187c1218166c702807" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>GTEST_API_ void testing::internal::PrintTo</definition>
        <argsstring>(signed char c, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>signed char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref> *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="244" column="6" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="244" bodyend="246" declfile="lib/googletest/include/gtest/gtest-printers.h" declline="486" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>GTEST_API_ void testing::internal::PrintTo</definition>
        <argsstring>(unsigned char c, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>unsigned char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref> *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="241" column="6" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="241" bodyend="243" declfile="lib/googletest/include/gtest/gtest-printers.h" declline="485" declcolumn="17"/>
        <referencedby refid="d6/d16/classtesting_1_1internal_1_1UniversalPrinter_1aecec021e1abbaa260b701e24e3fe33eb" compoundref="d0/d6d/gtest-printers_8h" startline="698" endline="708">testing::internal::UniversalPrinter&lt; T &gt;::Print</referencedby>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a476bd3d411d4f129620aaf8999c257c0" compoundref="d0/d6d/gtest-printers_8h" startline="487" endline="492">testing::internal::PrintTo</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1aa74ea9d64f76ce69eceb225ca5ebef58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(wchar_t wc, ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>wchar_t</type>
          <declname>wc</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="250" column="6" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a070107e7a8205ad6ec4d538d52b15b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::UniversalPrintArray</definition>
        <argsstring>(const char *begin, size_t len, ostream *os)</argsstring>
        <name>UniversalPrintArray</name>
        <param>
          <type>const char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="309" column="6" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="309" bodyend="311"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1ad896a4e4d9133ce43dc18b6038d95dc3" compoundref="db/d74/gtest-printers_8cc" startline="286" endline="306">testing::internal::UniversalPrintCharArray</references>
        <referencedby refid="d5/d48/classtesting_1_1internal_1_1UniversalPrinter_3_01T_0fN_0e_4_1a1cf0e7c8db59c090f769116c6421b212" compoundref="d0/d6d/gtest-printers_8h" startline="751" endline="753">testing::internal::UniversalPrinter&lt; T[N]&gt;::Print</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1a52394019018eb5079f9f1bcca23dcd60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::UniversalPrintArray</definition>
        <argsstring>(const wchar_t *begin, size_t len, ostream *os)</argsstring>
        <name>UniversalPrintArray</name>
        <param>
          <type>const wchar_t *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="315" column="6" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="315" bodyend="317"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1ad896a4e4d9133ce43dc18b6038d95dc3" compoundref="db/d74/gtest-printers_8cc" startline="286" endline="306">testing::internal::UniversalPrintCharArray</references>
      </memberdef>
      <memberdef kind="function" id="d0/da7/namespacetesting_1_1internal_1ad896a4e4d9133ce43dc18b6038d95dc3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d3/dc9/gtest-port_8h_1a2a83dd79037e53814a509cc3f5702650" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_</ref> <ref refid="d3/dc9/gtest-port_8h_1af18b465f4ba6e36eea7a8d2d79521873" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_</ref> static <ref refid="d3/dc9/gtest-port_8h_1abf30a6b1b3a12ecb2cc1bc1a6f5f9646" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_</ref> void</type>
        <definition>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ static GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ void testing::internal::UniversalPrintCharArray</definition>
        <argsstring>(const CharType *begin, size_t len, ostream *os)</argsstring>
        <name>UniversalPrintCharArray</name>
        <param>
          <type>const CharType *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/googletest/src/gtest-printers.cc" line="286" column="13" bodyfile="lib/googletest/src/gtest-printers.cc" bodystart="286" bodyend="306"/>
        <references refid="d0/da7/namespacetesting_1_1internal_1a0be71e6d7cb274131c559193f81c83e2" compoundref="db/d74/gtest-printers_8cc" startline="262" endline="278">testing::internal::PrintCharsAsStringTo</references>
        <referencedby refid="d0/da7/namespacetesting_1_1internal_1a070107e7a8205ad6ec4d538d52b15b38" compoundref="db/d74/gtest-printers_8cc" startline="309" endline="311">testing::internal::UniversalPrintArray</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>-<sp/>The<sp/>Google<sp/>C++<sp/>Testing<sp/>Framework</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>implements<sp/>a<sp/>universal<sp/>value<sp/>printer<sp/>that<sp/>can<sp/>print<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>of<sp/>any<sp/>type<sp/>T:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>::testing::internal::UniversalPrinter&lt;T&gt;::Print(value,<sp/>ostream_ptr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>uses<sp/>the<sp/>&lt;&lt;<sp/>operator<sp/>when<sp/>possible,<sp/>and<sp/>prints<sp/>the<sp/>bytes<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>object<sp/>otherwise.<sp/><sp/>A<sp/>user<sp/>can<sp/>override<sp/>its<sp/>behavior<sp/>for<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>Foo<sp/>by<sp/>defining<sp/>either<sp/>operator&lt;&lt;(::std::ostream&amp;,<sp/>const<sp/>Foo&amp;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>void<sp/>PrintTo(const<sp/>Foo&amp;,<sp/>::std::ostream*)<sp/>in<sp/>the<sp/>namespace<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defines<sp/>Foo.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d0/d6d/gtest-printers_8h" kindref="compound">gtest/gtest-printers.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/cwchar" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">cwchar</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">ostream</ref>&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">string</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/dc9/gtest-port_8h" kindref="compound">gtest/internal/gtest-port.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d0/d75/namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="d2/d38/namespacetesting_1_1anonymous__namespace_02gtest-printers_8cc_03" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">using<sp/>::std::ostream;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>segment<sp/>of<sp/>bytes<sp/>in<sp/>the<sp/>given<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1a2a83dd79037e53814a509cc3f5702650" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_</ref></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1af18b465f4ba6e36eea7a8d2d79521873" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_</ref></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1abf30a6b1b3a12ecb2cc1bc1a6f5f9646" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_</ref></highlight></codeline>
<codeline lineno="63" refid="d2/d38/namespacetesting_1_1anonymous__namespace_02gtest-printers_8cc_03_1ad297ce40861f170a8269e26a7df2b826" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d38/namespacetesting_1_1anonymous__namespace_02gtest-printers_8cc_03_1ad297ce40861f170a8269e26a7df2b826" kindref="member">PrintByteSegmentInObjectTo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>obj_bytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>text[5]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>start<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Organizes<sp/>the<sp/>bytes<sp/>into<sp/>groups<sp/>of<sp/>2<sp/>for<sp/>easy<sp/>parsing<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>human.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((j<sp/>%<sp/>2)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc9/gtest-port_8h_1aed1cc8143222d7a845a1269448ec203e" kindref="member">GTEST_SNPRINTF_</ref>(text,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(text),<sp/></highlight><highlight class="stringliteral">&quot;%02X&quot;</highlight><highlight class="normal">,<sp/>obj_bytes[j]);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>text;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>bytes<sp/>in<sp/>the<sp/>given<sp/>value<sp/>to<sp/>the<sp/>given<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="d2/d38/namespacetesting_1_1anonymous__namespace_02gtest-printers_8cc_03_1a7c3551691f3b4ab868eb5b8ceba41bde" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d38/namespacetesting_1_1anonymous__namespace_02gtest-printers_8cc_03_1a7c3551691f3b4ab868eb5b8ceba41bde" kindref="member">PrintBytesInObjectToImpl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>obj_bytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>the<sp/>user<sp/>how<sp/>big<sp/>the<sp/>object<sp/>is.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/>count<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-byte<sp/>object<sp/>&lt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kThreshold<sp/>=<sp/>132;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kChunkSize<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>object<sp/>size<sp/>is<sp/>bigger<sp/>than<sp/>kThreshold,<sp/>we&apos;ll<sp/>have<sp/>to<sp/>omit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>details<sp/>by<sp/>printing<sp/>only<sp/>the<sp/>first<sp/>and<sp/>the<sp/>last<sp/>kChunkSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(wan):<sp/>let<sp/>the<sp/>user<sp/>control<sp/>the<sp/>threshold<sp/>using<sp/>a<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&lt;<sp/>kThreshold)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d38/namespacetesting_1_1anonymous__namespace_02gtest-printers_8cc_03_1ad297ce40861f170a8269e26a7df2b826" kindref="member">PrintByteSegmentInObjectTo</ref>(obj_bytes,<sp/>0,<sp/>count,<sp/>os);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d38/namespacetesting_1_1anonymous__namespace_02gtest-printers_8cc_03_1ad297ce40861f170a8269e26a7df2b826" kindref="member">PrintByteSegmentInObjectTo</ref>(obj_bytes,<sp/>0,<sp/>kChunkSize,<sp/>os);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>...<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rounds<sp/>up<sp/>to<sp/>2-byte<sp/>boundary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>resume_pos<sp/>=<sp/>(count<sp/>-<sp/>kChunkSize<sp/>+<sp/>1)/2*2;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d38/namespacetesting_1_1anonymous__namespace_02gtest-printers_8cc_03_1ad297ce40861f170a8269e26a7df2b826" kindref="member">PrintByteSegmentInObjectTo</ref>(obj_bytes,<sp/>resume_pos,<sp/>count<sp/>-<sp/>resume_pos,<sp/>os);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="da/df7/namespacetesting_1_1internal2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal2<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Delegates<sp/>to<sp/>PrintBytesInObjectToImpl()<sp/>to<sp/>print<sp/>the<sp/>bytes<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>given<sp/>object.<sp/><sp/>The<sp/>delegation<sp/>simplifies<sp/>the<sp/>implementation,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uses<sp/>the<sp/>&lt;&lt;<sp/>operator<sp/>and<sp/>thus<sp/>is<sp/>easier<sp/>done<sp/>outside<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::testing::internal<sp/>namespace,<sp/>which<sp/>contains<sp/>a<sp/>&lt;&lt;<sp/>operator<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sometimes<sp/>conflicts<sp/>with<sp/>the<sp/>one<sp/>in<sp/>STL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="da/df7/namespacetesting_1_1internal2_1abfb9aa80365f93b952e9a4bea09947a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/df7/namespacetesting_1_1internal2_1abfb9aa80365f93b952e9a4bea09947a8" kindref="member">PrintBytesInObjectTo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>obj_bytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><ref refid="d2/d38/namespacetesting_1_1anonymous__namespace_02gtest-printers_8cc_03_1a7c3551691f3b4ab868eb5b8ceba41bde" kindref="member">PrintBytesInObjectToImpl</ref>(obj_bytes,<sp/>count,<sp/>os);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Depending<sp/>on<sp/>the<sp/>value<sp/>of<sp/>a<sp/>char<sp/>(or<sp/>wchar_t),<sp/>we<sp/>print<sp/>it<sp/>in<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>three<sp/>formats:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>as<sp/>is<sp/>if<sp/>it&apos;s<sp/>a<sp/>printable<sp/>ASCII<sp/>(e.g.<sp/>&apos;a&apos;,<sp/>&apos;2&apos;,<sp/>&apos;<sp/>&apos;),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>as<sp/>a<sp/>hexidecimal<sp/>escape<sp/>sequence<sp/>(e.g.<sp/>&apos;\x7F&apos;),<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>as<sp/>a<sp/>special<sp/>escape<sp/>sequence<sp/>(e.g.<sp/>&apos;\r&apos;,<sp/>&apos;\n&apos;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793" kindref="member">CharFormat</ref><sp/>{</highlight></codeline>
<codeline lineno="129" refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793af7038866be92e9978360b831e376ffaa" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793af7038866be92e9978360b831e376ffaa" kindref="member">kAsIs</ref>,</highlight></codeline>
<codeline lineno="130" refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793aebfa5293302338a8e8678744c103f113" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793aebfa5293302338a8e8678744c103f113" kindref="member">kHexEscape</ref>,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793ae1211108e9f35f891d9951da64794d03" kindref="member">kSpecialEscape</ref></highlight></codeline>
<codeline lineno="132" refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793ae1211108e9f35f891d9951da64794d03" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>c<sp/>is<sp/>a<sp/>printable<sp/>ASCII<sp/>character.<sp/><sp/>We<sp/>test<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>of<sp/>c<sp/>directly<sp/>instead<sp/>of<sp/>calling<sp/>isprint(),<sp/>which<sp/>is<sp/>buggy<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Windows<sp/>Mobile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="d0/da7/namespacetesting_1_1internal_1a744a6dd74c12d1e2c16b3c03e14ed4d4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a744a6dd74c12d1e2c16b3c03e14ed4d4" kindref="member">IsPrintableAscii</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0x20<sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/>0x7E;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>wide<sp/>or<sp/>narrow<sp/>char<sp/>c<sp/>as<sp/>a<sp/>character<sp/>literal<sp/>without<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>quotes,<sp/>escaping<sp/>it<sp/>when<sp/>necessary;<sp/>returns<sp/>how<sp/>c<sp/>was<sp/>formatted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>template<sp/>argument<sp/>UnsignedChar<sp/>is<sp/>the<sp/>unsigned<sp/>version<sp/>of<sp/>Char,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>the<sp/>type<sp/>of<sp/>c.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Un</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal">Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="146" refid="d0/da7/namespacetesting_1_1internal_1ab73d250fde6dfbf16111afb7a071dc3f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793" kindref="member">CharFormat</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ab73d250fde6dfbf16111afb7a071dc3f" kindref="member">PrintAsCharLiteralTo</ref>(Char<sp/>c,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c))<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\a&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\a&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\b&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\f&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\r&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\v&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\v&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/da7/namespacetesting_1_1internal_1a744a6dd74c12d1e2c16b3c03e14ed4d4" kindref="member">IsPrintableAscii</ref>(c))<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>static_cast&lt;char&gt;(c);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793af7038866be92e9978360b831e376ffaa" kindref="member">kAsIs</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\x&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="d2/df8/classtesting_1_1internal_1_1String_1affe59102e49092fc0684388e9b0c5c1e" kindref="member">String::FormatHexInt</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UnsignedChar</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793aebfa5293302338a8e8678744c103f113" kindref="member">kHexEscape</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793ae1211108e9f35f891d9951da64794d03" kindref="member">kSpecialEscape</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>wchar_t<sp/>c<sp/>as<sp/>if<sp/>it&apos;s<sp/>part<sp/>of<sp/>a<sp/>string<sp/>literal,<sp/>escaping<sp/>it<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>necessary;<sp/>returns<sp/>how<sp/>c<sp/>was<sp/>formatted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="d0/da7/namespacetesting_1_1internal_1a8c5838995d7bb9e4232b69e6bcdb9ab8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793" kindref="member">CharFormat</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8c5838995d7bb9e4232b69e6bcdb9ab8" kindref="member">PrintAsStringLiteralTo</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>c,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793af7038866be92e9978360b831e376ffaa" kindref="member">kAsIs</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>L</highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793ae1211108e9f35f891d9951da64794d03" kindref="member">kSpecialEscape</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PrintAsCharLiteralTo&lt;wchar_t&gt;(c,<sp/>os);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>char<sp/>c<sp/>as<sp/>if<sp/>it&apos;s<sp/>part<sp/>of<sp/>a<sp/>string<sp/>literal,<sp/>escaping<sp/>it<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>necessary;<sp/>returns<sp/>how<sp/>c<sp/>was<sp/>formatted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="d0/da7/namespacetesting_1_1internal_1a82e5b3cf45fd9c4603dbe14bc4cb38c2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793" kindref="member">CharFormat</ref><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8c5838995d7bb9e4232b69e6bcdb9ab8" kindref="member">PrintAsStringLiteralTo</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8c5838995d7bb9e4232b69e6bcdb9ab8" kindref="member">PrintAsStringLiteralTo</ref>(</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c)),<sp/>os);</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>wide<sp/>or<sp/>narrow<sp/>character<sp/>c<sp/>and<sp/>its<sp/>code.<sp/><sp/>&apos;\0&apos;<sp/>is<sp/>printed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>&quot;&apos;\\0&apos;&quot;,<sp/>other<sp/>unprintable<sp/>characters<sp/>are<sp/>also<sp/>properly<sp/>escaped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>the<sp/>standard<sp/>C++<sp/>escape<sp/>sequence.<sp/><sp/>The<sp/>template<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnsignedChar<sp/>is<sp/>the<sp/>unsigned<sp/>version<sp/>of<sp/>Char,<sp/>which<sp/>is<sp/>the<sp/>type<sp/>of<sp/>c.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Un</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal">Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="217" refid="d0/da7/namespacetesting_1_1internal_1a0c577e598e61d339ba45dd6643fb1969" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0c577e598e61d339ba45dd6643fb1969" kindref="member">PrintCharAndCodeTo</ref>(Char<sp/>c,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>print<sp/>c<sp/>as<sp/>a<sp/>literal<sp/>in<sp/>the<sp/>most<sp/>readable<sp/>form<sp/>we<sp/>can<sp/>find.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/>((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(c)<sp/>&gt;<sp/>1)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;L&apos;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793" kindref="member">CharFormat</ref><sp/>format<sp/>=<sp/>PrintAsCharLiteralTo&lt;UnsignedChar&gt;(c,<sp/>os);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>aid<sp/>user<sp/>debugging,<sp/>we<sp/>also<sp/>print<sp/>c&apos;s<sp/>code<sp/>in<sp/>decimal,<sp/>unless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>0<sp/>(in<sp/>which<sp/>case<sp/>c<sp/>was<sp/>printed<sp/>as<sp/>&apos;\\0&apos;,<sp/>making<sp/>the<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>obvious).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>more<sp/>convenience,<sp/>we<sp/>print<sp/>c&apos;s<sp/>code<sp/>again<sp/>in<sp/>hexidecimal,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unless<sp/>c<sp/>was<sp/>already<sp/>printed<sp/>in<sp/>the<sp/>form<sp/>&apos;\x##&apos;<sp/>or<sp/>the<sp/>code<sp/>is<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[1,<sp/>9].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format<sp/>==<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793aebfa5293302338a8e8678744c103f113" kindref="member">kHexEscape</ref><sp/>||<sp/>(1<sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/>9))<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>0x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d2/df8/classtesting_1_1internal_1_1String_1affe59102e49092fc0684388e9b0c5c1e" kindref="member">String::FormatHexInt</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UnsignedChar</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="d0/da7/namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>PrintCharAndCodeTo&lt;unsigned<sp/>char&gt;(c,<sp/>os);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244" refid="d0/da7/namespacetesting_1_1internal_1abf6c518b437569187c1218166c702807" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>::<ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::ostream</ref>*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>PrintCharAndCodeTo&lt;unsigned<sp/>char&gt;(c,<sp/>os);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>wchar_t<sp/>as<sp/>a<sp/>symbol<sp/>if<sp/>it<sp/>is<sp/>printable<sp/>or<sp/>as<sp/>its<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code<sp/>otherwise<sp/>and<sp/>also<sp/>as<sp/>its<sp/>code.<sp/><sp/>L&apos;\0&apos;<sp/>is<sp/>printed<sp/>as<sp/>&quot;L&apos;\\0&apos;&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="d0/da7/namespacetesting_1_1internal_1aa74ea9d64f76ce69eceb225ca5ebef58" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>wc,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>PrintCharAndCodeTo&lt;wchar_t&gt;(wc,<sp/>os);</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>given<sp/>array<sp/>of<sp/>characters<sp/>to<sp/>the<sp/>ostream.<sp/><sp/>CharType<sp/>must<sp/>be<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char<sp/>or<sp/>wchar_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>array<sp/>starts<sp/>at<sp/>begin,<sp/>the<sp/>length<sp/>is<sp/>len,<sp/>it<sp/>may<sp/>include<sp/>&apos;\0&apos;<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>may<sp/>not<sp/>be<sp/>NUL-terminated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType&gt;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1a2a83dd79037e53814a509cc3f5702650" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_</ref></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1af18b465f4ba6e36eea7a8d2d79521873" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_</ref></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1abf30a6b1b3a12ecb2cc1bc1a6f5f9646" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_</ref></highlight></codeline>
<codeline lineno="262" refid="d0/da7/namespacetesting_1_1internal_1a0be71e6d7cb274131c559193f81c83e2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0be71e6d7cb274131c559193f81c83e2" kindref="member">PrintCharsAsStringTo</ref>(</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType*<sp/>begin,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>kQuoteBegin<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(CharType)<sp/>==<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;L\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/>kQuoteBegin;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_previous_hex<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>len;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType<sp/>cur<sp/>=<sp/>begin[index];</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_previous_hex<sp/>&amp;&amp;<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa234ef141278263fb143b616c74c86e7" kindref="member">IsXDigit</ref>(cur))<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Previous<sp/>character<sp/>is<sp/>of<sp/>&apos;\x..&apos;<sp/>form<sp/>and<sp/>this<sp/>character<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interpreted<sp/>as<sp/>another<sp/>hexadecimal<sp/>digit<sp/>in<sp/>its<sp/>number.<sp/>Break<sp/>string<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disambiguate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>kQuoteBegin;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>is_previous_hex<sp/>=<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a8c5838995d7bb9e4232b69e6bcdb9ab8" kindref="member">PrintAsStringLiteralTo</ref>(cur,<sp/>os)<sp/>==<sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ae2ef98247c76a50cdc80ceb4a6c81793aebfa5293302338a8e8678744c103f113" kindref="member">kHexEscape</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>(const)<sp/>char/wchar_t<sp/>array<sp/>of<sp/>&apos;len&apos;<sp/>elements,<sp/>starting<sp/>at<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;begin&apos;.<sp/><sp/>CharType<sp/>must<sp/>be<sp/>either<sp/>char<sp/>or<sp/>wchar_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType&gt;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1a2a83dd79037e53814a509cc3f5702650" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_</ref></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1af18b465f4ba6e36eea7a8d2d79521873" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_</ref></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><ref refid="d3/dc9/gtest-port_8h_1abf30a6b1b3a12ecb2cc1bc1a6f5f9646" kindref="member">GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_</ref></highlight></codeline>
<codeline lineno="286" refid="d0/da7/namespacetesting_1_1internal_1ad896a4e4d9133ce43dc18b6038d95dc3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad896a4e4d9133ce43dc18b6038d95dc3" kindref="member">UniversalPrintCharArray</ref>(</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType*<sp/>begin,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>char<sp/>kFoo[]<sp/>=<sp/>&quot;foo&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generates<sp/>an<sp/>array<sp/>of<sp/>4,<sp/>not<sp/>3,<sp/>elements,<sp/>with<sp/>the<sp/>last<sp/>one<sp/>being<sp/>&apos;\0&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Therefore<sp/>when<sp/>printing<sp/>a<sp/>char<sp/>array,<sp/>we<sp/>don&apos;t<sp/>print<sp/>the<sp/>last<sp/>element<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>&apos;\0&apos;,<sp/>such<sp/>that<sp/>the<sp/>output<sp/>matches<sp/>the<sp/>string<sp/>literal<sp/>as<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>written<sp/>in<sp/>the<sp/>source<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>begin[len<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0be71e6d7cb274131c559193f81c83e2" kindref="member">PrintCharsAsStringTo</ref>(begin,<sp/>len<sp/>-<sp/>1,<sp/>os);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If,<sp/>however,<sp/>the<sp/>last<sp/>element<sp/>in<sp/>the<sp/>array<sp/>is<sp/>not<sp/>&apos;\0&apos;,<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>const<sp/>char<sp/>kFoo[]<sp/>=<sp/>{<sp/>&apos;f&apos;,<sp/>&apos;o&apos;,<sp/>&apos;o&apos;<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>must<sp/>print<sp/>the<sp/>entire<sp/>array.<sp/><sp/>We<sp/>also<sp/>print<sp/>a<sp/>message<sp/>to<sp/>indicate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>array<sp/>is<sp/>not<sp/>NUL-terminated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0be71e6d7cb274131c559193f81c83e2" kindref="member">PrintCharsAsStringTo</ref>(begin,<sp/>len,<sp/>os);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(no<sp/>terminating<sp/>NUL)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>(const)<sp/>char<sp/>array<sp/>of<sp/>&apos;len&apos;<sp/>elements,<sp/>starting<sp/>at<sp/>address<sp/>&apos;begin&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="d0/da7/namespacetesting_1_1internal_1a070107e7a8205ad6ec4d538d52b15b38" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a070107e7a8205ad6ec4d538d52b15b38" kindref="member">UniversalPrintArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>begin,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad896a4e4d9133ce43dc18b6038d95dc3" kindref="member">UniversalPrintCharArray</ref>(begin,<sp/>len,<sp/>os);</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>(const)<sp/>wchar_t<sp/>array<sp/>of<sp/>&apos;len&apos;<sp/>elements,<sp/>starting<sp/>at<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;begin&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="d0/da7/namespacetesting_1_1internal_1a52394019018eb5079f9f1bcca23dcd60" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a070107e7a8205ad6ec4d538d52b15b38" kindref="member">UniversalPrintArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>begin,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad896a4e4d9133ce43dc18b6038d95dc3" kindref="member">UniversalPrintCharArray</ref>(begin,<sp/>len,<sp/>os);</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>given<sp/>C<sp/>string<sp/>to<sp/>the<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="d0/da7/namespacetesting_1_1internal_1adc6c98306d40b53fd07be4e295102a0a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>ImplicitCast_&lt;const<sp/>void*&gt;(s)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0be71e6d7cb274131c559193f81c83e2" kindref="member">PrintCharsAsStringTo</ref>(s,<sp/>strlen(s),<sp/>os);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>compiler<sp/>can<sp/>be<sp/>configured<sp/>to<sp/>define<sp/>whar_t<sp/>as<sp/>a<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>unsigned<sp/>short.<sp/>Defining<sp/>an<sp/>overload<sp/>for<sp/>const<sp/>wchar_t*<sp/>in<sp/>that<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>would<sp/>cause<sp/>pointers<sp/>to<sp/>unsigned<sp/>shorts<sp/>be<sp/>printed<sp/>as<sp/>wide<sp/>strings,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>possibly<sp/>accessing<sp/>more<sp/>memory<sp/>than<sp/>intended<sp/>and<sp/>causing<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>memory<sp/>accesses.<sp/>MSVC<sp/>defines<sp/>_NATIVE_WCHAR_T_DEFINED<sp/>symbol<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t<sp/>is<sp/>implemented<sp/>as<sp/>a<sp/>native<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_MSC_VER)<sp/>||<sp/>defined(_NATIVE_WCHAR_T_DEFINED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>given<sp/>wide<sp/>C<sp/>string<sp/>to<sp/>the<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="d0/da7/namespacetesting_1_1internal_1afc20fb56b2547a8f91f9ff99650f2024" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1aa7e70a85d66f0c109e3e69629ef577f2" kindref="member">PrintTo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>ImplicitCast_&lt;const<sp/>void*&gt;(s)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pointing<sp/>to<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0be71e6d7cb274131c559193f81c83e2" kindref="member">PrintCharsAsStringTo</ref>(s,<sp/><ref refid="cpp/string/wide/wcslen" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::wcslen</ref>(s),<sp/>os);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>wchar_t<sp/>is<sp/>native</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>::string<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad609167d8d6792b0fb186539e0e159bd" kindref="member">PrintStringTo</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">const ::string</ref>&amp;<sp/>s,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0be71e6d7cb274131c559193f81c83e2" kindref="member">PrintCharsAsStringTo</ref>(s.data(),<sp/>s.size(),<sp/>os);</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_GLOBAL_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="d0/da7/namespacetesting_1_1internal_1ad609167d8d6792b0fb186539e0e159bd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1ad609167d8d6792b0fb186539e0e159bd" kindref="member">PrintStringTo</ref>(<ref refid="d0/da7/namespacetesting_1_1internal_1a8e8ff5b11e64078831112677156cb111" kindref="member">const ::std::string</ref>&amp;<sp/>s,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0be71e6d7cb274131c559193f81c83e2" kindref="member">PrintCharsAsStringTo</ref>(s.data(),<sp/>s.size(),<sp/>os);</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>::wstring<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintWideStringTo(<ref refid="d0/da7/namespacetesting_1_1internal_1a3f543179329c353aee1d7b54a9a8e335" kindref="member">const ::wstring</ref>&amp;<sp/>s,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0be71e6d7cb274131c559193f81c83e2" kindref="member">PrintCharsAsStringTo</ref>(s.data(),<sp/>s.size(),<sp/>os);</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintWideStringTo(<ref refid="d0/da7/namespacetesting_1_1internal_1a3f543179329c353aee1d7b54a9a8e335" kindref="member">const ::std::wstring</ref>&amp;<sp/>s,<sp/>ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><ref refid="d0/da7/namespacetesting_1_1internal_1a0be71e6d7cb274131c559193f81c83e2" kindref="member">PrintCharsAsStringTo</ref>(s.data(),<sp/>s.size(),<sp/>os);</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/googletest/src/gtest-printers.cc"/>
  </compounddef>
</doxygen>
