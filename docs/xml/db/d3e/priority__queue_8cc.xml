<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="db/d3e/priority__queue_8cc" kind="file" language="C++">
    <compoundname>priority_queue.cc</compoundname>
    <includes refid="d4/da1/priority__queue_8h" local="yes">./priority_queue.h</includes>
    <incdepgraph>
      <node id="2">
        <label>./priority_queue.h</label>
        <link refid="d4/da1/priority__queue_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>priority_queue/priority_queue.cc</label>
        <link refid="db/d3e/priority__queue_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>iostream</label>
        <link refid="cpp/header/iostream" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml"/>
      </node>
    </incdepgraph>
    <innernamespace refid="d9/d0c/namespacecommon">common</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="d9/d0c/namespacecommon_1aa79baf91f02bf8cfdee41a1b3ef5d1cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void heap_sort</definition>
        <argsstring>(int *numbers, int count)</argsstring>
        <name>heap_sort</name>
        <param>
          <type>int *</type>
          <declname>numbers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Brief function description here. </para>
        </briefdescription>
        <detaileddescription>
<para>Heap sort maintains the unsorted region in a heap data structure to more quickly find the largest element in each step. It is implementated by quicksort alogrithm</para>
<para><simplesect kind="return"><para>Return parameter description </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="priority_queue/priority_queue.cc" line="219" column="6" bodyfile="priority_queue/priority_queue.cc" bodystart="219" bodyend="229" declfile="priority_queue/priority_queue.h" declline="52" declcolumn="6"/>
        <references refid="d9/d0c/namespacecommon_1a0e11a1d1ae5891eb08d6db9a0b4df126" compoundref="db/d3e/priority__queue_8cc" startline="178" endline="211">common::precolate_down</references>
      </memberdef>
      <memberdef kind="function" id="d9/d0c/namespacecommon_1a56a19f3ab94e28a975aa2a2ce38fc791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void heapify</definition>
        <argsstring>(int *numbers, int count)</argsstring>
        <name>heapify</name>
        <param>
          <type>int *</type>
          <declname>numbers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Brief function description here. </para>
        </briefdescription>
        <detaileddescription>
<para>The heapify procedure can thought of as building a heap from the bottom up by successively sifting downward to establish the heap property.</para>
<para><simplesect kind="return"><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="priority_queue/priority_queue.cc" line="165" column="6" bodyfile="priority_queue/priority_queue.cc" bodystart="165" bodyend="176" declfile="priority_queue/priority_queue.h" declline="50" declcolumn="6"/>
        <references refid="d9/d0c/namespacecommon_1a0e11a1d1ae5891eb08d6db9a0b4df126" compoundref="db/d3e/priority__queue_8cc" startline="178" endline="211">common::precolate_down</references>
        <referencedby refid="d3/dd5/priority__queue_2main_8cc_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="d3/dd5/priority__queue_2main_8cc" startline="4" endline="38">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/d0c/namespacecommon_1a0e11a1d1ae5891eb08d6db9a0b4df126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void precolate_down</definition>
        <argsstring>(int *numbers, int count, int index)</argsstring>
        <name>precolate_down</name>
        <param>
          <type>int *</type>
          <declname>numbers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="priority_queue/priority_queue.cc" line="178" column="6" bodyfile="priority_queue/priority_queue.cc" bodystart="178" bodyend="211" declfile="priority_queue/priority_queue.h" declline="51" declcolumn="6"/>
        <referencedby refid="d9/d0c/namespacecommon_1aa79baf91f02bf8cfdee41a1b3ef5d1cf" compoundref="db/d3e/priority__queue_8cc" startline="219" endline="229">common::heap_sort</referencedby>
        <referencedby refid="d9/d0c/namespacecommon_1a56a19f3ab94e28a975aa2a2ce38fc791" compoundref="db/d3e/priority__queue_8cc" startline="165" endline="176">common::heapify</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/d0c/namespacecommon_1a12066b17e67522e150a0d61a74a4cb2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_heap</definition>
        <argsstring>(int *numbers, int count)</argsstring>
        <name>print_heap</name>
        <param>
          <type>int *</type>
          <declname>numbers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="priority_queue/priority_queue.cc" line="232" column="6" bodyfile="priority_queue/priority_queue.cc" bodystart="232" bodyend="239" declfile="priority_queue/priority_queue.h" declline="53" declcolumn="6"/>
        <references refid="cpp/io/manip/endl_1">std::endl</references>
        <referencedby refid="d3/dd5/priority__queue_2main_8cc_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="d3/dd5/priority__queue_2main_8cc" startline="4" endline="38">main</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/da1/priority__queue_8h" kindref="compound">./priority_queue.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="d9/d0c/namespacecommon" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d9/d0c/namespacecommon" kindref="compound">common</ref><sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="dc/de6/classcommon_1_1_priority_queue_1a8f2e1799438cf09890aaecb203d14625" refkind="member"><highlight class="normal"><ref refid="dc/de6/classcommon_1_1_priority_queue_1a8f2e1799438cf09890aaecb203d14625" kindref="member">PriorityQueue::PriorityQueue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size):<sp/>capacity_queue(size)<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>&lt;<sp/>INT_MAX);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/d6b/structcommon_1_1_priority_queue_element" kindref="compound">PQElement</ref>[<ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>];</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="dc/de6/classcommon_1_1_priority_queue_1af97f1420d96fea6165720866508f06a3" refkind="member"><highlight class="normal"><ref refid="dc/de6/classcommon_1_1_priority_queue_1af97f1420d96fea6165720866508f06a3" kindref="member">PriorityQueue::~PriorityQueue</ref>()<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>;<sp/>};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="dc/de6/classcommon_1_1_priority_queue_1a863794a0693a29176855fbe552dbfcf6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a863794a0693a29176855fbe552dbfcf6" kindref="member">PriorityQueue::Insert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>value)</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>&lt;<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a7e1c686a96458b97fb6aa2a7a136ea71" kindref="member">capacity_queue</ref>);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[<ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>].<ref refid="d9/d6b/structcommon_1_1_priority_queue_element_1a35af0be900467fedbb610bd6ea65ed78" kindref="member">key</ref><sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[<ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>].<ref refid="d9/d6b/structcommon_1_1_priority_queue_element_1a5c33da5929c9f2f9ef8d006d2350e6ec" kindref="member">value</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a13168d072978ad86ffed1908e52812c3" kindref="member">SiftUp</ref>(<ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="dc/de6/classcommon_1_1_priority_queue_1a50af808bf213e4cb397f5f458af96cb5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a50af808bf213e4cb397f5f458af96cb5" kindref="member">PriorityQueue::Remove</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(index<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1aebbde0595dd6c927c8d032a45ddf1b49" kindref="member">Swap</ref>(index,<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>-1);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>--<ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1ae82f38bbc095631e55cc6380cd525b64" kindref="member">SiftDown</ref>(index);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="dc/de6/classcommon_1_1_priority_queue_1af20bedaf7c9a39abf3f99b1122503107" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1af20bedaf7c9a39abf3f99b1122503107" kindref="member">PriorityQueue::GetSize</ref>()</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="dc/de6/classcommon_1_1_priority_queue_1a357657ded604ecb97b76251146f7ac75" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a357657ded604ecb97b76251146f7ac75" kindref="member">PriorityQueue::IsEmpty</ref>()</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="dc/de6/classcommon_1_1_priority_queue_1a2c3609c008b736ccf98c210a730f2d5f" refkind="member"><highlight class="normal"><ref refid="d9/d6b/structcommon_1_1_priority_queue_element" kindref="compound">PQElement</ref>*<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a2c3609c008b736ccf98c210a730f2d5f" kindref="member">PriorityQueue::GetMax</ref>()</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[0];</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="dc/de6/classcommon_1_1_priority_queue_1ab082bfdb65339d64285cba5cb800ebe0" refkind="member"><highlight class="normal"><ref refid="d9/d6b/structcommon_1_1_priority_queue_element" kindref="compound">PQElement</ref>*<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1ab082bfdb65339d64285cba5cb800ebe0" kindref="member">PriorityQueue::ExtractMax</ref>()</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>&gt;0);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d6b/structcommon_1_1_priority_queue_element" kindref="compound">PQElement</ref>*<sp/>max<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/d0c/namespacecommon_1a48e1c0989caea543c0290e670c310824" kindref="member">PQElement</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>max-&gt;key<sp/>=<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[0].<ref refid="d9/d6b/structcommon_1_1_priority_queue_element_1a35af0be900467fedbb610bd6ea65ed78" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>max-&gt;value<sp/>=<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[0].<ref refid="d9/d6b/structcommon_1_1_priority_queue_element_1a5c33da5929c9f2f9ef8d006d2350e6ec" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1aebbde0595dd6c927c8d032a45ddf1b49" kindref="member">Swap</ref>(0<sp/>,<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>-1);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>--<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1ae82f38bbc095631e55cc6380cd525b64" kindref="member">SiftDown</ref>(0);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="dc/de6/classcommon_1_1_priority_queue_1a7c4557fcada1ff8b18f1d62cec1056a1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a7c4557fcada1ff8b18f1d62cec1056a1" kindref="member">PriorityQueue::PrintDebug</ref>()</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cpp/io/cout" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[i].<ref refid="d9/d6b/structcommon_1_1_priority_queue_element_1a35af0be900467fedbb610bd6ea65ed78" kindref="member">key</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[i].<ref refid="d9/d6b/structcommon_1_1_priority_queue_element_1a5c33da5929c9f2f9ef8d006d2350e6ec" kindref="member">value</ref><sp/><sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/endl" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::endl</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/io/cout" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;------------&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/endl" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::endl</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="dc/de6/classcommon_1_1_priority_queue_1a13168d072978ad86ffed1908e52812c3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a13168d072978ad86ffed1908e52812c3" kindref="member">PriorityQueue::SiftUp</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/>assert(index<sp/>&lt;<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a7e1c686a96458b97fb6aa2a7a136ea71" kindref="member">capacity_queue</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Quick<sp/>sorting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parent<sp/>=<sp/>(index<sp/>-<sp/>1)/2;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[parent].key<sp/>&lt;<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[index].key)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1aebbde0595dd6c927c8d032a45ddf1b49" kindref="member">Swap</ref>(parent,<sp/>index);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="dc/de6/classcommon_1_1_priority_queue_1aebbde0595dd6c927c8d032a45ddf1b49" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1aebbde0595dd6c927c8d032a45ddf1b49" kindref="member">PriorityQueue::Swap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index2)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp_key<sp/>=<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[index1].<ref refid="d9/d6b/structcommon_1_1_priority_queue_element_1a35af0be900467fedbb610bd6ea65ed78" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>tmp_value<sp/>=<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[index1].<ref refid="d9/d6b/structcommon_1_1_priority_queue_element_1a5c33da5929c9f2f9ef8d006d2350e6ec" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[index1].<ref refid="d9/d6b/structcommon_1_1_priority_queue_element_1a35af0be900467fedbb610bd6ea65ed78" kindref="member">key</ref><sp/>=<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[index2].<ref refid="d9/d6b/structcommon_1_1_priority_queue_element_1a35af0be900467fedbb610bd6ea65ed78" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[index1].<ref refid="d9/d6b/structcommon_1_1_priority_queue_element_1a5c33da5929c9f2f9ef8d006d2350e6ec" kindref="member">value</ref><sp/>=<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[index2].<ref refid="d9/d6b/structcommon_1_1_priority_queue_element_1a5c33da5929c9f2f9ef8d006d2350e6ec" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[index2].<ref refid="d9/d6b/structcommon_1_1_priority_queue_element_1a35af0be900467fedbb610bd6ea65ed78" kindref="member">key</ref><sp/>=<sp/>tmp_key;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[index2].<ref refid="d9/d6b/structcommon_1_1_priority_queue_element_1a5c33da5929c9f2f9ef8d006d2350e6ec" kindref="member">value</ref><sp/>=<sp/>tmp_value;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="dc/de6/classcommon_1_1_priority_queue_1ae82f38bbc095631e55cc6380cd525b64" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1ae82f38bbc095631e55cc6380cd525b64" kindref="member">PriorityQueue::SiftDown</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(index<sp/>&lt;<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a7e1c686a96458b97fb6aa2a7a136ea71" kindref="member">capacity_queue</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(index<sp/>*2<sp/>+<sp/>1<sp/>&lt;<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left_child_index<sp/>=<sp/>index*2<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>right_child_index<sp/>=<sp/>index*2<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_left_child_index<sp/>=<sp/>left_child_index<sp/>&lt;<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_right_child_index<sp/>=<sp/>right_child_index<sp/>&lt;<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>swap_index<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_right_child_index<sp/>&amp;&amp;<sp/>has_left_child_index)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[left_child_index].key<sp/>&gt;<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[right_child_index].key)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap_index<sp/>=<sp/>left_child_index;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap_index<sp/>=<sp/>right_child_index;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_left_child_index)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap_index<sp/>=<sp/>left_child_index;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_right_child_index)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap_index<sp/>=<sp/>right_child_index;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[swap_index].key<sp/>&gt;<sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1a9c10f2d9e89c80f80c04650f7e67f0c8" kindref="member">pelement</ref>[index].key)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/de6/classcommon_1_1_priority_queue_1aebbde0595dd6c927c8d032a45ddf1b49" kindref="member">Swap</ref>(swap_index,<sp/>index);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>swap_index;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="d9/d0c/namespacecommon_1a56a19f3ab94e28a975aa2a2ce38fc791" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/d0c/namespacecommon_1a56a19f3ab94e28a975aa2a2ce38fc791" kindref="member">heapify</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*numbers,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>count/2<sp/>-1<sp/>;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d0c/namespacecommon_1a0e11a1d1ae5891eb08d6db9a0b4df126" kindref="member">precolate_down</ref>(numbers,<sp/>count,<sp/>i);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>====<sp/>Interation:<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>====<sp/>&quot;&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>count;<sp/>++j)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>numbers[j]<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="d9/d0c/namespacecommon_1a0e11a1d1ae5891eb08d6db9a0b4df126" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/d0c/namespacecommon_1a0e11a1d1ae5891eb08d6db9a0b4df126" kindref="member">precolate_down</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>numbers,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(index*2<sp/>+<sp/>1<sp/>&lt;<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>swap_index<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left_child_index<sp/>=<sp/>index*2<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>right_child_index<sp/>=<sp/>index*2<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_left_child_index<sp/>=<sp/>left_child_index<sp/>&lt;<sp/>count;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_right_child_index<sp/>=<sp/>right_child_index<sp/>&lt;<sp/>count;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_left_child_index<sp/>&amp;&amp;<sp/>has_right_child_index)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numbers[left_child_index]<sp/>&gt;<sp/>numbers[right_child_index]){</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap_index<sp/>=<sp/>left_child_index;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap_index<sp/>=<sp/>right_child_index;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_left_child_index)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap_index<sp/>=<sp/>left_child_index;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_right_child_index)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap_index<sp/>=<sp/>right_child_index;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numbers[swap_index]<sp/>&gt;<sp/>numbers[index])<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>numbers[swap_index];</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numbers[swap_index]<sp/>=<sp/>numbers[index];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numbers[index]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>swap_index;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="d9/d0c/namespacecommon_1aa79baf91f02bf8cfdee41a1b3ef5d1cf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/d0c/namespacecommon_1aa79baf91f02bf8cfdee41a1b3ef5d1cf" kindref="member">heap_sort</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>numbers,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>count<sp/>-<sp/>1;<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>numbers[i];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numbers[i]<sp/>=<sp/>numbers[0];</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numbers[0]<sp/>=<sp/>numbers[i];</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d0c/namespacecommon_1a0e11a1d1ae5891eb08d6db9a0b4df126" kindref="member">precolate_down</ref>(numbers,<sp/>count,<sp/>0);</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="d9/d0c/namespacecommon_1a12066b17e67522e150a0d61a74a4cb2d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/d0c/namespacecommon_1a12066b17e67522e150a0d61a74a4cb2d" kindref="member">print_heap</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*numbers,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cpp/io/cout" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/>numbers[i]<sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/endl" kindref="compound" external="/Users/shi-rongliu/html_book_20190607/cppreference-doxygen-web.tag.xml">std::endl</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>common<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="priority_queue/priority_queue.cc"/>
  </compounddef>
</doxygen>
